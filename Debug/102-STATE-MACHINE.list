
102-STATE-MACHINE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002704  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  080028b0  080028b0  000128b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080028fc  080028fc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080028fc  080028fc  000128fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002904  08002904  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002904  08002904  00012904  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002908  08002908  00012908  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800290c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000074  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000080  20000080  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009253  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001a16  00000000  00000000  0002928f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000708  00000000  00000000  0002aca8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000670  00000000  00000000  0002b3b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002293c  00000000  00000000  0002ba20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00008f2c  00000000  00000000  0004e35c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d088c  00000000  00000000  00057288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00127b14  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001aec  00000000  00000000  00127b64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000000c 	.word	0x2000000c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08002898 	.word	0x08002898

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000010 	.word	0x20000010
 80001e8:	08002898 	.word	0x08002898

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b974 	b.w	80004ec <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	468e      	mov	lr, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	d14d      	bne.n	80002c6 <__udivmoddi4+0xaa>
 800022a:	428a      	cmp	r2, r1
 800022c:	4694      	mov	ip, r2
 800022e:	d969      	bls.n	8000304 <__udivmoddi4+0xe8>
 8000230:	fab2 f282 	clz	r2, r2
 8000234:	b152      	cbz	r2, 800024c <__udivmoddi4+0x30>
 8000236:	fa01 f302 	lsl.w	r3, r1, r2
 800023a:	f1c2 0120 	rsb	r1, r2, #32
 800023e:	fa20 f101 	lsr.w	r1, r0, r1
 8000242:	fa0c fc02 	lsl.w	ip, ip, r2
 8000246:	ea41 0e03 	orr.w	lr, r1, r3
 800024a:	4094      	lsls	r4, r2
 800024c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000250:	0c21      	lsrs	r1, r4, #16
 8000252:	fbbe f6f8 	udiv	r6, lr, r8
 8000256:	fa1f f78c 	uxth.w	r7, ip
 800025a:	fb08 e316 	mls	r3, r8, r6, lr
 800025e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000262:	fb06 f107 	mul.w	r1, r6, r7
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000272:	f080 811f 	bcs.w	80004b4 <__udivmoddi4+0x298>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 811c 	bls.w	80004b4 <__udivmoddi4+0x298>
 800027c:	3e02      	subs	r6, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a5b      	subs	r3, r3, r1
 8000282:	b2a4      	uxth	r4, r4
 8000284:	fbb3 f0f8 	udiv	r0, r3, r8
 8000288:	fb08 3310 	mls	r3, r8, r0, r3
 800028c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000290:	fb00 f707 	mul.w	r7, r0, r7
 8000294:	42a7      	cmp	r7, r4
 8000296:	d90a      	bls.n	80002ae <__udivmoddi4+0x92>
 8000298:	eb1c 0404 	adds.w	r4, ip, r4
 800029c:	f100 33ff 	add.w	r3, r0, #4294967295
 80002a0:	f080 810a 	bcs.w	80004b8 <__udivmoddi4+0x29c>
 80002a4:	42a7      	cmp	r7, r4
 80002a6:	f240 8107 	bls.w	80004b8 <__udivmoddi4+0x29c>
 80002aa:	4464      	add	r4, ip
 80002ac:	3802      	subs	r0, #2
 80002ae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002b2:	1be4      	subs	r4, r4, r7
 80002b4:	2600      	movs	r6, #0
 80002b6:	b11d      	cbz	r5, 80002c0 <__udivmoddi4+0xa4>
 80002b8:	40d4      	lsrs	r4, r2
 80002ba:	2300      	movs	r3, #0
 80002bc:	e9c5 4300 	strd	r4, r3, [r5]
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0xc2>
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	f000 80ef 	beq.w	80004ae <__udivmoddi4+0x292>
 80002d0:	2600      	movs	r6, #0
 80002d2:	e9c5 0100 	strd	r0, r1, [r5]
 80002d6:	4630      	mov	r0, r6
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	fab3 f683 	clz	r6, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d14a      	bne.n	800037c <__udivmoddi4+0x160>
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__udivmoddi4+0xd4>
 80002ea:	4282      	cmp	r2, r0
 80002ec:	f200 80f9 	bhi.w	80004e2 <__udivmoddi4+0x2c6>
 80002f0:	1a84      	subs	r4, r0, r2
 80002f2:	eb61 0303 	sbc.w	r3, r1, r3
 80002f6:	2001      	movs	r0, #1
 80002f8:	469e      	mov	lr, r3
 80002fa:	2d00      	cmp	r5, #0
 80002fc:	d0e0      	beq.n	80002c0 <__udivmoddi4+0xa4>
 80002fe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000302:	e7dd      	b.n	80002c0 <__udivmoddi4+0xa4>
 8000304:	b902      	cbnz	r2, 8000308 <__udivmoddi4+0xec>
 8000306:	deff      	udf	#255	; 0xff
 8000308:	fab2 f282 	clz	r2, r2
 800030c:	2a00      	cmp	r2, #0
 800030e:	f040 8092 	bne.w	8000436 <__udivmoddi4+0x21a>
 8000312:	eba1 010c 	sub.w	r1, r1, ip
 8000316:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800031a:	fa1f fe8c 	uxth.w	lr, ip
 800031e:	2601      	movs	r6, #1
 8000320:	0c20      	lsrs	r0, r4, #16
 8000322:	fbb1 f3f7 	udiv	r3, r1, r7
 8000326:	fb07 1113 	mls	r1, r7, r3, r1
 800032a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800032e:	fb0e f003 	mul.w	r0, lr, r3
 8000332:	4288      	cmp	r0, r1
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x12c>
 8000336:	eb1c 0101 	adds.w	r1, ip, r1
 800033a:	f103 38ff 	add.w	r8, r3, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x12a>
 8000340:	4288      	cmp	r0, r1
 8000342:	f200 80cb 	bhi.w	80004dc <__udivmoddi4+0x2c0>
 8000346:	4643      	mov	r3, r8
 8000348:	1a09      	subs	r1, r1, r0
 800034a:	b2a4      	uxth	r4, r4
 800034c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000350:	fb07 1110 	mls	r1, r7, r0, r1
 8000354:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000358:	fb0e fe00 	mul.w	lr, lr, r0
 800035c:	45a6      	cmp	lr, r4
 800035e:	d908      	bls.n	8000372 <__udivmoddi4+0x156>
 8000360:	eb1c 0404 	adds.w	r4, ip, r4
 8000364:	f100 31ff 	add.w	r1, r0, #4294967295
 8000368:	d202      	bcs.n	8000370 <__udivmoddi4+0x154>
 800036a:	45a6      	cmp	lr, r4
 800036c:	f200 80bb 	bhi.w	80004e6 <__udivmoddi4+0x2ca>
 8000370:	4608      	mov	r0, r1
 8000372:	eba4 040e 	sub.w	r4, r4, lr
 8000376:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800037a:	e79c      	b.n	80002b6 <__udivmoddi4+0x9a>
 800037c:	f1c6 0720 	rsb	r7, r6, #32
 8000380:	40b3      	lsls	r3, r6
 8000382:	fa22 fc07 	lsr.w	ip, r2, r7
 8000386:	ea4c 0c03 	orr.w	ip, ip, r3
 800038a:	fa20 f407 	lsr.w	r4, r0, r7
 800038e:	fa01 f306 	lsl.w	r3, r1, r6
 8000392:	431c      	orrs	r4, r3
 8000394:	40f9      	lsrs	r1, r7
 8000396:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800039a:	fa00 f306 	lsl.w	r3, r0, r6
 800039e:	fbb1 f8f9 	udiv	r8, r1, r9
 80003a2:	0c20      	lsrs	r0, r4, #16
 80003a4:	fa1f fe8c 	uxth.w	lr, ip
 80003a8:	fb09 1118 	mls	r1, r9, r8, r1
 80003ac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b0:	fb08 f00e 	mul.w	r0, r8, lr
 80003b4:	4288      	cmp	r0, r1
 80003b6:	fa02 f206 	lsl.w	r2, r2, r6
 80003ba:	d90b      	bls.n	80003d4 <__udivmoddi4+0x1b8>
 80003bc:	eb1c 0101 	adds.w	r1, ip, r1
 80003c0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003c4:	f080 8088 	bcs.w	80004d8 <__udivmoddi4+0x2bc>
 80003c8:	4288      	cmp	r0, r1
 80003ca:	f240 8085 	bls.w	80004d8 <__udivmoddi4+0x2bc>
 80003ce:	f1a8 0802 	sub.w	r8, r8, #2
 80003d2:	4461      	add	r1, ip
 80003d4:	1a09      	subs	r1, r1, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003dc:	fb09 1110 	mls	r1, r9, r0, r1
 80003e0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003e4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003e8:	458e      	cmp	lr, r1
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x1e2>
 80003ec:	eb1c 0101 	adds.w	r1, ip, r1
 80003f0:	f100 34ff 	add.w	r4, r0, #4294967295
 80003f4:	d26c      	bcs.n	80004d0 <__udivmoddi4+0x2b4>
 80003f6:	458e      	cmp	lr, r1
 80003f8:	d96a      	bls.n	80004d0 <__udivmoddi4+0x2b4>
 80003fa:	3802      	subs	r0, #2
 80003fc:	4461      	add	r1, ip
 80003fe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000402:	fba0 9402 	umull	r9, r4, r0, r2
 8000406:	eba1 010e 	sub.w	r1, r1, lr
 800040a:	42a1      	cmp	r1, r4
 800040c:	46c8      	mov	r8, r9
 800040e:	46a6      	mov	lr, r4
 8000410:	d356      	bcc.n	80004c0 <__udivmoddi4+0x2a4>
 8000412:	d053      	beq.n	80004bc <__udivmoddi4+0x2a0>
 8000414:	b15d      	cbz	r5, 800042e <__udivmoddi4+0x212>
 8000416:	ebb3 0208 	subs.w	r2, r3, r8
 800041a:	eb61 010e 	sbc.w	r1, r1, lr
 800041e:	fa01 f707 	lsl.w	r7, r1, r7
 8000422:	fa22 f306 	lsr.w	r3, r2, r6
 8000426:	40f1      	lsrs	r1, r6
 8000428:	431f      	orrs	r7, r3
 800042a:	e9c5 7100 	strd	r7, r1, [r5]
 800042e:	2600      	movs	r6, #0
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	f1c2 0320 	rsb	r3, r2, #32
 800043a:	40d8      	lsrs	r0, r3
 800043c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000440:	fa21 f303 	lsr.w	r3, r1, r3
 8000444:	4091      	lsls	r1, r2
 8000446:	4301      	orrs	r1, r0
 8000448:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800044c:	fa1f fe8c 	uxth.w	lr, ip
 8000450:	fbb3 f0f7 	udiv	r0, r3, r7
 8000454:	fb07 3610 	mls	r6, r7, r0, r3
 8000458:	0c0b      	lsrs	r3, r1, #16
 800045a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800045e:	fb00 f60e 	mul.w	r6, r0, lr
 8000462:	429e      	cmp	r6, r3
 8000464:	fa04 f402 	lsl.w	r4, r4, r2
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x260>
 800046a:	eb1c 0303 	adds.w	r3, ip, r3
 800046e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000472:	d22f      	bcs.n	80004d4 <__udivmoddi4+0x2b8>
 8000474:	429e      	cmp	r6, r3
 8000476:	d92d      	bls.n	80004d4 <__udivmoddi4+0x2b8>
 8000478:	3802      	subs	r0, #2
 800047a:	4463      	add	r3, ip
 800047c:	1b9b      	subs	r3, r3, r6
 800047e:	b289      	uxth	r1, r1
 8000480:	fbb3 f6f7 	udiv	r6, r3, r7
 8000484:	fb07 3316 	mls	r3, r7, r6, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb06 f30e 	mul.w	r3, r6, lr
 8000490:	428b      	cmp	r3, r1
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x28a>
 8000494:	eb1c 0101 	adds.w	r1, ip, r1
 8000498:	f106 38ff 	add.w	r8, r6, #4294967295
 800049c:	d216      	bcs.n	80004cc <__udivmoddi4+0x2b0>
 800049e:	428b      	cmp	r3, r1
 80004a0:	d914      	bls.n	80004cc <__udivmoddi4+0x2b0>
 80004a2:	3e02      	subs	r6, #2
 80004a4:	4461      	add	r1, ip
 80004a6:	1ac9      	subs	r1, r1, r3
 80004a8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004ac:	e738      	b.n	8000320 <__udivmoddi4+0x104>
 80004ae:	462e      	mov	r6, r5
 80004b0:	4628      	mov	r0, r5
 80004b2:	e705      	b.n	80002c0 <__udivmoddi4+0xa4>
 80004b4:	4606      	mov	r6, r0
 80004b6:	e6e3      	b.n	8000280 <__udivmoddi4+0x64>
 80004b8:	4618      	mov	r0, r3
 80004ba:	e6f8      	b.n	80002ae <__udivmoddi4+0x92>
 80004bc:	454b      	cmp	r3, r9
 80004be:	d2a9      	bcs.n	8000414 <__udivmoddi4+0x1f8>
 80004c0:	ebb9 0802 	subs.w	r8, r9, r2
 80004c4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004c8:	3801      	subs	r0, #1
 80004ca:	e7a3      	b.n	8000414 <__udivmoddi4+0x1f8>
 80004cc:	4646      	mov	r6, r8
 80004ce:	e7ea      	b.n	80004a6 <__udivmoddi4+0x28a>
 80004d0:	4620      	mov	r0, r4
 80004d2:	e794      	b.n	80003fe <__udivmoddi4+0x1e2>
 80004d4:	4640      	mov	r0, r8
 80004d6:	e7d1      	b.n	800047c <__udivmoddi4+0x260>
 80004d8:	46d0      	mov	r8, sl
 80004da:	e77b      	b.n	80003d4 <__udivmoddi4+0x1b8>
 80004dc:	3b02      	subs	r3, #2
 80004de:	4461      	add	r1, ip
 80004e0:	e732      	b.n	8000348 <__udivmoddi4+0x12c>
 80004e2:	4630      	mov	r0, r6
 80004e4:	e709      	b.n	80002fa <__udivmoddi4+0xde>
 80004e6:	4464      	add	r4, ip
 80004e8:	3802      	subs	r0, #2
 80004ea:	e742      	b.n	8000372 <__udivmoddi4+0x156>

080004ec <__aeabi_idiv0>:
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <APP_GREEN_LED_ON>:
 */
#include "app.h"

extern UART_HandleTypeDef huart1;

void APP_GREEN_LED_ON(){
 80004f0:	b580      	push	{r7, lr}
 80004f2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, SET);
 80004f4:	2201      	movs	r2, #1
 80004f6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004fa:	4802      	ldr	r0, [pc, #8]	; (8000504 <APP_GREEN_LED_ON+0x14>)
 80004fc:	f000 ff4a 	bl	8001394 <HAL_GPIO_WritePin>
}
 8000500:	bf00      	nop
 8000502:	bd80      	pop	{r7, pc}
 8000504:	40021800 	.word	0x40021800

08000508 <APP_GREEN_LED_OFF>:

void APP_GREEN_LED_OFF(){
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, RESET);
 800050c:	2200      	movs	r2, #0
 800050e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000512:	4802      	ldr	r0, [pc, #8]	; (800051c <APP_GREEN_LED_OFF+0x14>)
 8000514:	f000 ff3e 	bl	8001394 <HAL_GPIO_WritePin>
}
 8000518:	bf00      	nop
 800051a:	bd80      	pop	{r7, pc}
 800051c:	40021800 	.word	0x40021800

08000520 <APP_RED_LED_ON>:

void APP_GREEN_LED_BLINK(){

}

void APP_RED_LED_ON(){
 8000520:	b580      	push	{r7, lr}
 8000522:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, SET);
 8000524:	2201      	movs	r2, #1
 8000526:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800052a:	4802      	ldr	r0, [pc, #8]	; (8000534 <APP_RED_LED_ON+0x14>)
 800052c:	f000 ff32 	bl	8001394 <HAL_GPIO_WritePin>
}
 8000530:	bf00      	nop
 8000532:	bd80      	pop	{r7, pc}
 8000534:	40021800 	.word	0x40021800

08000538 <APP_RED_LED_OFF>:

void APP_RED_LED_OFF(){
 8000538:	b580      	push	{r7, lr}
 800053a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD4_Pin, RESET);
 800053c:	2200      	movs	r2, #0
 800053e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000542:	4802      	ldr	r0, [pc, #8]	; (800054c <APP_RED_LED_OFF+0x14>)
 8000544:	f000 ff26 	bl	8001394 <HAL_GPIO_WritePin>
}
 8000548:	bf00      	nop
 800054a:	bd80      	pop	{r7, pc}
 800054c:	40021800 	.word	0x40021800

08000550 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000554:	f000 fbf6 	bl	8000d44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000558:	f000 f822 	bl	80005a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800055c:	f000 f8b6 	bl	80006cc <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000560:	f000 f88a 	bl	8000678 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  Lamp_ctor(&lamp);
 8000564:	480c      	ldr	r0, [pc, #48]	; (8000598 <main+0x48>)
 8000566:	f001 fe9b 	bl	80022a0 <Lamp_ctor>
  QHSM_INIT( &lamp.super, (QEvt *)0, 0 );
 800056a:	4b0b      	ldr	r3, [pc, #44]	; (8000598 <main+0x48>)
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	2b00      	cmp	r3, #0
 8000570:	d103      	bne.n	800057a <main+0x2a>
 8000572:	215e      	movs	r1, #94	; 0x5e
 8000574:	4809      	ldr	r0, [pc, #36]	; (800059c <main+0x4c>)
 8000576:	f000 fb03 	bl	8000b80 <Q_onAssert>
 800057a:	4b07      	ldr	r3, [pc, #28]	; (8000598 <main+0x48>)
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	2200      	movs	r2, #0
 8000582:	2100      	movs	r1, #0
 8000584:	4804      	ldr	r0, [pc, #16]	; (8000598 <main+0x48>)
 8000586:	4798      	blx	r3
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  HAL_Delay(500);
 8000588:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800058c:	f000 fc4c 	bl	8000e28 <HAL_Delay>
	  Lamp_pushSwitch(&lamp);
 8000590:	4801      	ldr	r0, [pc, #4]	; (8000598 <main+0x48>)
 8000592:	f001 fe73 	bl	800227c <Lamp_pushSwitch>
	  HAL_Delay(500);
 8000596:	e7f7      	b.n	8000588 <main+0x38>
 8000598:	2000006c 	.word	0x2000006c
 800059c:	080028b0 	.word	0x080028b0

080005a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b094      	sub	sp, #80	; 0x50
 80005a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005a6:	f107 0320 	add.w	r3, r7, #32
 80005aa:	2230      	movs	r2, #48	; 0x30
 80005ac:	2100      	movs	r1, #0
 80005ae:	4618      	mov	r0, r3
 80005b0:	f002 f96a 	bl	8002888 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005b4:	f107 030c 	add.w	r3, r7, #12
 80005b8:	2200      	movs	r2, #0
 80005ba:	601a      	str	r2, [r3, #0]
 80005bc:	605a      	str	r2, [r3, #4]
 80005be:	609a      	str	r2, [r3, #8]
 80005c0:	60da      	str	r2, [r3, #12]
 80005c2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005c4:	2300      	movs	r3, #0
 80005c6:	60bb      	str	r3, [r7, #8]
 80005c8:	4b29      	ldr	r3, [pc, #164]	; (8000670 <SystemClock_Config+0xd0>)
 80005ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005cc:	4a28      	ldr	r2, [pc, #160]	; (8000670 <SystemClock_Config+0xd0>)
 80005ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005d2:	6413      	str	r3, [r2, #64]	; 0x40
 80005d4:	4b26      	ldr	r3, [pc, #152]	; (8000670 <SystemClock_Config+0xd0>)
 80005d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005dc:	60bb      	str	r3, [r7, #8]
 80005de:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005e0:	2300      	movs	r3, #0
 80005e2:	607b      	str	r3, [r7, #4]
 80005e4:	4b23      	ldr	r3, [pc, #140]	; (8000674 <SystemClock_Config+0xd4>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005ec:	4a21      	ldr	r2, [pc, #132]	; (8000674 <SystemClock_Config+0xd4>)
 80005ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005f2:	6013      	str	r3, [r2, #0]
 80005f4:	4b1f      	ldr	r3, [pc, #124]	; (8000674 <SystemClock_Config+0xd4>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005fc:	607b      	str	r3, [r7, #4]
 80005fe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000600:	2302      	movs	r3, #2
 8000602:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000604:	2301      	movs	r3, #1
 8000606:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000608:	2310      	movs	r3, #16
 800060a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800060c:	2302      	movs	r3, #2
 800060e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000610:	2300      	movs	r3, #0
 8000612:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000614:	2308      	movs	r3, #8
 8000616:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000618:	2332      	movs	r3, #50	; 0x32
 800061a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800061c:	2304      	movs	r3, #4
 800061e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000620:	2307      	movs	r3, #7
 8000622:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000624:	f107 0320 	add.w	r3, r7, #32
 8000628:	4618      	mov	r0, r3
 800062a:	f000 fecd 	bl	80013c8 <HAL_RCC_OscConfig>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d001      	beq.n	8000638 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000634:	f000 faaa 	bl	8000b8c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000638:	230f      	movs	r3, #15
 800063a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800063c:	2302      	movs	r3, #2
 800063e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000640:	2300      	movs	r3, #0
 8000642:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8000644:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000648:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 800064a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800064e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000650:	f107 030c 	add.w	r3, r7, #12
 8000654:	2100      	movs	r1, #0
 8000656:	4618      	mov	r0, r3
 8000658:	f001 f92e 	bl	80018b8 <HAL_RCC_ClockConfig>
 800065c:	4603      	mov	r3, r0
 800065e:	2b00      	cmp	r3, #0
 8000660:	d001      	beq.n	8000666 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000662:	f000 fa93 	bl	8000b8c <Error_Handler>
  }
}
 8000666:	bf00      	nop
 8000668:	3750      	adds	r7, #80	; 0x50
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	40023800 	.word	0x40023800
 8000674:	40007000 	.word	0x40007000

08000678 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800067c:	4b11      	ldr	r3, [pc, #68]	; (80006c4 <MX_USART1_UART_Init+0x4c>)
 800067e:	4a12      	ldr	r2, [pc, #72]	; (80006c8 <MX_USART1_UART_Init+0x50>)
 8000680:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000682:	4b10      	ldr	r3, [pc, #64]	; (80006c4 <MX_USART1_UART_Init+0x4c>)
 8000684:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000688:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800068a:	4b0e      	ldr	r3, [pc, #56]	; (80006c4 <MX_USART1_UART_Init+0x4c>)
 800068c:	2200      	movs	r2, #0
 800068e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000690:	4b0c      	ldr	r3, [pc, #48]	; (80006c4 <MX_USART1_UART_Init+0x4c>)
 8000692:	2200      	movs	r2, #0
 8000694:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000696:	4b0b      	ldr	r3, [pc, #44]	; (80006c4 <MX_USART1_UART_Init+0x4c>)
 8000698:	2200      	movs	r2, #0
 800069a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800069c:	4b09      	ldr	r3, [pc, #36]	; (80006c4 <MX_USART1_UART_Init+0x4c>)
 800069e:	220c      	movs	r2, #12
 80006a0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006a2:	4b08      	ldr	r3, [pc, #32]	; (80006c4 <MX_USART1_UART_Init+0x4c>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80006a8:	4b06      	ldr	r3, [pc, #24]	; (80006c4 <MX_USART1_UART_Init+0x4c>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80006ae:	4805      	ldr	r0, [pc, #20]	; (80006c4 <MX_USART1_UART_Init+0x4c>)
 80006b0:	f001 fb22 	bl	8001cf8 <HAL_UART_Init>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80006ba:	f000 fa67 	bl	8000b8c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80006be:	bf00      	nop
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	20000028 	.word	0x20000028
 80006c8:	40011000 	.word	0x40011000

080006cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b08e      	sub	sp, #56	; 0x38
 80006d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006d6:	2200      	movs	r2, #0
 80006d8:	601a      	str	r2, [r3, #0]
 80006da:	605a      	str	r2, [r3, #4]
 80006dc:	609a      	str	r2, [r3, #8]
 80006de:	60da      	str	r2, [r3, #12]
 80006e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006e2:	2300      	movs	r3, #0
 80006e4:	623b      	str	r3, [r7, #32]
 80006e6:	4bb2      	ldr	r3, [pc, #712]	; (80009b0 <MX_GPIO_Init+0x2e4>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ea:	4ab1      	ldr	r2, [pc, #708]	; (80009b0 <MX_GPIO_Init+0x2e4>)
 80006ec:	f043 0304 	orr.w	r3, r3, #4
 80006f0:	6313      	str	r3, [r2, #48]	; 0x30
 80006f2:	4baf      	ldr	r3, [pc, #700]	; (80009b0 <MX_GPIO_Init+0x2e4>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f6:	f003 0304 	and.w	r3, r3, #4
 80006fa:	623b      	str	r3, [r7, #32]
 80006fc:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80006fe:	2300      	movs	r3, #0
 8000700:	61fb      	str	r3, [r7, #28]
 8000702:	4bab      	ldr	r3, [pc, #684]	; (80009b0 <MX_GPIO_Init+0x2e4>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000706:	4aaa      	ldr	r2, [pc, #680]	; (80009b0 <MX_GPIO_Init+0x2e4>)
 8000708:	f043 0320 	orr.w	r3, r3, #32
 800070c:	6313      	str	r3, [r2, #48]	; 0x30
 800070e:	4ba8      	ldr	r3, [pc, #672]	; (80009b0 <MX_GPIO_Init+0x2e4>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000712:	f003 0320 	and.w	r3, r3, #32
 8000716:	61fb      	str	r3, [r7, #28]
 8000718:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800071a:	2300      	movs	r3, #0
 800071c:	61bb      	str	r3, [r7, #24]
 800071e:	4ba4      	ldr	r3, [pc, #656]	; (80009b0 <MX_GPIO_Init+0x2e4>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000722:	4aa3      	ldr	r2, [pc, #652]	; (80009b0 <MX_GPIO_Init+0x2e4>)
 8000724:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000728:	6313      	str	r3, [r2, #48]	; 0x30
 800072a:	4ba1      	ldr	r3, [pc, #644]	; (80009b0 <MX_GPIO_Init+0x2e4>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000732:	61bb      	str	r3, [r7, #24]
 8000734:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000736:	2300      	movs	r3, #0
 8000738:	617b      	str	r3, [r7, #20]
 800073a:	4b9d      	ldr	r3, [pc, #628]	; (80009b0 <MX_GPIO_Init+0x2e4>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073e:	4a9c      	ldr	r2, [pc, #624]	; (80009b0 <MX_GPIO_Init+0x2e4>)
 8000740:	f043 0301 	orr.w	r3, r3, #1
 8000744:	6313      	str	r3, [r2, #48]	; 0x30
 8000746:	4b9a      	ldr	r3, [pc, #616]	; (80009b0 <MX_GPIO_Init+0x2e4>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074a:	f003 0301 	and.w	r3, r3, #1
 800074e:	617b      	str	r3, [r7, #20]
 8000750:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000752:	2300      	movs	r3, #0
 8000754:	613b      	str	r3, [r7, #16]
 8000756:	4b96      	ldr	r3, [pc, #600]	; (80009b0 <MX_GPIO_Init+0x2e4>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075a:	4a95      	ldr	r2, [pc, #596]	; (80009b0 <MX_GPIO_Init+0x2e4>)
 800075c:	f043 0302 	orr.w	r3, r3, #2
 8000760:	6313      	str	r3, [r2, #48]	; 0x30
 8000762:	4b93      	ldr	r3, [pc, #588]	; (80009b0 <MX_GPIO_Init+0x2e4>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000766:	f003 0302 	and.w	r3, r3, #2
 800076a:	613b      	str	r3, [r7, #16]
 800076c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800076e:	2300      	movs	r3, #0
 8000770:	60fb      	str	r3, [r7, #12]
 8000772:	4b8f      	ldr	r3, [pc, #572]	; (80009b0 <MX_GPIO_Init+0x2e4>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000776:	4a8e      	ldr	r2, [pc, #568]	; (80009b0 <MX_GPIO_Init+0x2e4>)
 8000778:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800077c:	6313      	str	r3, [r2, #48]	; 0x30
 800077e:	4b8c      	ldr	r3, [pc, #560]	; (80009b0 <MX_GPIO_Init+0x2e4>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000782:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000786:	60fb      	str	r3, [r7, #12]
 8000788:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800078a:	2300      	movs	r3, #0
 800078c:	60bb      	str	r3, [r7, #8]
 800078e:	4b88      	ldr	r3, [pc, #544]	; (80009b0 <MX_GPIO_Init+0x2e4>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	4a87      	ldr	r2, [pc, #540]	; (80009b0 <MX_GPIO_Init+0x2e4>)
 8000794:	f043 0310 	orr.w	r3, r3, #16
 8000798:	6313      	str	r3, [r2, #48]	; 0x30
 800079a:	4b85      	ldr	r3, [pc, #532]	; (80009b0 <MX_GPIO_Init+0x2e4>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	f003 0310 	and.w	r3, r3, #16
 80007a2:	60bb      	str	r3, [r7, #8]
 80007a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007a6:	2300      	movs	r3, #0
 80007a8:	607b      	str	r3, [r7, #4]
 80007aa:	4b81      	ldr	r3, [pc, #516]	; (80009b0 <MX_GPIO_Init+0x2e4>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	4a80      	ldr	r2, [pc, #512]	; (80009b0 <MX_GPIO_Init+0x2e4>)
 80007b0:	f043 0308 	orr.w	r3, r3, #8
 80007b4:	6313      	str	r3, [r2, #48]	; 0x30
 80007b6:	4b7e      	ldr	r3, [pc, #504]	; (80009b0 <MX_GPIO_Init+0x2e4>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	f003 0308 	and.w	r3, r3, #8
 80007be:	607b      	str	r3, [r7, #4]
 80007c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 80007c2:	2200      	movs	r2, #0
 80007c4:	2116      	movs	r1, #22
 80007c6:	487b      	ldr	r0, [pc, #492]	; (80009b4 <MX_GPIO_Init+0x2e8>)
 80007c8:	f000 fde4 	bl	8001394 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 80007cc:	2200      	movs	r2, #0
 80007ce:	2180      	movs	r1, #128	; 0x80
 80007d0:	4879      	ldr	r0, [pc, #484]	; (80009b8 <MX_GPIO_Init+0x2ec>)
 80007d2:	f000 fddf 	bl	8001394 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 80007d6:	2200      	movs	r2, #0
 80007d8:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80007dc:	4877      	ldr	r0, [pc, #476]	; (80009bc <MX_GPIO_Init+0x2f0>)
 80007de:	f000 fdd9 	bl	8001394 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 80007e2:	2200      	movs	r2, #0
 80007e4:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 80007e8:	4875      	ldr	r0, [pc, #468]	; (80009c0 <MX_GPIO_Init+0x2f4>)
 80007ea:	f000 fdd3 	bl	8001394 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A0_Pin A1_Pin A2_Pin A3_Pin
                           A4_Pin A5_Pin SDNRAS_Pin A6_Pin
                           A7_Pin A8_Pin A9_Pin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 80007ee:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80007f2:	627b      	str	r3, [r7, #36]	; 0x24
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007f4:	2302      	movs	r3, #2
 80007f6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f8:	2300      	movs	r3, #0
 80007fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007fc:	2303      	movs	r3, #3
 80007fe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000800:	230c      	movs	r3, #12
 8000802:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000804:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000808:	4619      	mov	r1, r3
 800080a:	486e      	ldr	r0, [pc, #440]	; (80009c4 <MX_GPIO_Init+0x2f8>)
 800080c:	f000 fc16 	bl	800103c <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI5_SCK_Pin SPI5_MISO_Pin SPI5_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8000810:	f44f 7360 	mov.w	r3, #896	; 0x380
 8000814:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000816:	2302      	movs	r3, #2
 8000818:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081a:	2300      	movs	r3, #0
 800081c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800081e:	2300      	movs	r3, #0
 8000820:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8000822:	2305      	movs	r3, #5
 8000824:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000826:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800082a:	4619      	mov	r1, r3
 800082c:	4865      	ldr	r0, [pc, #404]	; (80009c4 <MX_GPIO_Init+0x2f8>)
 800082e:	f000 fc05 	bl	800103c <HAL_GPIO_Init>

  /*Configure GPIO pin : ENABLE_Pin */
  GPIO_InitStruct.Pin = ENABLE_Pin;
 8000832:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000836:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000838:	2302      	movs	r3, #2
 800083a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083c:	2300      	movs	r3, #0
 800083e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000840:	2300      	movs	r3, #0
 8000842:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000844:	230e      	movs	r3, #14
 8000846:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8000848:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800084c:	4619      	mov	r1, r3
 800084e:	485d      	ldr	r0, [pc, #372]	; (80009c4 <MX_GPIO_Init+0x2f8>)
 8000850:	f000 fbf4 	bl	800103c <HAL_GPIO_Init>

  /*Configure GPIO pin : SDNWE_Pin */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 8000854:	2301      	movs	r3, #1
 8000856:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000858:	2302      	movs	r3, #2
 800085a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085c:	2300      	movs	r3, #0
 800085e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000860:	2303      	movs	r3, #3
 8000862:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000864:	230c      	movs	r3, #12
 8000866:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8000868:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800086c:	4619      	mov	r1, r3
 800086e:	4851      	ldr	r0, [pc, #324]	; (80009b4 <MX_GPIO_Init+0x2e8>)
 8000870:	f000 fbe4 	bl	800103c <HAL_GPIO_Init>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8000874:	2316      	movs	r3, #22
 8000876:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000878:	2301      	movs	r3, #1
 800087a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087c:	2300      	movs	r3, #0
 800087e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000880:	2300      	movs	r3, #0
 8000882:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000884:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000888:	4619      	mov	r1, r3
 800088a:	484a      	ldr	r0, [pc, #296]	; (80009b4 <MX_GPIO_Init+0x2e8>)
 800088c:	f000 fbd6 	bl	800103c <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8000890:	f248 0307 	movw	r3, #32775	; 0x8007
 8000894:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000896:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800089a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089c:	2300      	movs	r3, #0
 800089e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008a4:	4619      	mov	r1, r3
 80008a6:	4844      	ldr	r0, [pc, #272]	; (80009b8 <MX_GPIO_Init+0x2ec>)
 80008a8:	f000 fbc8 	bl	800103c <HAL_GPIO_Init>

  /*Configure GPIO pins : B5_Pin VSYNC_Pin G2_Pin R4_Pin
                           R5_Pin */
  GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 80008ac:	f641 0358 	movw	r3, #6232	; 0x1858
 80008b0:	627b      	str	r3, [r7, #36]	; 0x24
                          |R5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008b2:	2302      	movs	r3, #2
 80008b4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b6:	2300      	movs	r3, #0
 80008b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ba:	2300      	movs	r3, #0
 80008bc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80008be:	230e      	movs	r3, #14
 80008c0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008c6:	4619      	mov	r1, r3
 80008c8:	483b      	ldr	r0, [pc, #236]	; (80009b8 <MX_GPIO_Init+0x2ec>)
 80008ca:	f000 fbb7 	bl	800103c <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 80008ce:	2380      	movs	r3, #128	; 0x80
 80008d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008d2:	2301      	movs	r3, #1
 80008d4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d6:	2300      	movs	r3, #0
 80008d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008da:	2300      	movs	r3, #0
 80008dc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 80008de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008e2:	4619      	mov	r1, r3
 80008e4:	4834      	ldr	r0, [pc, #208]	; (80009b8 <MX_GPIO_Init+0x2ec>)
 80008e6:	f000 fba9 	bl	800103c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 80008ea:	2320      	movs	r3, #32
 80008ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80008ee:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80008f2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f4:	2300      	movs	r3, #0
 80008f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 80008f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008fc:	4619      	mov	r1, r3
 80008fe:	482d      	ldr	r0, [pc, #180]	; (80009b4 <MX_GPIO_Init+0x2e8>)
 8000900:	f000 fb9c 	bl	800103c <HAL_GPIO_Init>

  /*Configure GPIO pins : R3_Pin R6_Pin */
  GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8000904:	2303      	movs	r3, #3
 8000906:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000908:	2302      	movs	r3, #2
 800090a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090c:	2300      	movs	r3, #0
 800090e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000910:	2300      	movs	r3, #0
 8000912:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000914:	2309      	movs	r3, #9
 8000916:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000918:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800091c:	4619      	mov	r1, r3
 800091e:	482a      	ldr	r0, [pc, #168]	; (80009c8 <MX_GPIO_Init+0x2fc>)
 8000920:	f000 fb8c 	bl	800103c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000924:	2304      	movs	r3, #4
 8000926:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000928:	2300      	movs	r3, #0
 800092a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092c:	2300      	movs	r3, #0
 800092e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000930:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000934:	4619      	mov	r1, r3
 8000936:	4824      	ldr	r0, [pc, #144]	; (80009c8 <MX_GPIO_Init+0x2fc>)
 8000938:	f000 fb80 	bl	800103c <HAL_GPIO_Init>

  /*Configure GPIO pins : A10_Pin A11_Pin BA0_Pin BA1_Pin
                           SDCLK_Pin SDNCAS_Pin */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 800093c:	f248 1333 	movw	r3, #33075	; 0x8133
 8000940:	627b      	str	r3, [r7, #36]	; 0x24
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000942:	2302      	movs	r3, #2
 8000944:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000946:	2300      	movs	r3, #0
 8000948:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800094a:	2303      	movs	r3, #3
 800094c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800094e:	230c      	movs	r3, #12
 8000950:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000952:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000956:	4619      	mov	r1, r3
 8000958:	4819      	ldr	r0, [pc, #100]	; (80009c0 <MX_GPIO_Init+0x2f4>)
 800095a:	f000 fb6f 	bl	800103c <HAL_GPIO_Init>

  /*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D7_Pin
                           D8_Pin D9_Pin D10_Pin D11_Pin
                           D12_Pin NBL0_Pin NBL1_Pin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 800095e:	f64f 7383 	movw	r3, #65411	; 0xff83
 8000962:	627b      	str	r3, [r7, #36]	; 0x24
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000964:	2302      	movs	r3, #2
 8000966:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000968:	2300      	movs	r3, #0
 800096a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800096c:	2303      	movs	r3, #3
 800096e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000970:	230c      	movs	r3, #12
 8000972:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000974:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000978:	4619      	mov	r1, r3
 800097a:	4814      	ldr	r0, [pc, #80]	; (80009cc <MX_GPIO_Init+0x300>)
 800097c:	f000 fb5e 	bl	800103c <HAL_GPIO_Init>

  /*Configure GPIO pins : G4_Pin G5_Pin B6_Pin B7_Pin */
  GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8000980:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8000984:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000986:	2302      	movs	r3, #2
 8000988:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098a:	2300      	movs	r3, #0
 800098c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800098e:	2300      	movs	r3, #0
 8000990:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000992:	230e      	movs	r3, #14
 8000994:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000996:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800099a:	4619      	mov	r1, r3
 800099c:	480a      	ldr	r0, [pc, #40]	; (80009c8 <MX_GPIO_Init+0x2fc>)
 800099e:	f000 fb4d 	bl	800103c <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_HS_ID_Pin OTG_HS_DM_Pin OTG_HS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 80009a2:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 80009a6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a8:	2302      	movs	r3, #2
 80009aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80009ac:	e010      	b.n	80009d0 <MX_GPIO_Init+0x304>
 80009ae:	bf00      	nop
 80009b0:	40023800 	.word	0x40023800
 80009b4:	40020800 	.word	0x40020800
 80009b8:	40020000 	.word	0x40020000
 80009bc:	40020c00 	.word	0x40020c00
 80009c0:	40021800 	.word	0x40021800
 80009c4:	40021400 	.word	0x40021400
 80009c8:	40020400 	.word	0x40020400
 80009cc:	40021000 	.word	0x40021000
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d0:	2300      	movs	r3, #0
 80009d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d4:	2300      	movs	r3, #0
 80009d6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 80009d8:	230c      	movs	r3, #12
 80009da:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009e0:	4619      	mov	r1, r3
 80009e2:	4862      	ldr	r0, [pc, #392]	; (8000b6c <MX_GPIO_Init+0x4a0>)
 80009e4:	f000 fb2a 	bl	800103c <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_HS_Pin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 80009e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009ee:	2300      	movs	r3, #0
 80009f0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f2:	2300      	movs	r3, #0
 80009f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 80009f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009fa:	4619      	mov	r1, r3
 80009fc:	485b      	ldr	r0, [pc, #364]	; (8000b6c <MX_GPIO_Init+0x4a0>)
 80009fe:	f000 fb1d 	bl	800103c <HAL_GPIO_Init>

  /*Configure GPIO pins : D13_Pin D14_Pin D15_Pin D0_Pin
                           D1_Pin D2_Pin D3_Pin */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8000a02:	f24c 7303 	movw	r3, #50947	; 0xc703
 8000a06:	627b      	str	r3, [r7, #36]	; 0x24
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a08:	2302      	movs	r3, #2
 8000a0a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a10:	2303      	movs	r3, #3
 8000a12:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000a14:	230c      	movs	r3, #12
 8000a16:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	4854      	ldr	r0, [pc, #336]	; (8000b70 <MX_GPIO_Init+0x4a4>)
 8000a20:	f000 fb0c 	bl	800103c <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8000a24:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000a28:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8000a32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a36:	4619      	mov	r1, r3
 8000a38:	484d      	ldr	r0, [pc, #308]	; (8000b70 <MX_GPIO_Init+0x4a4>)
 8000a3a:	f000 faff 	bl	800103c <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8000a3e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000a42:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a44:	2301      	movs	r3, #1
 8000a46:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a54:	4619      	mov	r1, r3
 8000a56:	4846      	ldr	r0, [pc, #280]	; (8000b70 <MX_GPIO_Init+0x4a4>)
 8000a58:	f000 faf0 	bl	800103c <HAL_GPIO_Init>

  /*Configure GPIO pins : R7_Pin DOTCLK_Pin B3_Pin */
  GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8000a5c:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8000a60:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a62:	2302      	movs	r3, #2
 8000a64:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a66:	2300      	movs	r3, #0
 8000a68:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000a6e:	230e      	movs	r3, #14
 8000a70:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a76:	4619      	mov	r1, r3
 8000a78:	483e      	ldr	r0, [pc, #248]	; (8000b74 <MX_GPIO_Init+0x4a8>)
 8000a7a:	f000 fadf 	bl	800103c <HAL_GPIO_Init>

  /*Configure GPIO pins : HSYNC_Pin G6_Pin R2_Pin */
  GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8000a7e:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8000a82:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a84:	2302      	movs	r3, #2
 8000a86:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000a90:	230e      	movs	r3, #14
 8000a92:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a98:	4619      	mov	r1, r3
 8000a9a:	4837      	ldr	r0, [pc, #220]	; (8000b78 <MX_GPIO_Init+0x4ac>)
 8000a9c:	f000 face 	bl	800103c <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C3_SDA_Pin */
  GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8000aa0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000aa4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000aa6:	2312      	movs	r3, #18
 8000aa8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000ab2:	2304      	movs	r3, #4
 8000ab4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8000ab6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aba:	4619      	mov	r1, r3
 8000abc:	482e      	ldr	r0, [pc, #184]	; (8000b78 <MX_GPIO_Init+0x4ac>)
 8000abe:	f000 fabd 	bl	800103c <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C3_SCL_Pin */
  GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8000ac2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ac6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ac8:	2312      	movs	r3, #18
 8000aca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000acc:	2300      	movs	r3, #0
 8000ace:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000ad4:	2304      	movs	r3, #4
 8000ad6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8000ad8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000adc:	4619      	mov	r1, r3
 8000ade:	4827      	ldr	r0, [pc, #156]	; (8000b7c <MX_GPIO_Init+0x4b0>)
 8000ae0:	f000 faac 	bl	800103c <HAL_GPIO_Init>

  /*Configure GPIO pins : G7_Pin B2_Pin */
  GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8000ae4:	2348      	movs	r3, #72	; 0x48
 8000ae6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae8:	2302      	movs	r3, #2
 8000aea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aec:	2300      	movs	r3, #0
 8000aee:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af0:	2300      	movs	r3, #0
 8000af2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000af4:	230e      	movs	r3, #14
 8000af6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000af8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000afc:	4619      	mov	r1, r3
 8000afe:	481c      	ldr	r0, [pc, #112]	; (8000b70 <MX_GPIO_Init+0x4a4>)
 8000b00:	f000 fa9c 	bl	800103c <HAL_GPIO_Init>

  /*Configure GPIO pins : G3_Pin B4_Pin */
  GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8000b04:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000b08:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b0a:	2302      	movs	r3, #2
 8000b0c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b12:	2300      	movs	r3, #0
 8000b14:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000b16:	2309      	movs	r3, #9
 8000b18:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b1e:	4619      	mov	r1, r3
 8000b20:	4814      	ldr	r0, [pc, #80]	; (8000b74 <MX_GPIO_Init+0x4a8>)
 8000b22:	f000 fa8b 	bl	800103c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8000b26:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000b2a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b2c:	2301      	movs	r3, #1
 8000b2e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b30:	2300      	movs	r3, #0
 8000b32:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b34:	2300      	movs	r3, #0
 8000b36:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	480d      	ldr	r0, [pc, #52]	; (8000b74 <MX_GPIO_Init+0x4a8>)
 8000b40:	f000 fa7c 	bl	800103c <HAL_GPIO_Init>

  /*Configure GPIO pins : SDCKE1_Pin SDNE1_Pin */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8000b44:	2360      	movs	r3, #96	; 0x60
 8000b46:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b48:	2302      	movs	r3, #2
 8000b4a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b50:	2303      	movs	r3, #3
 8000b52:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000b54:	230c      	movs	r3, #12
 8000b56:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	4803      	ldr	r0, [pc, #12]	; (8000b6c <MX_GPIO_Init+0x4a0>)
 8000b60:	f000 fa6c 	bl	800103c <HAL_GPIO_Init>

}
 8000b64:	bf00      	nop
 8000b66:	3738      	adds	r7, #56	; 0x38
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	40020400 	.word	0x40020400
 8000b70:	40020c00 	.word	0x40020c00
 8000b74:	40021800 	.word	0x40021800
 8000b78:	40020800 	.word	0x40020800
 8000b7c:	40020000 	.word	0x40020000

08000b80 <Q_onAssert>:

/* USER CODE BEGIN 4 */
void Q_onAssert( char const * 	module, int_t 	location ){
 8000b80:	b480      	push	{r7}
 8000b82:	b083      	sub	sp, #12
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
 8000b88:	6039      	str	r1, [r7, #0]
	while(1);
 8000b8a:	e7fe      	b.n	8000b8a <Q_onAssert+0xa>

08000b8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b90:	b672      	cpsid	i
}
 8000b92:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b94:	e7fe      	b.n	8000b94 <Error_Handler+0x8>
	...

08000b98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b082      	sub	sp, #8
 8000b9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	607b      	str	r3, [r7, #4]
 8000ba2:	4b10      	ldr	r3, [pc, #64]	; (8000be4 <HAL_MspInit+0x4c>)
 8000ba4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ba6:	4a0f      	ldr	r2, [pc, #60]	; (8000be4 <HAL_MspInit+0x4c>)
 8000ba8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bac:	6453      	str	r3, [r2, #68]	; 0x44
 8000bae:	4b0d      	ldr	r3, [pc, #52]	; (8000be4 <HAL_MspInit+0x4c>)
 8000bb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bb6:	607b      	str	r3, [r7, #4]
 8000bb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bba:	2300      	movs	r3, #0
 8000bbc:	603b      	str	r3, [r7, #0]
 8000bbe:	4b09      	ldr	r3, [pc, #36]	; (8000be4 <HAL_MspInit+0x4c>)
 8000bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bc2:	4a08      	ldr	r2, [pc, #32]	; (8000be4 <HAL_MspInit+0x4c>)
 8000bc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bc8:	6413      	str	r3, [r2, #64]	; 0x40
 8000bca:	4b06      	ldr	r3, [pc, #24]	; (8000be4 <HAL_MspInit+0x4c>)
 8000bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bd2:	603b      	str	r3, [r7, #0]
 8000bd4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000bd6:	2007      	movs	r0, #7
 8000bd8:	f000 f9fc 	bl	8000fd4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bdc:	bf00      	nop
 8000bde:	3708      	adds	r7, #8
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	40023800 	.word	0x40023800

08000be8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b08a      	sub	sp, #40	; 0x28
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bf0:	f107 0314 	add.w	r3, r7, #20
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	601a      	str	r2, [r3, #0]
 8000bf8:	605a      	str	r2, [r3, #4]
 8000bfa:	609a      	str	r2, [r3, #8]
 8000bfc:	60da      	str	r2, [r3, #12]
 8000bfe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	4a19      	ldr	r2, [pc, #100]	; (8000c6c <HAL_UART_MspInit+0x84>)
 8000c06:	4293      	cmp	r3, r2
 8000c08:	d12c      	bne.n	8000c64 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	613b      	str	r3, [r7, #16]
 8000c0e:	4b18      	ldr	r3, [pc, #96]	; (8000c70 <HAL_UART_MspInit+0x88>)
 8000c10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c12:	4a17      	ldr	r2, [pc, #92]	; (8000c70 <HAL_UART_MspInit+0x88>)
 8000c14:	f043 0310 	orr.w	r3, r3, #16
 8000c18:	6453      	str	r3, [r2, #68]	; 0x44
 8000c1a:	4b15      	ldr	r3, [pc, #84]	; (8000c70 <HAL_UART_MspInit+0x88>)
 8000c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c1e:	f003 0310 	and.w	r3, r3, #16
 8000c22:	613b      	str	r3, [r7, #16]
 8000c24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c26:	2300      	movs	r3, #0
 8000c28:	60fb      	str	r3, [r7, #12]
 8000c2a:	4b11      	ldr	r3, [pc, #68]	; (8000c70 <HAL_UART_MspInit+0x88>)
 8000c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2e:	4a10      	ldr	r2, [pc, #64]	; (8000c70 <HAL_UART_MspInit+0x88>)
 8000c30:	f043 0301 	orr.w	r3, r3, #1
 8000c34:	6313      	str	r3, [r2, #48]	; 0x30
 8000c36:	4b0e      	ldr	r3, [pc, #56]	; (8000c70 <HAL_UART_MspInit+0x88>)
 8000c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3a:	f003 0301 	and.w	r3, r3, #1
 8000c3e:	60fb      	str	r3, [r7, #12]
 8000c40:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000c42:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000c46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c48:	2302      	movs	r3, #2
 8000c4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c50:	2303      	movs	r3, #3
 8000c52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000c54:	2307      	movs	r3, #7
 8000c56:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c58:	f107 0314 	add.w	r3, r7, #20
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	4805      	ldr	r0, [pc, #20]	; (8000c74 <HAL_UART_MspInit+0x8c>)
 8000c60:	f000 f9ec 	bl	800103c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000c64:	bf00      	nop
 8000c66:	3728      	adds	r7, #40	; 0x28
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	40011000 	.word	0x40011000
 8000c70:	40023800 	.word	0x40023800
 8000c74:	40020000 	.word	0x40020000

08000c78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c7c:	e7fe      	b.n	8000c7c <NMI_Handler+0x4>

08000c7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c7e:	b480      	push	{r7}
 8000c80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c82:	e7fe      	b.n	8000c82 <HardFault_Handler+0x4>

08000c84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c88:	e7fe      	b.n	8000c88 <MemManage_Handler+0x4>

08000c8a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c8a:	b480      	push	{r7}
 8000c8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c8e:	e7fe      	b.n	8000c8e <BusFault_Handler+0x4>

08000c90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c94:	e7fe      	b.n	8000c94 <UsageFault_Handler+0x4>

08000c96 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c96:	b480      	push	{r7}
 8000c98:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c9a:	bf00      	nop
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca2:	4770      	bx	lr

08000ca4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ca8:	bf00      	nop
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr

08000cb2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cb2:	b480      	push	{r7}
 8000cb4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cb6:	bf00      	nop
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbe:	4770      	bx	lr

08000cc0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cc4:	f000 f890 	bl	8000de8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cc8:	bf00      	nop
 8000cca:	bd80      	pop	{r7, pc}

08000ccc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cd0:	4b06      	ldr	r3, [pc, #24]	; (8000cec <SystemInit+0x20>)
 8000cd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cd6:	4a05      	ldr	r2, [pc, #20]	; (8000cec <SystemInit+0x20>)
 8000cd8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cdc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ce0:	bf00      	nop
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce8:	4770      	bx	lr
 8000cea:	bf00      	nop
 8000cec:	e000ed00 	.word	0xe000ed00

08000cf0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000cf0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d28 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000cf4:	480d      	ldr	r0, [pc, #52]	; (8000d2c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000cf6:	490e      	ldr	r1, [pc, #56]	; (8000d30 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000cf8:	4a0e      	ldr	r2, [pc, #56]	; (8000d34 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000cfa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cfc:	e002      	b.n	8000d04 <LoopCopyDataInit>

08000cfe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cfe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d02:	3304      	adds	r3, #4

08000d04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d08:	d3f9      	bcc.n	8000cfe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d0a:	4a0b      	ldr	r2, [pc, #44]	; (8000d38 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d0c:	4c0b      	ldr	r4, [pc, #44]	; (8000d3c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d10:	e001      	b.n	8000d16 <LoopFillZerobss>

08000d12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d14:	3204      	adds	r2, #4

08000d16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d18:	d3fb      	bcc.n	8000d12 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d1a:	f7ff ffd7 	bl	8000ccc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d1e:	f001 fd8f 	bl	8002840 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d22:	f7ff fc15 	bl	8000550 <main>
  bx  lr    
 8000d26:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000d28:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000d2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d30:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000d34:	0800290c 	.word	0x0800290c
  ldr r2, =_sbss
 8000d38:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000d3c:	20000080 	.word	0x20000080

08000d40 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d40:	e7fe      	b.n	8000d40 <ADC_IRQHandler>
	...

08000d44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d48:	4b0e      	ldr	r3, [pc, #56]	; (8000d84 <HAL_Init+0x40>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4a0d      	ldr	r2, [pc, #52]	; (8000d84 <HAL_Init+0x40>)
 8000d4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d52:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d54:	4b0b      	ldr	r3, [pc, #44]	; (8000d84 <HAL_Init+0x40>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4a0a      	ldr	r2, [pc, #40]	; (8000d84 <HAL_Init+0x40>)
 8000d5a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d5e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d60:	4b08      	ldr	r3, [pc, #32]	; (8000d84 <HAL_Init+0x40>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4a07      	ldr	r2, [pc, #28]	; (8000d84 <HAL_Init+0x40>)
 8000d66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d6a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d6c:	2003      	movs	r0, #3
 8000d6e:	f000 f931 	bl	8000fd4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d72:	2000      	movs	r0, #0
 8000d74:	f000 f808 	bl	8000d88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d78:	f7ff ff0e 	bl	8000b98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d7c:	2300      	movs	r3, #0
}
 8000d7e:	4618      	mov	r0, r3
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	40023c00 	.word	0x40023c00

08000d88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b082      	sub	sp, #8
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d90:	4b12      	ldr	r3, [pc, #72]	; (8000ddc <HAL_InitTick+0x54>)
 8000d92:	681a      	ldr	r2, [r3, #0]
 8000d94:	4b12      	ldr	r3, [pc, #72]	; (8000de0 <HAL_InitTick+0x58>)
 8000d96:	781b      	ldrb	r3, [r3, #0]
 8000d98:	4619      	mov	r1, r3
 8000d9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000da2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000da6:	4618      	mov	r0, r3
 8000da8:	f000 f93b 	bl	8001022 <HAL_SYSTICK_Config>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d001      	beq.n	8000db6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000db2:	2301      	movs	r3, #1
 8000db4:	e00e      	b.n	8000dd4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	2b0f      	cmp	r3, #15
 8000dba:	d80a      	bhi.n	8000dd2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	6879      	ldr	r1, [r7, #4]
 8000dc0:	f04f 30ff 	mov.w	r0, #4294967295
 8000dc4:	f000 f911 	bl	8000fea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000dc8:	4a06      	ldr	r2, [pc, #24]	; (8000de4 <HAL_InitTick+0x5c>)
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	e000      	b.n	8000dd4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000dd2:	2301      	movs	r3, #1
}
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	3708      	adds	r7, #8
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	20000000 	.word	0x20000000
 8000de0:	20000008 	.word	0x20000008
 8000de4:	20000004 	.word	0x20000004

08000de8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dec:	4b06      	ldr	r3, [pc, #24]	; (8000e08 <HAL_IncTick+0x20>)
 8000dee:	781b      	ldrb	r3, [r3, #0]
 8000df0:	461a      	mov	r2, r3
 8000df2:	4b06      	ldr	r3, [pc, #24]	; (8000e0c <HAL_IncTick+0x24>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	4413      	add	r3, r2
 8000df8:	4a04      	ldr	r2, [pc, #16]	; (8000e0c <HAL_IncTick+0x24>)
 8000dfa:	6013      	str	r3, [r2, #0]
}
 8000dfc:	bf00      	nop
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr
 8000e06:	bf00      	nop
 8000e08:	20000008 	.word	0x20000008
 8000e0c:	2000007c 	.word	0x2000007c

08000e10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  return uwTick;
 8000e14:	4b03      	ldr	r3, [pc, #12]	; (8000e24 <HAL_GetTick+0x14>)
 8000e16:	681b      	ldr	r3, [r3, #0]
}
 8000e18:	4618      	mov	r0, r3
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e20:	4770      	bx	lr
 8000e22:	bf00      	nop
 8000e24:	2000007c 	.word	0x2000007c

08000e28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b084      	sub	sp, #16
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e30:	f7ff ffee 	bl	8000e10 <HAL_GetTick>
 8000e34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e40:	d005      	beq.n	8000e4e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e42:	4b0a      	ldr	r3, [pc, #40]	; (8000e6c <HAL_Delay+0x44>)
 8000e44:	781b      	ldrb	r3, [r3, #0]
 8000e46:	461a      	mov	r2, r3
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	4413      	add	r3, r2
 8000e4c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e4e:	bf00      	nop
 8000e50:	f7ff ffde 	bl	8000e10 <HAL_GetTick>
 8000e54:	4602      	mov	r2, r0
 8000e56:	68bb      	ldr	r3, [r7, #8]
 8000e58:	1ad3      	subs	r3, r2, r3
 8000e5a:	68fa      	ldr	r2, [r7, #12]
 8000e5c:	429a      	cmp	r2, r3
 8000e5e:	d8f7      	bhi.n	8000e50 <HAL_Delay+0x28>
  {
  }
}
 8000e60:	bf00      	nop
 8000e62:	bf00      	nop
 8000e64:	3710      	adds	r7, #16
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	20000008 	.word	0x20000008

08000e70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e70:	b480      	push	{r7}
 8000e72:	b085      	sub	sp, #20
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	f003 0307 	and.w	r3, r3, #7
 8000e7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e80:	4b0c      	ldr	r3, [pc, #48]	; (8000eb4 <__NVIC_SetPriorityGrouping+0x44>)
 8000e82:	68db      	ldr	r3, [r3, #12]
 8000e84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e86:	68ba      	ldr	r2, [r7, #8]
 8000e88:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e8c:	4013      	ands	r3, r2
 8000e8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e94:	68bb      	ldr	r3, [r7, #8]
 8000e96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e98:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ea0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ea2:	4a04      	ldr	r2, [pc, #16]	; (8000eb4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ea4:	68bb      	ldr	r3, [r7, #8]
 8000ea6:	60d3      	str	r3, [r2, #12]
}
 8000ea8:	bf00      	nop
 8000eaa:	3714      	adds	r7, #20
 8000eac:	46bd      	mov	sp, r7
 8000eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb2:	4770      	bx	lr
 8000eb4:	e000ed00 	.word	0xe000ed00

08000eb8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ebc:	4b04      	ldr	r3, [pc, #16]	; (8000ed0 <__NVIC_GetPriorityGrouping+0x18>)
 8000ebe:	68db      	ldr	r3, [r3, #12]
 8000ec0:	0a1b      	lsrs	r3, r3, #8
 8000ec2:	f003 0307 	and.w	r3, r3, #7
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ece:	4770      	bx	lr
 8000ed0:	e000ed00 	.word	0xe000ed00

08000ed4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b083      	sub	sp, #12
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	4603      	mov	r3, r0
 8000edc:	6039      	str	r1, [r7, #0]
 8000ede:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ee0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	db0a      	blt.n	8000efe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	b2da      	uxtb	r2, r3
 8000eec:	490c      	ldr	r1, [pc, #48]	; (8000f20 <__NVIC_SetPriority+0x4c>)
 8000eee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef2:	0112      	lsls	r2, r2, #4
 8000ef4:	b2d2      	uxtb	r2, r2
 8000ef6:	440b      	add	r3, r1
 8000ef8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000efc:	e00a      	b.n	8000f14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	b2da      	uxtb	r2, r3
 8000f02:	4908      	ldr	r1, [pc, #32]	; (8000f24 <__NVIC_SetPriority+0x50>)
 8000f04:	79fb      	ldrb	r3, [r7, #7]
 8000f06:	f003 030f 	and.w	r3, r3, #15
 8000f0a:	3b04      	subs	r3, #4
 8000f0c:	0112      	lsls	r2, r2, #4
 8000f0e:	b2d2      	uxtb	r2, r2
 8000f10:	440b      	add	r3, r1
 8000f12:	761a      	strb	r2, [r3, #24]
}
 8000f14:	bf00      	nop
 8000f16:	370c      	adds	r7, #12
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1e:	4770      	bx	lr
 8000f20:	e000e100 	.word	0xe000e100
 8000f24:	e000ed00 	.word	0xe000ed00

08000f28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b089      	sub	sp, #36	; 0x24
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	60f8      	str	r0, [r7, #12]
 8000f30:	60b9      	str	r1, [r7, #8]
 8000f32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	f003 0307 	and.w	r3, r3, #7
 8000f3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f3c:	69fb      	ldr	r3, [r7, #28]
 8000f3e:	f1c3 0307 	rsb	r3, r3, #7
 8000f42:	2b04      	cmp	r3, #4
 8000f44:	bf28      	it	cs
 8000f46:	2304      	movcs	r3, #4
 8000f48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f4a:	69fb      	ldr	r3, [r7, #28]
 8000f4c:	3304      	adds	r3, #4
 8000f4e:	2b06      	cmp	r3, #6
 8000f50:	d902      	bls.n	8000f58 <NVIC_EncodePriority+0x30>
 8000f52:	69fb      	ldr	r3, [r7, #28]
 8000f54:	3b03      	subs	r3, #3
 8000f56:	e000      	b.n	8000f5a <NVIC_EncodePriority+0x32>
 8000f58:	2300      	movs	r3, #0
 8000f5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f5c:	f04f 32ff 	mov.w	r2, #4294967295
 8000f60:	69bb      	ldr	r3, [r7, #24]
 8000f62:	fa02 f303 	lsl.w	r3, r2, r3
 8000f66:	43da      	mvns	r2, r3
 8000f68:	68bb      	ldr	r3, [r7, #8]
 8000f6a:	401a      	ands	r2, r3
 8000f6c:	697b      	ldr	r3, [r7, #20]
 8000f6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f70:	f04f 31ff 	mov.w	r1, #4294967295
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	fa01 f303 	lsl.w	r3, r1, r3
 8000f7a:	43d9      	mvns	r1, r3
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f80:	4313      	orrs	r3, r2
         );
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	3724      	adds	r7, #36	; 0x24
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr
	...

08000f90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	3b01      	subs	r3, #1
 8000f9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fa0:	d301      	bcc.n	8000fa6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	e00f      	b.n	8000fc6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fa6:	4a0a      	ldr	r2, [pc, #40]	; (8000fd0 <SysTick_Config+0x40>)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	3b01      	subs	r3, #1
 8000fac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fae:	210f      	movs	r1, #15
 8000fb0:	f04f 30ff 	mov.w	r0, #4294967295
 8000fb4:	f7ff ff8e 	bl	8000ed4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fb8:	4b05      	ldr	r3, [pc, #20]	; (8000fd0 <SysTick_Config+0x40>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fbe:	4b04      	ldr	r3, [pc, #16]	; (8000fd0 <SysTick_Config+0x40>)
 8000fc0:	2207      	movs	r2, #7
 8000fc2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fc4:	2300      	movs	r3, #0
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	3708      	adds	r7, #8
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	e000e010 	.word	0xe000e010

08000fd4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fdc:	6878      	ldr	r0, [r7, #4]
 8000fde:	f7ff ff47 	bl	8000e70 <__NVIC_SetPriorityGrouping>
}
 8000fe2:	bf00      	nop
 8000fe4:	3708      	adds	r7, #8
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}

08000fea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fea:	b580      	push	{r7, lr}
 8000fec:	b086      	sub	sp, #24
 8000fee:	af00      	add	r7, sp, #0
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	60b9      	str	r1, [r7, #8]
 8000ff4:	607a      	str	r2, [r7, #4]
 8000ff6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ffc:	f7ff ff5c 	bl	8000eb8 <__NVIC_GetPriorityGrouping>
 8001000:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001002:	687a      	ldr	r2, [r7, #4]
 8001004:	68b9      	ldr	r1, [r7, #8]
 8001006:	6978      	ldr	r0, [r7, #20]
 8001008:	f7ff ff8e 	bl	8000f28 <NVIC_EncodePriority>
 800100c:	4602      	mov	r2, r0
 800100e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001012:	4611      	mov	r1, r2
 8001014:	4618      	mov	r0, r3
 8001016:	f7ff ff5d 	bl	8000ed4 <__NVIC_SetPriority>
}
 800101a:	bf00      	nop
 800101c:	3718      	adds	r7, #24
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}

08001022 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001022:	b580      	push	{r7, lr}
 8001024:	b082      	sub	sp, #8
 8001026:	af00      	add	r7, sp, #0
 8001028:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800102a:	6878      	ldr	r0, [r7, #4]
 800102c:	f7ff ffb0 	bl	8000f90 <SysTick_Config>
 8001030:	4603      	mov	r3, r0
}
 8001032:	4618      	mov	r0, r3
 8001034:	3708      	adds	r7, #8
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
	...

0800103c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800103c:	b480      	push	{r7}
 800103e:	b089      	sub	sp, #36	; 0x24
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
 8001044:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001046:	2300      	movs	r3, #0
 8001048:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800104a:	2300      	movs	r3, #0
 800104c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800104e:	2300      	movs	r3, #0
 8001050:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001052:	2300      	movs	r3, #0
 8001054:	61fb      	str	r3, [r7, #28]
 8001056:	e177      	b.n	8001348 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001058:	2201      	movs	r2, #1
 800105a:	69fb      	ldr	r3, [r7, #28]
 800105c:	fa02 f303 	lsl.w	r3, r2, r3
 8001060:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	697a      	ldr	r2, [r7, #20]
 8001068:	4013      	ands	r3, r2
 800106a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800106c:	693a      	ldr	r2, [r7, #16]
 800106e:	697b      	ldr	r3, [r7, #20]
 8001070:	429a      	cmp	r2, r3
 8001072:	f040 8166 	bne.w	8001342 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	685b      	ldr	r3, [r3, #4]
 800107a:	f003 0303 	and.w	r3, r3, #3
 800107e:	2b01      	cmp	r3, #1
 8001080:	d005      	beq.n	800108e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	685b      	ldr	r3, [r3, #4]
 8001086:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800108a:	2b02      	cmp	r3, #2
 800108c:	d130      	bne.n	80010f0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	689b      	ldr	r3, [r3, #8]
 8001092:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001094:	69fb      	ldr	r3, [r7, #28]
 8001096:	005b      	lsls	r3, r3, #1
 8001098:	2203      	movs	r2, #3
 800109a:	fa02 f303 	lsl.w	r3, r2, r3
 800109e:	43db      	mvns	r3, r3
 80010a0:	69ba      	ldr	r2, [r7, #24]
 80010a2:	4013      	ands	r3, r2
 80010a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	68da      	ldr	r2, [r3, #12]
 80010aa:	69fb      	ldr	r3, [r7, #28]
 80010ac:	005b      	lsls	r3, r3, #1
 80010ae:	fa02 f303 	lsl.w	r3, r2, r3
 80010b2:	69ba      	ldr	r2, [r7, #24]
 80010b4:	4313      	orrs	r3, r2
 80010b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	69ba      	ldr	r2, [r7, #24]
 80010bc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	685b      	ldr	r3, [r3, #4]
 80010c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010c4:	2201      	movs	r2, #1
 80010c6:	69fb      	ldr	r3, [r7, #28]
 80010c8:	fa02 f303 	lsl.w	r3, r2, r3
 80010cc:	43db      	mvns	r3, r3
 80010ce:	69ba      	ldr	r2, [r7, #24]
 80010d0:	4013      	ands	r3, r2
 80010d2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	091b      	lsrs	r3, r3, #4
 80010da:	f003 0201 	and.w	r2, r3, #1
 80010de:	69fb      	ldr	r3, [r7, #28]
 80010e0:	fa02 f303 	lsl.w	r3, r2, r3
 80010e4:	69ba      	ldr	r2, [r7, #24]
 80010e6:	4313      	orrs	r3, r2
 80010e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	69ba      	ldr	r2, [r7, #24]
 80010ee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	f003 0303 	and.w	r3, r3, #3
 80010f8:	2b03      	cmp	r3, #3
 80010fa:	d017      	beq.n	800112c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	68db      	ldr	r3, [r3, #12]
 8001100:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001102:	69fb      	ldr	r3, [r7, #28]
 8001104:	005b      	lsls	r3, r3, #1
 8001106:	2203      	movs	r2, #3
 8001108:	fa02 f303 	lsl.w	r3, r2, r3
 800110c:	43db      	mvns	r3, r3
 800110e:	69ba      	ldr	r2, [r7, #24]
 8001110:	4013      	ands	r3, r2
 8001112:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	689a      	ldr	r2, [r3, #8]
 8001118:	69fb      	ldr	r3, [r7, #28]
 800111a:	005b      	lsls	r3, r3, #1
 800111c:	fa02 f303 	lsl.w	r3, r2, r3
 8001120:	69ba      	ldr	r2, [r7, #24]
 8001122:	4313      	orrs	r3, r2
 8001124:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	69ba      	ldr	r2, [r7, #24]
 800112a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	f003 0303 	and.w	r3, r3, #3
 8001134:	2b02      	cmp	r3, #2
 8001136:	d123      	bne.n	8001180 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001138:	69fb      	ldr	r3, [r7, #28]
 800113a:	08da      	lsrs	r2, r3, #3
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	3208      	adds	r2, #8
 8001140:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001144:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001146:	69fb      	ldr	r3, [r7, #28]
 8001148:	f003 0307 	and.w	r3, r3, #7
 800114c:	009b      	lsls	r3, r3, #2
 800114e:	220f      	movs	r2, #15
 8001150:	fa02 f303 	lsl.w	r3, r2, r3
 8001154:	43db      	mvns	r3, r3
 8001156:	69ba      	ldr	r2, [r7, #24]
 8001158:	4013      	ands	r3, r2
 800115a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	691a      	ldr	r2, [r3, #16]
 8001160:	69fb      	ldr	r3, [r7, #28]
 8001162:	f003 0307 	and.w	r3, r3, #7
 8001166:	009b      	lsls	r3, r3, #2
 8001168:	fa02 f303 	lsl.w	r3, r2, r3
 800116c:	69ba      	ldr	r2, [r7, #24]
 800116e:	4313      	orrs	r3, r2
 8001170:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001172:	69fb      	ldr	r3, [r7, #28]
 8001174:	08da      	lsrs	r2, r3, #3
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	3208      	adds	r2, #8
 800117a:	69b9      	ldr	r1, [r7, #24]
 800117c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001186:	69fb      	ldr	r3, [r7, #28]
 8001188:	005b      	lsls	r3, r3, #1
 800118a:	2203      	movs	r2, #3
 800118c:	fa02 f303 	lsl.w	r3, r2, r3
 8001190:	43db      	mvns	r3, r3
 8001192:	69ba      	ldr	r2, [r7, #24]
 8001194:	4013      	ands	r3, r2
 8001196:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	f003 0203 	and.w	r2, r3, #3
 80011a0:	69fb      	ldr	r3, [r7, #28]
 80011a2:	005b      	lsls	r3, r3, #1
 80011a4:	fa02 f303 	lsl.w	r3, r2, r3
 80011a8:	69ba      	ldr	r2, [r7, #24]
 80011aa:	4313      	orrs	r3, r2
 80011ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	69ba      	ldr	r2, [r7, #24]
 80011b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80011bc:	2b00      	cmp	r3, #0
 80011be:	f000 80c0 	beq.w	8001342 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011c2:	2300      	movs	r3, #0
 80011c4:	60fb      	str	r3, [r7, #12]
 80011c6:	4b66      	ldr	r3, [pc, #408]	; (8001360 <HAL_GPIO_Init+0x324>)
 80011c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ca:	4a65      	ldr	r2, [pc, #404]	; (8001360 <HAL_GPIO_Init+0x324>)
 80011cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011d0:	6453      	str	r3, [r2, #68]	; 0x44
 80011d2:	4b63      	ldr	r3, [pc, #396]	; (8001360 <HAL_GPIO_Init+0x324>)
 80011d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011da:	60fb      	str	r3, [r7, #12]
 80011dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011de:	4a61      	ldr	r2, [pc, #388]	; (8001364 <HAL_GPIO_Init+0x328>)
 80011e0:	69fb      	ldr	r3, [r7, #28]
 80011e2:	089b      	lsrs	r3, r3, #2
 80011e4:	3302      	adds	r3, #2
 80011e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80011ec:	69fb      	ldr	r3, [r7, #28]
 80011ee:	f003 0303 	and.w	r3, r3, #3
 80011f2:	009b      	lsls	r3, r3, #2
 80011f4:	220f      	movs	r2, #15
 80011f6:	fa02 f303 	lsl.w	r3, r2, r3
 80011fa:	43db      	mvns	r3, r3
 80011fc:	69ba      	ldr	r2, [r7, #24]
 80011fe:	4013      	ands	r3, r2
 8001200:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	4a58      	ldr	r2, [pc, #352]	; (8001368 <HAL_GPIO_Init+0x32c>)
 8001206:	4293      	cmp	r3, r2
 8001208:	d037      	beq.n	800127a <HAL_GPIO_Init+0x23e>
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	4a57      	ldr	r2, [pc, #348]	; (800136c <HAL_GPIO_Init+0x330>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d031      	beq.n	8001276 <HAL_GPIO_Init+0x23a>
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	4a56      	ldr	r2, [pc, #344]	; (8001370 <HAL_GPIO_Init+0x334>)
 8001216:	4293      	cmp	r3, r2
 8001218:	d02b      	beq.n	8001272 <HAL_GPIO_Init+0x236>
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	4a55      	ldr	r2, [pc, #340]	; (8001374 <HAL_GPIO_Init+0x338>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d025      	beq.n	800126e <HAL_GPIO_Init+0x232>
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	4a54      	ldr	r2, [pc, #336]	; (8001378 <HAL_GPIO_Init+0x33c>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d01f      	beq.n	800126a <HAL_GPIO_Init+0x22e>
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	4a53      	ldr	r2, [pc, #332]	; (800137c <HAL_GPIO_Init+0x340>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d019      	beq.n	8001266 <HAL_GPIO_Init+0x22a>
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	4a52      	ldr	r2, [pc, #328]	; (8001380 <HAL_GPIO_Init+0x344>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d013      	beq.n	8001262 <HAL_GPIO_Init+0x226>
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	4a51      	ldr	r2, [pc, #324]	; (8001384 <HAL_GPIO_Init+0x348>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d00d      	beq.n	800125e <HAL_GPIO_Init+0x222>
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	4a50      	ldr	r2, [pc, #320]	; (8001388 <HAL_GPIO_Init+0x34c>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d007      	beq.n	800125a <HAL_GPIO_Init+0x21e>
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	4a4f      	ldr	r2, [pc, #316]	; (800138c <HAL_GPIO_Init+0x350>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d101      	bne.n	8001256 <HAL_GPIO_Init+0x21a>
 8001252:	2309      	movs	r3, #9
 8001254:	e012      	b.n	800127c <HAL_GPIO_Init+0x240>
 8001256:	230a      	movs	r3, #10
 8001258:	e010      	b.n	800127c <HAL_GPIO_Init+0x240>
 800125a:	2308      	movs	r3, #8
 800125c:	e00e      	b.n	800127c <HAL_GPIO_Init+0x240>
 800125e:	2307      	movs	r3, #7
 8001260:	e00c      	b.n	800127c <HAL_GPIO_Init+0x240>
 8001262:	2306      	movs	r3, #6
 8001264:	e00a      	b.n	800127c <HAL_GPIO_Init+0x240>
 8001266:	2305      	movs	r3, #5
 8001268:	e008      	b.n	800127c <HAL_GPIO_Init+0x240>
 800126a:	2304      	movs	r3, #4
 800126c:	e006      	b.n	800127c <HAL_GPIO_Init+0x240>
 800126e:	2303      	movs	r3, #3
 8001270:	e004      	b.n	800127c <HAL_GPIO_Init+0x240>
 8001272:	2302      	movs	r3, #2
 8001274:	e002      	b.n	800127c <HAL_GPIO_Init+0x240>
 8001276:	2301      	movs	r3, #1
 8001278:	e000      	b.n	800127c <HAL_GPIO_Init+0x240>
 800127a:	2300      	movs	r3, #0
 800127c:	69fa      	ldr	r2, [r7, #28]
 800127e:	f002 0203 	and.w	r2, r2, #3
 8001282:	0092      	lsls	r2, r2, #2
 8001284:	4093      	lsls	r3, r2
 8001286:	69ba      	ldr	r2, [r7, #24]
 8001288:	4313      	orrs	r3, r2
 800128a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800128c:	4935      	ldr	r1, [pc, #212]	; (8001364 <HAL_GPIO_Init+0x328>)
 800128e:	69fb      	ldr	r3, [r7, #28]
 8001290:	089b      	lsrs	r3, r3, #2
 8001292:	3302      	adds	r3, #2
 8001294:	69ba      	ldr	r2, [r7, #24]
 8001296:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800129a:	4b3d      	ldr	r3, [pc, #244]	; (8001390 <HAL_GPIO_Init+0x354>)
 800129c:	689b      	ldr	r3, [r3, #8]
 800129e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012a0:	693b      	ldr	r3, [r7, #16]
 80012a2:	43db      	mvns	r3, r3
 80012a4:	69ba      	ldr	r2, [r7, #24]
 80012a6:	4013      	ands	r3, r2
 80012a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d003      	beq.n	80012be <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80012b6:	69ba      	ldr	r2, [r7, #24]
 80012b8:	693b      	ldr	r3, [r7, #16]
 80012ba:	4313      	orrs	r3, r2
 80012bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012be:	4a34      	ldr	r2, [pc, #208]	; (8001390 <HAL_GPIO_Init+0x354>)
 80012c0:	69bb      	ldr	r3, [r7, #24]
 80012c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012c4:	4b32      	ldr	r3, [pc, #200]	; (8001390 <HAL_GPIO_Init+0x354>)
 80012c6:	68db      	ldr	r3, [r3, #12]
 80012c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012ca:	693b      	ldr	r3, [r7, #16]
 80012cc:	43db      	mvns	r3, r3
 80012ce:	69ba      	ldr	r2, [r7, #24]
 80012d0:	4013      	ands	r3, r2
 80012d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d003      	beq.n	80012e8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80012e0:	69ba      	ldr	r2, [r7, #24]
 80012e2:	693b      	ldr	r3, [r7, #16]
 80012e4:	4313      	orrs	r3, r2
 80012e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80012e8:	4a29      	ldr	r2, [pc, #164]	; (8001390 <HAL_GPIO_Init+0x354>)
 80012ea:	69bb      	ldr	r3, [r7, #24]
 80012ec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80012ee:	4b28      	ldr	r3, [pc, #160]	; (8001390 <HAL_GPIO_Init+0x354>)
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012f4:	693b      	ldr	r3, [r7, #16]
 80012f6:	43db      	mvns	r3, r3
 80012f8:	69ba      	ldr	r2, [r7, #24]
 80012fa:	4013      	ands	r3, r2
 80012fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001306:	2b00      	cmp	r3, #0
 8001308:	d003      	beq.n	8001312 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800130a:	69ba      	ldr	r2, [r7, #24]
 800130c:	693b      	ldr	r3, [r7, #16]
 800130e:	4313      	orrs	r3, r2
 8001310:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001312:	4a1f      	ldr	r2, [pc, #124]	; (8001390 <HAL_GPIO_Init+0x354>)
 8001314:	69bb      	ldr	r3, [r7, #24]
 8001316:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001318:	4b1d      	ldr	r3, [pc, #116]	; (8001390 <HAL_GPIO_Init+0x354>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800131e:	693b      	ldr	r3, [r7, #16]
 8001320:	43db      	mvns	r3, r3
 8001322:	69ba      	ldr	r2, [r7, #24]
 8001324:	4013      	ands	r3, r2
 8001326:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001330:	2b00      	cmp	r3, #0
 8001332:	d003      	beq.n	800133c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001334:	69ba      	ldr	r2, [r7, #24]
 8001336:	693b      	ldr	r3, [r7, #16]
 8001338:	4313      	orrs	r3, r2
 800133a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800133c:	4a14      	ldr	r2, [pc, #80]	; (8001390 <HAL_GPIO_Init+0x354>)
 800133e:	69bb      	ldr	r3, [r7, #24]
 8001340:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001342:	69fb      	ldr	r3, [r7, #28]
 8001344:	3301      	adds	r3, #1
 8001346:	61fb      	str	r3, [r7, #28]
 8001348:	69fb      	ldr	r3, [r7, #28]
 800134a:	2b0f      	cmp	r3, #15
 800134c:	f67f ae84 	bls.w	8001058 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001350:	bf00      	nop
 8001352:	bf00      	nop
 8001354:	3724      	adds	r7, #36	; 0x24
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr
 800135e:	bf00      	nop
 8001360:	40023800 	.word	0x40023800
 8001364:	40013800 	.word	0x40013800
 8001368:	40020000 	.word	0x40020000
 800136c:	40020400 	.word	0x40020400
 8001370:	40020800 	.word	0x40020800
 8001374:	40020c00 	.word	0x40020c00
 8001378:	40021000 	.word	0x40021000
 800137c:	40021400 	.word	0x40021400
 8001380:	40021800 	.word	0x40021800
 8001384:	40021c00 	.word	0x40021c00
 8001388:	40022000 	.word	0x40022000
 800138c:	40022400 	.word	0x40022400
 8001390:	40013c00 	.word	0x40013c00

08001394 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001394:	b480      	push	{r7}
 8001396:	b083      	sub	sp, #12
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
 800139c:	460b      	mov	r3, r1
 800139e:	807b      	strh	r3, [r7, #2]
 80013a0:	4613      	mov	r3, r2
 80013a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013a4:	787b      	ldrb	r3, [r7, #1]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d003      	beq.n	80013b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013aa:	887a      	ldrh	r2, [r7, #2]
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80013b0:	e003      	b.n	80013ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80013b2:	887b      	ldrh	r3, [r7, #2]
 80013b4:	041a      	lsls	r2, r3, #16
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	619a      	str	r2, [r3, #24]
}
 80013ba:	bf00      	nop
 80013bc:	370c      	adds	r7, #12
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr
	...

080013c8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b086      	sub	sp, #24
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d101      	bne.n	80013da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80013d6:	2301      	movs	r3, #1
 80013d8:	e267      	b.n	80018aa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f003 0301 	and.w	r3, r3, #1
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d075      	beq.n	80014d2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80013e6:	4b88      	ldr	r3, [pc, #544]	; (8001608 <HAL_RCC_OscConfig+0x240>)
 80013e8:	689b      	ldr	r3, [r3, #8]
 80013ea:	f003 030c 	and.w	r3, r3, #12
 80013ee:	2b04      	cmp	r3, #4
 80013f0:	d00c      	beq.n	800140c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013f2:	4b85      	ldr	r3, [pc, #532]	; (8001608 <HAL_RCC_OscConfig+0x240>)
 80013f4:	689b      	ldr	r3, [r3, #8]
 80013f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80013fa:	2b08      	cmp	r3, #8
 80013fc:	d112      	bne.n	8001424 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013fe:	4b82      	ldr	r3, [pc, #520]	; (8001608 <HAL_RCC_OscConfig+0x240>)
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001406:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800140a:	d10b      	bne.n	8001424 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800140c:	4b7e      	ldr	r3, [pc, #504]	; (8001608 <HAL_RCC_OscConfig+0x240>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001414:	2b00      	cmp	r3, #0
 8001416:	d05b      	beq.n	80014d0 <HAL_RCC_OscConfig+0x108>
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d157      	bne.n	80014d0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001420:	2301      	movs	r3, #1
 8001422:	e242      	b.n	80018aa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800142c:	d106      	bne.n	800143c <HAL_RCC_OscConfig+0x74>
 800142e:	4b76      	ldr	r3, [pc, #472]	; (8001608 <HAL_RCC_OscConfig+0x240>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	4a75      	ldr	r2, [pc, #468]	; (8001608 <HAL_RCC_OscConfig+0x240>)
 8001434:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001438:	6013      	str	r3, [r2, #0]
 800143a:	e01d      	b.n	8001478 <HAL_RCC_OscConfig+0xb0>
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001444:	d10c      	bne.n	8001460 <HAL_RCC_OscConfig+0x98>
 8001446:	4b70      	ldr	r3, [pc, #448]	; (8001608 <HAL_RCC_OscConfig+0x240>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	4a6f      	ldr	r2, [pc, #444]	; (8001608 <HAL_RCC_OscConfig+0x240>)
 800144c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001450:	6013      	str	r3, [r2, #0]
 8001452:	4b6d      	ldr	r3, [pc, #436]	; (8001608 <HAL_RCC_OscConfig+0x240>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4a6c      	ldr	r2, [pc, #432]	; (8001608 <HAL_RCC_OscConfig+0x240>)
 8001458:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800145c:	6013      	str	r3, [r2, #0]
 800145e:	e00b      	b.n	8001478 <HAL_RCC_OscConfig+0xb0>
 8001460:	4b69      	ldr	r3, [pc, #420]	; (8001608 <HAL_RCC_OscConfig+0x240>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4a68      	ldr	r2, [pc, #416]	; (8001608 <HAL_RCC_OscConfig+0x240>)
 8001466:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800146a:	6013      	str	r3, [r2, #0]
 800146c:	4b66      	ldr	r3, [pc, #408]	; (8001608 <HAL_RCC_OscConfig+0x240>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4a65      	ldr	r2, [pc, #404]	; (8001608 <HAL_RCC_OscConfig+0x240>)
 8001472:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001476:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	2b00      	cmp	r3, #0
 800147e:	d013      	beq.n	80014a8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001480:	f7ff fcc6 	bl	8000e10 <HAL_GetTick>
 8001484:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001486:	e008      	b.n	800149a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001488:	f7ff fcc2 	bl	8000e10 <HAL_GetTick>
 800148c:	4602      	mov	r2, r0
 800148e:	693b      	ldr	r3, [r7, #16]
 8001490:	1ad3      	subs	r3, r2, r3
 8001492:	2b64      	cmp	r3, #100	; 0x64
 8001494:	d901      	bls.n	800149a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001496:	2303      	movs	r3, #3
 8001498:	e207      	b.n	80018aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800149a:	4b5b      	ldr	r3, [pc, #364]	; (8001608 <HAL_RCC_OscConfig+0x240>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d0f0      	beq.n	8001488 <HAL_RCC_OscConfig+0xc0>
 80014a6:	e014      	b.n	80014d2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014a8:	f7ff fcb2 	bl	8000e10 <HAL_GetTick>
 80014ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014ae:	e008      	b.n	80014c2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014b0:	f7ff fcae 	bl	8000e10 <HAL_GetTick>
 80014b4:	4602      	mov	r2, r0
 80014b6:	693b      	ldr	r3, [r7, #16]
 80014b8:	1ad3      	subs	r3, r2, r3
 80014ba:	2b64      	cmp	r3, #100	; 0x64
 80014bc:	d901      	bls.n	80014c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80014be:	2303      	movs	r3, #3
 80014c0:	e1f3      	b.n	80018aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014c2:	4b51      	ldr	r3, [pc, #324]	; (8001608 <HAL_RCC_OscConfig+0x240>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d1f0      	bne.n	80014b0 <HAL_RCC_OscConfig+0xe8>
 80014ce:	e000      	b.n	80014d2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f003 0302 	and.w	r3, r3, #2
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d063      	beq.n	80015a6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80014de:	4b4a      	ldr	r3, [pc, #296]	; (8001608 <HAL_RCC_OscConfig+0x240>)
 80014e0:	689b      	ldr	r3, [r3, #8]
 80014e2:	f003 030c 	and.w	r3, r3, #12
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d00b      	beq.n	8001502 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014ea:	4b47      	ldr	r3, [pc, #284]	; (8001608 <HAL_RCC_OscConfig+0x240>)
 80014ec:	689b      	ldr	r3, [r3, #8]
 80014ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80014f2:	2b08      	cmp	r3, #8
 80014f4:	d11c      	bne.n	8001530 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014f6:	4b44      	ldr	r3, [pc, #272]	; (8001608 <HAL_RCC_OscConfig+0x240>)
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d116      	bne.n	8001530 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001502:	4b41      	ldr	r3, [pc, #260]	; (8001608 <HAL_RCC_OscConfig+0x240>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f003 0302 	and.w	r3, r3, #2
 800150a:	2b00      	cmp	r3, #0
 800150c:	d005      	beq.n	800151a <HAL_RCC_OscConfig+0x152>
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	68db      	ldr	r3, [r3, #12]
 8001512:	2b01      	cmp	r3, #1
 8001514:	d001      	beq.n	800151a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001516:	2301      	movs	r3, #1
 8001518:	e1c7      	b.n	80018aa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800151a:	4b3b      	ldr	r3, [pc, #236]	; (8001608 <HAL_RCC_OscConfig+0x240>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	691b      	ldr	r3, [r3, #16]
 8001526:	00db      	lsls	r3, r3, #3
 8001528:	4937      	ldr	r1, [pc, #220]	; (8001608 <HAL_RCC_OscConfig+0x240>)
 800152a:	4313      	orrs	r3, r2
 800152c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800152e:	e03a      	b.n	80015a6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	68db      	ldr	r3, [r3, #12]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d020      	beq.n	800157a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001538:	4b34      	ldr	r3, [pc, #208]	; (800160c <HAL_RCC_OscConfig+0x244>)
 800153a:	2201      	movs	r2, #1
 800153c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800153e:	f7ff fc67 	bl	8000e10 <HAL_GetTick>
 8001542:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001544:	e008      	b.n	8001558 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001546:	f7ff fc63 	bl	8000e10 <HAL_GetTick>
 800154a:	4602      	mov	r2, r0
 800154c:	693b      	ldr	r3, [r7, #16]
 800154e:	1ad3      	subs	r3, r2, r3
 8001550:	2b02      	cmp	r3, #2
 8001552:	d901      	bls.n	8001558 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001554:	2303      	movs	r3, #3
 8001556:	e1a8      	b.n	80018aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001558:	4b2b      	ldr	r3, [pc, #172]	; (8001608 <HAL_RCC_OscConfig+0x240>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f003 0302 	and.w	r3, r3, #2
 8001560:	2b00      	cmp	r3, #0
 8001562:	d0f0      	beq.n	8001546 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001564:	4b28      	ldr	r3, [pc, #160]	; (8001608 <HAL_RCC_OscConfig+0x240>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	691b      	ldr	r3, [r3, #16]
 8001570:	00db      	lsls	r3, r3, #3
 8001572:	4925      	ldr	r1, [pc, #148]	; (8001608 <HAL_RCC_OscConfig+0x240>)
 8001574:	4313      	orrs	r3, r2
 8001576:	600b      	str	r3, [r1, #0]
 8001578:	e015      	b.n	80015a6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800157a:	4b24      	ldr	r3, [pc, #144]	; (800160c <HAL_RCC_OscConfig+0x244>)
 800157c:	2200      	movs	r2, #0
 800157e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001580:	f7ff fc46 	bl	8000e10 <HAL_GetTick>
 8001584:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001586:	e008      	b.n	800159a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001588:	f7ff fc42 	bl	8000e10 <HAL_GetTick>
 800158c:	4602      	mov	r2, r0
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	1ad3      	subs	r3, r2, r3
 8001592:	2b02      	cmp	r3, #2
 8001594:	d901      	bls.n	800159a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001596:	2303      	movs	r3, #3
 8001598:	e187      	b.n	80018aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800159a:	4b1b      	ldr	r3, [pc, #108]	; (8001608 <HAL_RCC_OscConfig+0x240>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f003 0302 	and.w	r3, r3, #2
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d1f0      	bne.n	8001588 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f003 0308 	and.w	r3, r3, #8
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d036      	beq.n	8001620 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	695b      	ldr	r3, [r3, #20]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d016      	beq.n	80015e8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015ba:	4b15      	ldr	r3, [pc, #84]	; (8001610 <HAL_RCC_OscConfig+0x248>)
 80015bc:	2201      	movs	r2, #1
 80015be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015c0:	f7ff fc26 	bl	8000e10 <HAL_GetTick>
 80015c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015c6:	e008      	b.n	80015da <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015c8:	f7ff fc22 	bl	8000e10 <HAL_GetTick>
 80015cc:	4602      	mov	r2, r0
 80015ce:	693b      	ldr	r3, [r7, #16]
 80015d0:	1ad3      	subs	r3, r2, r3
 80015d2:	2b02      	cmp	r3, #2
 80015d4:	d901      	bls.n	80015da <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80015d6:	2303      	movs	r3, #3
 80015d8:	e167      	b.n	80018aa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015da:	4b0b      	ldr	r3, [pc, #44]	; (8001608 <HAL_RCC_OscConfig+0x240>)
 80015dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80015de:	f003 0302 	and.w	r3, r3, #2
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d0f0      	beq.n	80015c8 <HAL_RCC_OscConfig+0x200>
 80015e6:	e01b      	b.n	8001620 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015e8:	4b09      	ldr	r3, [pc, #36]	; (8001610 <HAL_RCC_OscConfig+0x248>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015ee:	f7ff fc0f 	bl	8000e10 <HAL_GetTick>
 80015f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015f4:	e00e      	b.n	8001614 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015f6:	f7ff fc0b 	bl	8000e10 <HAL_GetTick>
 80015fa:	4602      	mov	r2, r0
 80015fc:	693b      	ldr	r3, [r7, #16]
 80015fe:	1ad3      	subs	r3, r2, r3
 8001600:	2b02      	cmp	r3, #2
 8001602:	d907      	bls.n	8001614 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001604:	2303      	movs	r3, #3
 8001606:	e150      	b.n	80018aa <HAL_RCC_OscConfig+0x4e2>
 8001608:	40023800 	.word	0x40023800
 800160c:	42470000 	.word	0x42470000
 8001610:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001614:	4b88      	ldr	r3, [pc, #544]	; (8001838 <HAL_RCC_OscConfig+0x470>)
 8001616:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001618:	f003 0302 	and.w	r3, r3, #2
 800161c:	2b00      	cmp	r3, #0
 800161e:	d1ea      	bne.n	80015f6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f003 0304 	and.w	r3, r3, #4
 8001628:	2b00      	cmp	r3, #0
 800162a:	f000 8097 	beq.w	800175c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800162e:	2300      	movs	r3, #0
 8001630:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001632:	4b81      	ldr	r3, [pc, #516]	; (8001838 <HAL_RCC_OscConfig+0x470>)
 8001634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001636:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800163a:	2b00      	cmp	r3, #0
 800163c:	d10f      	bne.n	800165e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800163e:	2300      	movs	r3, #0
 8001640:	60bb      	str	r3, [r7, #8]
 8001642:	4b7d      	ldr	r3, [pc, #500]	; (8001838 <HAL_RCC_OscConfig+0x470>)
 8001644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001646:	4a7c      	ldr	r2, [pc, #496]	; (8001838 <HAL_RCC_OscConfig+0x470>)
 8001648:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800164c:	6413      	str	r3, [r2, #64]	; 0x40
 800164e:	4b7a      	ldr	r3, [pc, #488]	; (8001838 <HAL_RCC_OscConfig+0x470>)
 8001650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001652:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001656:	60bb      	str	r3, [r7, #8]
 8001658:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800165a:	2301      	movs	r3, #1
 800165c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800165e:	4b77      	ldr	r3, [pc, #476]	; (800183c <HAL_RCC_OscConfig+0x474>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001666:	2b00      	cmp	r3, #0
 8001668:	d118      	bne.n	800169c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800166a:	4b74      	ldr	r3, [pc, #464]	; (800183c <HAL_RCC_OscConfig+0x474>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4a73      	ldr	r2, [pc, #460]	; (800183c <HAL_RCC_OscConfig+0x474>)
 8001670:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001674:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001676:	f7ff fbcb 	bl	8000e10 <HAL_GetTick>
 800167a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800167c:	e008      	b.n	8001690 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800167e:	f7ff fbc7 	bl	8000e10 <HAL_GetTick>
 8001682:	4602      	mov	r2, r0
 8001684:	693b      	ldr	r3, [r7, #16]
 8001686:	1ad3      	subs	r3, r2, r3
 8001688:	2b02      	cmp	r3, #2
 800168a:	d901      	bls.n	8001690 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800168c:	2303      	movs	r3, #3
 800168e:	e10c      	b.n	80018aa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001690:	4b6a      	ldr	r3, [pc, #424]	; (800183c <HAL_RCC_OscConfig+0x474>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001698:	2b00      	cmp	r3, #0
 800169a:	d0f0      	beq.n	800167e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	689b      	ldr	r3, [r3, #8]
 80016a0:	2b01      	cmp	r3, #1
 80016a2:	d106      	bne.n	80016b2 <HAL_RCC_OscConfig+0x2ea>
 80016a4:	4b64      	ldr	r3, [pc, #400]	; (8001838 <HAL_RCC_OscConfig+0x470>)
 80016a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016a8:	4a63      	ldr	r2, [pc, #396]	; (8001838 <HAL_RCC_OscConfig+0x470>)
 80016aa:	f043 0301 	orr.w	r3, r3, #1
 80016ae:	6713      	str	r3, [r2, #112]	; 0x70
 80016b0:	e01c      	b.n	80016ec <HAL_RCC_OscConfig+0x324>
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	689b      	ldr	r3, [r3, #8]
 80016b6:	2b05      	cmp	r3, #5
 80016b8:	d10c      	bne.n	80016d4 <HAL_RCC_OscConfig+0x30c>
 80016ba:	4b5f      	ldr	r3, [pc, #380]	; (8001838 <HAL_RCC_OscConfig+0x470>)
 80016bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016be:	4a5e      	ldr	r2, [pc, #376]	; (8001838 <HAL_RCC_OscConfig+0x470>)
 80016c0:	f043 0304 	orr.w	r3, r3, #4
 80016c4:	6713      	str	r3, [r2, #112]	; 0x70
 80016c6:	4b5c      	ldr	r3, [pc, #368]	; (8001838 <HAL_RCC_OscConfig+0x470>)
 80016c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016ca:	4a5b      	ldr	r2, [pc, #364]	; (8001838 <HAL_RCC_OscConfig+0x470>)
 80016cc:	f043 0301 	orr.w	r3, r3, #1
 80016d0:	6713      	str	r3, [r2, #112]	; 0x70
 80016d2:	e00b      	b.n	80016ec <HAL_RCC_OscConfig+0x324>
 80016d4:	4b58      	ldr	r3, [pc, #352]	; (8001838 <HAL_RCC_OscConfig+0x470>)
 80016d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016d8:	4a57      	ldr	r2, [pc, #348]	; (8001838 <HAL_RCC_OscConfig+0x470>)
 80016da:	f023 0301 	bic.w	r3, r3, #1
 80016de:	6713      	str	r3, [r2, #112]	; 0x70
 80016e0:	4b55      	ldr	r3, [pc, #340]	; (8001838 <HAL_RCC_OscConfig+0x470>)
 80016e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016e4:	4a54      	ldr	r2, [pc, #336]	; (8001838 <HAL_RCC_OscConfig+0x470>)
 80016e6:	f023 0304 	bic.w	r3, r3, #4
 80016ea:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	689b      	ldr	r3, [r3, #8]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d015      	beq.n	8001720 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016f4:	f7ff fb8c 	bl	8000e10 <HAL_GetTick>
 80016f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016fa:	e00a      	b.n	8001712 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016fc:	f7ff fb88 	bl	8000e10 <HAL_GetTick>
 8001700:	4602      	mov	r2, r0
 8001702:	693b      	ldr	r3, [r7, #16]
 8001704:	1ad3      	subs	r3, r2, r3
 8001706:	f241 3288 	movw	r2, #5000	; 0x1388
 800170a:	4293      	cmp	r3, r2
 800170c:	d901      	bls.n	8001712 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800170e:	2303      	movs	r3, #3
 8001710:	e0cb      	b.n	80018aa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001712:	4b49      	ldr	r3, [pc, #292]	; (8001838 <HAL_RCC_OscConfig+0x470>)
 8001714:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001716:	f003 0302 	and.w	r3, r3, #2
 800171a:	2b00      	cmp	r3, #0
 800171c:	d0ee      	beq.n	80016fc <HAL_RCC_OscConfig+0x334>
 800171e:	e014      	b.n	800174a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001720:	f7ff fb76 	bl	8000e10 <HAL_GetTick>
 8001724:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001726:	e00a      	b.n	800173e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001728:	f7ff fb72 	bl	8000e10 <HAL_GetTick>
 800172c:	4602      	mov	r2, r0
 800172e:	693b      	ldr	r3, [r7, #16]
 8001730:	1ad3      	subs	r3, r2, r3
 8001732:	f241 3288 	movw	r2, #5000	; 0x1388
 8001736:	4293      	cmp	r3, r2
 8001738:	d901      	bls.n	800173e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800173a:	2303      	movs	r3, #3
 800173c:	e0b5      	b.n	80018aa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800173e:	4b3e      	ldr	r3, [pc, #248]	; (8001838 <HAL_RCC_OscConfig+0x470>)
 8001740:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001742:	f003 0302 	and.w	r3, r3, #2
 8001746:	2b00      	cmp	r3, #0
 8001748:	d1ee      	bne.n	8001728 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800174a:	7dfb      	ldrb	r3, [r7, #23]
 800174c:	2b01      	cmp	r3, #1
 800174e:	d105      	bne.n	800175c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001750:	4b39      	ldr	r3, [pc, #228]	; (8001838 <HAL_RCC_OscConfig+0x470>)
 8001752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001754:	4a38      	ldr	r2, [pc, #224]	; (8001838 <HAL_RCC_OscConfig+0x470>)
 8001756:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800175a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	699b      	ldr	r3, [r3, #24]
 8001760:	2b00      	cmp	r3, #0
 8001762:	f000 80a1 	beq.w	80018a8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001766:	4b34      	ldr	r3, [pc, #208]	; (8001838 <HAL_RCC_OscConfig+0x470>)
 8001768:	689b      	ldr	r3, [r3, #8]
 800176a:	f003 030c 	and.w	r3, r3, #12
 800176e:	2b08      	cmp	r3, #8
 8001770:	d05c      	beq.n	800182c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	699b      	ldr	r3, [r3, #24]
 8001776:	2b02      	cmp	r3, #2
 8001778:	d141      	bne.n	80017fe <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800177a:	4b31      	ldr	r3, [pc, #196]	; (8001840 <HAL_RCC_OscConfig+0x478>)
 800177c:	2200      	movs	r2, #0
 800177e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001780:	f7ff fb46 	bl	8000e10 <HAL_GetTick>
 8001784:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001786:	e008      	b.n	800179a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001788:	f7ff fb42 	bl	8000e10 <HAL_GetTick>
 800178c:	4602      	mov	r2, r0
 800178e:	693b      	ldr	r3, [r7, #16]
 8001790:	1ad3      	subs	r3, r2, r3
 8001792:	2b02      	cmp	r3, #2
 8001794:	d901      	bls.n	800179a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001796:	2303      	movs	r3, #3
 8001798:	e087      	b.n	80018aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800179a:	4b27      	ldr	r3, [pc, #156]	; (8001838 <HAL_RCC_OscConfig+0x470>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d1f0      	bne.n	8001788 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	69da      	ldr	r2, [r3, #28]
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6a1b      	ldr	r3, [r3, #32]
 80017ae:	431a      	orrs	r2, r3
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017b4:	019b      	lsls	r3, r3, #6
 80017b6:	431a      	orrs	r2, r3
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017bc:	085b      	lsrs	r3, r3, #1
 80017be:	3b01      	subs	r3, #1
 80017c0:	041b      	lsls	r3, r3, #16
 80017c2:	431a      	orrs	r2, r3
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017c8:	061b      	lsls	r3, r3, #24
 80017ca:	491b      	ldr	r1, [pc, #108]	; (8001838 <HAL_RCC_OscConfig+0x470>)
 80017cc:	4313      	orrs	r3, r2
 80017ce:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017d0:	4b1b      	ldr	r3, [pc, #108]	; (8001840 <HAL_RCC_OscConfig+0x478>)
 80017d2:	2201      	movs	r2, #1
 80017d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017d6:	f7ff fb1b 	bl	8000e10 <HAL_GetTick>
 80017da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017dc:	e008      	b.n	80017f0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017de:	f7ff fb17 	bl	8000e10 <HAL_GetTick>
 80017e2:	4602      	mov	r2, r0
 80017e4:	693b      	ldr	r3, [r7, #16]
 80017e6:	1ad3      	subs	r3, r2, r3
 80017e8:	2b02      	cmp	r3, #2
 80017ea:	d901      	bls.n	80017f0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80017ec:	2303      	movs	r3, #3
 80017ee:	e05c      	b.n	80018aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017f0:	4b11      	ldr	r3, [pc, #68]	; (8001838 <HAL_RCC_OscConfig+0x470>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d0f0      	beq.n	80017de <HAL_RCC_OscConfig+0x416>
 80017fc:	e054      	b.n	80018a8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017fe:	4b10      	ldr	r3, [pc, #64]	; (8001840 <HAL_RCC_OscConfig+0x478>)
 8001800:	2200      	movs	r2, #0
 8001802:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001804:	f7ff fb04 	bl	8000e10 <HAL_GetTick>
 8001808:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800180a:	e008      	b.n	800181e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800180c:	f7ff fb00 	bl	8000e10 <HAL_GetTick>
 8001810:	4602      	mov	r2, r0
 8001812:	693b      	ldr	r3, [r7, #16]
 8001814:	1ad3      	subs	r3, r2, r3
 8001816:	2b02      	cmp	r3, #2
 8001818:	d901      	bls.n	800181e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800181a:	2303      	movs	r3, #3
 800181c:	e045      	b.n	80018aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800181e:	4b06      	ldr	r3, [pc, #24]	; (8001838 <HAL_RCC_OscConfig+0x470>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001826:	2b00      	cmp	r3, #0
 8001828:	d1f0      	bne.n	800180c <HAL_RCC_OscConfig+0x444>
 800182a:	e03d      	b.n	80018a8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	699b      	ldr	r3, [r3, #24]
 8001830:	2b01      	cmp	r3, #1
 8001832:	d107      	bne.n	8001844 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001834:	2301      	movs	r3, #1
 8001836:	e038      	b.n	80018aa <HAL_RCC_OscConfig+0x4e2>
 8001838:	40023800 	.word	0x40023800
 800183c:	40007000 	.word	0x40007000
 8001840:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001844:	4b1b      	ldr	r3, [pc, #108]	; (80018b4 <HAL_RCC_OscConfig+0x4ec>)
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	699b      	ldr	r3, [r3, #24]
 800184e:	2b01      	cmp	r3, #1
 8001850:	d028      	beq.n	80018a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800185c:	429a      	cmp	r2, r3
 800185e:	d121      	bne.n	80018a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800186a:	429a      	cmp	r2, r3
 800186c:	d11a      	bne.n	80018a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800186e:	68fa      	ldr	r2, [r7, #12]
 8001870:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001874:	4013      	ands	r3, r2
 8001876:	687a      	ldr	r2, [r7, #4]
 8001878:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800187a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800187c:	4293      	cmp	r3, r2
 800187e:	d111      	bne.n	80018a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800188a:	085b      	lsrs	r3, r3, #1
 800188c:	3b01      	subs	r3, #1
 800188e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001890:	429a      	cmp	r2, r3
 8001892:	d107      	bne.n	80018a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800189e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80018a0:	429a      	cmp	r2, r3
 80018a2:	d001      	beq.n	80018a8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80018a4:	2301      	movs	r3, #1
 80018a6:	e000      	b.n	80018aa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80018a8:	2300      	movs	r3, #0
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	3718      	adds	r7, #24
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	40023800 	.word	0x40023800

080018b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b084      	sub	sp, #16
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
 80018c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d101      	bne.n	80018cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018c8:	2301      	movs	r3, #1
 80018ca:	e0cc      	b.n	8001a66 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80018cc:	4b68      	ldr	r3, [pc, #416]	; (8001a70 <HAL_RCC_ClockConfig+0x1b8>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f003 030f 	and.w	r3, r3, #15
 80018d4:	683a      	ldr	r2, [r7, #0]
 80018d6:	429a      	cmp	r2, r3
 80018d8:	d90c      	bls.n	80018f4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018da:	4b65      	ldr	r3, [pc, #404]	; (8001a70 <HAL_RCC_ClockConfig+0x1b8>)
 80018dc:	683a      	ldr	r2, [r7, #0]
 80018de:	b2d2      	uxtb	r2, r2
 80018e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018e2:	4b63      	ldr	r3, [pc, #396]	; (8001a70 <HAL_RCC_ClockConfig+0x1b8>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f003 030f 	and.w	r3, r3, #15
 80018ea:	683a      	ldr	r2, [r7, #0]
 80018ec:	429a      	cmp	r2, r3
 80018ee:	d001      	beq.n	80018f4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80018f0:	2301      	movs	r3, #1
 80018f2:	e0b8      	b.n	8001a66 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f003 0302 	and.w	r3, r3, #2
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d020      	beq.n	8001942 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f003 0304 	and.w	r3, r3, #4
 8001908:	2b00      	cmp	r3, #0
 800190a:	d005      	beq.n	8001918 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800190c:	4b59      	ldr	r3, [pc, #356]	; (8001a74 <HAL_RCC_ClockConfig+0x1bc>)
 800190e:	689b      	ldr	r3, [r3, #8]
 8001910:	4a58      	ldr	r2, [pc, #352]	; (8001a74 <HAL_RCC_ClockConfig+0x1bc>)
 8001912:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001916:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f003 0308 	and.w	r3, r3, #8
 8001920:	2b00      	cmp	r3, #0
 8001922:	d005      	beq.n	8001930 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001924:	4b53      	ldr	r3, [pc, #332]	; (8001a74 <HAL_RCC_ClockConfig+0x1bc>)
 8001926:	689b      	ldr	r3, [r3, #8]
 8001928:	4a52      	ldr	r2, [pc, #328]	; (8001a74 <HAL_RCC_ClockConfig+0x1bc>)
 800192a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800192e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001930:	4b50      	ldr	r3, [pc, #320]	; (8001a74 <HAL_RCC_ClockConfig+0x1bc>)
 8001932:	689b      	ldr	r3, [r3, #8]
 8001934:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	689b      	ldr	r3, [r3, #8]
 800193c:	494d      	ldr	r1, [pc, #308]	; (8001a74 <HAL_RCC_ClockConfig+0x1bc>)
 800193e:	4313      	orrs	r3, r2
 8001940:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f003 0301 	and.w	r3, r3, #1
 800194a:	2b00      	cmp	r3, #0
 800194c:	d044      	beq.n	80019d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	2b01      	cmp	r3, #1
 8001954:	d107      	bne.n	8001966 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001956:	4b47      	ldr	r3, [pc, #284]	; (8001a74 <HAL_RCC_ClockConfig+0x1bc>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800195e:	2b00      	cmp	r3, #0
 8001960:	d119      	bne.n	8001996 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001962:	2301      	movs	r3, #1
 8001964:	e07f      	b.n	8001a66 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	2b02      	cmp	r3, #2
 800196c:	d003      	beq.n	8001976 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001972:	2b03      	cmp	r3, #3
 8001974:	d107      	bne.n	8001986 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001976:	4b3f      	ldr	r3, [pc, #252]	; (8001a74 <HAL_RCC_ClockConfig+0x1bc>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800197e:	2b00      	cmp	r3, #0
 8001980:	d109      	bne.n	8001996 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001982:	2301      	movs	r3, #1
 8001984:	e06f      	b.n	8001a66 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001986:	4b3b      	ldr	r3, [pc, #236]	; (8001a74 <HAL_RCC_ClockConfig+0x1bc>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f003 0302 	and.w	r3, r3, #2
 800198e:	2b00      	cmp	r3, #0
 8001990:	d101      	bne.n	8001996 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001992:	2301      	movs	r3, #1
 8001994:	e067      	b.n	8001a66 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001996:	4b37      	ldr	r3, [pc, #220]	; (8001a74 <HAL_RCC_ClockConfig+0x1bc>)
 8001998:	689b      	ldr	r3, [r3, #8]
 800199a:	f023 0203 	bic.w	r2, r3, #3
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	4934      	ldr	r1, [pc, #208]	; (8001a74 <HAL_RCC_ClockConfig+0x1bc>)
 80019a4:	4313      	orrs	r3, r2
 80019a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80019a8:	f7ff fa32 	bl	8000e10 <HAL_GetTick>
 80019ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019ae:	e00a      	b.n	80019c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019b0:	f7ff fa2e 	bl	8000e10 <HAL_GetTick>
 80019b4:	4602      	mov	r2, r0
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	1ad3      	subs	r3, r2, r3
 80019ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80019be:	4293      	cmp	r3, r2
 80019c0:	d901      	bls.n	80019c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80019c2:	2303      	movs	r3, #3
 80019c4:	e04f      	b.n	8001a66 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019c6:	4b2b      	ldr	r3, [pc, #172]	; (8001a74 <HAL_RCC_ClockConfig+0x1bc>)
 80019c8:	689b      	ldr	r3, [r3, #8]
 80019ca:	f003 020c 	and.w	r2, r3, #12
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	009b      	lsls	r3, r3, #2
 80019d4:	429a      	cmp	r2, r3
 80019d6:	d1eb      	bne.n	80019b0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80019d8:	4b25      	ldr	r3, [pc, #148]	; (8001a70 <HAL_RCC_ClockConfig+0x1b8>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f003 030f 	and.w	r3, r3, #15
 80019e0:	683a      	ldr	r2, [r7, #0]
 80019e2:	429a      	cmp	r2, r3
 80019e4:	d20c      	bcs.n	8001a00 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019e6:	4b22      	ldr	r3, [pc, #136]	; (8001a70 <HAL_RCC_ClockConfig+0x1b8>)
 80019e8:	683a      	ldr	r2, [r7, #0]
 80019ea:	b2d2      	uxtb	r2, r2
 80019ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019ee:	4b20      	ldr	r3, [pc, #128]	; (8001a70 <HAL_RCC_ClockConfig+0x1b8>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f003 030f 	and.w	r3, r3, #15
 80019f6:	683a      	ldr	r2, [r7, #0]
 80019f8:	429a      	cmp	r2, r3
 80019fa:	d001      	beq.n	8001a00 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80019fc:	2301      	movs	r3, #1
 80019fe:	e032      	b.n	8001a66 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f003 0304 	and.w	r3, r3, #4
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d008      	beq.n	8001a1e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a0c:	4b19      	ldr	r3, [pc, #100]	; (8001a74 <HAL_RCC_ClockConfig+0x1bc>)
 8001a0e:	689b      	ldr	r3, [r3, #8]
 8001a10:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	68db      	ldr	r3, [r3, #12]
 8001a18:	4916      	ldr	r1, [pc, #88]	; (8001a74 <HAL_RCC_ClockConfig+0x1bc>)
 8001a1a:	4313      	orrs	r3, r2
 8001a1c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f003 0308 	and.w	r3, r3, #8
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d009      	beq.n	8001a3e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a2a:	4b12      	ldr	r3, [pc, #72]	; (8001a74 <HAL_RCC_ClockConfig+0x1bc>)
 8001a2c:	689b      	ldr	r3, [r3, #8]
 8001a2e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	691b      	ldr	r3, [r3, #16]
 8001a36:	00db      	lsls	r3, r3, #3
 8001a38:	490e      	ldr	r1, [pc, #56]	; (8001a74 <HAL_RCC_ClockConfig+0x1bc>)
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001a3e:	f000 f821 	bl	8001a84 <HAL_RCC_GetSysClockFreq>
 8001a42:	4602      	mov	r2, r0
 8001a44:	4b0b      	ldr	r3, [pc, #44]	; (8001a74 <HAL_RCC_ClockConfig+0x1bc>)
 8001a46:	689b      	ldr	r3, [r3, #8]
 8001a48:	091b      	lsrs	r3, r3, #4
 8001a4a:	f003 030f 	and.w	r3, r3, #15
 8001a4e:	490a      	ldr	r1, [pc, #40]	; (8001a78 <HAL_RCC_ClockConfig+0x1c0>)
 8001a50:	5ccb      	ldrb	r3, [r1, r3]
 8001a52:	fa22 f303 	lsr.w	r3, r2, r3
 8001a56:	4a09      	ldr	r2, [pc, #36]	; (8001a7c <HAL_RCC_ClockConfig+0x1c4>)
 8001a58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001a5a:	4b09      	ldr	r3, [pc, #36]	; (8001a80 <HAL_RCC_ClockConfig+0x1c8>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f7ff f992 	bl	8000d88 <HAL_InitTick>

  return HAL_OK;
 8001a64:	2300      	movs	r3, #0
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	3710      	adds	r7, #16
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	40023c00 	.word	0x40023c00
 8001a74:	40023800 	.word	0x40023800
 8001a78:	080028c4 	.word	0x080028c4
 8001a7c:	20000000 	.word	0x20000000
 8001a80:	20000004 	.word	0x20000004

08001a84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a88:	b094      	sub	sp, #80	; 0x50
 8001a8a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	647b      	str	r3, [r7, #68]	; 0x44
 8001a90:	2300      	movs	r3, #0
 8001a92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001a94:	2300      	movs	r3, #0
 8001a96:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a9c:	4b79      	ldr	r3, [pc, #484]	; (8001c84 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a9e:	689b      	ldr	r3, [r3, #8]
 8001aa0:	f003 030c 	and.w	r3, r3, #12
 8001aa4:	2b08      	cmp	r3, #8
 8001aa6:	d00d      	beq.n	8001ac4 <HAL_RCC_GetSysClockFreq+0x40>
 8001aa8:	2b08      	cmp	r3, #8
 8001aaa:	f200 80e1 	bhi.w	8001c70 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d002      	beq.n	8001ab8 <HAL_RCC_GetSysClockFreq+0x34>
 8001ab2:	2b04      	cmp	r3, #4
 8001ab4:	d003      	beq.n	8001abe <HAL_RCC_GetSysClockFreq+0x3a>
 8001ab6:	e0db      	b.n	8001c70 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001ab8:	4b73      	ldr	r3, [pc, #460]	; (8001c88 <HAL_RCC_GetSysClockFreq+0x204>)
 8001aba:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001abc:	e0db      	b.n	8001c76 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001abe:	4b73      	ldr	r3, [pc, #460]	; (8001c8c <HAL_RCC_GetSysClockFreq+0x208>)
 8001ac0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001ac2:	e0d8      	b.n	8001c76 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ac4:	4b6f      	ldr	r3, [pc, #444]	; (8001c84 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001acc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ace:	4b6d      	ldr	r3, [pc, #436]	; (8001c84 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d063      	beq.n	8001ba2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ada:	4b6a      	ldr	r3, [pc, #424]	; (8001c84 <HAL_RCC_GetSysClockFreq+0x200>)
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	099b      	lsrs	r3, r3, #6
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	63bb      	str	r3, [r7, #56]	; 0x38
 8001ae4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001ae6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ae8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001aec:	633b      	str	r3, [r7, #48]	; 0x30
 8001aee:	2300      	movs	r3, #0
 8001af0:	637b      	str	r3, [r7, #52]	; 0x34
 8001af2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001af6:	4622      	mov	r2, r4
 8001af8:	462b      	mov	r3, r5
 8001afa:	f04f 0000 	mov.w	r0, #0
 8001afe:	f04f 0100 	mov.w	r1, #0
 8001b02:	0159      	lsls	r1, r3, #5
 8001b04:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b08:	0150      	lsls	r0, r2, #5
 8001b0a:	4602      	mov	r2, r0
 8001b0c:	460b      	mov	r3, r1
 8001b0e:	4621      	mov	r1, r4
 8001b10:	1a51      	subs	r1, r2, r1
 8001b12:	6139      	str	r1, [r7, #16]
 8001b14:	4629      	mov	r1, r5
 8001b16:	eb63 0301 	sbc.w	r3, r3, r1
 8001b1a:	617b      	str	r3, [r7, #20]
 8001b1c:	f04f 0200 	mov.w	r2, #0
 8001b20:	f04f 0300 	mov.w	r3, #0
 8001b24:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001b28:	4659      	mov	r1, fp
 8001b2a:	018b      	lsls	r3, r1, #6
 8001b2c:	4651      	mov	r1, sl
 8001b2e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001b32:	4651      	mov	r1, sl
 8001b34:	018a      	lsls	r2, r1, #6
 8001b36:	4651      	mov	r1, sl
 8001b38:	ebb2 0801 	subs.w	r8, r2, r1
 8001b3c:	4659      	mov	r1, fp
 8001b3e:	eb63 0901 	sbc.w	r9, r3, r1
 8001b42:	f04f 0200 	mov.w	r2, #0
 8001b46:	f04f 0300 	mov.w	r3, #0
 8001b4a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001b4e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001b52:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001b56:	4690      	mov	r8, r2
 8001b58:	4699      	mov	r9, r3
 8001b5a:	4623      	mov	r3, r4
 8001b5c:	eb18 0303 	adds.w	r3, r8, r3
 8001b60:	60bb      	str	r3, [r7, #8]
 8001b62:	462b      	mov	r3, r5
 8001b64:	eb49 0303 	adc.w	r3, r9, r3
 8001b68:	60fb      	str	r3, [r7, #12]
 8001b6a:	f04f 0200 	mov.w	r2, #0
 8001b6e:	f04f 0300 	mov.w	r3, #0
 8001b72:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001b76:	4629      	mov	r1, r5
 8001b78:	024b      	lsls	r3, r1, #9
 8001b7a:	4621      	mov	r1, r4
 8001b7c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001b80:	4621      	mov	r1, r4
 8001b82:	024a      	lsls	r2, r1, #9
 8001b84:	4610      	mov	r0, r2
 8001b86:	4619      	mov	r1, r3
 8001b88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b8e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001b90:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001b94:	f7fe fb2a 	bl	80001ec <__aeabi_uldivmod>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	460b      	mov	r3, r1
 8001b9c:	4613      	mov	r3, r2
 8001b9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001ba0:	e058      	b.n	8001c54 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ba2:	4b38      	ldr	r3, [pc, #224]	; (8001c84 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	099b      	lsrs	r3, r3, #6
 8001ba8:	2200      	movs	r2, #0
 8001baa:	4618      	mov	r0, r3
 8001bac:	4611      	mov	r1, r2
 8001bae:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001bb2:	623b      	str	r3, [r7, #32]
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	627b      	str	r3, [r7, #36]	; 0x24
 8001bb8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001bbc:	4642      	mov	r2, r8
 8001bbe:	464b      	mov	r3, r9
 8001bc0:	f04f 0000 	mov.w	r0, #0
 8001bc4:	f04f 0100 	mov.w	r1, #0
 8001bc8:	0159      	lsls	r1, r3, #5
 8001bca:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001bce:	0150      	lsls	r0, r2, #5
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	460b      	mov	r3, r1
 8001bd4:	4641      	mov	r1, r8
 8001bd6:	ebb2 0a01 	subs.w	sl, r2, r1
 8001bda:	4649      	mov	r1, r9
 8001bdc:	eb63 0b01 	sbc.w	fp, r3, r1
 8001be0:	f04f 0200 	mov.w	r2, #0
 8001be4:	f04f 0300 	mov.w	r3, #0
 8001be8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001bec:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001bf0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001bf4:	ebb2 040a 	subs.w	r4, r2, sl
 8001bf8:	eb63 050b 	sbc.w	r5, r3, fp
 8001bfc:	f04f 0200 	mov.w	r2, #0
 8001c00:	f04f 0300 	mov.w	r3, #0
 8001c04:	00eb      	lsls	r3, r5, #3
 8001c06:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001c0a:	00e2      	lsls	r2, r4, #3
 8001c0c:	4614      	mov	r4, r2
 8001c0e:	461d      	mov	r5, r3
 8001c10:	4643      	mov	r3, r8
 8001c12:	18e3      	adds	r3, r4, r3
 8001c14:	603b      	str	r3, [r7, #0]
 8001c16:	464b      	mov	r3, r9
 8001c18:	eb45 0303 	adc.w	r3, r5, r3
 8001c1c:	607b      	str	r3, [r7, #4]
 8001c1e:	f04f 0200 	mov.w	r2, #0
 8001c22:	f04f 0300 	mov.w	r3, #0
 8001c26:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001c2a:	4629      	mov	r1, r5
 8001c2c:	028b      	lsls	r3, r1, #10
 8001c2e:	4621      	mov	r1, r4
 8001c30:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001c34:	4621      	mov	r1, r4
 8001c36:	028a      	lsls	r2, r1, #10
 8001c38:	4610      	mov	r0, r2
 8001c3a:	4619      	mov	r1, r3
 8001c3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c3e:	2200      	movs	r2, #0
 8001c40:	61bb      	str	r3, [r7, #24]
 8001c42:	61fa      	str	r2, [r7, #28]
 8001c44:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c48:	f7fe fad0 	bl	80001ec <__aeabi_uldivmod>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	460b      	mov	r3, r1
 8001c50:	4613      	mov	r3, r2
 8001c52:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001c54:	4b0b      	ldr	r3, [pc, #44]	; (8001c84 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	0c1b      	lsrs	r3, r3, #16
 8001c5a:	f003 0303 	and.w	r3, r3, #3
 8001c5e:	3301      	adds	r3, #1
 8001c60:	005b      	lsls	r3, r3, #1
 8001c62:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001c64:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001c66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c68:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c6c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001c6e:	e002      	b.n	8001c76 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001c70:	4b05      	ldr	r3, [pc, #20]	; (8001c88 <HAL_RCC_GetSysClockFreq+0x204>)
 8001c72:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001c74:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	3750      	adds	r7, #80	; 0x50
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001c82:	bf00      	nop
 8001c84:	40023800 	.word	0x40023800
 8001c88:	00f42400 	.word	0x00f42400
 8001c8c:	007a1200 	.word	0x007a1200

08001c90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c90:	b480      	push	{r7}
 8001c92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c94:	4b03      	ldr	r3, [pc, #12]	; (8001ca4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001c96:	681b      	ldr	r3, [r3, #0]
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr
 8001ca2:	bf00      	nop
 8001ca4:	20000000 	.word	0x20000000

08001ca8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001cac:	f7ff fff0 	bl	8001c90 <HAL_RCC_GetHCLKFreq>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	4b05      	ldr	r3, [pc, #20]	; (8001cc8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001cb4:	689b      	ldr	r3, [r3, #8]
 8001cb6:	0a9b      	lsrs	r3, r3, #10
 8001cb8:	f003 0307 	and.w	r3, r3, #7
 8001cbc:	4903      	ldr	r1, [pc, #12]	; (8001ccc <HAL_RCC_GetPCLK1Freq+0x24>)
 8001cbe:	5ccb      	ldrb	r3, [r1, r3]
 8001cc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	bd80      	pop	{r7, pc}
 8001cc8:	40023800 	.word	0x40023800
 8001ccc:	080028d4 	.word	0x080028d4

08001cd0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001cd4:	f7ff ffdc 	bl	8001c90 <HAL_RCC_GetHCLKFreq>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	4b05      	ldr	r3, [pc, #20]	; (8001cf0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001cdc:	689b      	ldr	r3, [r3, #8]
 8001cde:	0b5b      	lsrs	r3, r3, #13
 8001ce0:	f003 0307 	and.w	r3, r3, #7
 8001ce4:	4903      	ldr	r1, [pc, #12]	; (8001cf4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ce6:	5ccb      	ldrb	r3, [r1, r3]
 8001ce8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	bd80      	pop	{r7, pc}
 8001cf0:	40023800 	.word	0x40023800
 8001cf4:	080028d4 	.word	0x080028d4

08001cf8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b082      	sub	sp, #8
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d101      	bne.n	8001d0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001d06:	2301      	movs	r3, #1
 8001d08:	e03f      	b.n	8001d8a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d10:	b2db      	uxtb	r3, r3
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d106      	bne.n	8001d24 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2200      	movs	r2, #0
 8001d1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001d1e:	6878      	ldr	r0, [r7, #4]
 8001d20:	f7fe ff62 	bl	8000be8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2224      	movs	r2, #36	; 0x24
 8001d28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	68da      	ldr	r2, [r3, #12]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001d3a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001d3c:	6878      	ldr	r0, [r7, #4]
 8001d3e:	f000 f829 	bl	8001d94 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	691a      	ldr	r2, [r3, #16]
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001d50:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	695a      	ldr	r2, [r3, #20]
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001d60:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	68da      	ldr	r2, [r3, #12]
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001d70:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2200      	movs	r2, #0
 8001d76:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2220      	movs	r2, #32
 8001d7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2220      	movs	r2, #32
 8001d84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001d88:	2300      	movs	r3, #0
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	3708      	adds	r7, #8
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}
	...

08001d94 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001d94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001d98:	b0c0      	sub	sp, #256	; 0x100
 8001d9a:	af00      	add	r7, sp, #0
 8001d9c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001da0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	691b      	ldr	r3, [r3, #16]
 8001da8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8001dac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001db0:	68d9      	ldr	r1, [r3, #12]
 8001db2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001db6:	681a      	ldr	r2, [r3, #0]
 8001db8:	ea40 0301 	orr.w	r3, r0, r1
 8001dbc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001dbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001dc2:	689a      	ldr	r2, [r3, #8]
 8001dc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001dc8:	691b      	ldr	r3, [r3, #16]
 8001dca:	431a      	orrs	r2, r3
 8001dcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001dd0:	695b      	ldr	r3, [r3, #20]
 8001dd2:	431a      	orrs	r2, r3
 8001dd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001dd8:	69db      	ldr	r3, [r3, #28]
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8001de0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	68db      	ldr	r3, [r3, #12]
 8001de8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8001dec:	f021 010c 	bic.w	r1, r1, #12
 8001df0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001df4:	681a      	ldr	r2, [r3, #0]
 8001df6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001dfa:	430b      	orrs	r3, r1
 8001dfc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001dfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	695b      	ldr	r3, [r3, #20]
 8001e06:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8001e0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e0e:	6999      	ldr	r1, [r3, #24]
 8001e10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e14:	681a      	ldr	r2, [r3, #0]
 8001e16:	ea40 0301 	orr.w	r3, r0, r1
 8001e1a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001e1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e20:	681a      	ldr	r2, [r3, #0]
 8001e22:	4b8f      	ldr	r3, [pc, #572]	; (8002060 <UART_SetConfig+0x2cc>)
 8001e24:	429a      	cmp	r2, r3
 8001e26:	d005      	beq.n	8001e34 <UART_SetConfig+0xa0>
 8001e28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e2c:	681a      	ldr	r2, [r3, #0]
 8001e2e:	4b8d      	ldr	r3, [pc, #564]	; (8002064 <UART_SetConfig+0x2d0>)
 8001e30:	429a      	cmp	r2, r3
 8001e32:	d104      	bne.n	8001e3e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001e34:	f7ff ff4c 	bl	8001cd0 <HAL_RCC_GetPCLK2Freq>
 8001e38:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8001e3c:	e003      	b.n	8001e46 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001e3e:	f7ff ff33 	bl	8001ca8 <HAL_RCC_GetPCLK1Freq>
 8001e42:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001e46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e4a:	69db      	ldr	r3, [r3, #28]
 8001e4c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001e50:	f040 810c 	bne.w	800206c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001e54:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001e58:	2200      	movs	r2, #0
 8001e5a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001e5e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8001e62:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8001e66:	4622      	mov	r2, r4
 8001e68:	462b      	mov	r3, r5
 8001e6a:	1891      	adds	r1, r2, r2
 8001e6c:	65b9      	str	r1, [r7, #88]	; 0x58
 8001e6e:	415b      	adcs	r3, r3
 8001e70:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001e72:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001e76:	4621      	mov	r1, r4
 8001e78:	eb12 0801 	adds.w	r8, r2, r1
 8001e7c:	4629      	mov	r1, r5
 8001e7e:	eb43 0901 	adc.w	r9, r3, r1
 8001e82:	f04f 0200 	mov.w	r2, #0
 8001e86:	f04f 0300 	mov.w	r3, #0
 8001e8a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001e8e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001e92:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001e96:	4690      	mov	r8, r2
 8001e98:	4699      	mov	r9, r3
 8001e9a:	4623      	mov	r3, r4
 8001e9c:	eb18 0303 	adds.w	r3, r8, r3
 8001ea0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8001ea4:	462b      	mov	r3, r5
 8001ea6:	eb49 0303 	adc.w	r3, r9, r3
 8001eaa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001eae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8001eba:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8001ebe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8001ec2:	460b      	mov	r3, r1
 8001ec4:	18db      	adds	r3, r3, r3
 8001ec6:	653b      	str	r3, [r7, #80]	; 0x50
 8001ec8:	4613      	mov	r3, r2
 8001eca:	eb42 0303 	adc.w	r3, r2, r3
 8001ece:	657b      	str	r3, [r7, #84]	; 0x54
 8001ed0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001ed4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8001ed8:	f7fe f988 	bl	80001ec <__aeabi_uldivmod>
 8001edc:	4602      	mov	r2, r0
 8001ede:	460b      	mov	r3, r1
 8001ee0:	4b61      	ldr	r3, [pc, #388]	; (8002068 <UART_SetConfig+0x2d4>)
 8001ee2:	fba3 2302 	umull	r2, r3, r3, r2
 8001ee6:	095b      	lsrs	r3, r3, #5
 8001ee8:	011c      	lsls	r4, r3, #4
 8001eea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001eee:	2200      	movs	r2, #0
 8001ef0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001ef4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8001ef8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8001efc:	4642      	mov	r2, r8
 8001efe:	464b      	mov	r3, r9
 8001f00:	1891      	adds	r1, r2, r2
 8001f02:	64b9      	str	r1, [r7, #72]	; 0x48
 8001f04:	415b      	adcs	r3, r3
 8001f06:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001f08:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001f0c:	4641      	mov	r1, r8
 8001f0e:	eb12 0a01 	adds.w	sl, r2, r1
 8001f12:	4649      	mov	r1, r9
 8001f14:	eb43 0b01 	adc.w	fp, r3, r1
 8001f18:	f04f 0200 	mov.w	r2, #0
 8001f1c:	f04f 0300 	mov.w	r3, #0
 8001f20:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001f24:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001f28:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001f2c:	4692      	mov	sl, r2
 8001f2e:	469b      	mov	fp, r3
 8001f30:	4643      	mov	r3, r8
 8001f32:	eb1a 0303 	adds.w	r3, sl, r3
 8001f36:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001f3a:	464b      	mov	r3, r9
 8001f3c:	eb4b 0303 	adc.w	r3, fp, r3
 8001f40:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001f44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001f50:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8001f54:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8001f58:	460b      	mov	r3, r1
 8001f5a:	18db      	adds	r3, r3, r3
 8001f5c:	643b      	str	r3, [r7, #64]	; 0x40
 8001f5e:	4613      	mov	r3, r2
 8001f60:	eb42 0303 	adc.w	r3, r2, r3
 8001f64:	647b      	str	r3, [r7, #68]	; 0x44
 8001f66:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001f6a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8001f6e:	f7fe f93d 	bl	80001ec <__aeabi_uldivmod>
 8001f72:	4602      	mov	r2, r0
 8001f74:	460b      	mov	r3, r1
 8001f76:	4611      	mov	r1, r2
 8001f78:	4b3b      	ldr	r3, [pc, #236]	; (8002068 <UART_SetConfig+0x2d4>)
 8001f7a:	fba3 2301 	umull	r2, r3, r3, r1
 8001f7e:	095b      	lsrs	r3, r3, #5
 8001f80:	2264      	movs	r2, #100	; 0x64
 8001f82:	fb02 f303 	mul.w	r3, r2, r3
 8001f86:	1acb      	subs	r3, r1, r3
 8001f88:	00db      	lsls	r3, r3, #3
 8001f8a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8001f8e:	4b36      	ldr	r3, [pc, #216]	; (8002068 <UART_SetConfig+0x2d4>)
 8001f90:	fba3 2302 	umull	r2, r3, r3, r2
 8001f94:	095b      	lsrs	r3, r3, #5
 8001f96:	005b      	lsls	r3, r3, #1
 8001f98:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001f9c:	441c      	add	r4, r3
 8001f9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001fa8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8001fac:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8001fb0:	4642      	mov	r2, r8
 8001fb2:	464b      	mov	r3, r9
 8001fb4:	1891      	adds	r1, r2, r2
 8001fb6:	63b9      	str	r1, [r7, #56]	; 0x38
 8001fb8:	415b      	adcs	r3, r3
 8001fba:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001fbc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001fc0:	4641      	mov	r1, r8
 8001fc2:	1851      	adds	r1, r2, r1
 8001fc4:	6339      	str	r1, [r7, #48]	; 0x30
 8001fc6:	4649      	mov	r1, r9
 8001fc8:	414b      	adcs	r3, r1
 8001fca:	637b      	str	r3, [r7, #52]	; 0x34
 8001fcc:	f04f 0200 	mov.w	r2, #0
 8001fd0:	f04f 0300 	mov.w	r3, #0
 8001fd4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8001fd8:	4659      	mov	r1, fp
 8001fda:	00cb      	lsls	r3, r1, #3
 8001fdc:	4651      	mov	r1, sl
 8001fde:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001fe2:	4651      	mov	r1, sl
 8001fe4:	00ca      	lsls	r2, r1, #3
 8001fe6:	4610      	mov	r0, r2
 8001fe8:	4619      	mov	r1, r3
 8001fea:	4603      	mov	r3, r0
 8001fec:	4642      	mov	r2, r8
 8001fee:	189b      	adds	r3, r3, r2
 8001ff0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001ff4:	464b      	mov	r3, r9
 8001ff6:	460a      	mov	r2, r1
 8001ff8:	eb42 0303 	adc.w	r3, r2, r3
 8001ffc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002000:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	2200      	movs	r2, #0
 8002008:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800200c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002010:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002014:	460b      	mov	r3, r1
 8002016:	18db      	adds	r3, r3, r3
 8002018:	62bb      	str	r3, [r7, #40]	; 0x28
 800201a:	4613      	mov	r3, r2
 800201c:	eb42 0303 	adc.w	r3, r2, r3
 8002020:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002022:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002026:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800202a:	f7fe f8df 	bl	80001ec <__aeabi_uldivmod>
 800202e:	4602      	mov	r2, r0
 8002030:	460b      	mov	r3, r1
 8002032:	4b0d      	ldr	r3, [pc, #52]	; (8002068 <UART_SetConfig+0x2d4>)
 8002034:	fba3 1302 	umull	r1, r3, r3, r2
 8002038:	095b      	lsrs	r3, r3, #5
 800203a:	2164      	movs	r1, #100	; 0x64
 800203c:	fb01 f303 	mul.w	r3, r1, r3
 8002040:	1ad3      	subs	r3, r2, r3
 8002042:	00db      	lsls	r3, r3, #3
 8002044:	3332      	adds	r3, #50	; 0x32
 8002046:	4a08      	ldr	r2, [pc, #32]	; (8002068 <UART_SetConfig+0x2d4>)
 8002048:	fba2 2303 	umull	r2, r3, r2, r3
 800204c:	095b      	lsrs	r3, r3, #5
 800204e:	f003 0207 	and.w	r2, r3, #7
 8002052:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4422      	add	r2, r4
 800205a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800205c:	e105      	b.n	800226a <UART_SetConfig+0x4d6>
 800205e:	bf00      	nop
 8002060:	40011000 	.word	0x40011000
 8002064:	40011400 	.word	0x40011400
 8002068:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800206c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002070:	2200      	movs	r2, #0
 8002072:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002076:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800207a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800207e:	4642      	mov	r2, r8
 8002080:	464b      	mov	r3, r9
 8002082:	1891      	adds	r1, r2, r2
 8002084:	6239      	str	r1, [r7, #32]
 8002086:	415b      	adcs	r3, r3
 8002088:	627b      	str	r3, [r7, #36]	; 0x24
 800208a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800208e:	4641      	mov	r1, r8
 8002090:	1854      	adds	r4, r2, r1
 8002092:	4649      	mov	r1, r9
 8002094:	eb43 0501 	adc.w	r5, r3, r1
 8002098:	f04f 0200 	mov.w	r2, #0
 800209c:	f04f 0300 	mov.w	r3, #0
 80020a0:	00eb      	lsls	r3, r5, #3
 80020a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80020a6:	00e2      	lsls	r2, r4, #3
 80020a8:	4614      	mov	r4, r2
 80020aa:	461d      	mov	r5, r3
 80020ac:	4643      	mov	r3, r8
 80020ae:	18e3      	adds	r3, r4, r3
 80020b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80020b4:	464b      	mov	r3, r9
 80020b6:	eb45 0303 	adc.w	r3, r5, r3
 80020ba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80020be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	2200      	movs	r2, #0
 80020c6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80020ca:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80020ce:	f04f 0200 	mov.w	r2, #0
 80020d2:	f04f 0300 	mov.w	r3, #0
 80020d6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80020da:	4629      	mov	r1, r5
 80020dc:	008b      	lsls	r3, r1, #2
 80020de:	4621      	mov	r1, r4
 80020e0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80020e4:	4621      	mov	r1, r4
 80020e6:	008a      	lsls	r2, r1, #2
 80020e8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80020ec:	f7fe f87e 	bl	80001ec <__aeabi_uldivmod>
 80020f0:	4602      	mov	r2, r0
 80020f2:	460b      	mov	r3, r1
 80020f4:	4b60      	ldr	r3, [pc, #384]	; (8002278 <UART_SetConfig+0x4e4>)
 80020f6:	fba3 2302 	umull	r2, r3, r3, r2
 80020fa:	095b      	lsrs	r3, r3, #5
 80020fc:	011c      	lsls	r4, r3, #4
 80020fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002102:	2200      	movs	r2, #0
 8002104:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002108:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800210c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002110:	4642      	mov	r2, r8
 8002112:	464b      	mov	r3, r9
 8002114:	1891      	adds	r1, r2, r2
 8002116:	61b9      	str	r1, [r7, #24]
 8002118:	415b      	adcs	r3, r3
 800211a:	61fb      	str	r3, [r7, #28]
 800211c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002120:	4641      	mov	r1, r8
 8002122:	1851      	adds	r1, r2, r1
 8002124:	6139      	str	r1, [r7, #16]
 8002126:	4649      	mov	r1, r9
 8002128:	414b      	adcs	r3, r1
 800212a:	617b      	str	r3, [r7, #20]
 800212c:	f04f 0200 	mov.w	r2, #0
 8002130:	f04f 0300 	mov.w	r3, #0
 8002134:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002138:	4659      	mov	r1, fp
 800213a:	00cb      	lsls	r3, r1, #3
 800213c:	4651      	mov	r1, sl
 800213e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002142:	4651      	mov	r1, sl
 8002144:	00ca      	lsls	r2, r1, #3
 8002146:	4610      	mov	r0, r2
 8002148:	4619      	mov	r1, r3
 800214a:	4603      	mov	r3, r0
 800214c:	4642      	mov	r2, r8
 800214e:	189b      	adds	r3, r3, r2
 8002150:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002154:	464b      	mov	r3, r9
 8002156:	460a      	mov	r2, r1
 8002158:	eb42 0303 	adc.w	r3, r2, r3
 800215c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002160:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	2200      	movs	r2, #0
 8002168:	67bb      	str	r3, [r7, #120]	; 0x78
 800216a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800216c:	f04f 0200 	mov.w	r2, #0
 8002170:	f04f 0300 	mov.w	r3, #0
 8002174:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002178:	4649      	mov	r1, r9
 800217a:	008b      	lsls	r3, r1, #2
 800217c:	4641      	mov	r1, r8
 800217e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002182:	4641      	mov	r1, r8
 8002184:	008a      	lsls	r2, r1, #2
 8002186:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800218a:	f7fe f82f 	bl	80001ec <__aeabi_uldivmod>
 800218e:	4602      	mov	r2, r0
 8002190:	460b      	mov	r3, r1
 8002192:	4b39      	ldr	r3, [pc, #228]	; (8002278 <UART_SetConfig+0x4e4>)
 8002194:	fba3 1302 	umull	r1, r3, r3, r2
 8002198:	095b      	lsrs	r3, r3, #5
 800219a:	2164      	movs	r1, #100	; 0x64
 800219c:	fb01 f303 	mul.w	r3, r1, r3
 80021a0:	1ad3      	subs	r3, r2, r3
 80021a2:	011b      	lsls	r3, r3, #4
 80021a4:	3332      	adds	r3, #50	; 0x32
 80021a6:	4a34      	ldr	r2, [pc, #208]	; (8002278 <UART_SetConfig+0x4e4>)
 80021a8:	fba2 2303 	umull	r2, r3, r2, r3
 80021ac:	095b      	lsrs	r3, r3, #5
 80021ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80021b2:	441c      	add	r4, r3
 80021b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80021b8:	2200      	movs	r2, #0
 80021ba:	673b      	str	r3, [r7, #112]	; 0x70
 80021bc:	677a      	str	r2, [r7, #116]	; 0x74
 80021be:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80021c2:	4642      	mov	r2, r8
 80021c4:	464b      	mov	r3, r9
 80021c6:	1891      	adds	r1, r2, r2
 80021c8:	60b9      	str	r1, [r7, #8]
 80021ca:	415b      	adcs	r3, r3
 80021cc:	60fb      	str	r3, [r7, #12]
 80021ce:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80021d2:	4641      	mov	r1, r8
 80021d4:	1851      	adds	r1, r2, r1
 80021d6:	6039      	str	r1, [r7, #0]
 80021d8:	4649      	mov	r1, r9
 80021da:	414b      	adcs	r3, r1
 80021dc:	607b      	str	r3, [r7, #4]
 80021de:	f04f 0200 	mov.w	r2, #0
 80021e2:	f04f 0300 	mov.w	r3, #0
 80021e6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80021ea:	4659      	mov	r1, fp
 80021ec:	00cb      	lsls	r3, r1, #3
 80021ee:	4651      	mov	r1, sl
 80021f0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80021f4:	4651      	mov	r1, sl
 80021f6:	00ca      	lsls	r2, r1, #3
 80021f8:	4610      	mov	r0, r2
 80021fa:	4619      	mov	r1, r3
 80021fc:	4603      	mov	r3, r0
 80021fe:	4642      	mov	r2, r8
 8002200:	189b      	adds	r3, r3, r2
 8002202:	66bb      	str	r3, [r7, #104]	; 0x68
 8002204:	464b      	mov	r3, r9
 8002206:	460a      	mov	r2, r1
 8002208:	eb42 0303 	adc.w	r3, r2, r3
 800220c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800220e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	2200      	movs	r2, #0
 8002216:	663b      	str	r3, [r7, #96]	; 0x60
 8002218:	667a      	str	r2, [r7, #100]	; 0x64
 800221a:	f04f 0200 	mov.w	r2, #0
 800221e:	f04f 0300 	mov.w	r3, #0
 8002222:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002226:	4649      	mov	r1, r9
 8002228:	008b      	lsls	r3, r1, #2
 800222a:	4641      	mov	r1, r8
 800222c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002230:	4641      	mov	r1, r8
 8002232:	008a      	lsls	r2, r1, #2
 8002234:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002238:	f7fd ffd8 	bl	80001ec <__aeabi_uldivmod>
 800223c:	4602      	mov	r2, r0
 800223e:	460b      	mov	r3, r1
 8002240:	4b0d      	ldr	r3, [pc, #52]	; (8002278 <UART_SetConfig+0x4e4>)
 8002242:	fba3 1302 	umull	r1, r3, r3, r2
 8002246:	095b      	lsrs	r3, r3, #5
 8002248:	2164      	movs	r1, #100	; 0x64
 800224a:	fb01 f303 	mul.w	r3, r1, r3
 800224e:	1ad3      	subs	r3, r2, r3
 8002250:	011b      	lsls	r3, r3, #4
 8002252:	3332      	adds	r3, #50	; 0x32
 8002254:	4a08      	ldr	r2, [pc, #32]	; (8002278 <UART_SetConfig+0x4e4>)
 8002256:	fba2 2303 	umull	r2, r3, r2, r3
 800225a:	095b      	lsrs	r3, r3, #5
 800225c:	f003 020f 	and.w	r2, r3, #15
 8002260:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4422      	add	r2, r4
 8002268:	609a      	str	r2, [r3, #8]
}
 800226a:	bf00      	nop
 800226c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002270:	46bd      	mov	sp, r7
 8002272:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002276:	bf00      	nop
 8002278:	51eb851f 	.word	0x51eb851f

0800227c <Lamp_pushSwitch>:
#endif
/*.$endskip${QP_VERSION} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^*/
/*.$define${LampSM} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv*/
/*.${LampSM::Lamp} .........................................................*/
/*.${LampSM::Lamp::pushSwitch} .............................................*/
void Lamp_pushSwitch(Lamp * const me) {
 800227c:	b580      	push	{r7, lr}
 800227e:	b084      	sub	sp, #16
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
    QEvt e;
    e.sig = (QSignal)SOFT_CLICK_SIG;
 8002284:	2304      	movs	r3, #4
 8002286:	81bb      	strh	r3, [r7, #12]
    QHSM_DISPATCH(&me->super, &e, 0 );
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	6878      	ldr	r0, [r7, #4]
 8002290:	f107 010c 	add.w	r1, r7, #12
 8002294:	2200      	movs	r2, #0
 8002296:	4798      	blx	r3
}
 8002298:	bf00      	nop
 800229a:	3710      	adds	r7, #16
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}

080022a0 <Lamp_ctor>:

/*.${LampSM::Lamp::ctor} ...................................................*/
void Lamp_ctor(Lamp * const me) {
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b082      	sub	sp, #8
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
    QHsm_ctor(&me->super, Q_STATE_CAST(&Lamp_initial));
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	4904      	ldr	r1, [pc, #16]	; (80022bc <Lamp_ctor+0x1c>)
 80022ac:	4618      	mov	r0, r3
 80022ae:	f000 f879 	bl	80023a4 <QHsm_ctor>
}
 80022b2:	bf00      	nop
 80022b4:	3708      	adds	r7, #8
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	080022c1 	.word	0x080022c1

080022c0 <Lamp_initial>:

/*.${LampSM::Lamp::SM} .....................................................*/
QState Lamp_initial(Lamp * const me, void const * const par) {
 80022c0:	b480      	push	{r7}
 80022c2:	b083      	sub	sp, #12
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
 80022c8:	6039      	str	r1, [r7, #0]
    /*.${LampSM::Lamp::SM::initial} */
    return Q_TRAN(&Lamp_LED_RED);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	4a04      	ldr	r2, [pc, #16]	; (80022e0 <Lamp_initial+0x20>)
 80022ce:	609a      	str	r2, [r3, #8]
 80022d0:	2308      	movs	r3, #8
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	370c      	adds	r7, #12
 80022d6:	46bd      	mov	sp, r7
 80022d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022dc:	4770      	bx	lr
 80022de:	bf00      	nop
 80022e0:	080022e5 	.word	0x080022e5

080022e4 <Lamp_LED_RED>:
/*.${LampSM::Lamp::SM::LED_RED} ............................................*/
QState Lamp_LED_RED(Lamp * const me, QEvt const * const e) {
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b084      	sub	sp, #16
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
 80022ec:	6039      	str	r1, [r7, #0]
    QState status_;
    switch (e->sig) {
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	881b      	ldrh	r3, [r3, #0]
 80022f2:	2b04      	cmp	r3, #4
 80022f4:	d010      	beq.n	8002318 <Lamp_LED_RED+0x34>
 80022f6:	2b04      	cmp	r3, #4
 80022f8:	dc14      	bgt.n	8002324 <Lamp_LED_RED+0x40>
 80022fa:	2b01      	cmp	r3, #1
 80022fc:	d002      	beq.n	8002304 <Lamp_LED_RED+0x20>
 80022fe:	2b02      	cmp	r3, #2
 8002300:	d005      	beq.n	800230e <Lamp_LED_RED+0x2a>
 8002302:	e00f      	b.n	8002324 <Lamp_LED_RED+0x40>
        /*.${LampSM::Lamp::SM::LED_RED} */
        case Q_ENTRY_SIG: {
            APP_RED_LED_ON();
 8002304:	f7fe f90c 	bl	8000520 <APP_RED_LED_ON>
            status_ = Q_HANDLED();
 8002308:	2303      	movs	r3, #3
 800230a:	73fb      	strb	r3, [r7, #15]
            break;
 800230c:	e010      	b.n	8002330 <Lamp_LED_RED+0x4c>
        }
        /*.${LampSM::Lamp::SM::LED_RED} */
        case Q_EXIT_SIG: {
            APP_RED_LED_OFF();
 800230e:	f7fe f913 	bl	8000538 <APP_RED_LED_OFF>
            status_ = Q_HANDLED();
 8002312:	2303      	movs	r3, #3
 8002314:	73fb      	strb	r3, [r7, #15]
            break;
 8002316:	e00b      	b.n	8002330 <Lamp_LED_RED+0x4c>
        }
        /*.${LampSM::Lamp::SM::LED_RED::SOFT_CLICK} */
        case SOFT_CLICK_SIG: {
            status_ = Q_TRAN(&Lamp_LED_GREEN);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	4a08      	ldr	r2, [pc, #32]	; (800233c <Lamp_LED_RED+0x58>)
 800231c:	609a      	str	r2, [r3, #8]
 800231e:	2308      	movs	r3, #8
 8002320:	73fb      	strb	r3, [r7, #15]
            break;
 8002322:	e005      	b.n	8002330 <Lamp_LED_RED+0x4c>
        }
        default: {
            status_ = Q_SUPER(&QHsm_top);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	4a06      	ldr	r2, [pc, #24]	; (8002340 <Lamp_LED_RED+0x5c>)
 8002328:	609a      	str	r2, [r3, #8]
 800232a:	2300      	movs	r3, #0
 800232c:	73fb      	strb	r3, [r7, #15]
            break;
 800232e:	bf00      	nop
        }
    }
    return status_;
 8002330:	7bfb      	ldrb	r3, [r7, #15]
}
 8002332:	4618      	mov	r0, r3
 8002334:	3710      	adds	r7, #16
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	08002345 	.word	0x08002345
 8002340:	080023d5 	.word	0x080023d5

08002344 <Lamp_LED_GREEN>:
/*.${LampSM::Lamp::SM::LED_GREEN} ..........................................*/
QState Lamp_LED_GREEN(Lamp * const me, QEvt const * const e) {
 8002344:	b580      	push	{r7, lr}
 8002346:	b084      	sub	sp, #16
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
 800234c:	6039      	str	r1, [r7, #0]
    QState status_;
    switch (e->sig) {
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	881b      	ldrh	r3, [r3, #0]
 8002352:	2b04      	cmp	r3, #4
 8002354:	d010      	beq.n	8002378 <Lamp_LED_GREEN+0x34>
 8002356:	2b04      	cmp	r3, #4
 8002358:	dc14      	bgt.n	8002384 <Lamp_LED_GREEN+0x40>
 800235a:	2b01      	cmp	r3, #1
 800235c:	d002      	beq.n	8002364 <Lamp_LED_GREEN+0x20>
 800235e:	2b02      	cmp	r3, #2
 8002360:	d005      	beq.n	800236e <Lamp_LED_GREEN+0x2a>
 8002362:	e00f      	b.n	8002384 <Lamp_LED_GREEN+0x40>
        /*.${LampSM::Lamp::SM::LED_GREEN} */
        case Q_ENTRY_SIG: {
            APP_GREEN_LED_ON();
 8002364:	f7fe f8c4 	bl	80004f0 <APP_GREEN_LED_ON>
            status_ = Q_HANDLED();
 8002368:	2303      	movs	r3, #3
 800236a:	73fb      	strb	r3, [r7, #15]
            break;
 800236c:	e010      	b.n	8002390 <Lamp_LED_GREEN+0x4c>
        }
        /*.${LampSM::Lamp::SM::LED_GREEN} */
        case Q_EXIT_SIG: {
            APP_GREEN_LED_OFF();
 800236e:	f7fe f8cb 	bl	8000508 <APP_GREEN_LED_OFF>
            status_ = Q_HANDLED();
 8002372:	2303      	movs	r3, #3
 8002374:	73fb      	strb	r3, [r7, #15]
            break;
 8002376:	e00b      	b.n	8002390 <Lamp_LED_GREEN+0x4c>
        }
        /*.${LampSM::Lamp::SM::LED_GREEN::SOFT_CLICK} */
        case SOFT_CLICK_SIG: {
            status_ = Q_TRAN(&Lamp_LED_RED);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	4a08      	ldr	r2, [pc, #32]	; (800239c <Lamp_LED_GREEN+0x58>)
 800237c:	609a      	str	r2, [r3, #8]
 800237e:	2308      	movs	r3, #8
 8002380:	73fb      	strb	r3, [r7, #15]
            break;
 8002382:	e005      	b.n	8002390 <Lamp_LED_GREEN+0x4c>
        }
        default: {
            status_ = Q_SUPER(&QHsm_top);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	4a06      	ldr	r2, [pc, #24]	; (80023a0 <Lamp_LED_GREEN+0x5c>)
 8002388:	609a      	str	r2, [r3, #8]
 800238a:	2300      	movs	r3, #0
 800238c:	73fb      	strb	r3, [r7, #15]
            break;
 800238e:	bf00      	nop
        }
    }
    return status_;
 8002390:	7bfb      	ldrb	r3, [r7, #15]
}
 8002392:	4618      	mov	r0, r3
 8002394:	3710      	adds	r7, #16
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}
 800239a:	bf00      	nop
 800239c:	080022e5 	.word	0x080022e5
 80023a0:	080023d5 	.word	0x080023d5

080023a4 <QHsm_ctor>:
}

/*${QEP::QHsm::ctor} .......................................................*/
void QHsm_ctor(QHsm * const me,
    QStateHandler initial)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b083      	sub	sp, #12
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
 80023ac:	6039      	str	r1, [r7, #0]
        &QHsm_dispatch_
    #ifdef Q_SPY
        ,&QHsm_getStateHandler_
    #endif
    };
    me->vptr      = &vtable;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	4a06      	ldr	r2, [pc, #24]	; (80023cc <QHsm_ctor+0x28>)
 80023b2:	601a      	str	r2, [r3, #0]
    me->state.fun = Q_STATE_CAST(&QHsm_top);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	4a06      	ldr	r2, [pc, #24]	; (80023d0 <QHsm_ctor+0x2c>)
 80023b8:	605a      	str	r2, [r3, #4]
    me->temp.fun  = initial;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	683a      	ldr	r2, [r7, #0]
 80023be:	609a      	str	r2, [r3, #8]
}
 80023c0:	bf00      	nop
 80023c2:	370c      	adds	r7, #12
 80023c4:	46bd      	mov	sp, r7
 80023c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ca:	4770      	bx	lr
 80023cc:	080028f4 	.word	0x080028f4
 80023d0:	080023d5 	.word	0x080023d5

080023d4 <QHsm_top>:

/*${QEP::QHsm::top} ........................................................*/
QState QHsm_top(QHsm const * const me,
    QEvt const * const e)
{
 80023d4:	b480      	push	{r7}
 80023d6:	b083      	sub	sp, #12
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
 80023dc:	6039      	str	r1, [r7, #0]
    Q_UNUSED_PAR(me);
    Q_UNUSED_PAR(e);
    return Q_RET_IGNORED; /* the top state ignores all events */
 80023de:	2304      	movs	r3, #4
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	370c      	adds	r7, #12
 80023e4:	46bd      	mov	sp, r7
 80023e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ea:	4770      	bx	lr

080023ec <QHsm_init_>:

/*${QEP::QHsm::init_} ......................................................*/
void QHsm_init_(QHsm * const me,
    void const * const e,
    uint_fast8_t const qs_id)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b08e      	sub	sp, #56	; 0x38
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	60f8      	str	r0, [r7, #12]
 80023f4:	60b9      	str	r1, [r7, #8]
 80023f6:	607a      	str	r2, [r7, #4]
    #ifndef Q_SPY
    (void)qs_id; /* unused parameter */
    #endif

    QStateHandler t = me->state.fun;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	637b      	str	r3, [r7, #52]	; 0x34

    /*! @pre the virtual pointer must be initialized, the top-most initial
    * transition must be initialized, and the initial transition must not
    * be taken yet.
    */
    Q_REQUIRE_ID(200, (me->vptr != (struct QHsmVtable *)0)
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d007      	beq.n	8002416 <QHsm_init_+0x2a>
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	689b      	ldr	r3, [r3, #8]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d003      	beq.n	8002416 <QHsm_init_+0x2a>
 800240e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002410:	4a33      	ldr	r2, [pc, #204]	; (80024e0 <QHsm_init_+0xf4>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d003      	beq.n	800241e <QHsm_init_+0x32>
 8002416:	21c8      	movs	r1, #200	; 0xc8
 8002418:	4832      	ldr	r0, [pc, #200]	; (80024e4 <QHsm_init_+0xf8>)
 800241a:	f7fe fbb1 	bl	8000b80 <Q_onAssert>
                      && (me->temp.fun != Q_STATE_CAST(0))
                      && (t == Q_STATE_CAST(&QHsm_top)));

    /* execute the top-most initial tran. */
    QState r = (*me->temp.fun)(me, Q_EVT_CAST(QEvt));
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	689b      	ldr	r3, [r3, #8]
 8002422:	68b9      	ldr	r1, [r7, #8]
 8002424:	68f8      	ldr	r0, [r7, #12]
 8002426:	4798      	blx	r3
 8002428:	4603      	mov	r3, r0
 800242a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* the top-most initial transition must be taken */
    Q_ASSERT_ID(210, r == Q_RET_TRAN);
 800242e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002432:	2b08      	cmp	r3, #8
 8002434:	d003      	beq.n	800243e <QHsm_init_+0x52>
 8002436:	21d2      	movs	r1, #210	; 0xd2
 8002438:	482a      	ldr	r0, [pc, #168]	; (80024e4 <QHsm_init_+0xf8>)
 800243a:	f7fe fba1 	bl	8000b80 <Q_onAssert>
    QS_END_PRE_()

    /* drill down into the state hierarchy with initial transitions... */
    do {
        QStateHandler path[QHSM_MAX_NEST_DEPTH_]; /* tran entry path array */
        int_fast8_t ip = 0; /* tran entry path index */
 800243e:	2300      	movs	r3, #0
 8002440:	633b      	str	r3, [r7, #48]	; 0x30

        path[0] = me->temp.fun;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	617b      	str	r3, [r7, #20]
        (void)QEP_TRIG_(me->temp.fun, QEP_EMPTY_SIG_);
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	689b      	ldr	r3, [r3, #8]
 800244c:	4926      	ldr	r1, [pc, #152]	; (80024e8 <QHsm_init_+0xfc>)
 800244e:	68f8      	ldr	r0, [r7, #12]
 8002450:	4798      	blx	r3
        while (me->temp.fun != t) {
 8002452:	e016      	b.n	8002482 <QHsm_init_+0x96>
            ++ip;
 8002454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002456:	3301      	adds	r3, #1
 8002458:	633b      	str	r3, [r7, #48]	; 0x30
            Q_ASSERT_ID(220, ip < QHSM_MAX_NEST_DEPTH_);
 800245a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800245c:	2b05      	cmp	r3, #5
 800245e:	dd03      	ble.n	8002468 <QHsm_init_+0x7c>
 8002460:	21dc      	movs	r1, #220	; 0xdc
 8002462:	4820      	ldr	r0, [pc, #128]	; (80024e4 <QHsm_init_+0xf8>)
 8002464:	f7fe fb8c 	bl	8000b80 <Q_onAssert>
            path[ip] = me->temp.fun;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	689a      	ldr	r2, [r3, #8]
 800246c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800246e:	009b      	lsls	r3, r3, #2
 8002470:	3338      	adds	r3, #56	; 0x38
 8002472:	443b      	add	r3, r7
 8002474:	f843 2c24 	str.w	r2, [r3, #-36]
            (void)QEP_TRIG_(me->temp.fun, QEP_EMPTY_SIG_);
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	689b      	ldr	r3, [r3, #8]
 800247c:	491a      	ldr	r1, [pc, #104]	; (80024e8 <QHsm_init_+0xfc>)
 800247e:	68f8      	ldr	r0, [r7, #12]
 8002480:	4798      	blx	r3
        while (me->temp.fun != t) {
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	689b      	ldr	r3, [r3, #8]
 8002486:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002488:	429a      	cmp	r2, r3
 800248a:	d1e3      	bne.n	8002454 <QHsm_init_+0x68>
        }
        me->temp.fun = path[0];
 800248c:	697a      	ldr	r2, [r7, #20]
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	609a      	str	r2, [r3, #8]

        /* nested initial transition, drill into the target hierarchy... */
        do {
            QEP_ENTER_(path[ip], qs_id); /* enter path[ip] */
 8002492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002494:	009b      	lsls	r3, r3, #2
 8002496:	3338      	adds	r3, #56	; 0x38
 8002498:	443b      	add	r3, r7
 800249a:	f853 3c24 	ldr.w	r3, [r3, #-36]
 800249e:	4913      	ldr	r1, [pc, #76]	; (80024ec <QHsm_init_+0x100>)
 80024a0:	68f8      	ldr	r0, [r7, #12]
 80024a2:	4798      	blx	r3
            --ip;
 80024a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024a6:	3b01      	subs	r3, #1
 80024a8:	633b      	str	r3, [r7, #48]	; 0x30
        } while (ip >= 0);
 80024aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	daf0      	bge.n	8002492 <QHsm_init_+0xa6>

        t = path[0]; /* current state becomes the new source */
 80024b0:	697b      	ldr	r3, [r7, #20]
 80024b2:	637b      	str	r3, [r7, #52]	; 0x34

        r = QEP_TRIG_(t, Q_INIT_SIG); /* execute initial transition */
 80024b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024b6:	490e      	ldr	r1, [pc, #56]	; (80024f0 <QHsm_init_+0x104>)
 80024b8:	68f8      	ldr	r0, [r7, #12]
 80024ba:	4798      	blx	r3
 80024bc:	4603      	mov	r3, r0
 80024be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                QS_FUN_PRE_(me->temp.fun); /* target of the initial tran. */
            QS_END_PRE_()
        }
    #endif /* Q_SPY */

    } while (r == Q_RET_TRAN);
 80024c2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80024c6:	2b08      	cmp	r3, #8
 80024c8:	d0b9      	beq.n	800243e <QHsm_init_+0x52>
        QS_TIME_PRE_();    /* time stamp */
        QS_OBJ_PRE_(me);   /* this state machine object */
        QS_FUN_PRE_(t);    /* the new active state */
    QS_END_PRE_()

    me->state.fun = t; /* change the current active state */
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80024ce:	605a      	str	r2, [r3, #4]
    me->temp.fun  = t; /* mark the configuration as stable */
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80024d4:	609a      	str	r2, [r3, #8]
}
 80024d6:	bf00      	nop
 80024d8:	3738      	adds	r7, #56	; 0x38
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}
 80024de:	bf00      	nop
 80024e0:	080023d5 	.word	0x080023d5
 80024e4:	080028dc 	.word	0x080028dc
 80024e8:	080028e4 	.word	0x080028e4
 80024ec:	080028e8 	.word	0x080028e8
 80024f0:	080028f0 	.word	0x080028f0

080024f4 <QHsm_dispatch_>:

/*${QEP::QHsm::dispatch_} ..................................................*/
void QHsm_dispatch_(QHsm * const me,
    QEvt const * const e,
    uint_fast8_t const qs_id)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b08e      	sub	sp, #56	; 0x38
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	60f8      	str	r0, [r7, #12]
 80024fc:	60b9      	str	r1, [r7, #8]
 80024fe:	607a      	str	r2, [r7, #4]
    Q_UNUSED_PAR(qs_id); /* unused when Q_SPY undefined */

    QStateHandler t = me->state.fun;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	637b      	str	r3, [r7, #52]	; 0x34
    QS_CRIT_STAT_

    /*! @pre the current state must be initialized and
    * the state configuration must be stable
    */
    Q_REQUIRE_ID(400, (t != Q_STATE_CAST(0))
 8002506:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002508:	2b00      	cmp	r3, #0
 800250a:	d004      	beq.n	8002516 <QHsm_dispatch_+0x22>
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	689b      	ldr	r3, [r3, #8]
 8002510:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002512:	429a      	cmp	r2, r3
 8002514:	d004      	beq.n	8002520 <QHsm_dispatch_+0x2c>
 8002516:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800251a:	4852      	ldr	r0, [pc, #328]	; (8002664 <QHsm_dispatch_+0x170>)
 800251c:	f7fe fb30 	bl	8000b80 <Q_onAssert>

    QStateHandler s;
    QState r;
    /* process the event hierarchically... */
    do {
        s = me->temp.fun;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	689b      	ldr	r3, [r3, #8]
 8002524:	62bb      	str	r3, [r7, #40]	; 0x28
        r = (*s)(me, e); /* invoke state handler s */
 8002526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002528:	68b9      	ldr	r1, [r7, #8]
 800252a:	68f8      	ldr	r0, [r7, #12]
 800252c:	4798      	blx	r3
 800252e:	4603      	mov	r3, r0
 8002530:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

        if (r == Q_RET_UNHANDLED) { /* unhandled due to a guard? */
 8002534:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002538:	2b02      	cmp	r3, #2
 800253a:	d106      	bne.n	800254a <QHsm_dispatch_+0x56>
                QS_SIG_PRE_(e->sig); /* the signal of the event */
                QS_OBJ_PRE_(me);     /* this state machine object */
                QS_FUN_PRE_(s);      /* the current state */
            QS_END_PRE_()

            r = QEP_TRIG_(s, QEP_EMPTY_SIG_); /* find superstate of s */
 800253c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800253e:	494a      	ldr	r1, [pc, #296]	; (8002668 <QHsm_dispatch_+0x174>)
 8002540:	68f8      	ldr	r0, [r7, #12]
 8002542:	4798      	blx	r3
 8002544:	4603      	mov	r3, r0
 8002546:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        }
    } while (r == Q_RET_SUPER);
 800254a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800254e:	2b00      	cmp	r3, #0
 8002550:	d0e6      	beq.n	8002520 <QHsm_dispatch_+0x2c>

    /* regular transition taken? */
    /*! @tr{RQP120E} */
    if (r >= Q_RET_TRAN) {
 8002552:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002556:	2b07      	cmp	r3, #7
 8002558:	d97a      	bls.n	8002650 <QHsm_dispatch_+0x15c>
        QStateHandler path[QHSM_MAX_NEST_DEPTH_];

        path[0] = me->temp.fun; /* save the target of the transition */
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	689b      	ldr	r3, [r3, #8]
 800255e:	613b      	str	r3, [r7, #16]
        path[1] = t;
 8002560:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002562:	617b      	str	r3, [r7, #20]
        path[2] = s;
 8002564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002566:	61bb      	str	r3, [r7, #24]

        /* exit current state to transition source s... */
        /*! @tr{RQP120C} */
        for (; t != s; t = me->temp.fun) {
 8002568:	e00d      	b.n	8002586 <QHsm_dispatch_+0x92>
            if (QEP_TRIG_(t, Q_EXIT_SIG) == Q_RET_HANDLED) {
 800256a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800256c:	493f      	ldr	r1, [pc, #252]	; (800266c <QHsm_dispatch_+0x178>)
 800256e:	68f8      	ldr	r0, [r7, #12]
 8002570:	4798      	blx	r3
 8002572:	4603      	mov	r3, r0
 8002574:	2b03      	cmp	r3, #3
 8002576:	d103      	bne.n	8002580 <QHsm_dispatch_+0x8c>
                    QS_OBJ_PRE_(me);  /* this state machine object */
                    QS_FUN_PRE_(t);   /* the exited state */
                QS_END_PRE_()

                /* find superstate of t */
                (void)QEP_TRIG_(t, QEP_EMPTY_SIG_);
 8002578:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800257a:	493b      	ldr	r1, [pc, #236]	; (8002668 <QHsm_dispatch_+0x174>)
 800257c:	68f8      	ldr	r0, [r7, #12]
 800257e:	4798      	blx	r3
        for (; t != s; t = me->temp.fun) {
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	689b      	ldr	r3, [r3, #8]
 8002584:	637b      	str	r3, [r7, #52]	; 0x34
 8002586:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800258a:	429a      	cmp	r2, r3
 800258c:	d1ed      	bne.n	800256a <QHsm_dispatch_+0x76>
            }
        }

        int_fast8_t ip = QHsm_tran_(me, path, qs_id); /* the HSM transition */
 800258e:	f107 0310 	add.w	r3, r7, #16
 8002592:	687a      	ldr	r2, [r7, #4]
 8002594:	4619      	mov	r1, r3
 8002596:	68f8      	ldr	r0, [r7, #12]
 8002598:	f000 f86e 	bl	8002678 <QHsm_tran_>
 800259c:	62f8      	str	r0, [r7, #44]	; 0x2c
        }
    #endif /* Q_SPY */

        /* execute state entry actions in the desired order... */
        /*! @tr{RQP120B} */
        for (; ip >= 0; --ip) {
 800259e:	e00b      	b.n	80025b8 <QHsm_dispatch_+0xc4>
            QEP_ENTER_(path[ip], qs_id);  /* enter path[ip] */
 80025a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025a2:	009b      	lsls	r3, r3, #2
 80025a4:	3338      	adds	r3, #56	; 0x38
 80025a6:	443b      	add	r3, r7
 80025a8:	f853 3c28 	ldr.w	r3, [r3, #-40]
 80025ac:	4930      	ldr	r1, [pc, #192]	; (8002670 <QHsm_dispatch_+0x17c>)
 80025ae:	68f8      	ldr	r0, [r7, #12]
 80025b0:	4798      	blx	r3
        for (; ip >= 0; --ip) {
 80025b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025b4:	3b01      	subs	r3, #1
 80025b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80025b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	daf0      	bge.n	80025a0 <QHsm_dispatch_+0xac>
        }

        t = path[0];      /* stick the target into register */
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	637b      	str	r3, [r7, #52]	; 0x34
        me->temp.fun = t; /* update the next state */
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80025c6:	609a      	str	r2, [r3, #8]

        /* while nested initial transition... */
        /*! @tr{RQP120I} */
        while (QEP_TRIG_(t, Q_INIT_SIG) == Q_RET_TRAN) {
 80025c8:	e03b      	b.n	8002642 <QHsm_dispatch_+0x14e>
                QS_OBJ_PRE_(me);           /* this state machine object */
                QS_FUN_PRE_(t);            /* the source (pseudo)state */
                QS_FUN_PRE_(me->temp.fun); /* the target of the transition */
            QS_END_PRE_()

            ip = 0;
 80025ca:	2300      	movs	r3, #0
 80025cc:	62fb      	str	r3, [r7, #44]	; 0x2c
            path[0] = me->temp.fun;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	689b      	ldr	r3, [r3, #8]
 80025d2:	613b      	str	r3, [r7, #16]

            /* find superstate */
            (void)QEP_TRIG_(me->temp.fun, QEP_EMPTY_SIG_);
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	689b      	ldr	r3, [r3, #8]
 80025d8:	4923      	ldr	r1, [pc, #140]	; (8002668 <QHsm_dispatch_+0x174>)
 80025da:	68f8      	ldr	r0, [r7, #12]
 80025dc:	4798      	blx	r3

            while (me->temp.fun != t) {
 80025de:	e00f      	b.n	8002600 <QHsm_dispatch_+0x10c>
                ++ip;
 80025e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025e2:	3301      	adds	r3, #1
 80025e4:	62fb      	str	r3, [r7, #44]	; 0x2c
                path[ip] = me->temp.fun;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	689a      	ldr	r2, [r3, #8]
 80025ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025ec:	009b      	lsls	r3, r3, #2
 80025ee:	3338      	adds	r3, #56	; 0x38
 80025f0:	443b      	add	r3, r7
 80025f2:	f843 2c28 	str.w	r2, [r3, #-40]
                /* find superstate */
                (void)QEP_TRIG_(me->temp.fun, QEP_EMPTY_SIG_);
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	491b      	ldr	r1, [pc, #108]	; (8002668 <QHsm_dispatch_+0x174>)
 80025fc:	68f8      	ldr	r0, [r7, #12]
 80025fe:	4798      	blx	r3
            while (me->temp.fun != t) {
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	689b      	ldr	r3, [r3, #8]
 8002604:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002606:	429a      	cmp	r2, r3
 8002608:	d1ea      	bne.n	80025e0 <QHsm_dispatch_+0xec>
            }
            me->temp.fun = path[0];
 800260a:	693a      	ldr	r2, [r7, #16]
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	609a      	str	r2, [r3, #8]

            /* entry path must not overflow */
            Q_ASSERT_ID(410, ip < QHSM_MAX_NEST_DEPTH_);
 8002610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002612:	2b05      	cmp	r3, #5
 8002614:	dd04      	ble.n	8002620 <QHsm_dispatch_+0x12c>
 8002616:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 800261a:	4812      	ldr	r0, [pc, #72]	; (8002664 <QHsm_dispatch_+0x170>)
 800261c:	f7fe fab0 	bl	8000b80 <Q_onAssert>

            /* retrace the entry path in reverse (correct) order... */
            do {
                QEP_ENTER_(path[ip], qs_id); /* enter path[ip] */
 8002620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002622:	009b      	lsls	r3, r3, #2
 8002624:	3338      	adds	r3, #56	; 0x38
 8002626:	443b      	add	r3, r7
 8002628:	f853 3c28 	ldr.w	r3, [r3, #-40]
 800262c:	4910      	ldr	r1, [pc, #64]	; (8002670 <QHsm_dispatch_+0x17c>)
 800262e:	68f8      	ldr	r0, [r7, #12]
 8002630:	4798      	blx	r3
                --ip;
 8002632:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002634:	3b01      	subs	r3, #1
 8002636:	62fb      	str	r3, [r7, #44]	; 0x2c
            } while (ip >= 0);
 8002638:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800263a:	2b00      	cmp	r3, #0
 800263c:	daf0      	bge.n	8002620 <QHsm_dispatch_+0x12c>

            t = path[0]; /* current state becomes the new source */
 800263e:	693b      	ldr	r3, [r7, #16]
 8002640:	637b      	str	r3, [r7, #52]	; 0x34
        while (QEP_TRIG_(t, Q_INIT_SIG) == Q_RET_TRAN) {
 8002642:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002644:	490b      	ldr	r1, [pc, #44]	; (8002674 <QHsm_dispatch_+0x180>)
 8002646:	68f8      	ldr	r0, [r7, #12]
 8002648:	4798      	blx	r3
 800264a:	4603      	mov	r3, r0
 800264c:	2b08      	cmp	r3, #8
 800264e:	d0bc      	beq.n	80025ca <QHsm_dispatch_+0xd6>
        QS_END_PRE_()

    }
    #endif /* Q_SPY */

    me->state.fun = t; /* change the current active state */
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002654:	605a      	str	r2, [r3, #4]
    me->temp.fun  = t; /* mark the configuration as stable */
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800265a:	609a      	str	r2, [r3, #8]
}
 800265c:	bf00      	nop
 800265e:	3738      	adds	r7, #56	; 0x38
 8002660:	46bd      	mov	sp, r7
 8002662:	bd80      	pop	{r7, pc}
 8002664:	080028dc 	.word	0x080028dc
 8002668:	080028e4 	.word	0x080028e4
 800266c:	080028ec 	.word	0x080028ec
 8002670:	080028e8 	.word	0x080028e8
 8002674:	080028f0 	.word	0x080028f0

08002678 <QHsm_tran_>:

/*${QEP::QHsm::tran_} ......................................................*/
int_fast8_t QHsm_tran_(QHsm * const me,
    QStateHandler path[QHSM_MAX_NEST_DEPTH_],
    uint_fast8_t const qs_id)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b08a      	sub	sp, #40	; 0x28
 800267c:	af00      	add	r7, sp, #0
 800267e:	60f8      	str	r0, [r7, #12]
 8002680:	60b9      	str	r1, [r7, #8]
 8002682:	607a      	str	r2, [r7, #4]
    Q_UNUSED_PAR(qs_id); // unused when Q_SPY undefined

    int_fast8_t ip = -1; /* transition entry path index */
 8002684:	f04f 33ff 	mov.w	r3, #4294967295
 8002688:	627b      	str	r3, [r7, #36]	; 0x24
    QStateHandler t = path[0];
 800268a:	68bb      	ldr	r3, [r7, #8]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	623b      	str	r3, [r7, #32]
    QStateHandler const s = path[2];
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	689b      	ldr	r3, [r3, #8]
 8002694:	617b      	str	r3, [r7, #20]
    QS_CRIT_STAT_

    /* (a) check source==target (transition to self)... */
    if (s == t) {
 8002696:	697a      	ldr	r2, [r7, #20]
 8002698:	6a3b      	ldr	r3, [r7, #32]
 800269a:	429a      	cmp	r2, r3
 800269c:	d106      	bne.n	80026ac <QHsm_tran_+0x34>
        QEP_EXIT_(s, qs_id); /* exit the source */
 800269e:	697b      	ldr	r3, [r7, #20]
 80026a0:	4964      	ldr	r1, [pc, #400]	; (8002834 <QHsm_tran_+0x1bc>)
 80026a2:	68f8      	ldr	r0, [r7, #12]
 80026a4:	4798      	blx	r3
        ip = 0; /* enter the target */
 80026a6:	2300      	movs	r3, #0
 80026a8:	627b      	str	r3, [r7, #36]	; 0x24
 80026aa:	e0be      	b.n	800282a <QHsm_tran_+0x1b2>
    }
    else {
        /* find superstate of target */
        (void)QEP_TRIG_(t, QEP_EMPTY_SIG_);
 80026ac:	6a3b      	ldr	r3, [r7, #32]
 80026ae:	4962      	ldr	r1, [pc, #392]	; (8002838 <QHsm_tran_+0x1c0>)
 80026b0:	68f8      	ldr	r0, [r7, #12]
 80026b2:	4798      	blx	r3

        t = me->temp.fun;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	689b      	ldr	r3, [r3, #8]
 80026b8:	623b      	str	r3, [r7, #32]

        /* (b) check source==target->super... */
        if (s == t) {
 80026ba:	697a      	ldr	r2, [r7, #20]
 80026bc:	6a3b      	ldr	r3, [r7, #32]
 80026be:	429a      	cmp	r2, r3
 80026c0:	d102      	bne.n	80026c8 <QHsm_tran_+0x50>
            ip = 0; /* enter the target */
 80026c2:	2300      	movs	r3, #0
 80026c4:	627b      	str	r3, [r7, #36]	; 0x24
 80026c6:	e0b0      	b.n	800282a <QHsm_tran_+0x1b2>
        }
        else {
            /* find superstate of src */
            (void)QEP_TRIG_(s, QEP_EMPTY_SIG_);
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	495b      	ldr	r1, [pc, #364]	; (8002838 <QHsm_tran_+0x1c0>)
 80026cc:	68f8      	ldr	r0, [r7, #12]
 80026ce:	4798      	blx	r3

            /* (c) check source->super==target->super... */
            if (me->temp.fun == t) {
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	6a3a      	ldr	r2, [r7, #32]
 80026d6:	429a      	cmp	r2, r3
 80026d8:	d106      	bne.n	80026e8 <QHsm_tran_+0x70>
                QEP_EXIT_(s, qs_id); /* exit the source */
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	4955      	ldr	r1, [pc, #340]	; (8002834 <QHsm_tran_+0x1bc>)
 80026de:	68f8      	ldr	r0, [r7, #12]
 80026e0:	4798      	blx	r3
                ip = 0; /* enter the target */
 80026e2:	2300      	movs	r3, #0
 80026e4:	627b      	str	r3, [r7, #36]	; 0x24
 80026e6:	e0a0      	b.n	800282a <QHsm_tran_+0x1b2>
            }
            else {
                /* (d) check source->super==target... */
                if (me->temp.fun == path[0]) {
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	689a      	ldr	r2, [r3, #8]
 80026ec:	68bb      	ldr	r3, [r7, #8]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	429a      	cmp	r2, r3
 80026f2:	d104      	bne.n	80026fe <QHsm_tran_+0x86>
                    QEP_EXIT_(s, qs_id); /* exit the source */
 80026f4:	697b      	ldr	r3, [r7, #20]
 80026f6:	494f      	ldr	r1, [pc, #316]	; (8002834 <QHsm_tran_+0x1bc>)
 80026f8:	68f8      	ldr	r0, [r7, #12]
 80026fa:	4798      	blx	r3
 80026fc:	e095      	b.n	800282a <QHsm_tran_+0x1b2>
                }
                else {
                    /* (e) check rest of source==target->super->super..
                    * and store the entry path along the way
                    */
                    int_fast8_t iq = 0; /* indicate that LCA not found */
 80026fe:	2300      	movs	r3, #0
 8002700:	61fb      	str	r3, [r7, #28]
                    ip = 1; /* enter target and its superstate */
 8002702:	2301      	movs	r3, #1
 8002704:	627b      	str	r3, [r7, #36]	; 0x24
                    path[1] = t;      /* save the superstate of target */
 8002706:	68bb      	ldr	r3, [r7, #8]
 8002708:	3304      	adds	r3, #4
 800270a:	6a3a      	ldr	r2, [r7, #32]
 800270c:	601a      	str	r2, [r3, #0]
                    t = me->temp.fun; /* save source->super */
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	689b      	ldr	r3, [r3, #8]
 8002712:	623b      	str	r3, [r7, #32]

                    /* find target->super->super... */
                    QState r = QEP_TRIG_(path[1], QEP_EMPTY_SIG_);
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	3304      	adds	r3, #4
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4947      	ldr	r1, [pc, #284]	; (8002838 <QHsm_tran_+0x1c0>)
 800271c:	68f8      	ldr	r0, [r7, #12]
 800271e:	4798      	blx	r3
 8002720:	4603      	mov	r3, r0
 8002722:	76fb      	strb	r3, [r7, #27]
                    while (r == Q_RET_SUPER) {
 8002724:	e025      	b.n	8002772 <QHsm_tran_+0xfa>
                        ++ip;
 8002726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002728:	3301      	adds	r3, #1
 800272a:	627b      	str	r3, [r7, #36]	; 0x24
                        path[ip] = me->temp.fun; /* store the entry path */
 800272c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800272e:	009b      	lsls	r3, r3, #2
 8002730:	68ba      	ldr	r2, [r7, #8]
 8002732:	4413      	add	r3, r2
 8002734:	68fa      	ldr	r2, [r7, #12]
 8002736:	6892      	ldr	r2, [r2, #8]
 8002738:	601a      	str	r2, [r3, #0]
                        if (me->temp.fun == s) { /* is it the source? */
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	697a      	ldr	r2, [r7, #20]
 8002740:	429a      	cmp	r2, r3
 8002742:	d10f      	bne.n	8002764 <QHsm_tran_+0xec>
                            iq = 1; /* indicate that LCA found */
 8002744:	2301      	movs	r3, #1
 8002746:	61fb      	str	r3, [r7, #28]

                            /* entry path must not overflow */
                            Q_ASSERT_ID(510,
 8002748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800274a:	2b05      	cmp	r3, #5
 800274c:	dd04      	ble.n	8002758 <QHsm_tran_+0xe0>
 800274e:	f44f 71ff 	mov.w	r1, #510	; 0x1fe
 8002752:	483a      	ldr	r0, [pc, #232]	; (800283c <QHsm_tran_+0x1c4>)
 8002754:	f7fe fa14 	bl	8000b80 <Q_onAssert>
                                ip < QHSM_MAX_NEST_DEPTH_);
                            --ip; /* do not enter the source */
 8002758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800275a:	3b01      	subs	r3, #1
 800275c:	627b      	str	r3, [r7, #36]	; 0x24
                            r = Q_RET_HANDLED; /* terminate loop */
 800275e:	2303      	movs	r3, #3
 8002760:	76fb      	strb	r3, [r7, #27]
 8002762:	e006      	b.n	8002772 <QHsm_tran_+0xfa>
                        }
                         /* it is not the source, keep going up */
                        else {
                            r = QEP_TRIG_(me->temp.fun, QEP_EMPTY_SIG_);
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	689b      	ldr	r3, [r3, #8]
 8002768:	4933      	ldr	r1, [pc, #204]	; (8002838 <QHsm_tran_+0x1c0>)
 800276a:	68f8      	ldr	r0, [r7, #12]
 800276c:	4798      	blx	r3
 800276e:	4603      	mov	r3, r0
 8002770:	76fb      	strb	r3, [r7, #27]
                    while (r == Q_RET_SUPER) {
 8002772:	7efb      	ldrb	r3, [r7, #27]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d0d6      	beq.n	8002726 <QHsm_tran_+0xae>
                        }
                    }

                    /* the LCA not found yet? */
                    if (iq == 0) {
 8002778:	69fb      	ldr	r3, [r7, #28]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d155      	bne.n	800282a <QHsm_tran_+0x1b2>

                        /* entry path must not overflow */
                        Q_ASSERT_ID(520, ip < QHSM_MAX_NEST_DEPTH_);
 800277e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002780:	2b05      	cmp	r3, #5
 8002782:	dd04      	ble.n	800278e <QHsm_tran_+0x116>
 8002784:	f44f 7102 	mov.w	r1, #520	; 0x208
 8002788:	482c      	ldr	r0, [pc, #176]	; (800283c <QHsm_tran_+0x1c4>)
 800278a:	f7fe f9f9 	bl	8000b80 <Q_onAssert>

                        QEP_EXIT_(s, qs_id); /* exit the source */
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	4928      	ldr	r1, [pc, #160]	; (8002834 <QHsm_tran_+0x1bc>)
 8002792:	68f8      	ldr	r0, [r7, #12]
 8002794:	4798      	blx	r3

                        /* (f) check the rest of source->super
                        *                  == target->super->super...
                        */
                        iq = ip;
 8002796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002798:	61fb      	str	r3, [r7, #28]
                        r = Q_RET_IGNORED; /* LCA NOT found */
 800279a:	2304      	movs	r3, #4
 800279c:	76fb      	strb	r3, [r7, #27]
                        do {
                            if (t == path[iq]) { /* is this the LCA? */
 800279e:	69fb      	ldr	r3, [r7, #28]
 80027a0:	009b      	lsls	r3, r3, #2
 80027a2:	68ba      	ldr	r2, [r7, #8]
 80027a4:	4413      	add	r3, r2
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	6a3a      	ldr	r2, [r7, #32]
 80027aa:	429a      	cmp	r2, r3
 80027ac:	d108      	bne.n	80027c0 <QHsm_tran_+0x148>
                                r = Q_RET_HANDLED; /* LCA found */
 80027ae:	2303      	movs	r3, #3
 80027b0:	76fb      	strb	r3, [r7, #27]
                                ip = iq - 1; /* do not enter LCA */
 80027b2:	69fb      	ldr	r3, [r7, #28]
 80027b4:	3b01      	subs	r3, #1
 80027b6:	627b      	str	r3, [r7, #36]	; 0x24
                                iq = -1; /* cause termintion of the loop */
 80027b8:	f04f 33ff 	mov.w	r3, #4294967295
 80027bc:	61fb      	str	r3, [r7, #28]
 80027be:	e002      	b.n	80027c6 <QHsm_tran_+0x14e>
                            }
                            else {
                                --iq; /* try lower superstate of target */
 80027c0:	69fb      	ldr	r3, [r7, #28]
 80027c2:	3b01      	subs	r3, #1
 80027c4:	61fb      	str	r3, [r7, #28]
                            }
                        } while (iq >= 0);
 80027c6:	69fb      	ldr	r3, [r7, #28]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	dae8      	bge.n	800279e <QHsm_tran_+0x126>

                        /* LCA not found? */
                        if (r != Q_RET_HANDLED) {
 80027cc:	7efb      	ldrb	r3, [r7, #27]
 80027ce:	2b03      	cmp	r3, #3
 80027d0:	d02b      	beq.n	800282a <QHsm_tran_+0x1b2>
                            /* (g) check each source->super->...
                            * for each target->super...
                            */
                            r = Q_RET_IGNORED; /* keep looping */
 80027d2:	2304      	movs	r3, #4
 80027d4:	76fb      	strb	r3, [r7, #27]
                            do {
                                /* exit t unhandled? */
                                if (QEP_TRIG_(t, Q_EXIT_SIG)
 80027d6:	6a3b      	ldr	r3, [r7, #32]
 80027d8:	4916      	ldr	r1, [pc, #88]	; (8002834 <QHsm_tran_+0x1bc>)
 80027da:	68f8      	ldr	r0, [r7, #12]
 80027dc:	4798      	blx	r3
 80027de:	4603      	mov	r3, r0
 80027e0:	2b03      	cmp	r3, #3
 80027e2:	d103      	bne.n	80027ec <QHsm_tran_+0x174>
                                    QS_BEGIN_PRE_(QS_QEP_STATE_EXIT, qs_id)
                                        QS_OBJ_PRE_(me);
                                        QS_FUN_PRE_(t);
                                    QS_END_PRE_()

                                    (void)QEP_TRIG_(t, QEP_EMPTY_SIG_);
 80027e4:	6a3b      	ldr	r3, [r7, #32]
 80027e6:	4914      	ldr	r1, [pc, #80]	; (8002838 <QHsm_tran_+0x1c0>)
 80027e8:	68f8      	ldr	r0, [r7, #12]
 80027ea:	4798      	blx	r3
                                }
                                t = me->temp.fun; /* set to super of t */
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	689b      	ldr	r3, [r3, #8]
 80027f0:	623b      	str	r3, [r7, #32]
                                iq = ip;
 80027f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f4:	61fb      	str	r3, [r7, #28]
                                do {
                                    /* is this LCA? */
                                    if (t == path[iq]) {
 80027f6:	69fb      	ldr	r3, [r7, #28]
 80027f8:	009b      	lsls	r3, r3, #2
 80027fa:	68ba      	ldr	r2, [r7, #8]
 80027fc:	4413      	add	r3, r2
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	6a3a      	ldr	r2, [r7, #32]
 8002802:	429a      	cmp	r2, r3
 8002804:	d108      	bne.n	8002818 <QHsm_tran_+0x1a0>
                                        /* do not enter LCA */
                                        ip = (int_fast8_t)(iq - 1);
 8002806:	69fb      	ldr	r3, [r7, #28]
 8002808:	3b01      	subs	r3, #1
 800280a:	627b      	str	r3, [r7, #36]	; 0x24
                                        iq = -1; /* break out of inner loop */
 800280c:	f04f 33ff 	mov.w	r3, #4294967295
 8002810:	61fb      	str	r3, [r7, #28]
                                        /* break out of outer loop */
                                        r = Q_RET_HANDLED;
 8002812:	2303      	movs	r3, #3
 8002814:	76fb      	strb	r3, [r7, #27]
 8002816:	e002      	b.n	800281e <QHsm_tran_+0x1a6>
                                    }
                                    else {
                                        --iq;
 8002818:	69fb      	ldr	r3, [r7, #28]
 800281a:	3b01      	subs	r3, #1
 800281c:	61fb      	str	r3, [r7, #28]
                                    }
                                } while (iq >= 0);
 800281e:	69fb      	ldr	r3, [r7, #28]
 8002820:	2b00      	cmp	r3, #0
 8002822:	dae8      	bge.n	80027f6 <QHsm_tran_+0x17e>
                            } while (r != Q_RET_HANDLED);
 8002824:	7efb      	ldrb	r3, [r7, #27]
 8002826:	2b03      	cmp	r3, #3
 8002828:	d1d5      	bne.n	80027d6 <QHsm_tran_+0x15e>
                    }
                }
            }
        }
    }
    return ip;
 800282a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800282c:	4618      	mov	r0, r3
 800282e:	3728      	adds	r7, #40	; 0x28
 8002830:	46bd      	mov	sp, r7
 8002832:	bd80      	pop	{r7, pc}
 8002834:	080028ec 	.word	0x080028ec
 8002838:	080028e4 	.word	0x080028e4
 800283c:	080028dc 	.word	0x080028dc

08002840 <__libc_init_array>:
 8002840:	b570      	push	{r4, r5, r6, lr}
 8002842:	4d0d      	ldr	r5, [pc, #52]	; (8002878 <__libc_init_array+0x38>)
 8002844:	4c0d      	ldr	r4, [pc, #52]	; (800287c <__libc_init_array+0x3c>)
 8002846:	1b64      	subs	r4, r4, r5
 8002848:	10a4      	asrs	r4, r4, #2
 800284a:	2600      	movs	r6, #0
 800284c:	42a6      	cmp	r6, r4
 800284e:	d109      	bne.n	8002864 <__libc_init_array+0x24>
 8002850:	4d0b      	ldr	r5, [pc, #44]	; (8002880 <__libc_init_array+0x40>)
 8002852:	4c0c      	ldr	r4, [pc, #48]	; (8002884 <__libc_init_array+0x44>)
 8002854:	f000 f820 	bl	8002898 <_init>
 8002858:	1b64      	subs	r4, r4, r5
 800285a:	10a4      	asrs	r4, r4, #2
 800285c:	2600      	movs	r6, #0
 800285e:	42a6      	cmp	r6, r4
 8002860:	d105      	bne.n	800286e <__libc_init_array+0x2e>
 8002862:	bd70      	pop	{r4, r5, r6, pc}
 8002864:	f855 3b04 	ldr.w	r3, [r5], #4
 8002868:	4798      	blx	r3
 800286a:	3601      	adds	r6, #1
 800286c:	e7ee      	b.n	800284c <__libc_init_array+0xc>
 800286e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002872:	4798      	blx	r3
 8002874:	3601      	adds	r6, #1
 8002876:	e7f2      	b.n	800285e <__libc_init_array+0x1e>
 8002878:	08002904 	.word	0x08002904
 800287c:	08002904 	.word	0x08002904
 8002880:	08002904 	.word	0x08002904
 8002884:	08002908 	.word	0x08002908

08002888 <memset>:
 8002888:	4402      	add	r2, r0
 800288a:	4603      	mov	r3, r0
 800288c:	4293      	cmp	r3, r2
 800288e:	d100      	bne.n	8002892 <memset+0xa>
 8002890:	4770      	bx	lr
 8002892:	f803 1b01 	strb.w	r1, [r3], #1
 8002896:	e7f9      	b.n	800288c <memset+0x4>

08002898 <_init>:
 8002898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800289a:	bf00      	nop
 800289c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800289e:	bc08      	pop	{r3}
 80028a0:	469e      	mov	lr, r3
 80028a2:	4770      	bx	lr

080028a4 <_fini>:
 80028a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028a6:	bf00      	nop
 80028a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028aa:	bc08      	pop	{r3}
 80028ac:	469e      	mov	lr, r3
 80028ae:	4770      	bx	lr
