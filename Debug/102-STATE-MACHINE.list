
102-STATE-MACHINE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000599c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000160  08005b4c  08005b4c  00015b4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005cac  08005cac  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08005cac  08005cac  00015cac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005cb4  08005cb4  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005cb4  08005cb4  00015cb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005cb8  08005cb8  00015cb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08005cbc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020014  2**0
                  CONTENTS
 10 .bss          00012e84  20000014  20000014  00020014  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20012e98  20012e98  00020014  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 13 .debug_info   000150e0  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003386  00000000  00000000  00035124  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001258  00000000  00000000  000384b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001110  00000000  00000000  00039708  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025c58  00000000  00000000  0003a818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001532b  00000000  00000000  00060470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e4d33  00000000  00000000  0007579b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0015a4ce  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004bc0  00000000  00000000  0015a520  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000014 	.word	0x20000014
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08005b34 	.word	0x08005b34

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000018 	.word	0x20000018
 80001ec:	08005b34 	.word	0x08005b34

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <__aeabi_uldivmod>:
 8000200:	b953      	cbnz	r3, 8000218 <__aeabi_uldivmod+0x18>
 8000202:	b94a      	cbnz	r2, 8000218 <__aeabi_uldivmod+0x18>
 8000204:	2900      	cmp	r1, #0
 8000206:	bf08      	it	eq
 8000208:	2800      	cmpeq	r0, #0
 800020a:	bf1c      	itt	ne
 800020c:	f04f 31ff 	movne.w	r1, #4294967295
 8000210:	f04f 30ff 	movne.w	r0, #4294967295
 8000214:	f000 b974 	b.w	8000500 <__aeabi_idiv0>
 8000218:	f1ad 0c08 	sub.w	ip, sp, #8
 800021c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000220:	f000 f806 	bl	8000230 <__udivmoddi4>
 8000224:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000228:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800022c:	b004      	add	sp, #16
 800022e:	4770      	bx	lr

08000230 <__udivmoddi4>:
 8000230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000234:	9d08      	ldr	r5, [sp, #32]
 8000236:	4604      	mov	r4, r0
 8000238:	468e      	mov	lr, r1
 800023a:	2b00      	cmp	r3, #0
 800023c:	d14d      	bne.n	80002da <__udivmoddi4+0xaa>
 800023e:	428a      	cmp	r2, r1
 8000240:	4694      	mov	ip, r2
 8000242:	d969      	bls.n	8000318 <__udivmoddi4+0xe8>
 8000244:	fab2 f282 	clz	r2, r2
 8000248:	b152      	cbz	r2, 8000260 <__udivmoddi4+0x30>
 800024a:	fa01 f302 	lsl.w	r3, r1, r2
 800024e:	f1c2 0120 	rsb	r1, r2, #32
 8000252:	fa20 f101 	lsr.w	r1, r0, r1
 8000256:	fa0c fc02 	lsl.w	ip, ip, r2
 800025a:	ea41 0e03 	orr.w	lr, r1, r3
 800025e:	4094      	lsls	r4, r2
 8000260:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000264:	0c21      	lsrs	r1, r4, #16
 8000266:	fbbe f6f8 	udiv	r6, lr, r8
 800026a:	fa1f f78c 	uxth.w	r7, ip
 800026e:	fb08 e316 	mls	r3, r8, r6, lr
 8000272:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000276:	fb06 f107 	mul.w	r1, r6, r7
 800027a:	4299      	cmp	r1, r3
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x64>
 800027e:	eb1c 0303 	adds.w	r3, ip, r3
 8000282:	f106 30ff 	add.w	r0, r6, #4294967295
 8000286:	f080 811f 	bcs.w	80004c8 <__udivmoddi4+0x298>
 800028a:	4299      	cmp	r1, r3
 800028c:	f240 811c 	bls.w	80004c8 <__udivmoddi4+0x298>
 8000290:	3e02      	subs	r6, #2
 8000292:	4463      	add	r3, ip
 8000294:	1a5b      	subs	r3, r3, r1
 8000296:	b2a4      	uxth	r4, r4
 8000298:	fbb3 f0f8 	udiv	r0, r3, r8
 800029c:	fb08 3310 	mls	r3, r8, r0, r3
 80002a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a4:	fb00 f707 	mul.w	r7, r0, r7
 80002a8:	42a7      	cmp	r7, r4
 80002aa:	d90a      	bls.n	80002c2 <__udivmoddi4+0x92>
 80002ac:	eb1c 0404 	adds.w	r4, ip, r4
 80002b0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b4:	f080 810a 	bcs.w	80004cc <__udivmoddi4+0x29c>
 80002b8:	42a7      	cmp	r7, r4
 80002ba:	f240 8107 	bls.w	80004cc <__udivmoddi4+0x29c>
 80002be:	4464      	add	r4, ip
 80002c0:	3802      	subs	r0, #2
 80002c2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c6:	1be4      	subs	r4, r4, r7
 80002c8:	2600      	movs	r6, #0
 80002ca:	b11d      	cbz	r5, 80002d4 <__udivmoddi4+0xa4>
 80002cc:	40d4      	lsrs	r4, r2
 80002ce:	2300      	movs	r3, #0
 80002d0:	e9c5 4300 	strd	r4, r3, [r5]
 80002d4:	4631      	mov	r1, r6
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d909      	bls.n	80002f2 <__udivmoddi4+0xc2>
 80002de:	2d00      	cmp	r5, #0
 80002e0:	f000 80ef 	beq.w	80004c2 <__udivmoddi4+0x292>
 80002e4:	2600      	movs	r6, #0
 80002e6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ea:	4630      	mov	r0, r6
 80002ec:	4631      	mov	r1, r6
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	fab3 f683 	clz	r6, r3
 80002f6:	2e00      	cmp	r6, #0
 80002f8:	d14a      	bne.n	8000390 <__udivmoddi4+0x160>
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d302      	bcc.n	8000304 <__udivmoddi4+0xd4>
 80002fe:	4282      	cmp	r2, r0
 8000300:	f200 80f9 	bhi.w	80004f6 <__udivmoddi4+0x2c6>
 8000304:	1a84      	subs	r4, r0, r2
 8000306:	eb61 0303 	sbc.w	r3, r1, r3
 800030a:	2001      	movs	r0, #1
 800030c:	469e      	mov	lr, r3
 800030e:	2d00      	cmp	r5, #0
 8000310:	d0e0      	beq.n	80002d4 <__udivmoddi4+0xa4>
 8000312:	e9c5 4e00 	strd	r4, lr, [r5]
 8000316:	e7dd      	b.n	80002d4 <__udivmoddi4+0xa4>
 8000318:	b902      	cbnz	r2, 800031c <__udivmoddi4+0xec>
 800031a:	deff      	udf	#255	; 0xff
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	2a00      	cmp	r2, #0
 8000322:	f040 8092 	bne.w	800044a <__udivmoddi4+0x21a>
 8000326:	eba1 010c 	sub.w	r1, r1, ip
 800032a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032e:	fa1f fe8c 	uxth.w	lr, ip
 8000332:	2601      	movs	r6, #1
 8000334:	0c20      	lsrs	r0, r4, #16
 8000336:	fbb1 f3f7 	udiv	r3, r1, r7
 800033a:	fb07 1113 	mls	r1, r7, r3, r1
 800033e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000342:	fb0e f003 	mul.w	r0, lr, r3
 8000346:	4288      	cmp	r0, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0x12c>
 800034a:	eb1c 0101 	adds.w	r1, ip, r1
 800034e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x12a>
 8000354:	4288      	cmp	r0, r1
 8000356:	f200 80cb 	bhi.w	80004f0 <__udivmoddi4+0x2c0>
 800035a:	4643      	mov	r3, r8
 800035c:	1a09      	subs	r1, r1, r0
 800035e:	b2a4      	uxth	r4, r4
 8000360:	fbb1 f0f7 	udiv	r0, r1, r7
 8000364:	fb07 1110 	mls	r1, r7, r0, r1
 8000368:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800036c:	fb0e fe00 	mul.w	lr, lr, r0
 8000370:	45a6      	cmp	lr, r4
 8000372:	d908      	bls.n	8000386 <__udivmoddi4+0x156>
 8000374:	eb1c 0404 	adds.w	r4, ip, r4
 8000378:	f100 31ff 	add.w	r1, r0, #4294967295
 800037c:	d202      	bcs.n	8000384 <__udivmoddi4+0x154>
 800037e:	45a6      	cmp	lr, r4
 8000380:	f200 80bb 	bhi.w	80004fa <__udivmoddi4+0x2ca>
 8000384:	4608      	mov	r0, r1
 8000386:	eba4 040e 	sub.w	r4, r4, lr
 800038a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800038e:	e79c      	b.n	80002ca <__udivmoddi4+0x9a>
 8000390:	f1c6 0720 	rsb	r7, r6, #32
 8000394:	40b3      	lsls	r3, r6
 8000396:	fa22 fc07 	lsr.w	ip, r2, r7
 800039a:	ea4c 0c03 	orr.w	ip, ip, r3
 800039e:	fa20 f407 	lsr.w	r4, r0, r7
 80003a2:	fa01 f306 	lsl.w	r3, r1, r6
 80003a6:	431c      	orrs	r4, r3
 80003a8:	40f9      	lsrs	r1, r7
 80003aa:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ae:	fa00 f306 	lsl.w	r3, r0, r6
 80003b2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003b6:	0c20      	lsrs	r0, r4, #16
 80003b8:	fa1f fe8c 	uxth.w	lr, ip
 80003bc:	fb09 1118 	mls	r1, r9, r8, r1
 80003c0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c4:	fb08 f00e 	mul.w	r0, r8, lr
 80003c8:	4288      	cmp	r0, r1
 80003ca:	fa02 f206 	lsl.w	r2, r2, r6
 80003ce:	d90b      	bls.n	80003e8 <__udivmoddi4+0x1b8>
 80003d0:	eb1c 0101 	adds.w	r1, ip, r1
 80003d4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003d8:	f080 8088 	bcs.w	80004ec <__udivmoddi4+0x2bc>
 80003dc:	4288      	cmp	r0, r1
 80003de:	f240 8085 	bls.w	80004ec <__udivmoddi4+0x2bc>
 80003e2:	f1a8 0802 	sub.w	r8, r8, #2
 80003e6:	4461      	add	r1, ip
 80003e8:	1a09      	subs	r1, r1, r0
 80003ea:	b2a4      	uxth	r4, r4
 80003ec:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f0:	fb09 1110 	mls	r1, r9, r0, r1
 80003f4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003f8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003fc:	458e      	cmp	lr, r1
 80003fe:	d908      	bls.n	8000412 <__udivmoddi4+0x1e2>
 8000400:	eb1c 0101 	adds.w	r1, ip, r1
 8000404:	f100 34ff 	add.w	r4, r0, #4294967295
 8000408:	d26c      	bcs.n	80004e4 <__udivmoddi4+0x2b4>
 800040a:	458e      	cmp	lr, r1
 800040c:	d96a      	bls.n	80004e4 <__udivmoddi4+0x2b4>
 800040e:	3802      	subs	r0, #2
 8000410:	4461      	add	r1, ip
 8000412:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000416:	fba0 9402 	umull	r9, r4, r0, r2
 800041a:	eba1 010e 	sub.w	r1, r1, lr
 800041e:	42a1      	cmp	r1, r4
 8000420:	46c8      	mov	r8, r9
 8000422:	46a6      	mov	lr, r4
 8000424:	d356      	bcc.n	80004d4 <__udivmoddi4+0x2a4>
 8000426:	d053      	beq.n	80004d0 <__udivmoddi4+0x2a0>
 8000428:	b15d      	cbz	r5, 8000442 <__udivmoddi4+0x212>
 800042a:	ebb3 0208 	subs.w	r2, r3, r8
 800042e:	eb61 010e 	sbc.w	r1, r1, lr
 8000432:	fa01 f707 	lsl.w	r7, r1, r7
 8000436:	fa22 f306 	lsr.w	r3, r2, r6
 800043a:	40f1      	lsrs	r1, r6
 800043c:	431f      	orrs	r7, r3
 800043e:	e9c5 7100 	strd	r7, r1, [r5]
 8000442:	2600      	movs	r6, #0
 8000444:	4631      	mov	r1, r6
 8000446:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044a:	f1c2 0320 	rsb	r3, r2, #32
 800044e:	40d8      	lsrs	r0, r3
 8000450:	fa0c fc02 	lsl.w	ip, ip, r2
 8000454:	fa21 f303 	lsr.w	r3, r1, r3
 8000458:	4091      	lsls	r1, r2
 800045a:	4301      	orrs	r1, r0
 800045c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000460:	fa1f fe8c 	uxth.w	lr, ip
 8000464:	fbb3 f0f7 	udiv	r0, r3, r7
 8000468:	fb07 3610 	mls	r6, r7, r0, r3
 800046c:	0c0b      	lsrs	r3, r1, #16
 800046e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000472:	fb00 f60e 	mul.w	r6, r0, lr
 8000476:	429e      	cmp	r6, r3
 8000478:	fa04 f402 	lsl.w	r4, r4, r2
 800047c:	d908      	bls.n	8000490 <__udivmoddi4+0x260>
 800047e:	eb1c 0303 	adds.w	r3, ip, r3
 8000482:	f100 38ff 	add.w	r8, r0, #4294967295
 8000486:	d22f      	bcs.n	80004e8 <__udivmoddi4+0x2b8>
 8000488:	429e      	cmp	r6, r3
 800048a:	d92d      	bls.n	80004e8 <__udivmoddi4+0x2b8>
 800048c:	3802      	subs	r0, #2
 800048e:	4463      	add	r3, ip
 8000490:	1b9b      	subs	r3, r3, r6
 8000492:	b289      	uxth	r1, r1
 8000494:	fbb3 f6f7 	udiv	r6, r3, r7
 8000498:	fb07 3316 	mls	r3, r7, r6, r3
 800049c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a0:	fb06 f30e 	mul.w	r3, r6, lr
 80004a4:	428b      	cmp	r3, r1
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x28a>
 80004a8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ac:	f106 38ff 	add.w	r8, r6, #4294967295
 80004b0:	d216      	bcs.n	80004e0 <__udivmoddi4+0x2b0>
 80004b2:	428b      	cmp	r3, r1
 80004b4:	d914      	bls.n	80004e0 <__udivmoddi4+0x2b0>
 80004b6:	3e02      	subs	r6, #2
 80004b8:	4461      	add	r1, ip
 80004ba:	1ac9      	subs	r1, r1, r3
 80004bc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c0:	e738      	b.n	8000334 <__udivmoddi4+0x104>
 80004c2:	462e      	mov	r6, r5
 80004c4:	4628      	mov	r0, r5
 80004c6:	e705      	b.n	80002d4 <__udivmoddi4+0xa4>
 80004c8:	4606      	mov	r6, r0
 80004ca:	e6e3      	b.n	8000294 <__udivmoddi4+0x64>
 80004cc:	4618      	mov	r0, r3
 80004ce:	e6f8      	b.n	80002c2 <__udivmoddi4+0x92>
 80004d0:	454b      	cmp	r3, r9
 80004d2:	d2a9      	bcs.n	8000428 <__udivmoddi4+0x1f8>
 80004d4:	ebb9 0802 	subs.w	r8, r9, r2
 80004d8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004dc:	3801      	subs	r0, #1
 80004de:	e7a3      	b.n	8000428 <__udivmoddi4+0x1f8>
 80004e0:	4646      	mov	r6, r8
 80004e2:	e7ea      	b.n	80004ba <__udivmoddi4+0x28a>
 80004e4:	4620      	mov	r0, r4
 80004e6:	e794      	b.n	8000412 <__udivmoddi4+0x1e2>
 80004e8:	4640      	mov	r0, r8
 80004ea:	e7d1      	b.n	8000490 <__udivmoddi4+0x260>
 80004ec:	46d0      	mov	r8, sl
 80004ee:	e77b      	b.n	80003e8 <__udivmoddi4+0x1b8>
 80004f0:	3b02      	subs	r3, #2
 80004f2:	4461      	add	r1, ip
 80004f4:	e732      	b.n	800035c <__udivmoddi4+0x12c>
 80004f6:	4630      	mov	r0, r6
 80004f8:	e709      	b.n	800030e <__udivmoddi4+0xde>
 80004fa:	4464      	add	r4, ip
 80004fc:	3802      	subs	r0, #2
 80004fe:	e742      	b.n	8000386 <__udivmoddi4+0x156>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <AppInit>:
				*handleRED_LED_OFF,
				*handleRED_LED_BLINK;



void AppInit(){
 8000504:	b5b0      	push	{r4, r5, r7, lr}
 8000506:	b090      	sub	sp, #64	; 0x40
 8000508:	af02      	add	r7, sp, #8

	BaseType_t result = xTaskCreate( taskGREEN_LED_ON, "GREEN_LED_ON", 1000, NULL, 1, handleGREEN_LED_ON );
 800050a:	4b5c      	ldr	r3, [pc, #368]	; (800067c <AppInit+0x178>)
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	9301      	str	r3, [sp, #4]
 8000510:	2301      	movs	r3, #1
 8000512:	9300      	str	r3, [sp, #0]
 8000514:	2300      	movs	r3, #0
 8000516:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800051a:	4959      	ldr	r1, [pc, #356]	; (8000680 <AppInit+0x17c>)
 800051c:	4859      	ldr	r0, [pc, #356]	; (8000684 <AppInit+0x180>)
 800051e:	f003 f925 	bl	800376c <xTaskCreate>
 8000522:	6378      	str	r0, [r7, #52]	; 0x34
	configASSERT( result == pdPASS );
 8000524:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000526:	2b01      	cmp	r3, #1
 8000528:	d00a      	beq.n	8000540 <AppInit+0x3c>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 800052a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800052e:	f383 8811 	msr	BASEPRI, r3
 8000532:	f3bf 8f6f 	isb	sy
 8000536:	f3bf 8f4f 	dsb	sy
 800053a:	633b      	str	r3, [r7, #48]	; 0x30
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 800053c:	bf00      	nop
 800053e:	e7fe      	b.n	800053e <AppInit+0x3a>

	result = xTaskCreate( taskGREEN_LED_OFF, "GREEN_LED_OFF", 1000, NULL, 1, handleGREEN_LED_OFF );
 8000540:	4b51      	ldr	r3, [pc, #324]	; (8000688 <AppInit+0x184>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	9301      	str	r3, [sp, #4]
 8000546:	2301      	movs	r3, #1
 8000548:	9300      	str	r3, [sp, #0]
 800054a:	2300      	movs	r3, #0
 800054c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000550:	494e      	ldr	r1, [pc, #312]	; (800068c <AppInit+0x188>)
 8000552:	484f      	ldr	r0, [pc, #316]	; (8000690 <AppInit+0x18c>)
 8000554:	f003 f90a 	bl	800376c <xTaskCreate>
 8000558:	6378      	str	r0, [r7, #52]	; 0x34
	configASSERT( result == pdPASS );
 800055a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800055c:	2b01      	cmp	r3, #1
 800055e:	d00a      	beq.n	8000576 <AppInit+0x72>
        __asm volatile
 8000560:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000564:	f383 8811 	msr	BASEPRI, r3
 8000568:	f3bf 8f6f 	isb	sy
 800056c:	f3bf 8f4f 	dsb	sy
 8000570:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
 8000572:	bf00      	nop
 8000574:	e7fe      	b.n	8000574 <AppInit+0x70>

	result = xTaskCreate( taskGREEN_LED_BLINK, "GREEN_LED_BLINK", 1000, NULL, 1, handleGREEN_LED_BLINK );
 8000576:	4b47      	ldr	r3, [pc, #284]	; (8000694 <AppInit+0x190>)
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	9301      	str	r3, [sp, #4]
 800057c:	2301      	movs	r3, #1
 800057e:	9300      	str	r3, [sp, #0]
 8000580:	2300      	movs	r3, #0
 8000582:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000586:	4944      	ldr	r1, [pc, #272]	; (8000698 <AppInit+0x194>)
 8000588:	4844      	ldr	r0, [pc, #272]	; (800069c <AppInit+0x198>)
 800058a:	f003 f8ef 	bl	800376c <xTaskCreate>
 800058e:	6378      	str	r0, [r7, #52]	; 0x34
	configASSERT( result == pdPASS );
 8000590:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000592:	2b01      	cmp	r3, #1
 8000594:	d00a      	beq.n	80005ac <AppInit+0xa8>
        __asm volatile
 8000596:	f04f 0350 	mov.w	r3, #80	; 0x50
 800059a:	f383 8811 	msr	BASEPRI, r3
 800059e:	f3bf 8f6f 	isb	sy
 80005a2:	f3bf 8f4f 	dsb	sy
 80005a6:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 80005a8:	bf00      	nop
 80005aa:	e7fe      	b.n	80005aa <AppInit+0xa6>

	result = xTaskCreate( taskRED_LED_ON, "RED_LED_ON", 1000, NULL, 1, handleRED_LED_ON );
 80005ac:	4b3c      	ldr	r3, [pc, #240]	; (80006a0 <AppInit+0x19c>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	9301      	str	r3, [sp, #4]
 80005b2:	2301      	movs	r3, #1
 80005b4:	9300      	str	r3, [sp, #0]
 80005b6:	2300      	movs	r3, #0
 80005b8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80005bc:	4939      	ldr	r1, [pc, #228]	; (80006a4 <AppInit+0x1a0>)
 80005be:	483a      	ldr	r0, [pc, #232]	; (80006a8 <AppInit+0x1a4>)
 80005c0:	f003 f8d4 	bl	800376c <xTaskCreate>
 80005c4:	6378      	str	r0, [r7, #52]	; 0x34
	configASSERT( result == pdPASS );
 80005c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80005c8:	2b01      	cmp	r3, #1
 80005ca:	d00a      	beq.n	80005e2 <AppInit+0xde>
        __asm volatile
 80005cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005d0:	f383 8811 	msr	BASEPRI, r3
 80005d4:	f3bf 8f6f 	isb	sy
 80005d8:	f3bf 8f4f 	dsb	sy
 80005dc:	627b      	str	r3, [r7, #36]	; 0x24
    }
 80005de:	bf00      	nop
 80005e0:	e7fe      	b.n	80005e0 <AppInit+0xdc>

	result = xTaskCreate( taskRED_LED_OFF, "RED_LED_OFF", 1000, NULL, 1, handleRED_LED_OFF );
 80005e2:	4b32      	ldr	r3, [pc, #200]	; (80006ac <AppInit+0x1a8>)
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	9301      	str	r3, [sp, #4]
 80005e8:	2301      	movs	r3, #1
 80005ea:	9300      	str	r3, [sp, #0]
 80005ec:	2300      	movs	r3, #0
 80005ee:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80005f2:	492f      	ldr	r1, [pc, #188]	; (80006b0 <AppInit+0x1ac>)
 80005f4:	482f      	ldr	r0, [pc, #188]	; (80006b4 <AppInit+0x1b0>)
 80005f6:	f003 f8b9 	bl	800376c <xTaskCreate>
 80005fa:	6378      	str	r0, [r7, #52]	; 0x34
	configASSERT( result == pdPASS );
 80005fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80005fe:	2b01      	cmp	r3, #1
 8000600:	d00a      	beq.n	8000618 <AppInit+0x114>
        __asm volatile
 8000602:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000606:	f383 8811 	msr	BASEPRI, r3
 800060a:	f3bf 8f6f 	isb	sy
 800060e:	f3bf 8f4f 	dsb	sy
 8000612:	623b      	str	r3, [r7, #32]
    }
 8000614:	bf00      	nop
 8000616:	e7fe      	b.n	8000616 <AppInit+0x112>

	result = xTaskCreate( taskRED_LED_BLINK, "RED_LED_BLINK", 1000, NULL, 1, handleRED_LED_BLINK );
 8000618:	4b27      	ldr	r3, [pc, #156]	; (80006b8 <AppInit+0x1b4>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	9301      	str	r3, [sp, #4]
 800061e:	2301      	movs	r3, #1
 8000620:	9300      	str	r3, [sp, #0]
 8000622:	2300      	movs	r3, #0
 8000624:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000628:	4924      	ldr	r1, [pc, #144]	; (80006bc <AppInit+0x1b8>)
 800062a:	4825      	ldr	r0, [pc, #148]	; (80006c0 <AppInit+0x1bc>)
 800062c:	f003 f89e 	bl	800376c <xTaskCreate>
 8000630:	6378      	str	r0, [r7, #52]	; 0x34
	configASSERT( result == pdPASS );
 8000632:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000634:	2b01      	cmp	r3, #1
 8000636:	d00a      	beq.n	800064e <AppInit+0x14a>
        __asm volatile
 8000638:	f04f 0350 	mov.w	r3, #80	; 0x50
 800063c:	f383 8811 	msr	BASEPRI, r3
 8000640:	f3bf 8f6f 	isb	sy
 8000644:	f3bf 8f4f 	dsb	sy
 8000648:	61fb      	str	r3, [r7, #28]
    }
 800064a:	bf00      	nop
 800064c:	e7fe      	b.n	800064c <AppInit+0x148>
	GREEN_LED_ON();
 800064e:	f000 f87b 	bl	8000748 <GREEN_LED_ON>
	uint8_t log[] = "vTaskStartScheduler\r\n";
 8000652:	4b1c      	ldr	r3, [pc, #112]	; (80006c4 <AppInit+0x1c0>)
 8000654:	1d3c      	adds	r4, r7, #4
 8000656:	461d      	mov	r5, r3
 8000658:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800065a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800065c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000660:	6020      	str	r0, [r4, #0]
 8000662:	3404      	adds	r4, #4
 8000664:	8021      	strh	r1, [r4, #0]
	uart_log(log);
 8000666:	1d3b      	adds	r3, r7, #4
 8000668:	4618      	mov	r0, r3
 800066a:	f000 f82d 	bl	80006c8 <uart_log>
	/* Start the scheduler. */
	vTaskStartScheduler();
 800066e:	f003 f9f9 	bl	8003a64 <vTaskStartScheduler>

}
 8000672:	bf00      	nop
 8000674:	3738      	adds	r7, #56	; 0x38
 8000676:	46bd      	mov	sp, r7
 8000678:	bdb0      	pop	{r4, r5, r7, pc}
 800067a:	bf00      	nop
 800067c:	20000030 	.word	0x20000030
 8000680:	08005b4c 	.word	0x08005b4c
 8000684:	080006f5 	.word	0x080006f5
 8000688:	20000034 	.word	0x20000034
 800068c:	08005b5c 	.word	0x08005b5c
 8000690:	08000703 	.word	0x08000703
 8000694:	20000038 	.word	0x20000038
 8000698:	08005b6c 	.word	0x08005b6c
 800069c:	08000711 	.word	0x08000711
 80006a0:	2000003c 	.word	0x2000003c
 80006a4:	08005b7c 	.word	0x08005b7c
 80006a8:	0800071f 	.word	0x0800071f
 80006ac:	20000040 	.word	0x20000040
 80006b0:	08005b88 	.word	0x08005b88
 80006b4:	0800072d 	.word	0x0800072d
 80006b8:	20000044 	.word	0x20000044
 80006bc:	08005b94 	.word	0x08005b94
 80006c0:	0800073b 	.word	0x0800073b
 80006c4:	08005ba4 	.word	0x08005ba4

080006c8 <uart_log>:

void uart_log(uint8_t * str){
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b082      	sub	sp, #8
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, str, strlen((char *)str), HAL_MAX_DELAY);
 80006d0:	6878      	ldr	r0, [r7, #4]
 80006d2:	f7ff fd8d 	bl	80001f0 <strlen>
 80006d6:	4603      	mov	r3, r0
 80006d8:	b29a      	uxth	r2, r3
 80006da:	f04f 33ff 	mov.w	r3, #4294967295
 80006de:	6879      	ldr	r1, [r7, #4]
 80006e0:	4803      	ldr	r0, [pc, #12]	; (80006f0 <uart_log+0x28>)
 80006e2:	f002 f94c 	bl	800297e <HAL_UART_Transmit>
}
 80006e6:	bf00      	nop
 80006e8:	3708      	adds	r7, #8
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	200000a8 	.word	0x200000a8

080006f4 <taskGREEN_LED_ON>:


/*Task declaration functions*/

void taskGREEN_LED_ON( void *pvParameters ){
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b082      	sub	sp, #8
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
	GREEN_LED_ON();
 80006fc:	f000 f824 	bl	8000748 <GREEN_LED_ON>
	while(1);
 8000700:	e7fe      	b.n	8000700 <taskGREEN_LED_ON+0xc>

08000702 <taskGREEN_LED_OFF>:
}

void taskGREEN_LED_OFF( void *pvParameters ){
 8000702:	b580      	push	{r7, lr}
 8000704:	b082      	sub	sp, #8
 8000706:	af00      	add	r7, sp, #0
 8000708:	6078      	str	r0, [r7, #4]
	GREEN_LED_OFF();
 800070a:	f000 f83d 	bl	8000788 <GREEN_LED_OFF>
	while(1);
 800070e:	e7fe      	b.n	800070e <taskGREEN_LED_OFF+0xc>

08000710 <taskGREEN_LED_BLINK>:
}

void taskGREEN_LED_BLINK( void *pvParameters ){
 8000710:	b580      	push	{r7, lr}
 8000712:	b082      	sub	sp, #8
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
	GREEN_LED_BLINK();
 8000718:	f000 f852 	bl	80007c0 <GREEN_LED_BLINK>
	while(1);
 800071c:	e7fe      	b.n	800071c <taskGREEN_LED_BLINK+0xc>

0800071e <taskRED_LED_ON>:
}

void taskRED_LED_ON( void *pvParameters ){
 800071e:	b580      	push	{r7, lr}
 8000720:	b082      	sub	sp, #8
 8000722:	af00      	add	r7, sp, #0
 8000724:	6078      	str	r0, [r7, #4]
	RED_LED_ON();
 8000726:	f000 f869 	bl	80007fc <RED_LED_ON>
	while(1);
 800072a:	e7fe      	b.n	800072a <taskRED_LED_ON+0xc>

0800072c <taskRED_LED_OFF>:
}

void taskRED_LED_OFF( void *pvParameters ){
 800072c:	b580      	push	{r7, lr}
 800072e:	b082      	sub	sp, #8
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
	RED_LED_OFF();
 8000734:	f000 f87e 	bl	8000834 <RED_LED_OFF>
	while(1);
 8000738:	e7fe      	b.n	8000738 <taskRED_LED_OFF+0xc>

0800073a <taskRED_LED_BLINK>:
}

void taskRED_LED_BLINK( void *pvParameters ){
 800073a:	b580      	push	{r7, lr}
 800073c:	b082      	sub	sp, #8
 800073e:	af00      	add	r7, sp, #0
 8000740:	6078      	str	r0, [r7, #4]
	RED_LED_BLINK();
 8000742:	f000 f893 	bl	800086c <RED_LED_BLINK>
	while(1);
 8000746:	e7fe      	b.n	8000746 <taskRED_LED_BLINK+0xc>

08000748 <GREEN_LED_ON>:



/*Task handler functions*/

void GREEN_LED_ON(){
 8000748:	b5b0      	push	{r4, r5, r7, lr}
 800074a:	b086      	sub	sp, #24
 800074c:	af00      	add	r7, sp, #0
	uint8_t log[] = "APP_GREEN_LED_ON\r\n";
 800074e:	4b0c      	ldr	r3, [pc, #48]	; (8000780 <GREEN_LED_ON+0x38>)
 8000750:	1d3c      	adds	r4, r7, #4
 8000752:	461d      	mov	r5, r3
 8000754:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000756:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000758:	682b      	ldr	r3, [r5, #0]
 800075a:	461a      	mov	r2, r3
 800075c:	8022      	strh	r2, [r4, #0]
 800075e:	3402      	adds	r4, #2
 8000760:	0c1b      	lsrs	r3, r3, #16
 8000762:	7023      	strb	r3, [r4, #0]
	uart_log(log);
 8000764:	1d3b      	adds	r3, r7, #4
 8000766:	4618      	mov	r0, r3
 8000768:	f7ff ffae 	bl	80006c8 <uart_log>
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, SET);
 800076c:	2201      	movs	r2, #1
 800076e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000772:	4804      	ldr	r0, [pc, #16]	; (8000784 <GREEN_LED_ON+0x3c>)
 8000774:	f001 f8f2 	bl	800195c <HAL_GPIO_WritePin>
}
 8000778:	bf00      	nop
 800077a:	3718      	adds	r7, #24
 800077c:	46bd      	mov	sp, r7
 800077e:	bdb0      	pop	{r4, r5, r7, pc}
 8000780:	08005bbc 	.word	0x08005bbc
 8000784:	40021800 	.word	0x40021800

08000788 <GREEN_LED_OFF>:

void GREEN_LED_OFF(){
 8000788:	b5b0      	push	{r4, r5, r7, lr}
 800078a:	b086      	sub	sp, #24
 800078c:	af00      	add	r7, sp, #0
	uint8_t log[] = "APP_GREEN_LED_OFF\r\n";
 800078e:	4b0a      	ldr	r3, [pc, #40]	; (80007b8 <GREEN_LED_OFF+0x30>)
 8000790:	1d3c      	adds	r4, r7, #4
 8000792:	461d      	mov	r5, r3
 8000794:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000796:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000798:	682b      	ldr	r3, [r5, #0]
 800079a:	6023      	str	r3, [r4, #0]
	uart_log(log);
 800079c:	1d3b      	adds	r3, r7, #4
 800079e:	4618      	mov	r0, r3
 80007a0:	f7ff ff92 	bl	80006c8 <uart_log>
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, RESET);
 80007a4:	2200      	movs	r2, #0
 80007a6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007aa:	4804      	ldr	r0, [pc, #16]	; (80007bc <GREEN_LED_OFF+0x34>)
 80007ac:	f001 f8d6 	bl	800195c <HAL_GPIO_WritePin>
}
 80007b0:	bf00      	nop
 80007b2:	3718      	adds	r7, #24
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bdb0      	pop	{r4, r5, r7, pc}
 80007b8:	08005bd0 	.word	0x08005bd0
 80007bc:	40021800 	.word	0x40021800

080007c0 <GREEN_LED_BLINK>:

void GREEN_LED_BLINK(){
 80007c0:	b5b0      	push	{r4, r5, r7, lr}
 80007c2:	b086      	sub	sp, #24
 80007c4:	af00      	add	r7, sp, #0
	uint8_t log[] = "APP_GREEN_LED_BLINK\r\n";
 80007c6:	4b0b      	ldr	r3, [pc, #44]	; (80007f4 <GREEN_LED_BLINK+0x34>)
 80007c8:	463c      	mov	r4, r7
 80007ca:	461d      	mov	r5, r3
 80007cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007d0:	e895 0003 	ldmia.w	r5, {r0, r1}
 80007d4:	6020      	str	r0, [r4, #0]
 80007d6:	3404      	adds	r4, #4
 80007d8:	8021      	strh	r1, [r4, #0]
	uart_log(log);
 80007da:	463b      	mov	r3, r7
 80007dc:	4618      	mov	r0, r3
 80007de:	f7ff ff73 	bl	80006c8 <uart_log>
	HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 80007e2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007e6:	4804      	ldr	r0, [pc, #16]	; (80007f8 <GREEN_LED_BLINK+0x38>)
 80007e8:	f001 f8d1 	bl	800198e <HAL_GPIO_TogglePin>
}
 80007ec:	bf00      	nop
 80007ee:	3718      	adds	r7, #24
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bdb0      	pop	{r4, r5, r7, pc}
 80007f4:	08005be4 	.word	0x08005be4
 80007f8:	40021800 	.word	0x40021800

080007fc <RED_LED_ON>:

void RED_LED_ON(){
 80007fc:	b5b0      	push	{r4, r5, r7, lr}
 80007fe:	b086      	sub	sp, #24
 8000800:	af00      	add	r7, sp, #0
	uint8_t log[] = "APP_RED_LED_ON\r\n";
 8000802:	4b0a      	ldr	r3, [pc, #40]	; (800082c <RED_LED_ON+0x30>)
 8000804:	1d3c      	adds	r4, r7, #4
 8000806:	461d      	mov	r5, r3
 8000808:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800080a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800080c:	682b      	ldr	r3, [r5, #0]
 800080e:	7023      	strb	r3, [r4, #0]
	uart_log(log);
 8000810:	1d3b      	adds	r3, r7, #4
 8000812:	4618      	mov	r0, r3
 8000814:	f7ff ff58 	bl	80006c8 <uart_log>
	HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, SET);
 8000818:	2201      	movs	r2, #1
 800081a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800081e:	4804      	ldr	r0, [pc, #16]	; (8000830 <RED_LED_ON+0x34>)
 8000820:	f001 f89c 	bl	800195c <HAL_GPIO_WritePin>
}
 8000824:	bf00      	nop
 8000826:	3718      	adds	r7, #24
 8000828:	46bd      	mov	sp, r7
 800082a:	bdb0      	pop	{r4, r5, r7, pc}
 800082c:	08005bfc 	.word	0x08005bfc
 8000830:	40021800 	.word	0x40021800

08000834 <RED_LED_OFF>:

void RED_LED_OFF(){
 8000834:	b5b0      	push	{r4, r5, r7, lr}
 8000836:	b086      	sub	sp, #24
 8000838:	af00      	add	r7, sp, #0
	uint8_t log[] = "APP_RED_LED_OFF\r\n";
 800083a:	4b0a      	ldr	r3, [pc, #40]	; (8000864 <RED_LED_OFF+0x30>)
 800083c:	1d3c      	adds	r4, r7, #4
 800083e:	461d      	mov	r5, r3
 8000840:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000842:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000844:	682b      	ldr	r3, [r5, #0]
 8000846:	8023      	strh	r3, [r4, #0]
	uart_log(log);
 8000848:	1d3b      	adds	r3, r7, #4
 800084a:	4618      	mov	r0, r3
 800084c:	f7ff ff3c 	bl	80006c8 <uart_log>
	HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, RESET);
 8000850:	2200      	movs	r2, #0
 8000852:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000856:	4804      	ldr	r0, [pc, #16]	; (8000868 <RED_LED_OFF+0x34>)
 8000858:	f001 f880 	bl	800195c <HAL_GPIO_WritePin>
}
 800085c:	bf00      	nop
 800085e:	3718      	adds	r7, #24
 8000860:	46bd      	mov	sp, r7
 8000862:	bdb0      	pop	{r4, r5, r7, pc}
 8000864:	08005c10 	.word	0x08005c10
 8000868:	40021800 	.word	0x40021800

0800086c <RED_LED_BLINK>:

void RED_LED_BLINK(){
 800086c:	b5b0      	push	{r4, r5, r7, lr}
 800086e:	b086      	sub	sp, #24
 8000870:	af00      	add	r7, sp, #0
	uint8_t log[] = "APP_RED_LED_BLINK\r\n";
 8000872:	4b0a      	ldr	r3, [pc, #40]	; (800089c <RED_LED_BLINK+0x30>)
 8000874:	1d3c      	adds	r4, r7, #4
 8000876:	461d      	mov	r5, r3
 8000878:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800087a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800087c:	682b      	ldr	r3, [r5, #0]
 800087e:	6023      	str	r3, [r4, #0]
	uart_log(log);
 8000880:	1d3b      	adds	r3, r7, #4
 8000882:	4618      	mov	r0, r3
 8000884:	f7ff ff20 	bl	80006c8 <uart_log>
	HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
 8000888:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800088c:	4804      	ldr	r0, [pc, #16]	; (80008a0 <RED_LED_BLINK+0x34>)
 800088e:	f001 f87e 	bl	800198e <HAL_GPIO_TogglePin>
}
 8000892:	bf00      	nop
 8000894:	3718      	adds	r7, #24
 8000896:	46bd      	mov	sp, r7
 8000898:	bdb0      	pop	{r4, r5, r7, pc}
 800089a:	bf00      	nop
 800089c:	08005c24 	.word	0x08005c24
 80008a0:	40021800 	.word	0x40021800

080008a4 <APP_GREEN_LED_ON>:



/*sSTAET MACHINE API*/

void APP_GREEN_LED_ON(){
 80008a4:	b5b0      	push	{r4, r5, r7, lr}
 80008a6:	b086      	sub	sp, #24
 80008a8:	af00      	add	r7, sp, #0
	uint8_t log[] = "APP_GREEN_LED_ON\r\n";
 80008aa:	4b09      	ldr	r3, [pc, #36]	; (80008d0 <APP_GREEN_LED_ON+0x2c>)
 80008ac:	1d3c      	adds	r4, r7, #4
 80008ae:	461d      	mov	r5, r3
 80008b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008b4:	682b      	ldr	r3, [r5, #0]
 80008b6:	461a      	mov	r2, r3
 80008b8:	8022      	strh	r2, [r4, #0]
 80008ba:	3402      	adds	r4, #2
 80008bc:	0c1b      	lsrs	r3, r3, #16
 80008be:	7023      	strb	r3, [r4, #0]
	uart_log(log);
 80008c0:	1d3b      	adds	r3, r7, #4
 80008c2:	4618      	mov	r0, r3
 80008c4:	f7ff ff00 	bl	80006c8 <uart_log>
}
 80008c8:	bf00      	nop
 80008ca:	3718      	adds	r7, #24
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bdb0      	pop	{r4, r5, r7, pc}
 80008d0:	08005bbc 	.word	0x08005bbc

080008d4 <APP_GREEN_LED_OFF>:

void APP_GREEN_LED_OFF(){
 80008d4:	b5b0      	push	{r4, r5, r7, lr}
 80008d6:	b086      	sub	sp, #24
 80008d8:	af00      	add	r7, sp, #0
	uint8_t log[] = "APP_GREEN_LED_OFF\r\n";
 80008da:	4b07      	ldr	r3, [pc, #28]	; (80008f8 <APP_GREEN_LED_OFF+0x24>)
 80008dc:	1d3c      	adds	r4, r7, #4
 80008de:	461d      	mov	r5, r3
 80008e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008e4:	682b      	ldr	r3, [r5, #0]
 80008e6:	6023      	str	r3, [r4, #0]
	uart_log(log);
 80008e8:	1d3b      	adds	r3, r7, #4
 80008ea:	4618      	mov	r0, r3
 80008ec:	f7ff feec 	bl	80006c8 <uart_log>
}
 80008f0:	bf00      	nop
 80008f2:	3718      	adds	r7, #24
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bdb0      	pop	{r4, r5, r7, pc}
 80008f8:	08005bd0 	.word	0x08005bd0

080008fc <APP_GREEN_LED_BLINK>:

void APP_GREEN_LED_BLINK(){
 80008fc:	b5b0      	push	{r4, r5, r7, lr}
 80008fe:	b086      	sub	sp, #24
 8000900:	af00      	add	r7, sp, #0
	uint8_t log[] = "APP_GREEN_LED_BLINK\r\n";
 8000902:	4b09      	ldr	r3, [pc, #36]	; (8000928 <APP_GREEN_LED_BLINK+0x2c>)
 8000904:	463c      	mov	r4, r7
 8000906:	461d      	mov	r5, r3
 8000908:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800090a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800090c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000910:	6020      	str	r0, [r4, #0]
 8000912:	3404      	adds	r4, #4
 8000914:	8021      	strh	r1, [r4, #0]
	uart_log(log);
 8000916:	463b      	mov	r3, r7
 8000918:	4618      	mov	r0, r3
 800091a:	f7ff fed5 	bl	80006c8 <uart_log>
}
 800091e:	bf00      	nop
 8000920:	3718      	adds	r7, #24
 8000922:	46bd      	mov	sp, r7
 8000924:	bdb0      	pop	{r4, r5, r7, pc}
 8000926:	bf00      	nop
 8000928:	08005be4 	.word	0x08005be4

0800092c <APP_RED_LED_ON>:

void APP_RED_LED_ON(){
 800092c:	b5b0      	push	{r4, r5, r7, lr}
 800092e:	b086      	sub	sp, #24
 8000930:	af00      	add	r7, sp, #0
	uint8_t log[] = "APP_RED_LED_ON\r\n";
 8000932:	4b07      	ldr	r3, [pc, #28]	; (8000950 <APP_RED_LED_ON+0x24>)
 8000934:	1d3c      	adds	r4, r7, #4
 8000936:	461d      	mov	r5, r3
 8000938:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800093a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800093c:	682b      	ldr	r3, [r5, #0]
 800093e:	7023      	strb	r3, [r4, #0]
	uart_log(log);
 8000940:	1d3b      	adds	r3, r7, #4
 8000942:	4618      	mov	r0, r3
 8000944:	f7ff fec0 	bl	80006c8 <uart_log>
}
 8000948:	bf00      	nop
 800094a:	3718      	adds	r7, #24
 800094c:	46bd      	mov	sp, r7
 800094e:	bdb0      	pop	{r4, r5, r7, pc}
 8000950:	08005bfc 	.word	0x08005bfc

08000954 <APP_RED_LED_OFF>:

void APP_RED_LED_OFF(){
 8000954:	b5b0      	push	{r4, r5, r7, lr}
 8000956:	b086      	sub	sp, #24
 8000958:	af00      	add	r7, sp, #0
	uint8_t log[] = "APP_RED_LED_OFF\r\n";
 800095a:	4b07      	ldr	r3, [pc, #28]	; (8000978 <APP_RED_LED_OFF+0x24>)
 800095c:	1d3c      	adds	r4, r7, #4
 800095e:	461d      	mov	r5, r3
 8000960:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000962:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000964:	682b      	ldr	r3, [r5, #0]
 8000966:	8023      	strh	r3, [r4, #0]
	uart_log(log);
 8000968:	1d3b      	adds	r3, r7, #4
 800096a:	4618      	mov	r0, r3
 800096c:	f7ff feac 	bl	80006c8 <uart_log>
}
 8000970:	bf00      	nop
 8000972:	3718      	adds	r7, #24
 8000974:	46bd      	mov	sp, r7
 8000976:	bdb0      	pop	{r4, r5, r7, pc}
 8000978:	08005c10 	.word	0x08005c10

0800097c <APP_RED_LED_BLINK>:

void APP_RED_LED_BLINK(){
 800097c:	b5b0      	push	{r4, r5, r7, lr}
 800097e:	b086      	sub	sp, #24
 8000980:	af00      	add	r7, sp, #0
	uint8_t log[] = "APP_RED_LED_BLINK\r\n";
 8000982:	4b07      	ldr	r3, [pc, #28]	; (80009a0 <APP_RED_LED_BLINK+0x24>)
 8000984:	1d3c      	adds	r4, r7, #4
 8000986:	461d      	mov	r5, r3
 8000988:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800098a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800098c:	682b      	ldr	r3, [r5, #0]
 800098e:	6023      	str	r3, [r4, #0]
	uart_log(log);
 8000990:	1d3b      	adds	r3, r7, #4
 8000992:	4618      	mov	r0, r3
 8000994:	f7ff fe98 	bl	80006c8 <uart_log>
}
 8000998:	bf00      	nop
 800099a:	3718      	adds	r7, #24
 800099c:	46bd      	mov	sp, r7
 800099e:	bdb0      	pop	{r4, r5, r7, pc}
 80009a0:	08005c24 	.word	0x08005c24

080009a4 <MX_GPIO_Init>:
     PB9   ------> LTDC_B7
     PE0   ------> FMC_NBL0
     PE1   ------> FMC_NBL1
*/
void MX_GPIO_Init(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b08e      	sub	sp, #56	; 0x38
 80009a8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009ae:	2200      	movs	r2, #0
 80009b0:	601a      	str	r2, [r3, #0]
 80009b2:	605a      	str	r2, [r3, #4]
 80009b4:	609a      	str	r2, [r3, #8]
 80009b6:	60da      	str	r2, [r3, #12]
 80009b8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009ba:	2300      	movs	r3, #0
 80009bc:	623b      	str	r3, [r7, #32]
 80009be:	4bb1      	ldr	r3, [pc, #708]	; (8000c84 <MX_GPIO_Init+0x2e0>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c2:	4ab0      	ldr	r2, [pc, #704]	; (8000c84 <MX_GPIO_Init+0x2e0>)
 80009c4:	f043 0304 	orr.w	r3, r3, #4
 80009c8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ca:	4bae      	ldr	r3, [pc, #696]	; (8000c84 <MX_GPIO_Init+0x2e0>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ce:	f003 0304 	and.w	r3, r3, #4
 80009d2:	623b      	str	r3, [r7, #32]
 80009d4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80009d6:	2300      	movs	r3, #0
 80009d8:	61fb      	str	r3, [r7, #28]
 80009da:	4baa      	ldr	r3, [pc, #680]	; (8000c84 <MX_GPIO_Init+0x2e0>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009de:	4aa9      	ldr	r2, [pc, #676]	; (8000c84 <MX_GPIO_Init+0x2e0>)
 80009e0:	f043 0320 	orr.w	r3, r3, #32
 80009e4:	6313      	str	r3, [r2, #48]	; 0x30
 80009e6:	4ba7      	ldr	r3, [pc, #668]	; (8000c84 <MX_GPIO_Init+0x2e0>)
 80009e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ea:	f003 0320 	and.w	r3, r3, #32
 80009ee:	61fb      	str	r3, [r7, #28]
 80009f0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009f2:	2300      	movs	r3, #0
 80009f4:	61bb      	str	r3, [r7, #24]
 80009f6:	4ba3      	ldr	r3, [pc, #652]	; (8000c84 <MX_GPIO_Init+0x2e0>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fa:	4aa2      	ldr	r2, [pc, #648]	; (8000c84 <MX_GPIO_Init+0x2e0>)
 80009fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a00:	6313      	str	r3, [r2, #48]	; 0x30
 8000a02:	4ba0      	ldr	r3, [pc, #640]	; (8000c84 <MX_GPIO_Init+0x2e0>)
 8000a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a0a:	61bb      	str	r3, [r7, #24]
 8000a0c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a0e:	2300      	movs	r3, #0
 8000a10:	617b      	str	r3, [r7, #20]
 8000a12:	4b9c      	ldr	r3, [pc, #624]	; (8000c84 <MX_GPIO_Init+0x2e0>)
 8000a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a16:	4a9b      	ldr	r2, [pc, #620]	; (8000c84 <MX_GPIO_Init+0x2e0>)
 8000a18:	f043 0301 	orr.w	r3, r3, #1
 8000a1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a1e:	4b99      	ldr	r3, [pc, #612]	; (8000c84 <MX_GPIO_Init+0x2e0>)
 8000a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a22:	f003 0301 	and.w	r3, r3, #1
 8000a26:	617b      	str	r3, [r7, #20]
 8000a28:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	613b      	str	r3, [r7, #16]
 8000a2e:	4b95      	ldr	r3, [pc, #596]	; (8000c84 <MX_GPIO_Init+0x2e0>)
 8000a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a32:	4a94      	ldr	r2, [pc, #592]	; (8000c84 <MX_GPIO_Init+0x2e0>)
 8000a34:	f043 0302 	orr.w	r3, r3, #2
 8000a38:	6313      	str	r3, [r2, #48]	; 0x30
 8000a3a:	4b92      	ldr	r3, [pc, #584]	; (8000c84 <MX_GPIO_Init+0x2e0>)
 8000a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3e:	f003 0302 	and.w	r3, r3, #2
 8000a42:	613b      	str	r3, [r7, #16]
 8000a44:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a46:	2300      	movs	r3, #0
 8000a48:	60fb      	str	r3, [r7, #12]
 8000a4a:	4b8e      	ldr	r3, [pc, #568]	; (8000c84 <MX_GPIO_Init+0x2e0>)
 8000a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4e:	4a8d      	ldr	r2, [pc, #564]	; (8000c84 <MX_GPIO_Init+0x2e0>)
 8000a50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a54:	6313      	str	r3, [r2, #48]	; 0x30
 8000a56:	4b8b      	ldr	r3, [pc, #556]	; (8000c84 <MX_GPIO_Init+0x2e0>)
 8000a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a5e:	60fb      	str	r3, [r7, #12]
 8000a60:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a62:	2300      	movs	r3, #0
 8000a64:	60bb      	str	r3, [r7, #8]
 8000a66:	4b87      	ldr	r3, [pc, #540]	; (8000c84 <MX_GPIO_Init+0x2e0>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6a:	4a86      	ldr	r2, [pc, #536]	; (8000c84 <MX_GPIO_Init+0x2e0>)
 8000a6c:	f043 0310 	orr.w	r3, r3, #16
 8000a70:	6313      	str	r3, [r2, #48]	; 0x30
 8000a72:	4b84      	ldr	r3, [pc, #528]	; (8000c84 <MX_GPIO_Init+0x2e0>)
 8000a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a76:	f003 0310 	and.w	r3, r3, #16
 8000a7a:	60bb      	str	r3, [r7, #8]
 8000a7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a7e:	2300      	movs	r3, #0
 8000a80:	607b      	str	r3, [r7, #4]
 8000a82:	4b80      	ldr	r3, [pc, #512]	; (8000c84 <MX_GPIO_Init+0x2e0>)
 8000a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a86:	4a7f      	ldr	r2, [pc, #508]	; (8000c84 <MX_GPIO_Init+0x2e0>)
 8000a88:	f043 0308 	orr.w	r3, r3, #8
 8000a8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a8e:	4b7d      	ldr	r3, [pc, #500]	; (8000c84 <MX_GPIO_Init+0x2e0>)
 8000a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a92:	f003 0308 	and.w	r3, r3, #8
 8000a96:	607b      	str	r3, [r7, #4]
 8000a98:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|BOTTON_YELLOW_Pin, GPIO_PIN_RESET);
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	2116      	movs	r1, #22
 8000a9e:	487a      	ldr	r0, [pc, #488]	; (8000c88 <MX_GPIO_Init+0x2e4>)
 8000aa0:	f000 ff5c 	bl	800195c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	2180      	movs	r1, #128	; 0x80
 8000aa8:	4878      	ldr	r0, [pc, #480]	; (8000c8c <MX_GPIO_Init+0x2e8>)
 8000aaa:	f000 ff57 	bl	800195c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8000aae:	2200      	movs	r2, #0
 8000ab0:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8000ab4:	4876      	ldr	r0, [pc, #472]	; (8000c90 <MX_GPIO_Init+0x2ec>)
 8000ab6:	f000 ff51 	bl	800195c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8000aba:	2200      	movs	r2, #0
 8000abc:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000ac0:	4874      	ldr	r0, [pc, #464]	; (8000c94 <MX_GPIO_Init+0x2f0>)
 8000ac2:	f000 ff4b 	bl	800195c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin
                           PFPin PFPin PFPin PFPin
                           PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8000ac6:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8000aca:	627b      	str	r3, [r7, #36]	; 0x24
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000acc:	2302      	movs	r3, #2
 8000ace:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ad4:	2303      	movs	r3, #3
 8000ad6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000ad8:	230c      	movs	r3, #12
 8000ada:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000adc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	486d      	ldr	r0, [pc, #436]	; (8000c98 <MX_GPIO_Init+0x2f4>)
 8000ae4:	f000 fd8e 	bl	8001604 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8000ae8:	f44f 7360 	mov.w	r3, #896	; 0x380
 8000aec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aee:	2302      	movs	r3, #2
 8000af0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af2:	2300      	movs	r3, #0
 8000af4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af6:	2300      	movs	r3, #0
 8000af8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8000afa:	2305      	movs	r3, #5
 8000afc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000afe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b02:	4619      	mov	r1, r3
 8000b04:	4864      	ldr	r0, [pc, #400]	; (8000c98 <MX_GPIO_Init+0x2f4>)
 8000b06:	f000 fd7d 	bl	8001604 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENABLE_Pin;
 8000b0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b0e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b10:	2302      	movs	r3, #2
 8000b12:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b14:	2300      	movs	r3, #0
 8000b16:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000b1c:	230e      	movs	r3, #14
 8000b1e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8000b20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b24:	4619      	mov	r1, r3
 8000b26:	485c      	ldr	r0, [pc, #368]	; (8000c98 <MX_GPIO_Init+0x2f4>)
 8000b28:	f000 fd6c 	bl	8001604 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 8000b2c:	2301      	movs	r3, #1
 8000b2e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b30:	2302      	movs	r3, #2
 8000b32:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b34:	2300      	movs	r3, #0
 8000b36:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b38:	2303      	movs	r3, #3
 8000b3a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000b3c:	230c      	movs	r3, #12
 8000b3e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8000b40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b44:	4619      	mov	r1, r3
 8000b46:	4850      	ldr	r0, [pc, #320]	; (8000c88 <MX_GPIO_Init+0x2e4>)
 8000b48:	f000 fd5c 	bl	8001604 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin;
 8000b4c:	2302      	movs	r3, #2
 8000b4e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b50:	2301      	movs	r3, #1
 8000b52:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b54:	2300      	movs	r3, #0
 8000b56:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(NCS_MEMS_SPI_GPIO_Port, &GPIO_InitStruct);
 8000b5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b60:	4619      	mov	r1, r3
 8000b62:	4849      	ldr	r0, [pc, #292]	; (8000c88 <MX_GPIO_Init+0x2e4>)
 8000b64:	f000 fd4e 	bl	8001604 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = CSX_Pin|BOTTON_YELLOW_Pin;
 8000b68:	2314      	movs	r3, #20
 8000b6a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b6c:	2301      	movs	r3, #1
 8000b6e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000b70:	2302      	movs	r3, #2
 8000b72:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b74:	2300      	movs	r3, #0
 8000b76:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	4842      	ldr	r0, [pc, #264]	; (8000c88 <MX_GPIO_Init+0x2e4>)
 8000b80:	f000 fd40 	bl	8001604 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = B1_Pin|TP_INT1_Pin;
 8000b84:	f248 0301 	movw	r3, #32769	; 0x8001
 8000b88:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000b8a:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000b8e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b90:	2300      	movs	r3, #0
 8000b92:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b98:	4619      	mov	r1, r3
 8000b9a:	483c      	ldr	r0, [pc, #240]	; (8000c8c <MX_GPIO_Init+0x2e8>)
 8000b9c:	f000 fd32 	bl	8001604 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = BUTTON_1_Pin|BUTTON_2_Pin;
 8000ba0:	2306      	movs	r3, #6
 8000ba2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ba4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000ba8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000baa:	2302      	movs	r3, #2
 8000bac:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	4835      	ldr	r0, [pc, #212]	; (8000c8c <MX_GPIO_Init+0x2e8>)
 8000bb6:	f000 fd25 	bl	8001604 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8000bba:	f641 0358 	movw	r3, #6232	; 0x1858
 8000bbe:	627b      	str	r3, [r7, #36]	; 0x24
                          |R5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc0:	2302      	movs	r3, #2
 8000bc2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000bcc:	230e      	movs	r3, #14
 8000bce:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bd0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	482d      	ldr	r0, [pc, #180]	; (8000c8c <MX_GPIO_Init+0x2e8>)
 8000bd8:	f000 fd14 	bl	8001604 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8000bdc:	2380      	movs	r3, #128	; 0x80
 8000bde:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000be0:	2301      	movs	r3, #1
 8000be2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be4:	2300      	movs	r3, #0
 8000be6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be8:	2300      	movs	r3, #0
 8000bea:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8000bec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	4826      	ldr	r0, [pc, #152]	; (8000c8c <MX_GPIO_Init+0x2e8>)
 8000bf4:	f000 fd06 	bl	8001604 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8000bf8:	2320      	movs	r3, #32
 8000bfa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000bfc:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000c00:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c02:	2300      	movs	r3, #0
 8000c04:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8000c06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	481e      	ldr	r0, [pc, #120]	; (8000c88 <MX_GPIO_Init+0x2e4>)
 8000c0e:	f000 fcf9 	bl	8001604 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8000c12:	2303      	movs	r3, #3
 8000c14:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c16:	2302      	movs	r3, #2
 8000c18:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000c22:	2309      	movs	r3, #9
 8000c24:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	481b      	ldr	r0, [pc, #108]	; (8000c9c <MX_GPIO_Init+0x2f8>)
 8000c2e:	f000 fce9 	bl	8001604 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000c32:	2304      	movs	r3, #4
 8000c34:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c36:	2300      	movs	r3, #0
 8000c38:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000c3a:	2302      	movs	r3, #2
 8000c3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000c3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c42:	4619      	mov	r1, r3
 8000c44:	4815      	ldr	r0, [pc, #84]	; (8000c9c <MX_GPIO_Init+0x2f8>)
 8000c46:	f000 fcdd 	bl	8001604 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8000c4a:	f248 1333 	movw	r3, #33075	; 0x8133
 8000c4e:	627b      	str	r3, [r7, #36]	; 0x24
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c50:	2302      	movs	r3, #2
 8000c52:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c54:	2300      	movs	r3, #0
 8000c56:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c58:	2303      	movs	r3, #3
 8000c5a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000c5c:	230c      	movs	r3, #12
 8000c5e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c64:	4619      	mov	r1, r3
 8000c66:	480b      	ldr	r0, [pc, #44]	; (8000c94 <MX_GPIO_Init+0x2f0>)
 8000c68:	f000 fccc 	bl	8001604 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8000c6c:	f64f 7383 	movw	r3, #65411	; 0xff83
 8000c70:	627b      	str	r3, [r7, #36]	; 0x24
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c72:	2302      	movs	r3, #2
 8000c74:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c76:	2300      	movs	r3, #0
 8000c78:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c7a:	2303      	movs	r3, #3
 8000c7c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000c7e:	230c      	movs	r3, #12
 8000c80:	637b      	str	r3, [r7, #52]	; 0x34
 8000c82:	e00d      	b.n	8000ca0 <MX_GPIO_Init+0x2fc>
 8000c84:	40023800 	.word	0x40023800
 8000c88:	40020800 	.word	0x40020800
 8000c8c:	40020000 	.word	0x40020000
 8000c90:	40020c00 	.word	0x40020c00
 8000c94:	40021800 	.word	0x40021800
 8000c98:	40021400 	.word	0x40021400
 8000c9c:	40020400 	.word	0x40020400
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ca0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	4881      	ldr	r0, [pc, #516]	; (8000eac <MX_GPIO_Init+0x508>)
 8000ca8:	f000 fcac 	bl	8001604 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8000cac:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8000cb0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb2:	2302      	movs	r3, #2
 8000cb4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000cbe:	230e      	movs	r3, #14
 8000cc0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cc2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	4879      	ldr	r0, [pc, #484]	; (8000eb0 <MX_GPIO_Init+0x50c>)
 8000cca:	f000 fc9b 	bl	8001604 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 8000cce:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 8000cd2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd4:	2302      	movs	r3, #2
 8000cd6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8000ce0:	230c      	movs	r3, #12
 8000ce2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ce4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ce8:	4619      	mov	r1, r3
 8000cea:	4871      	ldr	r0, [pc, #452]	; (8000eb0 <MX_GPIO_Init+0x50c>)
 8000cec:	f000 fc8a 	bl	8001604 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 8000cf0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cf4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 8000cfe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d02:	4619      	mov	r1, r3
 8000d04:	486a      	ldr	r0, [pc, #424]	; (8000eb0 <MX_GPIO_Init+0x50c>)
 8000d06:	f000 fc7d 	bl	8001604 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8000d0a:	f24c 7303 	movw	r3, #50947	; 0xc703
 8000d0e:	627b      	str	r3, [r7, #36]	; 0x24
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d10:	2302      	movs	r3, #2
 8000d12:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d14:	2300      	movs	r3, #0
 8000d16:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d18:	2303      	movs	r3, #3
 8000d1a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000d1c:	230c      	movs	r3, #12
 8000d1e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d24:	4619      	mov	r1, r3
 8000d26:	4863      	ldr	r0, [pc, #396]	; (8000eb4 <MX_GPIO_Init+0x510>)
 8000d28:	f000 fc6c 	bl	8001604 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PD4 */
  GPIO_InitStruct.Pin = TE_Pin|GPIO_PIN_4;
 8000d2c:	f44f 6301 	mov.w	r3, #2064	; 0x810
 8000d30:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d32:	2300      	movs	r3, #0
 8000d34:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d36:	2300      	movs	r3, #0
 8000d38:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d3e:	4619      	mov	r1, r3
 8000d40:	485c      	ldr	r0, [pc, #368]	; (8000eb4 <MX_GPIO_Init+0x510>)
 8000d42:	f000 fc5f 	bl	8001604 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8000d46:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000d4a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d4c:	2301      	movs	r3, #1
 8000d4e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d50:	2300      	movs	r3, #0
 8000d52:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d54:	2300      	movs	r3, #0
 8000d56:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	4855      	ldr	r0, [pc, #340]	; (8000eb4 <MX_GPIO_Init+0x510>)
 8000d60:	f000 fc50 	bl	8001604 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8000d64:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8000d68:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d6a:	2302      	movs	r3, #2
 8000d6c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d72:	2300      	movs	r3, #0
 8000d74:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000d76:	230e      	movs	r3, #14
 8000d78:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d7e:	4619      	mov	r1, r3
 8000d80:	484d      	ldr	r0, [pc, #308]	; (8000eb8 <MX_GPIO_Init+0x514>)
 8000d82:	f000 fc3f 	bl	8001604 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8000d86:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8000d8a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d8c:	2302      	movs	r3, #2
 8000d8e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d90:	2300      	movs	r3, #0
 8000d92:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d94:	2300      	movs	r3, #0
 8000d96:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000d98:	230e      	movs	r3, #14
 8000d9a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000da0:	4619      	mov	r1, r3
 8000da2:	4846      	ldr	r0, [pc, #280]	; (8000ebc <MX_GPIO_Init+0x518>)
 8000da4:	f000 fc2e 	bl	8001604 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8000da8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000dac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000dae:	2312      	movs	r3, #18
 8000db0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db2:	2300      	movs	r3, #0
 8000db4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db6:	2300      	movs	r3, #0
 8000db8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000dba:	2304      	movs	r3, #4
 8000dbc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8000dbe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	483d      	ldr	r0, [pc, #244]	; (8000ebc <MX_GPIO_Init+0x518>)
 8000dc6:	f000 fc1d 	bl	8001604 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8000dca:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000dce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000dd0:	2312      	movs	r3, #18
 8000dd2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000ddc:	2304      	movs	r3, #4
 8000dde:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8000de0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000de4:	4619      	mov	r1, r3
 8000de6:	4836      	ldr	r0, [pc, #216]	; (8000ec0 <MX_GPIO_Init+0x51c>)
 8000de8:	f000 fc0c 	bl	8001604 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8000dec:	2348      	movs	r3, #72	; 0x48
 8000dee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df0:	2302      	movs	r3, #2
 8000df2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df4:	2300      	movs	r3, #0
 8000df6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000dfc:	230e      	movs	r3, #14
 8000dfe:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e04:	4619      	mov	r1, r3
 8000e06:	482b      	ldr	r0, [pc, #172]	; (8000eb4 <MX_GPIO_Init+0x510>)
 8000e08:	f000 fbfc 	bl	8001604 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8000e0c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000e10:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e12:	2302      	movs	r3, #2
 8000e14:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e16:	2300      	movs	r3, #0
 8000e18:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000e1e:	2309      	movs	r3, #9
 8000e20:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e26:	4619      	mov	r1, r3
 8000e28:	4823      	ldr	r0, [pc, #140]	; (8000eb8 <MX_GPIO_Init+0x514>)
 8000e2a:	f000 fbeb 	bl	8001604 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8000e2e:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000e32:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e34:	2301      	movs	r3, #1
 8000e36:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e44:	4619      	mov	r1, r3
 8000e46:	481c      	ldr	r0, [pc, #112]	; (8000eb8 <MX_GPIO_Init+0x514>)
 8000e48:	f000 fbdc 	bl	8001604 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000e4c:	2310      	movs	r3, #16
 8000e4e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e50:	2300      	movs	r3, #0
 8000e52:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e54:	2300      	movs	r3, #0
 8000e56:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	4814      	ldr	r0, [pc, #80]	; (8000eb0 <MX_GPIO_Init+0x50c>)
 8000e60:	f000 fbd0 	bl	8001604 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8000e64:	2360      	movs	r3, #96	; 0x60
 8000e66:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e68:	2302      	movs	r3, #2
 8000e6a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e70:	2303      	movs	r3, #3
 8000e72:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000e74:	230c      	movs	r3, #12
 8000e76:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	480c      	ldr	r0, [pc, #48]	; (8000eb0 <MX_GPIO_Init+0x50c>)
 8000e80:	f000 fbc0 	bl	8001604 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000e84:	2200      	movs	r2, #0
 8000e86:	2100      	movs	r1, #0
 8000e88:	2007      	movs	r0, #7
 8000e8a:	f000 fb91 	bl	80015b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000e8e:	2007      	movs	r0, #7
 8000e90:	f000 fbaa 	bl	80015e8 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8000e94:	2200      	movs	r2, #0
 8000e96:	2100      	movs	r1, #0
 8000e98:	2008      	movs	r0, #8
 8000e9a:	f000 fb89 	bl	80015b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000e9e:	2008      	movs	r0, #8
 8000ea0:	f000 fba2 	bl	80015e8 <HAL_NVIC_EnableIRQ>

}
 8000ea4:	bf00      	nop
 8000ea6:	3738      	adds	r7, #56	; 0x38
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}
 8000eac:	40021000 	.word	0x40021000
 8000eb0:	40020400 	.word	0x40020400
 8000eb4:	40020c00 	.word	0x40020c00
 8000eb8:	40021800 	.word	0x40021800
 8000ebc:	40020800 	.word	0x40020800
 8000ec0:	40020000 	.word	0x40020000

08000ec4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ec8:	f000 fa54 	bl	8001374 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ecc:	f000 f824 	bl	8000f18 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ed0:	f7ff fd68 	bl	80009a4 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000ed4:	f000 f9b2 	bl	800123c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  Lamp_ctor(&lamp);
 8000ed8:	480d      	ldr	r0, [pc, #52]	; (8000f10 <main+0x4c>)
 8000eda:	f004 fa5f 	bl	800539c <Lamp_ctor>
  QHSM_INIT( &lamp.super, (QEvt *)0, 0 );
 8000ede:	4b0c      	ldr	r3, [pc, #48]	; (8000f10 <main+0x4c>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d103      	bne.n	8000eee <main+0x2a>
 8000ee6:	215d      	movs	r1, #93	; 0x5d
 8000ee8:	480a      	ldr	r0, [pc, #40]	; (8000f14 <main+0x50>)
 8000eea:	f000 f881 	bl	8000ff0 <Q_onAssert>
 8000eee:	4b08      	ldr	r3, [pc, #32]	; (8000f10 <main+0x4c>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	2100      	movs	r1, #0
 8000ef8:	4805      	ldr	r0, [pc, #20]	; (8000f10 <main+0x4c>)
 8000efa:	4798      	blx	r3

  /* App Init */
  AppInit();
 8000efc:	f7ff fb02 	bl	8000504 <AppInit>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	 HAL_Delay(500);
 8000f00:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f04:	f000 fa78 	bl	80013f8 <HAL_Delay>
	 Lamp_blink(&lamp);
 8000f08:	4801      	ldr	r0, [pc, #4]	; (8000f10 <main+0x4c>)
 8000f0a:	f004 fa69 	bl	80053e0 <Lamp_blink>
	 HAL_Delay(500);
 8000f0e:	e7f7      	b.n	8000f00 <main+0x3c>
 8000f10:	20000048 	.word	0x20000048
 8000f14:	08005c60 	.word	0x08005c60

08000f18 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b094      	sub	sp, #80	; 0x50
 8000f1c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f1e:	f107 0320 	add.w	r3, r7, #32
 8000f22:	2230      	movs	r2, #48	; 0x30
 8000f24:	2100      	movs	r1, #0
 8000f26:	4618      	mov	r0, r3
 8000f28:	f004 fdfc 	bl	8005b24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f2c:	f107 030c 	add.w	r3, r7, #12
 8000f30:	2200      	movs	r2, #0
 8000f32:	601a      	str	r2, [r3, #0]
 8000f34:	605a      	str	r2, [r3, #4]
 8000f36:	609a      	str	r2, [r3, #8]
 8000f38:	60da      	str	r2, [r3, #12]
 8000f3a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	60bb      	str	r3, [r7, #8]
 8000f40:	4b29      	ldr	r3, [pc, #164]	; (8000fe8 <SystemClock_Config+0xd0>)
 8000f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f44:	4a28      	ldr	r2, [pc, #160]	; (8000fe8 <SystemClock_Config+0xd0>)
 8000f46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f4a:	6413      	str	r3, [r2, #64]	; 0x40
 8000f4c:	4b26      	ldr	r3, [pc, #152]	; (8000fe8 <SystemClock_Config+0xd0>)
 8000f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f54:	60bb      	str	r3, [r7, #8]
 8000f56:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000f58:	2300      	movs	r3, #0
 8000f5a:	607b      	str	r3, [r7, #4]
 8000f5c:	4b23      	ldr	r3, [pc, #140]	; (8000fec <SystemClock_Config+0xd4>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000f64:	4a21      	ldr	r2, [pc, #132]	; (8000fec <SystemClock_Config+0xd4>)
 8000f66:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f6a:	6013      	str	r3, [r2, #0]
 8000f6c:	4b1f      	ldr	r3, [pc, #124]	; (8000fec <SystemClock_Config+0xd4>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f74:	607b      	str	r3, [r7, #4]
 8000f76:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f78:	2302      	movs	r3, #2
 8000f7a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f80:	2310      	movs	r3, #16
 8000f82:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f84:	2302      	movs	r3, #2
 8000f86:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000f8c:	2308      	movs	r3, #8
 8000f8e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000f90:	2332      	movs	r3, #50	; 0x32
 8000f92:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000f94:	2304      	movs	r3, #4
 8000f96:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000f98:	2307      	movs	r3, #7
 8000f9a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f9c:	f107 0320 	add.w	r3, r7, #32
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f000 fd27 	bl	80019f4 <HAL_RCC_OscConfig>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d001      	beq.n	8000fb0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000fac:	f000 f85c 	bl	8001068 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fb0:	230f      	movs	r3, #15
 8000fb2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fb4:	2302      	movs	r3, #2
 8000fb6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8000fbc:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000fc0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8000fc2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000fc6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000fc8:	f107 030c 	add.w	r3, r7, #12
 8000fcc:	2100      	movs	r1, #0
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f000 ff88 	bl	8001ee4 <HAL_RCC_ClockConfig>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d001      	beq.n	8000fde <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000fda:	f000 f845 	bl	8001068 <Error_Handler>
  }
}
 8000fde:	bf00      	nop
 8000fe0:	3750      	adds	r7, #80	; 0x50
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	40023800 	.word	0x40023800
 8000fec:	40007000 	.word	0x40007000

08000ff0 <Q_onAssert>:

/* USER CODE BEGIN 4 */
void Q_onAssert( char const * 	module, int_t 	location ){
 8000ff0:	b590      	push	{r4, r7, lr}
 8000ff2:	b087      	sub	sp, #28
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
 8000ff8:	6039      	str	r1, [r7, #0]
	uint8_t log[] = "Q_onAssert\r\n";
 8000ffa:	4b06      	ldr	r3, [pc, #24]	; (8001014 <Q_onAssert+0x24>)
 8000ffc:	f107 0408 	add.w	r4, r7, #8
 8001000:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001002:	c407      	stmia	r4!, {r0, r1, r2}
 8001004:	7023      	strb	r3, [r4, #0]
	uart_log(log);
 8001006:	f107 0308 	add.w	r3, r7, #8
 800100a:	4618      	mov	r0, r3
 800100c:	f7ff fb5c 	bl	80006c8 <uart_log>
	while(1);
 8001010:	e7fe      	b.n	8001010 <Q_onAssert+0x20>
 8001012:	bf00      	nop
 8001014:	08005c38 	.word	0x08005c38

08001018 <HAL_GPIO_EXTI_Callback>:
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0
 800101e:	4603      	mov	r3, r0
 8001020:	80fb      	strh	r3, [r7, #6]

	if(GPIO_Pin == BUTTON_2_Pin){
 8001022:	88fb      	ldrh	r3, [r7, #6]
 8001024:	2b04      	cmp	r3, #4
 8001026:	d103      	bne.n	8001030 <HAL_GPIO_EXTI_Callback+0x18>
		Lamp_pushSwitch(&lamp);
 8001028:	4805      	ldr	r0, [pc, #20]	; (8001040 <HAL_GPIO_EXTI_Callback+0x28>)
 800102a:	f004 f9a5 	bl	8005378 <Lamp_pushSwitch>
	}else{
		Lamp_holdSwitch(&lamp);
	}
}
 800102e:	e002      	b.n	8001036 <HAL_GPIO_EXTI_Callback+0x1e>
		Lamp_holdSwitch(&lamp);
 8001030:	4803      	ldr	r0, [pc, #12]	; (8001040 <HAL_GPIO_EXTI_Callback+0x28>)
 8001032:	f004 f9c3 	bl	80053bc <Lamp_holdSwitch>
}
 8001036:	bf00      	nop
 8001038:	3708      	adds	r7, #8
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	20000048 	.word	0x20000048

08001044 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4a04      	ldr	r2, [pc, #16]	; (8001064 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d101      	bne.n	800105a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001056:	f000 f9af 	bl	80013b8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800105a:	bf00      	nop
 800105c:	3708      	adds	r7, #8
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	40001000 	.word	0x40001000

08001068 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800106c:	b672      	cpsid	i
}
 800106e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001070:	e7fe      	b.n	8001070 <Error_Handler+0x8>
	...

08001074 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001074:	b480      	push	{r7}
 8001076:	b083      	sub	sp, #12
 8001078:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800107a:	2300      	movs	r3, #0
 800107c:	607b      	str	r3, [r7, #4]
 800107e:	4b10      	ldr	r3, [pc, #64]	; (80010c0 <HAL_MspInit+0x4c>)
 8001080:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001082:	4a0f      	ldr	r2, [pc, #60]	; (80010c0 <HAL_MspInit+0x4c>)
 8001084:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001088:	6453      	str	r3, [r2, #68]	; 0x44
 800108a:	4b0d      	ldr	r3, [pc, #52]	; (80010c0 <HAL_MspInit+0x4c>)
 800108c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800108e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001092:	607b      	str	r3, [r7, #4]
 8001094:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001096:	2300      	movs	r3, #0
 8001098:	603b      	str	r3, [r7, #0]
 800109a:	4b09      	ldr	r3, [pc, #36]	; (80010c0 <HAL_MspInit+0x4c>)
 800109c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800109e:	4a08      	ldr	r2, [pc, #32]	; (80010c0 <HAL_MspInit+0x4c>)
 80010a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010a4:	6413      	str	r3, [r2, #64]	; 0x40
 80010a6:	4b06      	ldr	r3, [pc, #24]	; (80010c0 <HAL_MspInit+0x4c>)
 80010a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010ae:	603b      	str	r3, [r7, #0]
 80010b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010b2:	bf00      	nop
 80010b4:	370c      	adds	r7, #12
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr
 80010be:	bf00      	nop
 80010c0:	40023800 	.word	0x40023800

080010c4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b08e      	sub	sp, #56	; 0x38
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80010cc:	2300      	movs	r3, #0
 80010ce:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80010d0:	2300      	movs	r3, #0
 80010d2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80010d4:	2300      	movs	r3, #0
 80010d6:	60fb      	str	r3, [r7, #12]
 80010d8:	4b33      	ldr	r3, [pc, #204]	; (80011a8 <HAL_InitTick+0xe4>)
 80010da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010dc:	4a32      	ldr	r2, [pc, #200]	; (80011a8 <HAL_InitTick+0xe4>)
 80010de:	f043 0310 	orr.w	r3, r3, #16
 80010e2:	6413      	str	r3, [r2, #64]	; 0x40
 80010e4:	4b30      	ldr	r3, [pc, #192]	; (80011a8 <HAL_InitTick+0xe4>)
 80010e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e8:	f003 0310 	and.w	r3, r3, #16
 80010ec:	60fb      	str	r3, [r7, #12]
 80010ee:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80010f0:	f107 0210 	add.w	r2, r7, #16
 80010f4:	f107 0314 	add.w	r3, r7, #20
 80010f8:	4611      	mov	r1, r2
 80010fa:	4618      	mov	r0, r3
 80010fc:	f001 f912 	bl	8002324 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001100:	6a3b      	ldr	r3, [r7, #32]
 8001102:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001106:	2b00      	cmp	r3, #0
 8001108:	d103      	bne.n	8001112 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800110a:	f001 f8e3 	bl	80022d4 <HAL_RCC_GetPCLK1Freq>
 800110e:	6378      	str	r0, [r7, #52]	; 0x34
 8001110:	e004      	b.n	800111c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001112:	f001 f8df 	bl	80022d4 <HAL_RCC_GetPCLK1Freq>
 8001116:	4603      	mov	r3, r0
 8001118:	005b      	lsls	r3, r3, #1
 800111a:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800111c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800111e:	4a23      	ldr	r2, [pc, #140]	; (80011ac <HAL_InitTick+0xe8>)
 8001120:	fba2 2303 	umull	r2, r3, r2, r3
 8001124:	0c9b      	lsrs	r3, r3, #18
 8001126:	3b01      	subs	r3, #1
 8001128:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800112a:	4b21      	ldr	r3, [pc, #132]	; (80011b0 <HAL_InitTick+0xec>)
 800112c:	4a21      	ldr	r2, [pc, #132]	; (80011b4 <HAL_InitTick+0xf0>)
 800112e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001130:	4b1f      	ldr	r3, [pc, #124]	; (80011b0 <HAL_InitTick+0xec>)
 8001132:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001136:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001138:	4a1d      	ldr	r2, [pc, #116]	; (80011b0 <HAL_InitTick+0xec>)
 800113a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800113c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800113e:	4b1c      	ldr	r3, [pc, #112]	; (80011b0 <HAL_InitTick+0xec>)
 8001140:	2200      	movs	r2, #0
 8001142:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001144:	4b1a      	ldr	r3, [pc, #104]	; (80011b0 <HAL_InitTick+0xec>)
 8001146:	2200      	movs	r2, #0
 8001148:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800114a:	4b19      	ldr	r3, [pc, #100]	; (80011b0 <HAL_InitTick+0xec>)
 800114c:	2200      	movs	r2, #0
 800114e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001150:	4817      	ldr	r0, [pc, #92]	; (80011b0 <HAL_InitTick+0xec>)
 8001152:	f001 f919 	bl	8002388 <HAL_TIM_Base_Init>
 8001156:	4603      	mov	r3, r0
 8001158:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800115c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001160:	2b00      	cmp	r3, #0
 8001162:	d11b      	bne.n	800119c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001164:	4812      	ldr	r0, [pc, #72]	; (80011b0 <HAL_InitTick+0xec>)
 8001166:	f001 f969 	bl	800243c <HAL_TIM_Base_Start_IT>
 800116a:	4603      	mov	r3, r0
 800116c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001170:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001174:	2b00      	cmp	r3, #0
 8001176:	d111      	bne.n	800119c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001178:	2036      	movs	r0, #54	; 0x36
 800117a:	f000 fa35 	bl	80015e8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	2b0f      	cmp	r3, #15
 8001182:	d808      	bhi.n	8001196 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001184:	2200      	movs	r2, #0
 8001186:	6879      	ldr	r1, [r7, #4]
 8001188:	2036      	movs	r0, #54	; 0x36
 800118a:	f000 fa11 	bl	80015b0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800118e:	4a0a      	ldr	r2, [pc, #40]	; (80011b8 <HAL_InitTick+0xf4>)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	6013      	str	r3, [r2, #0]
 8001194:	e002      	b.n	800119c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8001196:	2301      	movs	r3, #1
 8001198:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800119c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80011a0:	4618      	mov	r0, r3
 80011a2:	3738      	adds	r7, #56	; 0x38
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	40023800 	.word	0x40023800
 80011ac:	431bde83 	.word	0x431bde83
 80011b0:	20000060 	.word	0x20000060
 80011b4:	40001000 	.word	0x40001000
 80011b8:	20000004 	.word	0x20000004

080011bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011c0:	e7fe      	b.n	80011c0 <NMI_Handler+0x4>

080011c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011c2:	b480      	push	{r7}
 80011c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011c6:	e7fe      	b.n	80011c6 <HardFault_Handler+0x4>

080011c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011cc:	e7fe      	b.n	80011cc <MemManage_Handler+0x4>

080011ce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011ce:	b480      	push	{r7}
 80011d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011d2:	e7fe      	b.n	80011d2 <BusFault_Handler+0x4>

080011d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011d8:	e7fe      	b.n	80011d8 <UsageFault_Handler+0x4>

080011da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011da:	b480      	push	{r7}
 80011dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011de:	bf00      	nop
 80011e0:	46bd      	mov	sp, r7
 80011e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e6:	4770      	bx	lr

080011e8 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_1_Pin);
 80011ec:	2002      	movs	r0, #2
 80011ee:	f000 fbe9 	bl	80019c4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80011f2:	bf00      	nop
 80011f4:	bd80      	pop	{r7, pc}

080011f6 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80011f6:	b580      	push	{r7, lr}
 80011f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_2_Pin);
 80011fa:	2004      	movs	r0, #4
 80011fc:	f000 fbe2 	bl	80019c4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001200:	bf00      	nop
 8001202:	bd80      	pop	{r7, pc}

08001204 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001208:	4802      	ldr	r0, [pc, #8]	; (8001214 <TIM6_DAC_IRQHandler+0x10>)
 800120a:	f001 f987 	bl	800251c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800120e:	bf00      	nop
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	20000060 	.word	0x20000060

08001218 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800121c:	4b06      	ldr	r3, [pc, #24]	; (8001238 <SystemInit+0x20>)
 800121e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001222:	4a05      	ldr	r2, [pc, #20]	; (8001238 <SystemInit+0x20>)
 8001224:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001228:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800122c:	bf00      	nop
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr
 8001236:	bf00      	nop
 8001238:	e000ed00 	.word	0xe000ed00

0800123c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001240:	4b11      	ldr	r3, [pc, #68]	; (8001288 <MX_USART1_UART_Init+0x4c>)
 8001242:	4a12      	ldr	r2, [pc, #72]	; (800128c <MX_USART1_UART_Init+0x50>)
 8001244:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001246:	4b10      	ldr	r3, [pc, #64]	; (8001288 <MX_USART1_UART_Init+0x4c>)
 8001248:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800124c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800124e:	4b0e      	ldr	r3, [pc, #56]	; (8001288 <MX_USART1_UART_Init+0x4c>)
 8001250:	2200      	movs	r2, #0
 8001252:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001254:	4b0c      	ldr	r3, [pc, #48]	; (8001288 <MX_USART1_UART_Init+0x4c>)
 8001256:	2200      	movs	r2, #0
 8001258:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800125a:	4b0b      	ldr	r3, [pc, #44]	; (8001288 <MX_USART1_UART_Init+0x4c>)
 800125c:	2200      	movs	r2, #0
 800125e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001260:	4b09      	ldr	r3, [pc, #36]	; (8001288 <MX_USART1_UART_Init+0x4c>)
 8001262:	220c      	movs	r2, #12
 8001264:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001266:	4b08      	ldr	r3, [pc, #32]	; (8001288 <MX_USART1_UART_Init+0x4c>)
 8001268:	2200      	movs	r2, #0
 800126a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800126c:	4b06      	ldr	r3, [pc, #24]	; (8001288 <MX_USART1_UART_Init+0x4c>)
 800126e:	2200      	movs	r2, #0
 8001270:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001272:	4805      	ldr	r0, [pc, #20]	; (8001288 <MX_USART1_UART_Init+0x4c>)
 8001274:	f001 fb36 	bl	80028e4 <HAL_UART_Init>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d001      	beq.n	8001282 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800127e:	f7ff fef3 	bl	8001068 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001282:	bf00      	nop
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	200000a8 	.word	0x200000a8
 800128c:	40011000 	.word	0x40011000

08001290 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b08a      	sub	sp, #40	; 0x28
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001298:	f107 0314 	add.w	r3, r7, #20
 800129c:	2200      	movs	r2, #0
 800129e:	601a      	str	r2, [r3, #0]
 80012a0:	605a      	str	r2, [r3, #4]
 80012a2:	609a      	str	r2, [r3, #8]
 80012a4:	60da      	str	r2, [r3, #12]
 80012a6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4a19      	ldr	r2, [pc, #100]	; (8001314 <HAL_UART_MspInit+0x84>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d12c      	bne.n	800130c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80012b2:	2300      	movs	r3, #0
 80012b4:	613b      	str	r3, [r7, #16]
 80012b6:	4b18      	ldr	r3, [pc, #96]	; (8001318 <HAL_UART_MspInit+0x88>)
 80012b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ba:	4a17      	ldr	r2, [pc, #92]	; (8001318 <HAL_UART_MspInit+0x88>)
 80012bc:	f043 0310 	orr.w	r3, r3, #16
 80012c0:	6453      	str	r3, [r2, #68]	; 0x44
 80012c2:	4b15      	ldr	r3, [pc, #84]	; (8001318 <HAL_UART_MspInit+0x88>)
 80012c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012c6:	f003 0310 	and.w	r3, r3, #16
 80012ca:	613b      	str	r3, [r7, #16]
 80012cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ce:	2300      	movs	r3, #0
 80012d0:	60fb      	str	r3, [r7, #12]
 80012d2:	4b11      	ldr	r3, [pc, #68]	; (8001318 <HAL_UART_MspInit+0x88>)
 80012d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d6:	4a10      	ldr	r2, [pc, #64]	; (8001318 <HAL_UART_MspInit+0x88>)
 80012d8:	f043 0301 	orr.w	r3, r3, #1
 80012dc:	6313      	str	r3, [r2, #48]	; 0x30
 80012de:	4b0e      	ldr	r3, [pc, #56]	; (8001318 <HAL_UART_MspInit+0x88>)
 80012e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e2:	f003 0301 	and.w	r3, r3, #1
 80012e6:	60fb      	str	r3, [r7, #12]
 80012e8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80012ea:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80012ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f0:	2302      	movs	r3, #2
 80012f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f4:	2300      	movs	r3, #0
 80012f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012f8:	2303      	movs	r3, #3
 80012fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80012fc:	2307      	movs	r3, #7
 80012fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001300:	f107 0314 	add.w	r3, r7, #20
 8001304:	4619      	mov	r1, r3
 8001306:	4805      	ldr	r0, [pc, #20]	; (800131c <HAL_UART_MspInit+0x8c>)
 8001308:	f000 f97c 	bl	8001604 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800130c:	bf00      	nop
 800130e:	3728      	adds	r7, #40	; 0x28
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}
 8001314:	40011000 	.word	0x40011000
 8001318:	40023800 	.word	0x40023800
 800131c:	40020000 	.word	0x40020000

08001320 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001320:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001358 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001324:	480d      	ldr	r0, [pc, #52]	; (800135c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001326:	490e      	ldr	r1, [pc, #56]	; (8001360 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001328:	4a0e      	ldr	r2, [pc, #56]	; (8001364 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800132a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800132c:	e002      	b.n	8001334 <LoopCopyDataInit>

0800132e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800132e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001330:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001332:	3304      	adds	r3, #4

08001334 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001334:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001336:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001338:	d3f9      	bcc.n	800132e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800133a:	4a0b      	ldr	r2, [pc, #44]	; (8001368 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800133c:	4c0b      	ldr	r4, [pc, #44]	; (800136c <LoopFillZerobss+0x26>)
  movs r3, #0
 800133e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001340:	e001      	b.n	8001346 <LoopFillZerobss>

08001342 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001342:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001344:	3204      	adds	r2, #4

08001346 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001346:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001348:	d3fb      	bcc.n	8001342 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800134a:	f7ff ff65 	bl	8001218 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800134e:	f004 fbb7 	bl	8005ac0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001352:	f7ff fdb7 	bl	8000ec4 <main>
  bx  lr    
 8001356:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001358:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800135c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001360:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8001364:	08005cbc 	.word	0x08005cbc
  ldr r2, =_sbss
 8001368:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 800136c:	20012e98 	.word	0x20012e98

08001370 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001370:	e7fe      	b.n	8001370 <ADC_IRQHandler>
	...

08001374 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001378:	4b0e      	ldr	r3, [pc, #56]	; (80013b4 <HAL_Init+0x40>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a0d      	ldr	r2, [pc, #52]	; (80013b4 <HAL_Init+0x40>)
 800137e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001382:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001384:	4b0b      	ldr	r3, [pc, #44]	; (80013b4 <HAL_Init+0x40>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a0a      	ldr	r2, [pc, #40]	; (80013b4 <HAL_Init+0x40>)
 800138a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800138e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001390:	4b08      	ldr	r3, [pc, #32]	; (80013b4 <HAL_Init+0x40>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4a07      	ldr	r2, [pc, #28]	; (80013b4 <HAL_Init+0x40>)
 8001396:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800139a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800139c:	2003      	movs	r0, #3
 800139e:	f000 f8fc 	bl	800159a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013a2:	2000      	movs	r0, #0
 80013a4:	f7ff fe8e 	bl	80010c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013a8:	f7ff fe64 	bl	8001074 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013ac:	2300      	movs	r3, #0
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	40023c00 	.word	0x40023c00

080013b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013bc:	4b06      	ldr	r3, [pc, #24]	; (80013d8 <HAL_IncTick+0x20>)
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	461a      	mov	r2, r3
 80013c2:	4b06      	ldr	r3, [pc, #24]	; (80013dc <HAL_IncTick+0x24>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4413      	add	r3, r2
 80013c8:	4a04      	ldr	r2, [pc, #16]	; (80013dc <HAL_IncTick+0x24>)
 80013ca:	6013      	str	r3, [r2, #0]
}
 80013cc:	bf00      	nop
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr
 80013d6:	bf00      	nop
 80013d8:	20000008 	.word	0x20000008
 80013dc:	200000ec 	.word	0x200000ec

080013e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0
  return uwTick;
 80013e4:	4b03      	ldr	r3, [pc, #12]	; (80013f4 <HAL_GetTick+0x14>)
 80013e6:	681b      	ldr	r3, [r3, #0]
}
 80013e8:	4618      	mov	r0, r3
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr
 80013f2:	bf00      	nop
 80013f4:	200000ec 	.word	0x200000ec

080013f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b084      	sub	sp, #16
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001400:	f7ff ffee 	bl	80013e0 <HAL_GetTick>
 8001404:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001410:	d005      	beq.n	800141e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001412:	4b0a      	ldr	r3, [pc, #40]	; (800143c <HAL_Delay+0x44>)
 8001414:	781b      	ldrb	r3, [r3, #0]
 8001416:	461a      	mov	r2, r3
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	4413      	add	r3, r2
 800141c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800141e:	bf00      	nop
 8001420:	f7ff ffde 	bl	80013e0 <HAL_GetTick>
 8001424:	4602      	mov	r2, r0
 8001426:	68bb      	ldr	r3, [r7, #8]
 8001428:	1ad3      	subs	r3, r2, r3
 800142a:	68fa      	ldr	r2, [r7, #12]
 800142c:	429a      	cmp	r2, r3
 800142e:	d8f7      	bhi.n	8001420 <HAL_Delay+0x28>
  {
  }
}
 8001430:	bf00      	nop
 8001432:	bf00      	nop
 8001434:	3710      	adds	r7, #16
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	20000008 	.word	0x20000008

08001440 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001440:	b480      	push	{r7}
 8001442:	b085      	sub	sp, #20
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	f003 0307 	and.w	r3, r3, #7
 800144e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001450:	4b0c      	ldr	r3, [pc, #48]	; (8001484 <__NVIC_SetPriorityGrouping+0x44>)
 8001452:	68db      	ldr	r3, [r3, #12]
 8001454:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001456:	68ba      	ldr	r2, [r7, #8]
 8001458:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800145c:	4013      	ands	r3, r2
 800145e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001464:	68bb      	ldr	r3, [r7, #8]
 8001466:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001468:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800146c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001470:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001472:	4a04      	ldr	r2, [pc, #16]	; (8001484 <__NVIC_SetPriorityGrouping+0x44>)
 8001474:	68bb      	ldr	r3, [r7, #8]
 8001476:	60d3      	str	r3, [r2, #12]
}
 8001478:	bf00      	nop
 800147a:	3714      	adds	r7, #20
 800147c:	46bd      	mov	sp, r7
 800147e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001482:	4770      	bx	lr
 8001484:	e000ed00 	.word	0xe000ed00

08001488 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800148c:	4b04      	ldr	r3, [pc, #16]	; (80014a0 <__NVIC_GetPriorityGrouping+0x18>)
 800148e:	68db      	ldr	r3, [r3, #12]
 8001490:	0a1b      	lsrs	r3, r3, #8
 8001492:	f003 0307 	and.w	r3, r3, #7
}
 8001496:	4618      	mov	r0, r3
 8001498:	46bd      	mov	sp, r7
 800149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149e:	4770      	bx	lr
 80014a0:	e000ed00 	.word	0xe000ed00

080014a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	4603      	mov	r3, r0
 80014ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	db0b      	blt.n	80014ce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014b6:	79fb      	ldrb	r3, [r7, #7]
 80014b8:	f003 021f 	and.w	r2, r3, #31
 80014bc:	4907      	ldr	r1, [pc, #28]	; (80014dc <__NVIC_EnableIRQ+0x38>)
 80014be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014c2:	095b      	lsrs	r3, r3, #5
 80014c4:	2001      	movs	r0, #1
 80014c6:	fa00 f202 	lsl.w	r2, r0, r2
 80014ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80014ce:	bf00      	nop
 80014d0:	370c      	adds	r7, #12
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr
 80014da:	bf00      	nop
 80014dc:	e000e100 	.word	0xe000e100

080014e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b083      	sub	sp, #12
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	4603      	mov	r3, r0
 80014e8:	6039      	str	r1, [r7, #0]
 80014ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	db0a      	blt.n	800150a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	b2da      	uxtb	r2, r3
 80014f8:	490c      	ldr	r1, [pc, #48]	; (800152c <__NVIC_SetPriority+0x4c>)
 80014fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014fe:	0112      	lsls	r2, r2, #4
 8001500:	b2d2      	uxtb	r2, r2
 8001502:	440b      	add	r3, r1
 8001504:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001508:	e00a      	b.n	8001520 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	b2da      	uxtb	r2, r3
 800150e:	4908      	ldr	r1, [pc, #32]	; (8001530 <__NVIC_SetPriority+0x50>)
 8001510:	79fb      	ldrb	r3, [r7, #7]
 8001512:	f003 030f 	and.w	r3, r3, #15
 8001516:	3b04      	subs	r3, #4
 8001518:	0112      	lsls	r2, r2, #4
 800151a:	b2d2      	uxtb	r2, r2
 800151c:	440b      	add	r3, r1
 800151e:	761a      	strb	r2, [r3, #24]
}
 8001520:	bf00      	nop
 8001522:	370c      	adds	r7, #12
 8001524:	46bd      	mov	sp, r7
 8001526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152a:	4770      	bx	lr
 800152c:	e000e100 	.word	0xe000e100
 8001530:	e000ed00 	.word	0xe000ed00

08001534 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001534:	b480      	push	{r7}
 8001536:	b089      	sub	sp, #36	; 0x24
 8001538:	af00      	add	r7, sp, #0
 800153a:	60f8      	str	r0, [r7, #12]
 800153c:	60b9      	str	r1, [r7, #8]
 800153e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	f003 0307 	and.w	r3, r3, #7
 8001546:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001548:	69fb      	ldr	r3, [r7, #28]
 800154a:	f1c3 0307 	rsb	r3, r3, #7
 800154e:	2b04      	cmp	r3, #4
 8001550:	bf28      	it	cs
 8001552:	2304      	movcs	r3, #4
 8001554:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001556:	69fb      	ldr	r3, [r7, #28]
 8001558:	3304      	adds	r3, #4
 800155a:	2b06      	cmp	r3, #6
 800155c:	d902      	bls.n	8001564 <NVIC_EncodePriority+0x30>
 800155e:	69fb      	ldr	r3, [r7, #28]
 8001560:	3b03      	subs	r3, #3
 8001562:	e000      	b.n	8001566 <NVIC_EncodePriority+0x32>
 8001564:	2300      	movs	r3, #0
 8001566:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001568:	f04f 32ff 	mov.w	r2, #4294967295
 800156c:	69bb      	ldr	r3, [r7, #24]
 800156e:	fa02 f303 	lsl.w	r3, r2, r3
 8001572:	43da      	mvns	r2, r3
 8001574:	68bb      	ldr	r3, [r7, #8]
 8001576:	401a      	ands	r2, r3
 8001578:	697b      	ldr	r3, [r7, #20]
 800157a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800157c:	f04f 31ff 	mov.w	r1, #4294967295
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	fa01 f303 	lsl.w	r3, r1, r3
 8001586:	43d9      	mvns	r1, r3
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800158c:	4313      	orrs	r3, r2
         );
}
 800158e:	4618      	mov	r0, r3
 8001590:	3724      	adds	r7, #36	; 0x24
 8001592:	46bd      	mov	sp, r7
 8001594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001598:	4770      	bx	lr

0800159a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800159a:	b580      	push	{r7, lr}
 800159c:	b082      	sub	sp, #8
 800159e:	af00      	add	r7, sp, #0
 80015a0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015a2:	6878      	ldr	r0, [r7, #4]
 80015a4:	f7ff ff4c 	bl	8001440 <__NVIC_SetPriorityGrouping>
}
 80015a8:	bf00      	nop
 80015aa:	3708      	adds	r7, #8
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}

080015b0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b086      	sub	sp, #24
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	4603      	mov	r3, r0
 80015b8:	60b9      	str	r1, [r7, #8]
 80015ba:	607a      	str	r2, [r7, #4]
 80015bc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015be:	2300      	movs	r3, #0
 80015c0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015c2:	f7ff ff61 	bl	8001488 <__NVIC_GetPriorityGrouping>
 80015c6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015c8:	687a      	ldr	r2, [r7, #4]
 80015ca:	68b9      	ldr	r1, [r7, #8]
 80015cc:	6978      	ldr	r0, [r7, #20]
 80015ce:	f7ff ffb1 	bl	8001534 <NVIC_EncodePriority>
 80015d2:	4602      	mov	r2, r0
 80015d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015d8:	4611      	mov	r1, r2
 80015da:	4618      	mov	r0, r3
 80015dc:	f7ff ff80 	bl	80014e0 <__NVIC_SetPriority>
}
 80015e0:	bf00      	nop
 80015e2:	3718      	adds	r7, #24
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}

080015e8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b082      	sub	sp, #8
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	4603      	mov	r3, r0
 80015f0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015f6:	4618      	mov	r0, r3
 80015f8:	f7ff ff54 	bl	80014a4 <__NVIC_EnableIRQ>
}
 80015fc:	bf00      	nop
 80015fe:	3708      	adds	r7, #8
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}

08001604 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001604:	b480      	push	{r7}
 8001606:	b089      	sub	sp, #36	; 0x24
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
 800160c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800160e:	2300      	movs	r3, #0
 8001610:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001612:	2300      	movs	r3, #0
 8001614:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001616:	2300      	movs	r3, #0
 8001618:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800161a:	2300      	movs	r3, #0
 800161c:	61fb      	str	r3, [r7, #28]
 800161e:	e177      	b.n	8001910 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001620:	2201      	movs	r2, #1
 8001622:	69fb      	ldr	r3, [r7, #28]
 8001624:	fa02 f303 	lsl.w	r3, r2, r3
 8001628:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	697a      	ldr	r2, [r7, #20]
 8001630:	4013      	ands	r3, r2
 8001632:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001634:	693a      	ldr	r2, [r7, #16]
 8001636:	697b      	ldr	r3, [r7, #20]
 8001638:	429a      	cmp	r2, r3
 800163a:	f040 8166 	bne.w	800190a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	f003 0303 	and.w	r3, r3, #3
 8001646:	2b01      	cmp	r3, #1
 8001648:	d005      	beq.n	8001656 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001652:	2b02      	cmp	r3, #2
 8001654:	d130      	bne.n	80016b8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	689b      	ldr	r3, [r3, #8]
 800165a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800165c:	69fb      	ldr	r3, [r7, #28]
 800165e:	005b      	lsls	r3, r3, #1
 8001660:	2203      	movs	r2, #3
 8001662:	fa02 f303 	lsl.w	r3, r2, r3
 8001666:	43db      	mvns	r3, r3
 8001668:	69ba      	ldr	r2, [r7, #24]
 800166a:	4013      	ands	r3, r2
 800166c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	68da      	ldr	r2, [r3, #12]
 8001672:	69fb      	ldr	r3, [r7, #28]
 8001674:	005b      	lsls	r3, r3, #1
 8001676:	fa02 f303 	lsl.w	r3, r2, r3
 800167a:	69ba      	ldr	r2, [r7, #24]
 800167c:	4313      	orrs	r3, r2
 800167e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	69ba      	ldr	r2, [r7, #24]
 8001684:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800168c:	2201      	movs	r2, #1
 800168e:	69fb      	ldr	r3, [r7, #28]
 8001690:	fa02 f303 	lsl.w	r3, r2, r3
 8001694:	43db      	mvns	r3, r3
 8001696:	69ba      	ldr	r2, [r7, #24]
 8001698:	4013      	ands	r3, r2
 800169a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	091b      	lsrs	r3, r3, #4
 80016a2:	f003 0201 	and.w	r2, r3, #1
 80016a6:	69fb      	ldr	r3, [r7, #28]
 80016a8:	fa02 f303 	lsl.w	r3, r2, r3
 80016ac:	69ba      	ldr	r2, [r7, #24]
 80016ae:	4313      	orrs	r3, r2
 80016b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	69ba      	ldr	r2, [r7, #24]
 80016b6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	f003 0303 	and.w	r3, r3, #3
 80016c0:	2b03      	cmp	r3, #3
 80016c2:	d017      	beq.n	80016f4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	68db      	ldr	r3, [r3, #12]
 80016c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80016ca:	69fb      	ldr	r3, [r7, #28]
 80016cc:	005b      	lsls	r3, r3, #1
 80016ce:	2203      	movs	r2, #3
 80016d0:	fa02 f303 	lsl.w	r3, r2, r3
 80016d4:	43db      	mvns	r3, r3
 80016d6:	69ba      	ldr	r2, [r7, #24]
 80016d8:	4013      	ands	r3, r2
 80016da:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	689a      	ldr	r2, [r3, #8]
 80016e0:	69fb      	ldr	r3, [r7, #28]
 80016e2:	005b      	lsls	r3, r3, #1
 80016e4:	fa02 f303 	lsl.w	r3, r2, r3
 80016e8:	69ba      	ldr	r2, [r7, #24]
 80016ea:	4313      	orrs	r3, r2
 80016ec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	69ba      	ldr	r2, [r7, #24]
 80016f2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	f003 0303 	and.w	r3, r3, #3
 80016fc:	2b02      	cmp	r3, #2
 80016fe:	d123      	bne.n	8001748 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001700:	69fb      	ldr	r3, [r7, #28]
 8001702:	08da      	lsrs	r2, r3, #3
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	3208      	adds	r2, #8
 8001708:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800170c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800170e:	69fb      	ldr	r3, [r7, #28]
 8001710:	f003 0307 	and.w	r3, r3, #7
 8001714:	009b      	lsls	r3, r3, #2
 8001716:	220f      	movs	r2, #15
 8001718:	fa02 f303 	lsl.w	r3, r2, r3
 800171c:	43db      	mvns	r3, r3
 800171e:	69ba      	ldr	r2, [r7, #24]
 8001720:	4013      	ands	r3, r2
 8001722:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	691a      	ldr	r2, [r3, #16]
 8001728:	69fb      	ldr	r3, [r7, #28]
 800172a:	f003 0307 	and.w	r3, r3, #7
 800172e:	009b      	lsls	r3, r3, #2
 8001730:	fa02 f303 	lsl.w	r3, r2, r3
 8001734:	69ba      	ldr	r2, [r7, #24]
 8001736:	4313      	orrs	r3, r2
 8001738:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800173a:	69fb      	ldr	r3, [r7, #28]
 800173c:	08da      	lsrs	r2, r3, #3
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	3208      	adds	r2, #8
 8001742:	69b9      	ldr	r1, [r7, #24]
 8001744:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800174e:	69fb      	ldr	r3, [r7, #28]
 8001750:	005b      	lsls	r3, r3, #1
 8001752:	2203      	movs	r2, #3
 8001754:	fa02 f303 	lsl.w	r3, r2, r3
 8001758:	43db      	mvns	r3, r3
 800175a:	69ba      	ldr	r2, [r7, #24]
 800175c:	4013      	ands	r3, r2
 800175e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	f003 0203 	and.w	r2, r3, #3
 8001768:	69fb      	ldr	r3, [r7, #28]
 800176a:	005b      	lsls	r3, r3, #1
 800176c:	fa02 f303 	lsl.w	r3, r2, r3
 8001770:	69ba      	ldr	r2, [r7, #24]
 8001772:	4313      	orrs	r3, r2
 8001774:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	69ba      	ldr	r2, [r7, #24]
 800177a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001784:	2b00      	cmp	r3, #0
 8001786:	f000 80c0 	beq.w	800190a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800178a:	2300      	movs	r3, #0
 800178c:	60fb      	str	r3, [r7, #12]
 800178e:	4b66      	ldr	r3, [pc, #408]	; (8001928 <HAL_GPIO_Init+0x324>)
 8001790:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001792:	4a65      	ldr	r2, [pc, #404]	; (8001928 <HAL_GPIO_Init+0x324>)
 8001794:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001798:	6453      	str	r3, [r2, #68]	; 0x44
 800179a:	4b63      	ldr	r3, [pc, #396]	; (8001928 <HAL_GPIO_Init+0x324>)
 800179c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800179e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017a2:	60fb      	str	r3, [r7, #12]
 80017a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80017a6:	4a61      	ldr	r2, [pc, #388]	; (800192c <HAL_GPIO_Init+0x328>)
 80017a8:	69fb      	ldr	r3, [r7, #28]
 80017aa:	089b      	lsrs	r3, r3, #2
 80017ac:	3302      	adds	r3, #2
 80017ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80017b4:	69fb      	ldr	r3, [r7, #28]
 80017b6:	f003 0303 	and.w	r3, r3, #3
 80017ba:	009b      	lsls	r3, r3, #2
 80017bc:	220f      	movs	r2, #15
 80017be:	fa02 f303 	lsl.w	r3, r2, r3
 80017c2:	43db      	mvns	r3, r3
 80017c4:	69ba      	ldr	r2, [r7, #24]
 80017c6:	4013      	ands	r3, r2
 80017c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	4a58      	ldr	r2, [pc, #352]	; (8001930 <HAL_GPIO_Init+0x32c>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d037      	beq.n	8001842 <HAL_GPIO_Init+0x23e>
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	4a57      	ldr	r2, [pc, #348]	; (8001934 <HAL_GPIO_Init+0x330>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d031      	beq.n	800183e <HAL_GPIO_Init+0x23a>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	4a56      	ldr	r2, [pc, #344]	; (8001938 <HAL_GPIO_Init+0x334>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d02b      	beq.n	800183a <HAL_GPIO_Init+0x236>
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	4a55      	ldr	r2, [pc, #340]	; (800193c <HAL_GPIO_Init+0x338>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d025      	beq.n	8001836 <HAL_GPIO_Init+0x232>
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	4a54      	ldr	r2, [pc, #336]	; (8001940 <HAL_GPIO_Init+0x33c>)
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d01f      	beq.n	8001832 <HAL_GPIO_Init+0x22e>
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	4a53      	ldr	r2, [pc, #332]	; (8001944 <HAL_GPIO_Init+0x340>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d019      	beq.n	800182e <HAL_GPIO_Init+0x22a>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	4a52      	ldr	r2, [pc, #328]	; (8001948 <HAL_GPIO_Init+0x344>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d013      	beq.n	800182a <HAL_GPIO_Init+0x226>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	4a51      	ldr	r2, [pc, #324]	; (800194c <HAL_GPIO_Init+0x348>)
 8001806:	4293      	cmp	r3, r2
 8001808:	d00d      	beq.n	8001826 <HAL_GPIO_Init+0x222>
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	4a50      	ldr	r2, [pc, #320]	; (8001950 <HAL_GPIO_Init+0x34c>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d007      	beq.n	8001822 <HAL_GPIO_Init+0x21e>
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	4a4f      	ldr	r2, [pc, #316]	; (8001954 <HAL_GPIO_Init+0x350>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d101      	bne.n	800181e <HAL_GPIO_Init+0x21a>
 800181a:	2309      	movs	r3, #9
 800181c:	e012      	b.n	8001844 <HAL_GPIO_Init+0x240>
 800181e:	230a      	movs	r3, #10
 8001820:	e010      	b.n	8001844 <HAL_GPIO_Init+0x240>
 8001822:	2308      	movs	r3, #8
 8001824:	e00e      	b.n	8001844 <HAL_GPIO_Init+0x240>
 8001826:	2307      	movs	r3, #7
 8001828:	e00c      	b.n	8001844 <HAL_GPIO_Init+0x240>
 800182a:	2306      	movs	r3, #6
 800182c:	e00a      	b.n	8001844 <HAL_GPIO_Init+0x240>
 800182e:	2305      	movs	r3, #5
 8001830:	e008      	b.n	8001844 <HAL_GPIO_Init+0x240>
 8001832:	2304      	movs	r3, #4
 8001834:	e006      	b.n	8001844 <HAL_GPIO_Init+0x240>
 8001836:	2303      	movs	r3, #3
 8001838:	e004      	b.n	8001844 <HAL_GPIO_Init+0x240>
 800183a:	2302      	movs	r3, #2
 800183c:	e002      	b.n	8001844 <HAL_GPIO_Init+0x240>
 800183e:	2301      	movs	r3, #1
 8001840:	e000      	b.n	8001844 <HAL_GPIO_Init+0x240>
 8001842:	2300      	movs	r3, #0
 8001844:	69fa      	ldr	r2, [r7, #28]
 8001846:	f002 0203 	and.w	r2, r2, #3
 800184a:	0092      	lsls	r2, r2, #2
 800184c:	4093      	lsls	r3, r2
 800184e:	69ba      	ldr	r2, [r7, #24]
 8001850:	4313      	orrs	r3, r2
 8001852:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001854:	4935      	ldr	r1, [pc, #212]	; (800192c <HAL_GPIO_Init+0x328>)
 8001856:	69fb      	ldr	r3, [r7, #28]
 8001858:	089b      	lsrs	r3, r3, #2
 800185a:	3302      	adds	r3, #2
 800185c:	69ba      	ldr	r2, [r7, #24]
 800185e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001862:	4b3d      	ldr	r3, [pc, #244]	; (8001958 <HAL_GPIO_Init+0x354>)
 8001864:	689b      	ldr	r3, [r3, #8]
 8001866:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001868:	693b      	ldr	r3, [r7, #16]
 800186a:	43db      	mvns	r3, r3
 800186c:	69ba      	ldr	r2, [r7, #24]
 800186e:	4013      	ands	r3, r2
 8001870:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800187a:	2b00      	cmp	r3, #0
 800187c:	d003      	beq.n	8001886 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800187e:	69ba      	ldr	r2, [r7, #24]
 8001880:	693b      	ldr	r3, [r7, #16]
 8001882:	4313      	orrs	r3, r2
 8001884:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001886:	4a34      	ldr	r2, [pc, #208]	; (8001958 <HAL_GPIO_Init+0x354>)
 8001888:	69bb      	ldr	r3, [r7, #24]
 800188a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800188c:	4b32      	ldr	r3, [pc, #200]	; (8001958 <HAL_GPIO_Init+0x354>)
 800188e:	68db      	ldr	r3, [r3, #12]
 8001890:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001892:	693b      	ldr	r3, [r7, #16]
 8001894:	43db      	mvns	r3, r3
 8001896:	69ba      	ldr	r2, [r7, #24]
 8001898:	4013      	ands	r3, r2
 800189a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d003      	beq.n	80018b0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80018a8:	69ba      	ldr	r2, [r7, #24]
 80018aa:	693b      	ldr	r3, [r7, #16]
 80018ac:	4313      	orrs	r3, r2
 80018ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80018b0:	4a29      	ldr	r2, [pc, #164]	; (8001958 <HAL_GPIO_Init+0x354>)
 80018b2:	69bb      	ldr	r3, [r7, #24]
 80018b4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80018b6:	4b28      	ldr	r3, [pc, #160]	; (8001958 <HAL_GPIO_Init+0x354>)
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018bc:	693b      	ldr	r3, [r7, #16]
 80018be:	43db      	mvns	r3, r3
 80018c0:	69ba      	ldr	r2, [r7, #24]
 80018c2:	4013      	ands	r3, r2
 80018c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d003      	beq.n	80018da <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80018d2:	69ba      	ldr	r2, [r7, #24]
 80018d4:	693b      	ldr	r3, [r7, #16]
 80018d6:	4313      	orrs	r3, r2
 80018d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80018da:	4a1f      	ldr	r2, [pc, #124]	; (8001958 <HAL_GPIO_Init+0x354>)
 80018dc:	69bb      	ldr	r3, [r7, #24]
 80018de:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80018e0:	4b1d      	ldr	r3, [pc, #116]	; (8001958 <HAL_GPIO_Init+0x354>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018e6:	693b      	ldr	r3, [r7, #16]
 80018e8:	43db      	mvns	r3, r3
 80018ea:	69ba      	ldr	r2, [r7, #24]
 80018ec:	4013      	ands	r3, r2
 80018ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d003      	beq.n	8001904 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80018fc:	69ba      	ldr	r2, [r7, #24]
 80018fe:	693b      	ldr	r3, [r7, #16]
 8001900:	4313      	orrs	r3, r2
 8001902:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001904:	4a14      	ldr	r2, [pc, #80]	; (8001958 <HAL_GPIO_Init+0x354>)
 8001906:	69bb      	ldr	r3, [r7, #24]
 8001908:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800190a:	69fb      	ldr	r3, [r7, #28]
 800190c:	3301      	adds	r3, #1
 800190e:	61fb      	str	r3, [r7, #28]
 8001910:	69fb      	ldr	r3, [r7, #28]
 8001912:	2b0f      	cmp	r3, #15
 8001914:	f67f ae84 	bls.w	8001620 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001918:	bf00      	nop
 800191a:	bf00      	nop
 800191c:	3724      	adds	r7, #36	; 0x24
 800191e:	46bd      	mov	sp, r7
 8001920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001924:	4770      	bx	lr
 8001926:	bf00      	nop
 8001928:	40023800 	.word	0x40023800
 800192c:	40013800 	.word	0x40013800
 8001930:	40020000 	.word	0x40020000
 8001934:	40020400 	.word	0x40020400
 8001938:	40020800 	.word	0x40020800
 800193c:	40020c00 	.word	0x40020c00
 8001940:	40021000 	.word	0x40021000
 8001944:	40021400 	.word	0x40021400
 8001948:	40021800 	.word	0x40021800
 800194c:	40021c00 	.word	0x40021c00
 8001950:	40022000 	.word	0x40022000
 8001954:	40022400 	.word	0x40022400
 8001958:	40013c00 	.word	0x40013c00

0800195c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800195c:	b480      	push	{r7}
 800195e:	b083      	sub	sp, #12
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
 8001964:	460b      	mov	r3, r1
 8001966:	807b      	strh	r3, [r7, #2]
 8001968:	4613      	mov	r3, r2
 800196a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800196c:	787b      	ldrb	r3, [r7, #1]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d003      	beq.n	800197a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001972:	887a      	ldrh	r2, [r7, #2]
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001978:	e003      	b.n	8001982 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800197a:	887b      	ldrh	r3, [r7, #2]
 800197c:	041a      	lsls	r2, r3, #16
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	619a      	str	r2, [r3, #24]
}
 8001982:	bf00      	nop
 8001984:	370c      	adds	r7, #12
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr

0800198e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800198e:	b480      	push	{r7}
 8001990:	b085      	sub	sp, #20
 8001992:	af00      	add	r7, sp, #0
 8001994:	6078      	str	r0, [r7, #4]
 8001996:	460b      	mov	r3, r1
 8001998:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	695b      	ldr	r3, [r3, #20]
 800199e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80019a0:	887a      	ldrh	r2, [r7, #2]
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	4013      	ands	r3, r2
 80019a6:	041a      	lsls	r2, r3, #16
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	43d9      	mvns	r1, r3
 80019ac:	887b      	ldrh	r3, [r7, #2]
 80019ae:	400b      	ands	r3, r1
 80019b0:	431a      	orrs	r2, r3
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	619a      	str	r2, [r3, #24]
}
 80019b6:	bf00      	nop
 80019b8:	3714      	adds	r7, #20
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr
	...

080019c4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b082      	sub	sp, #8
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	4603      	mov	r3, r0
 80019cc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80019ce:	4b08      	ldr	r3, [pc, #32]	; (80019f0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80019d0:	695a      	ldr	r2, [r3, #20]
 80019d2:	88fb      	ldrh	r3, [r7, #6]
 80019d4:	4013      	ands	r3, r2
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d006      	beq.n	80019e8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80019da:	4a05      	ldr	r2, [pc, #20]	; (80019f0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80019dc:	88fb      	ldrh	r3, [r7, #6]
 80019de:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80019e0:	88fb      	ldrh	r3, [r7, #6]
 80019e2:	4618      	mov	r0, r3
 80019e4:	f7ff fb18 	bl	8001018 <HAL_GPIO_EXTI_Callback>
  }
}
 80019e8:	bf00      	nop
 80019ea:	3708      	adds	r7, #8
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	40013c00 	.word	0x40013c00

080019f4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b086      	sub	sp, #24
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d101      	bne.n	8001a06 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a02:	2301      	movs	r3, #1
 8001a04:	e267      	b.n	8001ed6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f003 0301 	and.w	r3, r3, #1
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d075      	beq.n	8001afe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001a12:	4b88      	ldr	r3, [pc, #544]	; (8001c34 <HAL_RCC_OscConfig+0x240>)
 8001a14:	689b      	ldr	r3, [r3, #8]
 8001a16:	f003 030c 	and.w	r3, r3, #12
 8001a1a:	2b04      	cmp	r3, #4
 8001a1c:	d00c      	beq.n	8001a38 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a1e:	4b85      	ldr	r3, [pc, #532]	; (8001c34 <HAL_RCC_OscConfig+0x240>)
 8001a20:	689b      	ldr	r3, [r3, #8]
 8001a22:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001a26:	2b08      	cmp	r3, #8
 8001a28:	d112      	bne.n	8001a50 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a2a:	4b82      	ldr	r3, [pc, #520]	; (8001c34 <HAL_RCC_OscConfig+0x240>)
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a32:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001a36:	d10b      	bne.n	8001a50 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a38:	4b7e      	ldr	r3, [pc, #504]	; (8001c34 <HAL_RCC_OscConfig+0x240>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d05b      	beq.n	8001afc <HAL_RCC_OscConfig+0x108>
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d157      	bne.n	8001afc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	e242      	b.n	8001ed6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a58:	d106      	bne.n	8001a68 <HAL_RCC_OscConfig+0x74>
 8001a5a:	4b76      	ldr	r3, [pc, #472]	; (8001c34 <HAL_RCC_OscConfig+0x240>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4a75      	ldr	r2, [pc, #468]	; (8001c34 <HAL_RCC_OscConfig+0x240>)
 8001a60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a64:	6013      	str	r3, [r2, #0]
 8001a66:	e01d      	b.n	8001aa4 <HAL_RCC_OscConfig+0xb0>
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a70:	d10c      	bne.n	8001a8c <HAL_RCC_OscConfig+0x98>
 8001a72:	4b70      	ldr	r3, [pc, #448]	; (8001c34 <HAL_RCC_OscConfig+0x240>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4a6f      	ldr	r2, [pc, #444]	; (8001c34 <HAL_RCC_OscConfig+0x240>)
 8001a78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a7c:	6013      	str	r3, [r2, #0]
 8001a7e:	4b6d      	ldr	r3, [pc, #436]	; (8001c34 <HAL_RCC_OscConfig+0x240>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4a6c      	ldr	r2, [pc, #432]	; (8001c34 <HAL_RCC_OscConfig+0x240>)
 8001a84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a88:	6013      	str	r3, [r2, #0]
 8001a8a:	e00b      	b.n	8001aa4 <HAL_RCC_OscConfig+0xb0>
 8001a8c:	4b69      	ldr	r3, [pc, #420]	; (8001c34 <HAL_RCC_OscConfig+0x240>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4a68      	ldr	r2, [pc, #416]	; (8001c34 <HAL_RCC_OscConfig+0x240>)
 8001a92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a96:	6013      	str	r3, [r2, #0]
 8001a98:	4b66      	ldr	r3, [pc, #408]	; (8001c34 <HAL_RCC_OscConfig+0x240>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a65      	ldr	r2, [pc, #404]	; (8001c34 <HAL_RCC_OscConfig+0x240>)
 8001a9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001aa2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d013      	beq.n	8001ad4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aac:	f7ff fc98 	bl	80013e0 <HAL_GetTick>
 8001ab0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ab2:	e008      	b.n	8001ac6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ab4:	f7ff fc94 	bl	80013e0 <HAL_GetTick>
 8001ab8:	4602      	mov	r2, r0
 8001aba:	693b      	ldr	r3, [r7, #16]
 8001abc:	1ad3      	subs	r3, r2, r3
 8001abe:	2b64      	cmp	r3, #100	; 0x64
 8001ac0:	d901      	bls.n	8001ac6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001ac2:	2303      	movs	r3, #3
 8001ac4:	e207      	b.n	8001ed6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ac6:	4b5b      	ldr	r3, [pc, #364]	; (8001c34 <HAL_RCC_OscConfig+0x240>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d0f0      	beq.n	8001ab4 <HAL_RCC_OscConfig+0xc0>
 8001ad2:	e014      	b.n	8001afe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ad4:	f7ff fc84 	bl	80013e0 <HAL_GetTick>
 8001ad8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ada:	e008      	b.n	8001aee <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001adc:	f7ff fc80 	bl	80013e0 <HAL_GetTick>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	693b      	ldr	r3, [r7, #16]
 8001ae4:	1ad3      	subs	r3, r2, r3
 8001ae6:	2b64      	cmp	r3, #100	; 0x64
 8001ae8:	d901      	bls.n	8001aee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001aea:	2303      	movs	r3, #3
 8001aec:	e1f3      	b.n	8001ed6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001aee:	4b51      	ldr	r3, [pc, #324]	; (8001c34 <HAL_RCC_OscConfig+0x240>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d1f0      	bne.n	8001adc <HAL_RCC_OscConfig+0xe8>
 8001afa:	e000      	b.n	8001afe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001afc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f003 0302 	and.w	r3, r3, #2
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d063      	beq.n	8001bd2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001b0a:	4b4a      	ldr	r3, [pc, #296]	; (8001c34 <HAL_RCC_OscConfig+0x240>)
 8001b0c:	689b      	ldr	r3, [r3, #8]
 8001b0e:	f003 030c 	and.w	r3, r3, #12
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d00b      	beq.n	8001b2e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b16:	4b47      	ldr	r3, [pc, #284]	; (8001c34 <HAL_RCC_OscConfig+0x240>)
 8001b18:	689b      	ldr	r3, [r3, #8]
 8001b1a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001b1e:	2b08      	cmp	r3, #8
 8001b20:	d11c      	bne.n	8001b5c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b22:	4b44      	ldr	r3, [pc, #272]	; (8001c34 <HAL_RCC_OscConfig+0x240>)
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d116      	bne.n	8001b5c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b2e:	4b41      	ldr	r3, [pc, #260]	; (8001c34 <HAL_RCC_OscConfig+0x240>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f003 0302 	and.w	r3, r3, #2
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d005      	beq.n	8001b46 <HAL_RCC_OscConfig+0x152>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	68db      	ldr	r3, [r3, #12]
 8001b3e:	2b01      	cmp	r3, #1
 8001b40:	d001      	beq.n	8001b46 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001b42:	2301      	movs	r3, #1
 8001b44:	e1c7      	b.n	8001ed6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b46:	4b3b      	ldr	r3, [pc, #236]	; (8001c34 <HAL_RCC_OscConfig+0x240>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	691b      	ldr	r3, [r3, #16]
 8001b52:	00db      	lsls	r3, r3, #3
 8001b54:	4937      	ldr	r1, [pc, #220]	; (8001c34 <HAL_RCC_OscConfig+0x240>)
 8001b56:	4313      	orrs	r3, r2
 8001b58:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b5a:	e03a      	b.n	8001bd2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	68db      	ldr	r3, [r3, #12]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d020      	beq.n	8001ba6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b64:	4b34      	ldr	r3, [pc, #208]	; (8001c38 <HAL_RCC_OscConfig+0x244>)
 8001b66:	2201      	movs	r2, #1
 8001b68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b6a:	f7ff fc39 	bl	80013e0 <HAL_GetTick>
 8001b6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b70:	e008      	b.n	8001b84 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b72:	f7ff fc35 	bl	80013e0 <HAL_GetTick>
 8001b76:	4602      	mov	r2, r0
 8001b78:	693b      	ldr	r3, [r7, #16]
 8001b7a:	1ad3      	subs	r3, r2, r3
 8001b7c:	2b02      	cmp	r3, #2
 8001b7e:	d901      	bls.n	8001b84 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001b80:	2303      	movs	r3, #3
 8001b82:	e1a8      	b.n	8001ed6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b84:	4b2b      	ldr	r3, [pc, #172]	; (8001c34 <HAL_RCC_OscConfig+0x240>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f003 0302 	and.w	r3, r3, #2
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d0f0      	beq.n	8001b72 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b90:	4b28      	ldr	r3, [pc, #160]	; (8001c34 <HAL_RCC_OscConfig+0x240>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	691b      	ldr	r3, [r3, #16]
 8001b9c:	00db      	lsls	r3, r3, #3
 8001b9e:	4925      	ldr	r1, [pc, #148]	; (8001c34 <HAL_RCC_OscConfig+0x240>)
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	600b      	str	r3, [r1, #0]
 8001ba4:	e015      	b.n	8001bd2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ba6:	4b24      	ldr	r3, [pc, #144]	; (8001c38 <HAL_RCC_OscConfig+0x244>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bac:	f7ff fc18 	bl	80013e0 <HAL_GetTick>
 8001bb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bb2:	e008      	b.n	8001bc6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bb4:	f7ff fc14 	bl	80013e0 <HAL_GetTick>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	1ad3      	subs	r3, r2, r3
 8001bbe:	2b02      	cmp	r3, #2
 8001bc0:	d901      	bls.n	8001bc6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001bc2:	2303      	movs	r3, #3
 8001bc4:	e187      	b.n	8001ed6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bc6:	4b1b      	ldr	r3, [pc, #108]	; (8001c34 <HAL_RCC_OscConfig+0x240>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f003 0302 	and.w	r3, r3, #2
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d1f0      	bne.n	8001bb4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f003 0308 	and.w	r3, r3, #8
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d036      	beq.n	8001c4c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	695b      	ldr	r3, [r3, #20]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d016      	beq.n	8001c14 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001be6:	4b15      	ldr	r3, [pc, #84]	; (8001c3c <HAL_RCC_OscConfig+0x248>)
 8001be8:	2201      	movs	r2, #1
 8001bea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bec:	f7ff fbf8 	bl	80013e0 <HAL_GetTick>
 8001bf0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bf2:	e008      	b.n	8001c06 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001bf4:	f7ff fbf4 	bl	80013e0 <HAL_GetTick>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	693b      	ldr	r3, [r7, #16]
 8001bfc:	1ad3      	subs	r3, r2, r3
 8001bfe:	2b02      	cmp	r3, #2
 8001c00:	d901      	bls.n	8001c06 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001c02:	2303      	movs	r3, #3
 8001c04:	e167      	b.n	8001ed6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c06:	4b0b      	ldr	r3, [pc, #44]	; (8001c34 <HAL_RCC_OscConfig+0x240>)
 8001c08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c0a:	f003 0302 	and.w	r3, r3, #2
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d0f0      	beq.n	8001bf4 <HAL_RCC_OscConfig+0x200>
 8001c12:	e01b      	b.n	8001c4c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c14:	4b09      	ldr	r3, [pc, #36]	; (8001c3c <HAL_RCC_OscConfig+0x248>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c1a:	f7ff fbe1 	bl	80013e0 <HAL_GetTick>
 8001c1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c20:	e00e      	b.n	8001c40 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c22:	f7ff fbdd 	bl	80013e0 <HAL_GetTick>
 8001c26:	4602      	mov	r2, r0
 8001c28:	693b      	ldr	r3, [r7, #16]
 8001c2a:	1ad3      	subs	r3, r2, r3
 8001c2c:	2b02      	cmp	r3, #2
 8001c2e:	d907      	bls.n	8001c40 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001c30:	2303      	movs	r3, #3
 8001c32:	e150      	b.n	8001ed6 <HAL_RCC_OscConfig+0x4e2>
 8001c34:	40023800 	.word	0x40023800
 8001c38:	42470000 	.word	0x42470000
 8001c3c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c40:	4b88      	ldr	r3, [pc, #544]	; (8001e64 <HAL_RCC_OscConfig+0x470>)
 8001c42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c44:	f003 0302 	and.w	r3, r3, #2
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d1ea      	bne.n	8001c22 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f003 0304 	and.w	r3, r3, #4
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	f000 8097 	beq.w	8001d88 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c5e:	4b81      	ldr	r3, [pc, #516]	; (8001e64 <HAL_RCC_OscConfig+0x470>)
 8001c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d10f      	bne.n	8001c8a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	60bb      	str	r3, [r7, #8]
 8001c6e:	4b7d      	ldr	r3, [pc, #500]	; (8001e64 <HAL_RCC_OscConfig+0x470>)
 8001c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c72:	4a7c      	ldr	r2, [pc, #496]	; (8001e64 <HAL_RCC_OscConfig+0x470>)
 8001c74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c78:	6413      	str	r3, [r2, #64]	; 0x40
 8001c7a:	4b7a      	ldr	r3, [pc, #488]	; (8001e64 <HAL_RCC_OscConfig+0x470>)
 8001c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c82:	60bb      	str	r3, [r7, #8]
 8001c84:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c86:	2301      	movs	r3, #1
 8001c88:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c8a:	4b77      	ldr	r3, [pc, #476]	; (8001e68 <HAL_RCC_OscConfig+0x474>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d118      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c96:	4b74      	ldr	r3, [pc, #464]	; (8001e68 <HAL_RCC_OscConfig+0x474>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4a73      	ldr	r2, [pc, #460]	; (8001e68 <HAL_RCC_OscConfig+0x474>)
 8001c9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ca0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ca2:	f7ff fb9d 	bl	80013e0 <HAL_GetTick>
 8001ca6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ca8:	e008      	b.n	8001cbc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001caa:	f7ff fb99 	bl	80013e0 <HAL_GetTick>
 8001cae:	4602      	mov	r2, r0
 8001cb0:	693b      	ldr	r3, [r7, #16]
 8001cb2:	1ad3      	subs	r3, r2, r3
 8001cb4:	2b02      	cmp	r3, #2
 8001cb6:	d901      	bls.n	8001cbc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001cb8:	2303      	movs	r3, #3
 8001cba:	e10c      	b.n	8001ed6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cbc:	4b6a      	ldr	r3, [pc, #424]	; (8001e68 <HAL_RCC_OscConfig+0x474>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d0f0      	beq.n	8001caa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	689b      	ldr	r3, [r3, #8]
 8001ccc:	2b01      	cmp	r3, #1
 8001cce:	d106      	bne.n	8001cde <HAL_RCC_OscConfig+0x2ea>
 8001cd0:	4b64      	ldr	r3, [pc, #400]	; (8001e64 <HAL_RCC_OscConfig+0x470>)
 8001cd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cd4:	4a63      	ldr	r2, [pc, #396]	; (8001e64 <HAL_RCC_OscConfig+0x470>)
 8001cd6:	f043 0301 	orr.w	r3, r3, #1
 8001cda:	6713      	str	r3, [r2, #112]	; 0x70
 8001cdc:	e01c      	b.n	8001d18 <HAL_RCC_OscConfig+0x324>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	689b      	ldr	r3, [r3, #8]
 8001ce2:	2b05      	cmp	r3, #5
 8001ce4:	d10c      	bne.n	8001d00 <HAL_RCC_OscConfig+0x30c>
 8001ce6:	4b5f      	ldr	r3, [pc, #380]	; (8001e64 <HAL_RCC_OscConfig+0x470>)
 8001ce8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cea:	4a5e      	ldr	r2, [pc, #376]	; (8001e64 <HAL_RCC_OscConfig+0x470>)
 8001cec:	f043 0304 	orr.w	r3, r3, #4
 8001cf0:	6713      	str	r3, [r2, #112]	; 0x70
 8001cf2:	4b5c      	ldr	r3, [pc, #368]	; (8001e64 <HAL_RCC_OscConfig+0x470>)
 8001cf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cf6:	4a5b      	ldr	r2, [pc, #364]	; (8001e64 <HAL_RCC_OscConfig+0x470>)
 8001cf8:	f043 0301 	orr.w	r3, r3, #1
 8001cfc:	6713      	str	r3, [r2, #112]	; 0x70
 8001cfe:	e00b      	b.n	8001d18 <HAL_RCC_OscConfig+0x324>
 8001d00:	4b58      	ldr	r3, [pc, #352]	; (8001e64 <HAL_RCC_OscConfig+0x470>)
 8001d02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d04:	4a57      	ldr	r2, [pc, #348]	; (8001e64 <HAL_RCC_OscConfig+0x470>)
 8001d06:	f023 0301 	bic.w	r3, r3, #1
 8001d0a:	6713      	str	r3, [r2, #112]	; 0x70
 8001d0c:	4b55      	ldr	r3, [pc, #340]	; (8001e64 <HAL_RCC_OscConfig+0x470>)
 8001d0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d10:	4a54      	ldr	r2, [pc, #336]	; (8001e64 <HAL_RCC_OscConfig+0x470>)
 8001d12:	f023 0304 	bic.w	r3, r3, #4
 8001d16:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	689b      	ldr	r3, [r3, #8]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d015      	beq.n	8001d4c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d20:	f7ff fb5e 	bl	80013e0 <HAL_GetTick>
 8001d24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d26:	e00a      	b.n	8001d3e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d28:	f7ff fb5a 	bl	80013e0 <HAL_GetTick>
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	1ad3      	subs	r3, r2, r3
 8001d32:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d901      	bls.n	8001d3e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001d3a:	2303      	movs	r3, #3
 8001d3c:	e0cb      	b.n	8001ed6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d3e:	4b49      	ldr	r3, [pc, #292]	; (8001e64 <HAL_RCC_OscConfig+0x470>)
 8001d40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d42:	f003 0302 	and.w	r3, r3, #2
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d0ee      	beq.n	8001d28 <HAL_RCC_OscConfig+0x334>
 8001d4a:	e014      	b.n	8001d76 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d4c:	f7ff fb48 	bl	80013e0 <HAL_GetTick>
 8001d50:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d52:	e00a      	b.n	8001d6a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d54:	f7ff fb44 	bl	80013e0 <HAL_GetTick>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	693b      	ldr	r3, [r7, #16]
 8001d5c:	1ad3      	subs	r3, r2, r3
 8001d5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d901      	bls.n	8001d6a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001d66:	2303      	movs	r3, #3
 8001d68:	e0b5      	b.n	8001ed6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d6a:	4b3e      	ldr	r3, [pc, #248]	; (8001e64 <HAL_RCC_OscConfig+0x470>)
 8001d6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d6e:	f003 0302 	and.w	r3, r3, #2
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d1ee      	bne.n	8001d54 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001d76:	7dfb      	ldrb	r3, [r7, #23]
 8001d78:	2b01      	cmp	r3, #1
 8001d7a:	d105      	bne.n	8001d88 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d7c:	4b39      	ldr	r3, [pc, #228]	; (8001e64 <HAL_RCC_OscConfig+0x470>)
 8001d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d80:	4a38      	ldr	r2, [pc, #224]	; (8001e64 <HAL_RCC_OscConfig+0x470>)
 8001d82:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d86:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	699b      	ldr	r3, [r3, #24]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	f000 80a1 	beq.w	8001ed4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001d92:	4b34      	ldr	r3, [pc, #208]	; (8001e64 <HAL_RCC_OscConfig+0x470>)
 8001d94:	689b      	ldr	r3, [r3, #8]
 8001d96:	f003 030c 	and.w	r3, r3, #12
 8001d9a:	2b08      	cmp	r3, #8
 8001d9c:	d05c      	beq.n	8001e58 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	699b      	ldr	r3, [r3, #24]
 8001da2:	2b02      	cmp	r3, #2
 8001da4:	d141      	bne.n	8001e2a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001da6:	4b31      	ldr	r3, [pc, #196]	; (8001e6c <HAL_RCC_OscConfig+0x478>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dac:	f7ff fb18 	bl	80013e0 <HAL_GetTick>
 8001db0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001db2:	e008      	b.n	8001dc6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001db4:	f7ff fb14 	bl	80013e0 <HAL_GetTick>
 8001db8:	4602      	mov	r2, r0
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	1ad3      	subs	r3, r2, r3
 8001dbe:	2b02      	cmp	r3, #2
 8001dc0:	d901      	bls.n	8001dc6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001dc2:	2303      	movs	r3, #3
 8001dc4:	e087      	b.n	8001ed6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dc6:	4b27      	ldr	r3, [pc, #156]	; (8001e64 <HAL_RCC_OscConfig+0x470>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d1f0      	bne.n	8001db4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	69da      	ldr	r2, [r3, #28]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6a1b      	ldr	r3, [r3, #32]
 8001dda:	431a      	orrs	r2, r3
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001de0:	019b      	lsls	r3, r3, #6
 8001de2:	431a      	orrs	r2, r3
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001de8:	085b      	lsrs	r3, r3, #1
 8001dea:	3b01      	subs	r3, #1
 8001dec:	041b      	lsls	r3, r3, #16
 8001dee:	431a      	orrs	r2, r3
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001df4:	061b      	lsls	r3, r3, #24
 8001df6:	491b      	ldr	r1, [pc, #108]	; (8001e64 <HAL_RCC_OscConfig+0x470>)
 8001df8:	4313      	orrs	r3, r2
 8001dfa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001dfc:	4b1b      	ldr	r3, [pc, #108]	; (8001e6c <HAL_RCC_OscConfig+0x478>)
 8001dfe:	2201      	movs	r2, #1
 8001e00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e02:	f7ff faed 	bl	80013e0 <HAL_GetTick>
 8001e06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e08:	e008      	b.n	8001e1c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e0a:	f7ff fae9 	bl	80013e0 <HAL_GetTick>
 8001e0e:	4602      	mov	r2, r0
 8001e10:	693b      	ldr	r3, [r7, #16]
 8001e12:	1ad3      	subs	r3, r2, r3
 8001e14:	2b02      	cmp	r3, #2
 8001e16:	d901      	bls.n	8001e1c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001e18:	2303      	movs	r3, #3
 8001e1a:	e05c      	b.n	8001ed6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e1c:	4b11      	ldr	r3, [pc, #68]	; (8001e64 <HAL_RCC_OscConfig+0x470>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d0f0      	beq.n	8001e0a <HAL_RCC_OscConfig+0x416>
 8001e28:	e054      	b.n	8001ed4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e2a:	4b10      	ldr	r3, [pc, #64]	; (8001e6c <HAL_RCC_OscConfig+0x478>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e30:	f7ff fad6 	bl	80013e0 <HAL_GetTick>
 8001e34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e36:	e008      	b.n	8001e4a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e38:	f7ff fad2 	bl	80013e0 <HAL_GetTick>
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	693b      	ldr	r3, [r7, #16]
 8001e40:	1ad3      	subs	r3, r2, r3
 8001e42:	2b02      	cmp	r3, #2
 8001e44:	d901      	bls.n	8001e4a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001e46:	2303      	movs	r3, #3
 8001e48:	e045      	b.n	8001ed6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e4a:	4b06      	ldr	r3, [pc, #24]	; (8001e64 <HAL_RCC_OscConfig+0x470>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d1f0      	bne.n	8001e38 <HAL_RCC_OscConfig+0x444>
 8001e56:	e03d      	b.n	8001ed4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	699b      	ldr	r3, [r3, #24]
 8001e5c:	2b01      	cmp	r3, #1
 8001e5e:	d107      	bne.n	8001e70 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001e60:	2301      	movs	r3, #1
 8001e62:	e038      	b.n	8001ed6 <HAL_RCC_OscConfig+0x4e2>
 8001e64:	40023800 	.word	0x40023800
 8001e68:	40007000 	.word	0x40007000
 8001e6c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001e70:	4b1b      	ldr	r3, [pc, #108]	; (8001ee0 <HAL_RCC_OscConfig+0x4ec>)
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	699b      	ldr	r3, [r3, #24]
 8001e7a:	2b01      	cmp	r3, #1
 8001e7c:	d028      	beq.n	8001ed0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	d121      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e96:	429a      	cmp	r2, r3
 8001e98:	d11a      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e9a:	68fa      	ldr	r2, [r7, #12]
 8001e9c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	687a      	ldr	r2, [r7, #4]
 8001ea4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001ea6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d111      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eb6:	085b      	lsrs	r3, r3, #1
 8001eb8:	3b01      	subs	r3, #1
 8001eba:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ebc:	429a      	cmp	r2, r3
 8001ebe:	d107      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eca:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ecc:	429a      	cmp	r2, r3
 8001ece:	d001      	beq.n	8001ed4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	e000      	b.n	8001ed6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001ed4:	2300      	movs	r3, #0
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	3718      	adds	r7, #24
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	40023800 	.word	0x40023800

08001ee4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b084      	sub	sp, #16
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
 8001eec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d101      	bne.n	8001ef8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	e0cc      	b.n	8002092 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ef8:	4b68      	ldr	r3, [pc, #416]	; (800209c <HAL_RCC_ClockConfig+0x1b8>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f003 030f 	and.w	r3, r3, #15
 8001f00:	683a      	ldr	r2, [r7, #0]
 8001f02:	429a      	cmp	r2, r3
 8001f04:	d90c      	bls.n	8001f20 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f06:	4b65      	ldr	r3, [pc, #404]	; (800209c <HAL_RCC_ClockConfig+0x1b8>)
 8001f08:	683a      	ldr	r2, [r7, #0]
 8001f0a:	b2d2      	uxtb	r2, r2
 8001f0c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f0e:	4b63      	ldr	r3, [pc, #396]	; (800209c <HAL_RCC_ClockConfig+0x1b8>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f003 030f 	and.w	r3, r3, #15
 8001f16:	683a      	ldr	r2, [r7, #0]
 8001f18:	429a      	cmp	r2, r3
 8001f1a:	d001      	beq.n	8001f20 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	e0b8      	b.n	8002092 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f003 0302 	and.w	r3, r3, #2
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d020      	beq.n	8001f6e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f003 0304 	and.w	r3, r3, #4
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d005      	beq.n	8001f44 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f38:	4b59      	ldr	r3, [pc, #356]	; (80020a0 <HAL_RCC_ClockConfig+0x1bc>)
 8001f3a:	689b      	ldr	r3, [r3, #8]
 8001f3c:	4a58      	ldr	r2, [pc, #352]	; (80020a0 <HAL_RCC_ClockConfig+0x1bc>)
 8001f3e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001f42:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f003 0308 	and.w	r3, r3, #8
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d005      	beq.n	8001f5c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f50:	4b53      	ldr	r3, [pc, #332]	; (80020a0 <HAL_RCC_ClockConfig+0x1bc>)
 8001f52:	689b      	ldr	r3, [r3, #8]
 8001f54:	4a52      	ldr	r2, [pc, #328]	; (80020a0 <HAL_RCC_ClockConfig+0x1bc>)
 8001f56:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001f5a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f5c:	4b50      	ldr	r3, [pc, #320]	; (80020a0 <HAL_RCC_ClockConfig+0x1bc>)
 8001f5e:	689b      	ldr	r3, [r3, #8]
 8001f60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	689b      	ldr	r3, [r3, #8]
 8001f68:	494d      	ldr	r1, [pc, #308]	; (80020a0 <HAL_RCC_ClockConfig+0x1bc>)
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f003 0301 	and.w	r3, r3, #1
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d044      	beq.n	8002004 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	2b01      	cmp	r3, #1
 8001f80:	d107      	bne.n	8001f92 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f82:	4b47      	ldr	r3, [pc, #284]	; (80020a0 <HAL_RCC_ClockConfig+0x1bc>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d119      	bne.n	8001fc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e07f      	b.n	8002092 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	2b02      	cmp	r3, #2
 8001f98:	d003      	beq.n	8001fa2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f9e:	2b03      	cmp	r3, #3
 8001fa0:	d107      	bne.n	8001fb2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fa2:	4b3f      	ldr	r3, [pc, #252]	; (80020a0 <HAL_RCC_ClockConfig+0x1bc>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d109      	bne.n	8001fc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	e06f      	b.n	8002092 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fb2:	4b3b      	ldr	r3, [pc, #236]	; (80020a0 <HAL_RCC_ClockConfig+0x1bc>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f003 0302 	and.w	r3, r3, #2
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d101      	bne.n	8001fc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e067      	b.n	8002092 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001fc2:	4b37      	ldr	r3, [pc, #220]	; (80020a0 <HAL_RCC_ClockConfig+0x1bc>)
 8001fc4:	689b      	ldr	r3, [r3, #8]
 8001fc6:	f023 0203 	bic.w	r2, r3, #3
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	4934      	ldr	r1, [pc, #208]	; (80020a0 <HAL_RCC_ClockConfig+0x1bc>)
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001fd4:	f7ff fa04 	bl	80013e0 <HAL_GetTick>
 8001fd8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fda:	e00a      	b.n	8001ff2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fdc:	f7ff fa00 	bl	80013e0 <HAL_GetTick>
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	1ad3      	subs	r3, r2, r3
 8001fe6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d901      	bls.n	8001ff2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001fee:	2303      	movs	r3, #3
 8001ff0:	e04f      	b.n	8002092 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ff2:	4b2b      	ldr	r3, [pc, #172]	; (80020a0 <HAL_RCC_ClockConfig+0x1bc>)
 8001ff4:	689b      	ldr	r3, [r3, #8]
 8001ff6:	f003 020c 	and.w	r2, r3, #12
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	009b      	lsls	r3, r3, #2
 8002000:	429a      	cmp	r2, r3
 8002002:	d1eb      	bne.n	8001fdc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002004:	4b25      	ldr	r3, [pc, #148]	; (800209c <HAL_RCC_ClockConfig+0x1b8>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f003 030f 	and.w	r3, r3, #15
 800200c:	683a      	ldr	r2, [r7, #0]
 800200e:	429a      	cmp	r2, r3
 8002010:	d20c      	bcs.n	800202c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002012:	4b22      	ldr	r3, [pc, #136]	; (800209c <HAL_RCC_ClockConfig+0x1b8>)
 8002014:	683a      	ldr	r2, [r7, #0]
 8002016:	b2d2      	uxtb	r2, r2
 8002018:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800201a:	4b20      	ldr	r3, [pc, #128]	; (800209c <HAL_RCC_ClockConfig+0x1b8>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f003 030f 	and.w	r3, r3, #15
 8002022:	683a      	ldr	r2, [r7, #0]
 8002024:	429a      	cmp	r2, r3
 8002026:	d001      	beq.n	800202c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002028:	2301      	movs	r3, #1
 800202a:	e032      	b.n	8002092 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f003 0304 	and.w	r3, r3, #4
 8002034:	2b00      	cmp	r3, #0
 8002036:	d008      	beq.n	800204a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002038:	4b19      	ldr	r3, [pc, #100]	; (80020a0 <HAL_RCC_ClockConfig+0x1bc>)
 800203a:	689b      	ldr	r3, [r3, #8]
 800203c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	68db      	ldr	r3, [r3, #12]
 8002044:	4916      	ldr	r1, [pc, #88]	; (80020a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002046:	4313      	orrs	r3, r2
 8002048:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f003 0308 	and.w	r3, r3, #8
 8002052:	2b00      	cmp	r3, #0
 8002054:	d009      	beq.n	800206a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002056:	4b12      	ldr	r3, [pc, #72]	; (80020a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002058:	689b      	ldr	r3, [r3, #8]
 800205a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	691b      	ldr	r3, [r3, #16]
 8002062:	00db      	lsls	r3, r3, #3
 8002064:	490e      	ldr	r1, [pc, #56]	; (80020a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002066:	4313      	orrs	r3, r2
 8002068:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800206a:	f000 f821 	bl	80020b0 <HAL_RCC_GetSysClockFreq>
 800206e:	4602      	mov	r2, r0
 8002070:	4b0b      	ldr	r3, [pc, #44]	; (80020a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002072:	689b      	ldr	r3, [r3, #8]
 8002074:	091b      	lsrs	r3, r3, #4
 8002076:	f003 030f 	and.w	r3, r3, #15
 800207a:	490a      	ldr	r1, [pc, #40]	; (80020a4 <HAL_RCC_ClockConfig+0x1c0>)
 800207c:	5ccb      	ldrb	r3, [r1, r3]
 800207e:	fa22 f303 	lsr.w	r3, r2, r3
 8002082:	4a09      	ldr	r2, [pc, #36]	; (80020a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002084:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002086:	4b09      	ldr	r3, [pc, #36]	; (80020ac <HAL_RCC_ClockConfig+0x1c8>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4618      	mov	r0, r3
 800208c:	f7ff f81a 	bl	80010c4 <HAL_InitTick>

  return HAL_OK;
 8002090:	2300      	movs	r3, #0
}
 8002092:	4618      	mov	r0, r3
 8002094:	3710      	adds	r7, #16
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop
 800209c:	40023c00 	.word	0x40023c00
 80020a0:	40023800 	.word	0x40023800
 80020a4:	08005c74 	.word	0x08005c74
 80020a8:	20000000 	.word	0x20000000
 80020ac:	20000004 	.word	0x20000004

080020b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80020b4:	b094      	sub	sp, #80	; 0x50
 80020b6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80020b8:	2300      	movs	r3, #0
 80020ba:	647b      	str	r3, [r7, #68]	; 0x44
 80020bc:	2300      	movs	r3, #0
 80020be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80020c0:	2300      	movs	r3, #0
 80020c2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80020c4:	2300      	movs	r3, #0
 80020c6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80020c8:	4b79      	ldr	r3, [pc, #484]	; (80022b0 <HAL_RCC_GetSysClockFreq+0x200>)
 80020ca:	689b      	ldr	r3, [r3, #8]
 80020cc:	f003 030c 	and.w	r3, r3, #12
 80020d0:	2b08      	cmp	r3, #8
 80020d2:	d00d      	beq.n	80020f0 <HAL_RCC_GetSysClockFreq+0x40>
 80020d4:	2b08      	cmp	r3, #8
 80020d6:	f200 80e1 	bhi.w	800229c <HAL_RCC_GetSysClockFreq+0x1ec>
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d002      	beq.n	80020e4 <HAL_RCC_GetSysClockFreq+0x34>
 80020de:	2b04      	cmp	r3, #4
 80020e0:	d003      	beq.n	80020ea <HAL_RCC_GetSysClockFreq+0x3a>
 80020e2:	e0db      	b.n	800229c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80020e4:	4b73      	ldr	r3, [pc, #460]	; (80022b4 <HAL_RCC_GetSysClockFreq+0x204>)
 80020e6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80020e8:	e0db      	b.n	80022a2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80020ea:	4b73      	ldr	r3, [pc, #460]	; (80022b8 <HAL_RCC_GetSysClockFreq+0x208>)
 80020ec:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80020ee:	e0d8      	b.n	80022a2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80020f0:	4b6f      	ldr	r3, [pc, #444]	; (80022b0 <HAL_RCC_GetSysClockFreq+0x200>)
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80020f8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80020fa:	4b6d      	ldr	r3, [pc, #436]	; (80022b0 <HAL_RCC_GetSysClockFreq+0x200>)
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002102:	2b00      	cmp	r3, #0
 8002104:	d063      	beq.n	80021ce <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002106:	4b6a      	ldr	r3, [pc, #424]	; (80022b0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	099b      	lsrs	r3, r3, #6
 800210c:	2200      	movs	r2, #0
 800210e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002110:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002112:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002114:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002118:	633b      	str	r3, [r7, #48]	; 0x30
 800211a:	2300      	movs	r3, #0
 800211c:	637b      	str	r3, [r7, #52]	; 0x34
 800211e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002122:	4622      	mov	r2, r4
 8002124:	462b      	mov	r3, r5
 8002126:	f04f 0000 	mov.w	r0, #0
 800212a:	f04f 0100 	mov.w	r1, #0
 800212e:	0159      	lsls	r1, r3, #5
 8002130:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002134:	0150      	lsls	r0, r2, #5
 8002136:	4602      	mov	r2, r0
 8002138:	460b      	mov	r3, r1
 800213a:	4621      	mov	r1, r4
 800213c:	1a51      	subs	r1, r2, r1
 800213e:	6139      	str	r1, [r7, #16]
 8002140:	4629      	mov	r1, r5
 8002142:	eb63 0301 	sbc.w	r3, r3, r1
 8002146:	617b      	str	r3, [r7, #20]
 8002148:	f04f 0200 	mov.w	r2, #0
 800214c:	f04f 0300 	mov.w	r3, #0
 8002150:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002154:	4659      	mov	r1, fp
 8002156:	018b      	lsls	r3, r1, #6
 8002158:	4651      	mov	r1, sl
 800215a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800215e:	4651      	mov	r1, sl
 8002160:	018a      	lsls	r2, r1, #6
 8002162:	4651      	mov	r1, sl
 8002164:	ebb2 0801 	subs.w	r8, r2, r1
 8002168:	4659      	mov	r1, fp
 800216a:	eb63 0901 	sbc.w	r9, r3, r1
 800216e:	f04f 0200 	mov.w	r2, #0
 8002172:	f04f 0300 	mov.w	r3, #0
 8002176:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800217a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800217e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002182:	4690      	mov	r8, r2
 8002184:	4699      	mov	r9, r3
 8002186:	4623      	mov	r3, r4
 8002188:	eb18 0303 	adds.w	r3, r8, r3
 800218c:	60bb      	str	r3, [r7, #8]
 800218e:	462b      	mov	r3, r5
 8002190:	eb49 0303 	adc.w	r3, r9, r3
 8002194:	60fb      	str	r3, [r7, #12]
 8002196:	f04f 0200 	mov.w	r2, #0
 800219a:	f04f 0300 	mov.w	r3, #0
 800219e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80021a2:	4629      	mov	r1, r5
 80021a4:	024b      	lsls	r3, r1, #9
 80021a6:	4621      	mov	r1, r4
 80021a8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80021ac:	4621      	mov	r1, r4
 80021ae:	024a      	lsls	r2, r1, #9
 80021b0:	4610      	mov	r0, r2
 80021b2:	4619      	mov	r1, r3
 80021b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80021b6:	2200      	movs	r2, #0
 80021b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80021ba:	62fa      	str	r2, [r7, #44]	; 0x2c
 80021bc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80021c0:	f7fe f81e 	bl	8000200 <__aeabi_uldivmod>
 80021c4:	4602      	mov	r2, r0
 80021c6:	460b      	mov	r3, r1
 80021c8:	4613      	mov	r3, r2
 80021ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80021cc:	e058      	b.n	8002280 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021ce:	4b38      	ldr	r3, [pc, #224]	; (80022b0 <HAL_RCC_GetSysClockFreq+0x200>)
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	099b      	lsrs	r3, r3, #6
 80021d4:	2200      	movs	r2, #0
 80021d6:	4618      	mov	r0, r3
 80021d8:	4611      	mov	r1, r2
 80021da:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80021de:	623b      	str	r3, [r7, #32]
 80021e0:	2300      	movs	r3, #0
 80021e2:	627b      	str	r3, [r7, #36]	; 0x24
 80021e4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80021e8:	4642      	mov	r2, r8
 80021ea:	464b      	mov	r3, r9
 80021ec:	f04f 0000 	mov.w	r0, #0
 80021f0:	f04f 0100 	mov.w	r1, #0
 80021f4:	0159      	lsls	r1, r3, #5
 80021f6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80021fa:	0150      	lsls	r0, r2, #5
 80021fc:	4602      	mov	r2, r0
 80021fe:	460b      	mov	r3, r1
 8002200:	4641      	mov	r1, r8
 8002202:	ebb2 0a01 	subs.w	sl, r2, r1
 8002206:	4649      	mov	r1, r9
 8002208:	eb63 0b01 	sbc.w	fp, r3, r1
 800220c:	f04f 0200 	mov.w	r2, #0
 8002210:	f04f 0300 	mov.w	r3, #0
 8002214:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002218:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800221c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002220:	ebb2 040a 	subs.w	r4, r2, sl
 8002224:	eb63 050b 	sbc.w	r5, r3, fp
 8002228:	f04f 0200 	mov.w	r2, #0
 800222c:	f04f 0300 	mov.w	r3, #0
 8002230:	00eb      	lsls	r3, r5, #3
 8002232:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002236:	00e2      	lsls	r2, r4, #3
 8002238:	4614      	mov	r4, r2
 800223a:	461d      	mov	r5, r3
 800223c:	4643      	mov	r3, r8
 800223e:	18e3      	adds	r3, r4, r3
 8002240:	603b      	str	r3, [r7, #0]
 8002242:	464b      	mov	r3, r9
 8002244:	eb45 0303 	adc.w	r3, r5, r3
 8002248:	607b      	str	r3, [r7, #4]
 800224a:	f04f 0200 	mov.w	r2, #0
 800224e:	f04f 0300 	mov.w	r3, #0
 8002252:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002256:	4629      	mov	r1, r5
 8002258:	028b      	lsls	r3, r1, #10
 800225a:	4621      	mov	r1, r4
 800225c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002260:	4621      	mov	r1, r4
 8002262:	028a      	lsls	r2, r1, #10
 8002264:	4610      	mov	r0, r2
 8002266:	4619      	mov	r1, r3
 8002268:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800226a:	2200      	movs	r2, #0
 800226c:	61bb      	str	r3, [r7, #24]
 800226e:	61fa      	str	r2, [r7, #28]
 8002270:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002274:	f7fd ffc4 	bl	8000200 <__aeabi_uldivmod>
 8002278:	4602      	mov	r2, r0
 800227a:	460b      	mov	r3, r1
 800227c:	4613      	mov	r3, r2
 800227e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002280:	4b0b      	ldr	r3, [pc, #44]	; (80022b0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	0c1b      	lsrs	r3, r3, #16
 8002286:	f003 0303 	and.w	r3, r3, #3
 800228a:	3301      	adds	r3, #1
 800228c:	005b      	lsls	r3, r3, #1
 800228e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002290:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002292:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002294:	fbb2 f3f3 	udiv	r3, r2, r3
 8002298:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800229a:	e002      	b.n	80022a2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800229c:	4b05      	ldr	r3, [pc, #20]	; (80022b4 <HAL_RCC_GetSysClockFreq+0x204>)
 800229e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80022a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80022a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80022a4:	4618      	mov	r0, r3
 80022a6:	3750      	adds	r7, #80	; 0x50
 80022a8:	46bd      	mov	sp, r7
 80022aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80022ae:	bf00      	nop
 80022b0:	40023800 	.word	0x40023800
 80022b4:	00f42400 	.word	0x00f42400
 80022b8:	007a1200 	.word	0x007a1200

080022bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022bc:	b480      	push	{r7}
 80022be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80022c0:	4b03      	ldr	r3, [pc, #12]	; (80022d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80022c2:	681b      	ldr	r3, [r3, #0]
}
 80022c4:	4618      	mov	r0, r3
 80022c6:	46bd      	mov	sp, r7
 80022c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022cc:	4770      	bx	lr
 80022ce:	bf00      	nop
 80022d0:	20000000 	.word	0x20000000

080022d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80022d8:	f7ff fff0 	bl	80022bc <HAL_RCC_GetHCLKFreq>
 80022dc:	4602      	mov	r2, r0
 80022de:	4b05      	ldr	r3, [pc, #20]	; (80022f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80022e0:	689b      	ldr	r3, [r3, #8]
 80022e2:	0a9b      	lsrs	r3, r3, #10
 80022e4:	f003 0307 	and.w	r3, r3, #7
 80022e8:	4903      	ldr	r1, [pc, #12]	; (80022f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80022ea:	5ccb      	ldrb	r3, [r1, r3]
 80022ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	40023800 	.word	0x40023800
 80022f8:	08005c84 	.word	0x08005c84

080022fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002300:	f7ff ffdc 	bl	80022bc <HAL_RCC_GetHCLKFreq>
 8002304:	4602      	mov	r2, r0
 8002306:	4b05      	ldr	r3, [pc, #20]	; (800231c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	0b5b      	lsrs	r3, r3, #13
 800230c:	f003 0307 	and.w	r3, r3, #7
 8002310:	4903      	ldr	r1, [pc, #12]	; (8002320 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002312:	5ccb      	ldrb	r3, [r1, r3]
 8002314:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002318:	4618      	mov	r0, r3
 800231a:	bd80      	pop	{r7, pc}
 800231c:	40023800 	.word	0x40023800
 8002320:	08005c84 	.word	0x08005c84

08002324 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002324:	b480      	push	{r7}
 8002326:	b083      	sub	sp, #12
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
 800232c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	220f      	movs	r2, #15
 8002332:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002334:	4b12      	ldr	r3, [pc, #72]	; (8002380 <HAL_RCC_GetClockConfig+0x5c>)
 8002336:	689b      	ldr	r3, [r3, #8]
 8002338:	f003 0203 	and.w	r2, r3, #3
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002340:	4b0f      	ldr	r3, [pc, #60]	; (8002380 <HAL_RCC_GetClockConfig+0x5c>)
 8002342:	689b      	ldr	r3, [r3, #8]
 8002344:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800234c:	4b0c      	ldr	r3, [pc, #48]	; (8002380 <HAL_RCC_GetClockConfig+0x5c>)
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002358:	4b09      	ldr	r3, [pc, #36]	; (8002380 <HAL_RCC_GetClockConfig+0x5c>)
 800235a:	689b      	ldr	r3, [r3, #8]
 800235c:	08db      	lsrs	r3, r3, #3
 800235e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002366:	4b07      	ldr	r3, [pc, #28]	; (8002384 <HAL_RCC_GetClockConfig+0x60>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f003 020f 	and.w	r2, r3, #15
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	601a      	str	r2, [r3, #0]
}
 8002372:	bf00      	nop
 8002374:	370c      	adds	r7, #12
 8002376:	46bd      	mov	sp, r7
 8002378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237c:	4770      	bx	lr
 800237e:	bf00      	nop
 8002380:	40023800 	.word	0x40023800
 8002384:	40023c00 	.word	0x40023c00

08002388 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b082      	sub	sp, #8
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d101      	bne.n	800239a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002396:	2301      	movs	r3, #1
 8002398:	e041      	b.n	800241e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023a0:	b2db      	uxtb	r3, r3
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d106      	bne.n	80023b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2200      	movs	r2, #0
 80023aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80023ae:	6878      	ldr	r0, [r7, #4]
 80023b0:	f000 f839 	bl	8002426 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2202      	movs	r2, #2
 80023b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681a      	ldr	r2, [r3, #0]
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	3304      	adds	r3, #4
 80023c4:	4619      	mov	r1, r3
 80023c6:	4610      	mov	r0, r2
 80023c8:	f000 f9d8 	bl	800277c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2201      	movs	r2, #1
 80023d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2201      	movs	r2, #1
 80023d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2201      	movs	r2, #1
 80023e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2201      	movs	r2, #1
 80023e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2201      	movs	r2, #1
 80023f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2201      	movs	r2, #1
 80023f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2201      	movs	r2, #1
 8002400:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2201      	movs	r2, #1
 8002408:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2201      	movs	r2, #1
 8002410:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2201      	movs	r2, #1
 8002418:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800241c:	2300      	movs	r3, #0
}
 800241e:	4618      	mov	r0, r3
 8002420:	3708      	adds	r7, #8
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}

08002426 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002426:	b480      	push	{r7}
 8002428:	b083      	sub	sp, #12
 800242a:	af00      	add	r7, sp, #0
 800242c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800242e:	bf00      	nop
 8002430:	370c      	adds	r7, #12
 8002432:	46bd      	mov	sp, r7
 8002434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002438:	4770      	bx	lr
	...

0800243c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800243c:	b480      	push	{r7}
 800243e:	b085      	sub	sp, #20
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800244a:	b2db      	uxtb	r3, r3
 800244c:	2b01      	cmp	r3, #1
 800244e:	d001      	beq.n	8002454 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002450:	2301      	movs	r3, #1
 8002452:	e04e      	b.n	80024f2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2202      	movs	r2, #2
 8002458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	68da      	ldr	r2, [r3, #12]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f042 0201 	orr.w	r2, r2, #1
 800246a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a23      	ldr	r2, [pc, #140]	; (8002500 <HAL_TIM_Base_Start_IT+0xc4>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d022      	beq.n	80024bc <HAL_TIM_Base_Start_IT+0x80>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800247e:	d01d      	beq.n	80024bc <HAL_TIM_Base_Start_IT+0x80>
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a1f      	ldr	r2, [pc, #124]	; (8002504 <HAL_TIM_Base_Start_IT+0xc8>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d018      	beq.n	80024bc <HAL_TIM_Base_Start_IT+0x80>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4a1e      	ldr	r2, [pc, #120]	; (8002508 <HAL_TIM_Base_Start_IT+0xcc>)
 8002490:	4293      	cmp	r3, r2
 8002492:	d013      	beq.n	80024bc <HAL_TIM_Base_Start_IT+0x80>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a1c      	ldr	r2, [pc, #112]	; (800250c <HAL_TIM_Base_Start_IT+0xd0>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d00e      	beq.n	80024bc <HAL_TIM_Base_Start_IT+0x80>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a1b      	ldr	r2, [pc, #108]	; (8002510 <HAL_TIM_Base_Start_IT+0xd4>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d009      	beq.n	80024bc <HAL_TIM_Base_Start_IT+0x80>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a19      	ldr	r2, [pc, #100]	; (8002514 <HAL_TIM_Base_Start_IT+0xd8>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d004      	beq.n	80024bc <HAL_TIM_Base_Start_IT+0x80>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a18      	ldr	r2, [pc, #96]	; (8002518 <HAL_TIM_Base_Start_IT+0xdc>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d111      	bne.n	80024e0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	f003 0307 	and.w	r3, r3, #7
 80024c6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	2b06      	cmp	r3, #6
 80024cc:	d010      	beq.n	80024f0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	681a      	ldr	r2, [r3, #0]
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f042 0201 	orr.w	r2, r2, #1
 80024dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024de:	e007      	b.n	80024f0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	681a      	ldr	r2, [r3, #0]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f042 0201 	orr.w	r2, r2, #1
 80024ee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80024f0:	2300      	movs	r3, #0
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	3714      	adds	r7, #20
 80024f6:	46bd      	mov	sp, r7
 80024f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fc:	4770      	bx	lr
 80024fe:	bf00      	nop
 8002500:	40010000 	.word	0x40010000
 8002504:	40000400 	.word	0x40000400
 8002508:	40000800 	.word	0x40000800
 800250c:	40000c00 	.word	0x40000c00
 8002510:	40010400 	.word	0x40010400
 8002514:	40014000 	.word	0x40014000
 8002518:	40001800 	.word	0x40001800

0800251c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b082      	sub	sp, #8
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	691b      	ldr	r3, [r3, #16]
 800252a:	f003 0302 	and.w	r3, r3, #2
 800252e:	2b02      	cmp	r3, #2
 8002530:	d122      	bne.n	8002578 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	68db      	ldr	r3, [r3, #12]
 8002538:	f003 0302 	and.w	r3, r3, #2
 800253c:	2b02      	cmp	r3, #2
 800253e:	d11b      	bne.n	8002578 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f06f 0202 	mvn.w	r2, #2
 8002548:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2201      	movs	r2, #1
 800254e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	699b      	ldr	r3, [r3, #24]
 8002556:	f003 0303 	and.w	r3, r3, #3
 800255a:	2b00      	cmp	r3, #0
 800255c:	d003      	beq.n	8002566 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800255e:	6878      	ldr	r0, [r7, #4]
 8002560:	f000 f8ee 	bl	8002740 <HAL_TIM_IC_CaptureCallback>
 8002564:	e005      	b.n	8002572 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002566:	6878      	ldr	r0, [r7, #4]
 8002568:	f000 f8e0 	bl	800272c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800256c:	6878      	ldr	r0, [r7, #4]
 800256e:	f000 f8f1 	bl	8002754 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2200      	movs	r2, #0
 8002576:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	691b      	ldr	r3, [r3, #16]
 800257e:	f003 0304 	and.w	r3, r3, #4
 8002582:	2b04      	cmp	r3, #4
 8002584:	d122      	bne.n	80025cc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	68db      	ldr	r3, [r3, #12]
 800258c:	f003 0304 	and.w	r3, r3, #4
 8002590:	2b04      	cmp	r3, #4
 8002592:	d11b      	bne.n	80025cc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f06f 0204 	mvn.w	r2, #4
 800259c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2202      	movs	r2, #2
 80025a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	699b      	ldr	r3, [r3, #24]
 80025aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d003      	beq.n	80025ba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025b2:	6878      	ldr	r0, [r7, #4]
 80025b4:	f000 f8c4 	bl	8002740 <HAL_TIM_IC_CaptureCallback>
 80025b8:	e005      	b.n	80025c6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025ba:	6878      	ldr	r0, [r7, #4]
 80025bc:	f000 f8b6 	bl	800272c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025c0:	6878      	ldr	r0, [r7, #4]
 80025c2:	f000 f8c7 	bl	8002754 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2200      	movs	r2, #0
 80025ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	691b      	ldr	r3, [r3, #16]
 80025d2:	f003 0308 	and.w	r3, r3, #8
 80025d6:	2b08      	cmp	r3, #8
 80025d8:	d122      	bne.n	8002620 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	68db      	ldr	r3, [r3, #12]
 80025e0:	f003 0308 	and.w	r3, r3, #8
 80025e4:	2b08      	cmp	r3, #8
 80025e6:	d11b      	bne.n	8002620 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f06f 0208 	mvn.w	r2, #8
 80025f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2204      	movs	r2, #4
 80025f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	69db      	ldr	r3, [r3, #28]
 80025fe:	f003 0303 	and.w	r3, r3, #3
 8002602:	2b00      	cmp	r3, #0
 8002604:	d003      	beq.n	800260e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002606:	6878      	ldr	r0, [r7, #4]
 8002608:	f000 f89a 	bl	8002740 <HAL_TIM_IC_CaptureCallback>
 800260c:	e005      	b.n	800261a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800260e:	6878      	ldr	r0, [r7, #4]
 8002610:	f000 f88c 	bl	800272c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002614:	6878      	ldr	r0, [r7, #4]
 8002616:	f000 f89d 	bl	8002754 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2200      	movs	r2, #0
 800261e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	691b      	ldr	r3, [r3, #16]
 8002626:	f003 0310 	and.w	r3, r3, #16
 800262a:	2b10      	cmp	r3, #16
 800262c:	d122      	bne.n	8002674 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	68db      	ldr	r3, [r3, #12]
 8002634:	f003 0310 	and.w	r3, r3, #16
 8002638:	2b10      	cmp	r3, #16
 800263a:	d11b      	bne.n	8002674 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f06f 0210 	mvn.w	r2, #16
 8002644:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2208      	movs	r2, #8
 800264a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	69db      	ldr	r3, [r3, #28]
 8002652:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002656:	2b00      	cmp	r3, #0
 8002658:	d003      	beq.n	8002662 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800265a:	6878      	ldr	r0, [r7, #4]
 800265c:	f000 f870 	bl	8002740 <HAL_TIM_IC_CaptureCallback>
 8002660:	e005      	b.n	800266e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002662:	6878      	ldr	r0, [r7, #4]
 8002664:	f000 f862 	bl	800272c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002668:	6878      	ldr	r0, [r7, #4]
 800266a:	f000 f873 	bl	8002754 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2200      	movs	r2, #0
 8002672:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	691b      	ldr	r3, [r3, #16]
 800267a:	f003 0301 	and.w	r3, r3, #1
 800267e:	2b01      	cmp	r3, #1
 8002680:	d10e      	bne.n	80026a0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	68db      	ldr	r3, [r3, #12]
 8002688:	f003 0301 	and.w	r3, r3, #1
 800268c:	2b01      	cmp	r3, #1
 800268e:	d107      	bne.n	80026a0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f06f 0201 	mvn.w	r2, #1
 8002698:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800269a:	6878      	ldr	r0, [r7, #4]
 800269c:	f7fe fcd2 	bl	8001044 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	691b      	ldr	r3, [r3, #16]
 80026a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026aa:	2b80      	cmp	r3, #128	; 0x80
 80026ac:	d10e      	bne.n	80026cc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	68db      	ldr	r3, [r3, #12]
 80026b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026b8:	2b80      	cmp	r3, #128	; 0x80
 80026ba:	d107      	bne.n	80026cc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80026c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80026c6:	6878      	ldr	r0, [r7, #4]
 80026c8:	f000 f902 	bl	80028d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	691b      	ldr	r3, [r3, #16]
 80026d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026d6:	2b40      	cmp	r3, #64	; 0x40
 80026d8:	d10e      	bne.n	80026f8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	68db      	ldr	r3, [r3, #12]
 80026e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026e4:	2b40      	cmp	r3, #64	; 0x40
 80026e6:	d107      	bne.n	80026f8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80026f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80026f2:	6878      	ldr	r0, [r7, #4]
 80026f4:	f000 f838 	bl	8002768 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	691b      	ldr	r3, [r3, #16]
 80026fe:	f003 0320 	and.w	r3, r3, #32
 8002702:	2b20      	cmp	r3, #32
 8002704:	d10e      	bne.n	8002724 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	68db      	ldr	r3, [r3, #12]
 800270c:	f003 0320 	and.w	r3, r3, #32
 8002710:	2b20      	cmp	r3, #32
 8002712:	d107      	bne.n	8002724 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f06f 0220 	mvn.w	r2, #32
 800271c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800271e:	6878      	ldr	r0, [r7, #4]
 8002720:	f000 f8cc 	bl	80028bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002724:	bf00      	nop
 8002726:	3708      	adds	r7, #8
 8002728:	46bd      	mov	sp, r7
 800272a:	bd80      	pop	{r7, pc}

0800272c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800272c:	b480      	push	{r7}
 800272e:	b083      	sub	sp, #12
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002734:	bf00      	nop
 8002736:	370c      	adds	r7, #12
 8002738:	46bd      	mov	sp, r7
 800273a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273e:	4770      	bx	lr

08002740 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002740:	b480      	push	{r7}
 8002742:	b083      	sub	sp, #12
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002748:	bf00      	nop
 800274a:	370c      	adds	r7, #12
 800274c:	46bd      	mov	sp, r7
 800274e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002752:	4770      	bx	lr

08002754 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002754:	b480      	push	{r7}
 8002756:	b083      	sub	sp, #12
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800275c:	bf00      	nop
 800275e:	370c      	adds	r7, #12
 8002760:	46bd      	mov	sp, r7
 8002762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002766:	4770      	bx	lr

08002768 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002768:	b480      	push	{r7}
 800276a:	b083      	sub	sp, #12
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002770:	bf00      	nop
 8002772:	370c      	adds	r7, #12
 8002774:	46bd      	mov	sp, r7
 8002776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277a:	4770      	bx	lr

0800277c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800277c:	b480      	push	{r7}
 800277e:	b085      	sub	sp, #20
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
 8002784:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	4a40      	ldr	r2, [pc, #256]	; (8002890 <TIM_Base_SetConfig+0x114>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d013      	beq.n	80027bc <TIM_Base_SetConfig+0x40>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800279a:	d00f      	beq.n	80027bc <TIM_Base_SetConfig+0x40>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	4a3d      	ldr	r2, [pc, #244]	; (8002894 <TIM_Base_SetConfig+0x118>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d00b      	beq.n	80027bc <TIM_Base_SetConfig+0x40>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	4a3c      	ldr	r2, [pc, #240]	; (8002898 <TIM_Base_SetConfig+0x11c>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d007      	beq.n	80027bc <TIM_Base_SetConfig+0x40>
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	4a3b      	ldr	r2, [pc, #236]	; (800289c <TIM_Base_SetConfig+0x120>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d003      	beq.n	80027bc <TIM_Base_SetConfig+0x40>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	4a3a      	ldr	r2, [pc, #232]	; (80028a0 <TIM_Base_SetConfig+0x124>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d108      	bne.n	80027ce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	68fa      	ldr	r2, [r7, #12]
 80027ca:	4313      	orrs	r3, r2
 80027cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	4a2f      	ldr	r2, [pc, #188]	; (8002890 <TIM_Base_SetConfig+0x114>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d02b      	beq.n	800282e <TIM_Base_SetConfig+0xb2>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027dc:	d027      	beq.n	800282e <TIM_Base_SetConfig+0xb2>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	4a2c      	ldr	r2, [pc, #176]	; (8002894 <TIM_Base_SetConfig+0x118>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d023      	beq.n	800282e <TIM_Base_SetConfig+0xb2>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	4a2b      	ldr	r2, [pc, #172]	; (8002898 <TIM_Base_SetConfig+0x11c>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d01f      	beq.n	800282e <TIM_Base_SetConfig+0xb2>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	4a2a      	ldr	r2, [pc, #168]	; (800289c <TIM_Base_SetConfig+0x120>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d01b      	beq.n	800282e <TIM_Base_SetConfig+0xb2>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	4a29      	ldr	r2, [pc, #164]	; (80028a0 <TIM_Base_SetConfig+0x124>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d017      	beq.n	800282e <TIM_Base_SetConfig+0xb2>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	4a28      	ldr	r2, [pc, #160]	; (80028a4 <TIM_Base_SetConfig+0x128>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d013      	beq.n	800282e <TIM_Base_SetConfig+0xb2>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	4a27      	ldr	r2, [pc, #156]	; (80028a8 <TIM_Base_SetConfig+0x12c>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d00f      	beq.n	800282e <TIM_Base_SetConfig+0xb2>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	4a26      	ldr	r2, [pc, #152]	; (80028ac <TIM_Base_SetConfig+0x130>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d00b      	beq.n	800282e <TIM_Base_SetConfig+0xb2>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	4a25      	ldr	r2, [pc, #148]	; (80028b0 <TIM_Base_SetConfig+0x134>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d007      	beq.n	800282e <TIM_Base_SetConfig+0xb2>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	4a24      	ldr	r2, [pc, #144]	; (80028b4 <TIM_Base_SetConfig+0x138>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d003      	beq.n	800282e <TIM_Base_SetConfig+0xb2>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	4a23      	ldr	r2, [pc, #140]	; (80028b8 <TIM_Base_SetConfig+0x13c>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d108      	bne.n	8002840 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002834:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	68db      	ldr	r3, [r3, #12]
 800283a:	68fa      	ldr	r2, [r7, #12]
 800283c:	4313      	orrs	r3, r2
 800283e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	695b      	ldr	r3, [r3, #20]
 800284a:	4313      	orrs	r3, r2
 800284c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	68fa      	ldr	r2, [r7, #12]
 8002852:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	689a      	ldr	r2, [r3, #8]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	681a      	ldr	r2, [r3, #0]
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	4a0a      	ldr	r2, [pc, #40]	; (8002890 <TIM_Base_SetConfig+0x114>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d003      	beq.n	8002874 <TIM_Base_SetConfig+0xf8>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	4a0c      	ldr	r2, [pc, #48]	; (80028a0 <TIM_Base_SetConfig+0x124>)
 8002870:	4293      	cmp	r3, r2
 8002872:	d103      	bne.n	800287c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	691a      	ldr	r2, [r3, #16]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2201      	movs	r2, #1
 8002880:	615a      	str	r2, [r3, #20]
}
 8002882:	bf00      	nop
 8002884:	3714      	adds	r7, #20
 8002886:	46bd      	mov	sp, r7
 8002888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288c:	4770      	bx	lr
 800288e:	bf00      	nop
 8002890:	40010000 	.word	0x40010000
 8002894:	40000400 	.word	0x40000400
 8002898:	40000800 	.word	0x40000800
 800289c:	40000c00 	.word	0x40000c00
 80028a0:	40010400 	.word	0x40010400
 80028a4:	40014000 	.word	0x40014000
 80028a8:	40014400 	.word	0x40014400
 80028ac:	40014800 	.word	0x40014800
 80028b0:	40001800 	.word	0x40001800
 80028b4:	40001c00 	.word	0x40001c00
 80028b8:	40002000 	.word	0x40002000

080028bc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80028bc:	b480      	push	{r7}
 80028be:	b083      	sub	sp, #12
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80028c4:	bf00      	nop
 80028c6:	370c      	adds	r7, #12
 80028c8:	46bd      	mov	sp, r7
 80028ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ce:	4770      	bx	lr

080028d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80028d0:	b480      	push	{r7}
 80028d2:	b083      	sub	sp, #12
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80028d8:	bf00      	nop
 80028da:	370c      	adds	r7, #12
 80028dc:	46bd      	mov	sp, r7
 80028de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e2:	4770      	bx	lr

080028e4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b082      	sub	sp, #8
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d101      	bne.n	80028f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	e03f      	b.n	8002976 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028fc:	b2db      	uxtb	r3, r3
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d106      	bne.n	8002910 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2200      	movs	r2, #0
 8002906:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800290a:	6878      	ldr	r0, [r7, #4]
 800290c:	f7fe fcc0 	bl	8001290 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2224      	movs	r2, #36	; 0x24
 8002914:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	68da      	ldr	r2, [r3, #12]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002926:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002928:	6878      	ldr	r0, [r7, #4]
 800292a:	f000 f929 	bl	8002b80 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	691a      	ldr	r2, [r3, #16]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800293c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	695a      	ldr	r2, [r3, #20]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800294c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	68da      	ldr	r2, [r3, #12]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800295c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2200      	movs	r2, #0
 8002962:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2220      	movs	r2, #32
 8002968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2220      	movs	r2, #32
 8002970:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002974:	2300      	movs	r3, #0
}
 8002976:	4618      	mov	r0, r3
 8002978:	3708      	adds	r7, #8
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}

0800297e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800297e:	b580      	push	{r7, lr}
 8002980:	b08a      	sub	sp, #40	; 0x28
 8002982:	af02      	add	r7, sp, #8
 8002984:	60f8      	str	r0, [r7, #12]
 8002986:	60b9      	str	r1, [r7, #8]
 8002988:	603b      	str	r3, [r7, #0]
 800298a:	4613      	mov	r3, r2
 800298c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800298e:	2300      	movs	r3, #0
 8002990:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002998:	b2db      	uxtb	r3, r3
 800299a:	2b20      	cmp	r3, #32
 800299c:	d17c      	bne.n	8002a98 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800299e:	68bb      	ldr	r3, [r7, #8]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d002      	beq.n	80029aa <HAL_UART_Transmit+0x2c>
 80029a4:	88fb      	ldrh	r3, [r7, #6]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d101      	bne.n	80029ae <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	e075      	b.n	8002a9a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029b4:	2b01      	cmp	r3, #1
 80029b6:	d101      	bne.n	80029bc <HAL_UART_Transmit+0x3e>
 80029b8:	2302      	movs	r3, #2
 80029ba:	e06e      	b.n	8002a9a <HAL_UART_Transmit+0x11c>
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	2201      	movs	r2, #1
 80029c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	2200      	movs	r2, #0
 80029c8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	2221      	movs	r2, #33	; 0x21
 80029ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80029d2:	f7fe fd05 	bl	80013e0 <HAL_GetTick>
 80029d6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	88fa      	ldrh	r2, [r7, #6]
 80029dc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	88fa      	ldrh	r2, [r7, #6]
 80029e2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	689b      	ldr	r3, [r3, #8]
 80029e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029ec:	d108      	bne.n	8002a00 <HAL_UART_Transmit+0x82>
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	691b      	ldr	r3, [r3, #16]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d104      	bne.n	8002a00 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80029f6:	2300      	movs	r3, #0
 80029f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	61bb      	str	r3, [r7, #24]
 80029fe:	e003      	b.n	8002a08 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002a00:	68bb      	ldr	r3, [r7, #8]
 8002a02:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002a04:	2300      	movs	r3, #0
 8002a06:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002a10:	e02a      	b.n	8002a68 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	9300      	str	r3, [sp, #0]
 8002a16:	697b      	ldr	r3, [r7, #20]
 8002a18:	2200      	movs	r2, #0
 8002a1a:	2180      	movs	r1, #128	; 0x80
 8002a1c:	68f8      	ldr	r0, [r7, #12]
 8002a1e:	f000 f840 	bl	8002aa2 <UART_WaitOnFlagUntilTimeout>
 8002a22:	4603      	mov	r3, r0
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d001      	beq.n	8002a2c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002a28:	2303      	movs	r3, #3
 8002a2a:	e036      	b.n	8002a9a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002a2c:	69fb      	ldr	r3, [r7, #28]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d10b      	bne.n	8002a4a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002a32:	69bb      	ldr	r3, [r7, #24]
 8002a34:	881b      	ldrh	r3, [r3, #0]
 8002a36:	461a      	mov	r2, r3
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002a40:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002a42:	69bb      	ldr	r3, [r7, #24]
 8002a44:	3302      	adds	r3, #2
 8002a46:	61bb      	str	r3, [r7, #24]
 8002a48:	e007      	b.n	8002a5a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002a4a:	69fb      	ldr	r3, [r7, #28]
 8002a4c:	781a      	ldrb	r2, [r3, #0]
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002a54:	69fb      	ldr	r3, [r7, #28]
 8002a56:	3301      	adds	r3, #1
 8002a58:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002a5e:	b29b      	uxth	r3, r3
 8002a60:	3b01      	subs	r3, #1
 8002a62:	b29a      	uxth	r2, r3
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002a6c:	b29b      	uxth	r3, r3
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d1cf      	bne.n	8002a12 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	9300      	str	r3, [sp, #0]
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	2200      	movs	r2, #0
 8002a7a:	2140      	movs	r1, #64	; 0x40
 8002a7c:	68f8      	ldr	r0, [r7, #12]
 8002a7e:	f000 f810 	bl	8002aa2 <UART_WaitOnFlagUntilTimeout>
 8002a82:	4603      	mov	r3, r0
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d001      	beq.n	8002a8c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002a88:	2303      	movs	r3, #3
 8002a8a:	e006      	b.n	8002a9a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	2220      	movs	r2, #32
 8002a90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002a94:	2300      	movs	r3, #0
 8002a96:	e000      	b.n	8002a9a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002a98:	2302      	movs	r3, #2
  }
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	3720      	adds	r7, #32
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}

08002aa2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002aa2:	b580      	push	{r7, lr}
 8002aa4:	b090      	sub	sp, #64	; 0x40
 8002aa6:	af00      	add	r7, sp, #0
 8002aa8:	60f8      	str	r0, [r7, #12]
 8002aaa:	60b9      	str	r1, [r7, #8]
 8002aac:	603b      	str	r3, [r7, #0]
 8002aae:	4613      	mov	r3, r2
 8002ab0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ab2:	e050      	b.n	8002b56 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ab4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ab6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002aba:	d04c      	beq.n	8002b56 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002abc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d007      	beq.n	8002ad2 <UART_WaitOnFlagUntilTimeout+0x30>
 8002ac2:	f7fe fc8d 	bl	80013e0 <HAL_GetTick>
 8002ac6:	4602      	mov	r2, r0
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	1ad3      	subs	r3, r2, r3
 8002acc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002ace:	429a      	cmp	r2, r3
 8002ad0:	d241      	bcs.n	8002b56 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	330c      	adds	r3, #12
 8002ad8:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002adc:	e853 3f00 	ldrex	r3, [r3]
 8002ae0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002ae8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	330c      	adds	r3, #12
 8002af0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002af2:	637a      	str	r2, [r7, #52]	; 0x34
 8002af4:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002af6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002af8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002afa:	e841 2300 	strex	r3, r2, [r1]
 8002afe:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002b00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d1e5      	bne.n	8002ad2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	3314      	adds	r3, #20
 8002b0c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	e853 3f00 	ldrex	r3, [r3]
 8002b14:	613b      	str	r3, [r7, #16]
   return(result);
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	f023 0301 	bic.w	r3, r3, #1
 8002b1c:	63bb      	str	r3, [r7, #56]	; 0x38
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	3314      	adds	r3, #20
 8002b24:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002b26:	623a      	str	r2, [r7, #32]
 8002b28:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b2a:	69f9      	ldr	r1, [r7, #28]
 8002b2c:	6a3a      	ldr	r2, [r7, #32]
 8002b2e:	e841 2300 	strex	r3, r2, [r1]
 8002b32:	61bb      	str	r3, [r7, #24]
   return(result);
 8002b34:	69bb      	ldr	r3, [r7, #24]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d1e5      	bne.n	8002b06 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	2220      	movs	r2, #32
 8002b3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	2220      	movs	r2, #32
 8002b46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002b52:	2303      	movs	r3, #3
 8002b54:	e00f      	b.n	8002b76 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	681a      	ldr	r2, [r3, #0]
 8002b5c:	68bb      	ldr	r3, [r7, #8]
 8002b5e:	4013      	ands	r3, r2
 8002b60:	68ba      	ldr	r2, [r7, #8]
 8002b62:	429a      	cmp	r2, r3
 8002b64:	bf0c      	ite	eq
 8002b66:	2301      	moveq	r3, #1
 8002b68:	2300      	movne	r3, #0
 8002b6a:	b2db      	uxtb	r3, r3
 8002b6c:	461a      	mov	r2, r3
 8002b6e:	79fb      	ldrb	r3, [r7, #7]
 8002b70:	429a      	cmp	r2, r3
 8002b72:	d09f      	beq.n	8002ab4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002b74:	2300      	movs	r3, #0
}
 8002b76:	4618      	mov	r0, r3
 8002b78:	3740      	adds	r7, #64	; 0x40
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd80      	pop	{r7, pc}
	...

08002b80 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002b80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b84:	b0c0      	sub	sp, #256	; 0x100
 8002b86:	af00      	add	r7, sp, #0
 8002b88:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	691b      	ldr	r3, [r3, #16]
 8002b94:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002b98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b9c:	68d9      	ldr	r1, [r3, #12]
 8002b9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ba2:	681a      	ldr	r2, [r3, #0]
 8002ba4:	ea40 0301 	orr.w	r3, r0, r1
 8002ba8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002baa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bae:	689a      	ldr	r2, [r3, #8]
 8002bb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bb4:	691b      	ldr	r3, [r3, #16]
 8002bb6:	431a      	orrs	r2, r3
 8002bb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bbc:	695b      	ldr	r3, [r3, #20]
 8002bbe:	431a      	orrs	r2, r3
 8002bc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bc4:	69db      	ldr	r3, [r3, #28]
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002bcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	68db      	ldr	r3, [r3, #12]
 8002bd4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002bd8:	f021 010c 	bic.w	r1, r1, #12
 8002bdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002be0:	681a      	ldr	r2, [r3, #0]
 8002be2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002be6:	430b      	orrs	r3, r1
 8002be8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002bea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	695b      	ldr	r3, [r3, #20]
 8002bf2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002bf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bfa:	6999      	ldr	r1, [r3, #24]
 8002bfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c00:	681a      	ldr	r2, [r3, #0]
 8002c02:	ea40 0301 	orr.w	r3, r0, r1
 8002c06:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002c08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c0c:	681a      	ldr	r2, [r3, #0]
 8002c0e:	4b8f      	ldr	r3, [pc, #572]	; (8002e4c <UART_SetConfig+0x2cc>)
 8002c10:	429a      	cmp	r2, r3
 8002c12:	d005      	beq.n	8002c20 <UART_SetConfig+0xa0>
 8002c14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c18:	681a      	ldr	r2, [r3, #0]
 8002c1a:	4b8d      	ldr	r3, [pc, #564]	; (8002e50 <UART_SetConfig+0x2d0>)
 8002c1c:	429a      	cmp	r2, r3
 8002c1e:	d104      	bne.n	8002c2a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002c20:	f7ff fb6c 	bl	80022fc <HAL_RCC_GetPCLK2Freq>
 8002c24:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002c28:	e003      	b.n	8002c32 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002c2a:	f7ff fb53 	bl	80022d4 <HAL_RCC_GetPCLK1Freq>
 8002c2e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c36:	69db      	ldr	r3, [r3, #28]
 8002c38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c3c:	f040 810c 	bne.w	8002e58 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002c40:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c44:	2200      	movs	r2, #0
 8002c46:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002c4a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002c4e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002c52:	4622      	mov	r2, r4
 8002c54:	462b      	mov	r3, r5
 8002c56:	1891      	adds	r1, r2, r2
 8002c58:	65b9      	str	r1, [r7, #88]	; 0x58
 8002c5a:	415b      	adcs	r3, r3
 8002c5c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002c5e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002c62:	4621      	mov	r1, r4
 8002c64:	eb12 0801 	adds.w	r8, r2, r1
 8002c68:	4629      	mov	r1, r5
 8002c6a:	eb43 0901 	adc.w	r9, r3, r1
 8002c6e:	f04f 0200 	mov.w	r2, #0
 8002c72:	f04f 0300 	mov.w	r3, #0
 8002c76:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002c7a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002c7e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002c82:	4690      	mov	r8, r2
 8002c84:	4699      	mov	r9, r3
 8002c86:	4623      	mov	r3, r4
 8002c88:	eb18 0303 	adds.w	r3, r8, r3
 8002c8c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002c90:	462b      	mov	r3, r5
 8002c92:	eb49 0303 	adc.w	r3, r9, r3
 8002c96:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002c9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002ca6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002caa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002cae:	460b      	mov	r3, r1
 8002cb0:	18db      	adds	r3, r3, r3
 8002cb2:	653b      	str	r3, [r7, #80]	; 0x50
 8002cb4:	4613      	mov	r3, r2
 8002cb6:	eb42 0303 	adc.w	r3, r2, r3
 8002cba:	657b      	str	r3, [r7, #84]	; 0x54
 8002cbc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002cc0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002cc4:	f7fd fa9c 	bl	8000200 <__aeabi_uldivmod>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	460b      	mov	r3, r1
 8002ccc:	4b61      	ldr	r3, [pc, #388]	; (8002e54 <UART_SetConfig+0x2d4>)
 8002cce:	fba3 2302 	umull	r2, r3, r3, r2
 8002cd2:	095b      	lsrs	r3, r3, #5
 8002cd4:	011c      	lsls	r4, r3, #4
 8002cd6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002cda:	2200      	movs	r2, #0
 8002cdc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002ce0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002ce4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002ce8:	4642      	mov	r2, r8
 8002cea:	464b      	mov	r3, r9
 8002cec:	1891      	adds	r1, r2, r2
 8002cee:	64b9      	str	r1, [r7, #72]	; 0x48
 8002cf0:	415b      	adcs	r3, r3
 8002cf2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002cf4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002cf8:	4641      	mov	r1, r8
 8002cfa:	eb12 0a01 	adds.w	sl, r2, r1
 8002cfe:	4649      	mov	r1, r9
 8002d00:	eb43 0b01 	adc.w	fp, r3, r1
 8002d04:	f04f 0200 	mov.w	r2, #0
 8002d08:	f04f 0300 	mov.w	r3, #0
 8002d0c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002d10:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002d14:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002d18:	4692      	mov	sl, r2
 8002d1a:	469b      	mov	fp, r3
 8002d1c:	4643      	mov	r3, r8
 8002d1e:	eb1a 0303 	adds.w	r3, sl, r3
 8002d22:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002d26:	464b      	mov	r3, r9
 8002d28:	eb4b 0303 	adc.w	r3, fp, r3
 8002d2c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002d30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	2200      	movs	r2, #0
 8002d38:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002d3c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002d40:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002d44:	460b      	mov	r3, r1
 8002d46:	18db      	adds	r3, r3, r3
 8002d48:	643b      	str	r3, [r7, #64]	; 0x40
 8002d4a:	4613      	mov	r3, r2
 8002d4c:	eb42 0303 	adc.w	r3, r2, r3
 8002d50:	647b      	str	r3, [r7, #68]	; 0x44
 8002d52:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002d56:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002d5a:	f7fd fa51 	bl	8000200 <__aeabi_uldivmod>
 8002d5e:	4602      	mov	r2, r0
 8002d60:	460b      	mov	r3, r1
 8002d62:	4611      	mov	r1, r2
 8002d64:	4b3b      	ldr	r3, [pc, #236]	; (8002e54 <UART_SetConfig+0x2d4>)
 8002d66:	fba3 2301 	umull	r2, r3, r3, r1
 8002d6a:	095b      	lsrs	r3, r3, #5
 8002d6c:	2264      	movs	r2, #100	; 0x64
 8002d6e:	fb02 f303 	mul.w	r3, r2, r3
 8002d72:	1acb      	subs	r3, r1, r3
 8002d74:	00db      	lsls	r3, r3, #3
 8002d76:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002d7a:	4b36      	ldr	r3, [pc, #216]	; (8002e54 <UART_SetConfig+0x2d4>)
 8002d7c:	fba3 2302 	umull	r2, r3, r3, r2
 8002d80:	095b      	lsrs	r3, r3, #5
 8002d82:	005b      	lsls	r3, r3, #1
 8002d84:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002d88:	441c      	add	r4, r3
 8002d8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d8e:	2200      	movs	r2, #0
 8002d90:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002d94:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002d98:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002d9c:	4642      	mov	r2, r8
 8002d9e:	464b      	mov	r3, r9
 8002da0:	1891      	adds	r1, r2, r2
 8002da2:	63b9      	str	r1, [r7, #56]	; 0x38
 8002da4:	415b      	adcs	r3, r3
 8002da6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002da8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002dac:	4641      	mov	r1, r8
 8002dae:	1851      	adds	r1, r2, r1
 8002db0:	6339      	str	r1, [r7, #48]	; 0x30
 8002db2:	4649      	mov	r1, r9
 8002db4:	414b      	adcs	r3, r1
 8002db6:	637b      	str	r3, [r7, #52]	; 0x34
 8002db8:	f04f 0200 	mov.w	r2, #0
 8002dbc:	f04f 0300 	mov.w	r3, #0
 8002dc0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002dc4:	4659      	mov	r1, fp
 8002dc6:	00cb      	lsls	r3, r1, #3
 8002dc8:	4651      	mov	r1, sl
 8002dca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002dce:	4651      	mov	r1, sl
 8002dd0:	00ca      	lsls	r2, r1, #3
 8002dd2:	4610      	mov	r0, r2
 8002dd4:	4619      	mov	r1, r3
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	4642      	mov	r2, r8
 8002dda:	189b      	adds	r3, r3, r2
 8002ddc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002de0:	464b      	mov	r3, r9
 8002de2:	460a      	mov	r2, r1
 8002de4:	eb42 0303 	adc.w	r3, r2, r3
 8002de8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002dec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	2200      	movs	r2, #0
 8002df4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002df8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002dfc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002e00:	460b      	mov	r3, r1
 8002e02:	18db      	adds	r3, r3, r3
 8002e04:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e06:	4613      	mov	r3, r2
 8002e08:	eb42 0303 	adc.w	r3, r2, r3
 8002e0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e0e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002e12:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002e16:	f7fd f9f3 	bl	8000200 <__aeabi_uldivmod>
 8002e1a:	4602      	mov	r2, r0
 8002e1c:	460b      	mov	r3, r1
 8002e1e:	4b0d      	ldr	r3, [pc, #52]	; (8002e54 <UART_SetConfig+0x2d4>)
 8002e20:	fba3 1302 	umull	r1, r3, r3, r2
 8002e24:	095b      	lsrs	r3, r3, #5
 8002e26:	2164      	movs	r1, #100	; 0x64
 8002e28:	fb01 f303 	mul.w	r3, r1, r3
 8002e2c:	1ad3      	subs	r3, r2, r3
 8002e2e:	00db      	lsls	r3, r3, #3
 8002e30:	3332      	adds	r3, #50	; 0x32
 8002e32:	4a08      	ldr	r2, [pc, #32]	; (8002e54 <UART_SetConfig+0x2d4>)
 8002e34:	fba2 2303 	umull	r2, r3, r2, r3
 8002e38:	095b      	lsrs	r3, r3, #5
 8002e3a:	f003 0207 	and.w	r2, r3, #7
 8002e3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4422      	add	r2, r4
 8002e46:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002e48:	e105      	b.n	8003056 <UART_SetConfig+0x4d6>
 8002e4a:	bf00      	nop
 8002e4c:	40011000 	.word	0x40011000
 8002e50:	40011400 	.word	0x40011400
 8002e54:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002e58:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002e62:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002e66:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002e6a:	4642      	mov	r2, r8
 8002e6c:	464b      	mov	r3, r9
 8002e6e:	1891      	adds	r1, r2, r2
 8002e70:	6239      	str	r1, [r7, #32]
 8002e72:	415b      	adcs	r3, r3
 8002e74:	627b      	str	r3, [r7, #36]	; 0x24
 8002e76:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002e7a:	4641      	mov	r1, r8
 8002e7c:	1854      	adds	r4, r2, r1
 8002e7e:	4649      	mov	r1, r9
 8002e80:	eb43 0501 	adc.w	r5, r3, r1
 8002e84:	f04f 0200 	mov.w	r2, #0
 8002e88:	f04f 0300 	mov.w	r3, #0
 8002e8c:	00eb      	lsls	r3, r5, #3
 8002e8e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e92:	00e2      	lsls	r2, r4, #3
 8002e94:	4614      	mov	r4, r2
 8002e96:	461d      	mov	r5, r3
 8002e98:	4643      	mov	r3, r8
 8002e9a:	18e3      	adds	r3, r4, r3
 8002e9c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002ea0:	464b      	mov	r3, r9
 8002ea2:	eb45 0303 	adc.w	r3, r5, r3
 8002ea6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002eaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002eb6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002eba:	f04f 0200 	mov.w	r2, #0
 8002ebe:	f04f 0300 	mov.w	r3, #0
 8002ec2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002ec6:	4629      	mov	r1, r5
 8002ec8:	008b      	lsls	r3, r1, #2
 8002eca:	4621      	mov	r1, r4
 8002ecc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002ed0:	4621      	mov	r1, r4
 8002ed2:	008a      	lsls	r2, r1, #2
 8002ed4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002ed8:	f7fd f992 	bl	8000200 <__aeabi_uldivmod>
 8002edc:	4602      	mov	r2, r0
 8002ede:	460b      	mov	r3, r1
 8002ee0:	4b60      	ldr	r3, [pc, #384]	; (8003064 <UART_SetConfig+0x4e4>)
 8002ee2:	fba3 2302 	umull	r2, r3, r3, r2
 8002ee6:	095b      	lsrs	r3, r3, #5
 8002ee8:	011c      	lsls	r4, r3, #4
 8002eea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002eee:	2200      	movs	r2, #0
 8002ef0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002ef4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002ef8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002efc:	4642      	mov	r2, r8
 8002efe:	464b      	mov	r3, r9
 8002f00:	1891      	adds	r1, r2, r2
 8002f02:	61b9      	str	r1, [r7, #24]
 8002f04:	415b      	adcs	r3, r3
 8002f06:	61fb      	str	r3, [r7, #28]
 8002f08:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002f0c:	4641      	mov	r1, r8
 8002f0e:	1851      	adds	r1, r2, r1
 8002f10:	6139      	str	r1, [r7, #16]
 8002f12:	4649      	mov	r1, r9
 8002f14:	414b      	adcs	r3, r1
 8002f16:	617b      	str	r3, [r7, #20]
 8002f18:	f04f 0200 	mov.w	r2, #0
 8002f1c:	f04f 0300 	mov.w	r3, #0
 8002f20:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002f24:	4659      	mov	r1, fp
 8002f26:	00cb      	lsls	r3, r1, #3
 8002f28:	4651      	mov	r1, sl
 8002f2a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002f2e:	4651      	mov	r1, sl
 8002f30:	00ca      	lsls	r2, r1, #3
 8002f32:	4610      	mov	r0, r2
 8002f34:	4619      	mov	r1, r3
 8002f36:	4603      	mov	r3, r0
 8002f38:	4642      	mov	r2, r8
 8002f3a:	189b      	adds	r3, r3, r2
 8002f3c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002f40:	464b      	mov	r3, r9
 8002f42:	460a      	mov	r2, r1
 8002f44:	eb42 0303 	adc.w	r3, r2, r3
 8002f48:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002f4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	2200      	movs	r2, #0
 8002f54:	67bb      	str	r3, [r7, #120]	; 0x78
 8002f56:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002f58:	f04f 0200 	mov.w	r2, #0
 8002f5c:	f04f 0300 	mov.w	r3, #0
 8002f60:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002f64:	4649      	mov	r1, r9
 8002f66:	008b      	lsls	r3, r1, #2
 8002f68:	4641      	mov	r1, r8
 8002f6a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002f6e:	4641      	mov	r1, r8
 8002f70:	008a      	lsls	r2, r1, #2
 8002f72:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002f76:	f7fd f943 	bl	8000200 <__aeabi_uldivmod>
 8002f7a:	4602      	mov	r2, r0
 8002f7c:	460b      	mov	r3, r1
 8002f7e:	4b39      	ldr	r3, [pc, #228]	; (8003064 <UART_SetConfig+0x4e4>)
 8002f80:	fba3 1302 	umull	r1, r3, r3, r2
 8002f84:	095b      	lsrs	r3, r3, #5
 8002f86:	2164      	movs	r1, #100	; 0x64
 8002f88:	fb01 f303 	mul.w	r3, r1, r3
 8002f8c:	1ad3      	subs	r3, r2, r3
 8002f8e:	011b      	lsls	r3, r3, #4
 8002f90:	3332      	adds	r3, #50	; 0x32
 8002f92:	4a34      	ldr	r2, [pc, #208]	; (8003064 <UART_SetConfig+0x4e4>)
 8002f94:	fba2 2303 	umull	r2, r3, r2, r3
 8002f98:	095b      	lsrs	r3, r3, #5
 8002f9a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f9e:	441c      	add	r4, r3
 8002fa0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	673b      	str	r3, [r7, #112]	; 0x70
 8002fa8:	677a      	str	r2, [r7, #116]	; 0x74
 8002faa:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002fae:	4642      	mov	r2, r8
 8002fb0:	464b      	mov	r3, r9
 8002fb2:	1891      	adds	r1, r2, r2
 8002fb4:	60b9      	str	r1, [r7, #8]
 8002fb6:	415b      	adcs	r3, r3
 8002fb8:	60fb      	str	r3, [r7, #12]
 8002fba:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002fbe:	4641      	mov	r1, r8
 8002fc0:	1851      	adds	r1, r2, r1
 8002fc2:	6039      	str	r1, [r7, #0]
 8002fc4:	4649      	mov	r1, r9
 8002fc6:	414b      	adcs	r3, r1
 8002fc8:	607b      	str	r3, [r7, #4]
 8002fca:	f04f 0200 	mov.w	r2, #0
 8002fce:	f04f 0300 	mov.w	r3, #0
 8002fd2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002fd6:	4659      	mov	r1, fp
 8002fd8:	00cb      	lsls	r3, r1, #3
 8002fda:	4651      	mov	r1, sl
 8002fdc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002fe0:	4651      	mov	r1, sl
 8002fe2:	00ca      	lsls	r2, r1, #3
 8002fe4:	4610      	mov	r0, r2
 8002fe6:	4619      	mov	r1, r3
 8002fe8:	4603      	mov	r3, r0
 8002fea:	4642      	mov	r2, r8
 8002fec:	189b      	adds	r3, r3, r2
 8002fee:	66bb      	str	r3, [r7, #104]	; 0x68
 8002ff0:	464b      	mov	r3, r9
 8002ff2:	460a      	mov	r2, r1
 8002ff4:	eb42 0303 	adc.w	r3, r2, r3
 8002ff8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002ffa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	2200      	movs	r2, #0
 8003002:	663b      	str	r3, [r7, #96]	; 0x60
 8003004:	667a      	str	r2, [r7, #100]	; 0x64
 8003006:	f04f 0200 	mov.w	r2, #0
 800300a:	f04f 0300 	mov.w	r3, #0
 800300e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003012:	4649      	mov	r1, r9
 8003014:	008b      	lsls	r3, r1, #2
 8003016:	4641      	mov	r1, r8
 8003018:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800301c:	4641      	mov	r1, r8
 800301e:	008a      	lsls	r2, r1, #2
 8003020:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003024:	f7fd f8ec 	bl	8000200 <__aeabi_uldivmod>
 8003028:	4602      	mov	r2, r0
 800302a:	460b      	mov	r3, r1
 800302c:	4b0d      	ldr	r3, [pc, #52]	; (8003064 <UART_SetConfig+0x4e4>)
 800302e:	fba3 1302 	umull	r1, r3, r3, r2
 8003032:	095b      	lsrs	r3, r3, #5
 8003034:	2164      	movs	r1, #100	; 0x64
 8003036:	fb01 f303 	mul.w	r3, r1, r3
 800303a:	1ad3      	subs	r3, r2, r3
 800303c:	011b      	lsls	r3, r3, #4
 800303e:	3332      	adds	r3, #50	; 0x32
 8003040:	4a08      	ldr	r2, [pc, #32]	; (8003064 <UART_SetConfig+0x4e4>)
 8003042:	fba2 2303 	umull	r2, r3, r2, r3
 8003046:	095b      	lsrs	r3, r3, #5
 8003048:	f003 020f 	and.w	r2, r3, #15
 800304c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4422      	add	r2, r4
 8003054:	609a      	str	r2, [r3, #8]
}
 8003056:	bf00      	nop
 8003058:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800305c:	46bd      	mov	sp, r7
 800305e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003062:	bf00      	nop
 8003064:	51eb851f 	.word	0x51eb851f

08003068 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003068:	b480      	push	{r7}
 800306a:	b083      	sub	sp, #12
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	f103 0208 	add.w	r2, r3, #8
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	f04f 32ff 	mov.w	r2, #4294967295
 8003080:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	f103 0208 	add.w	r2, r3, #8
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	f103 0208 	add.w	r2, r3, #8
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2200      	movs	r2, #0
 800309a:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800309c:	bf00      	nop
 800309e:	370c      	adds	r7, #12
 80030a0:	46bd      	mov	sp, r7
 80030a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a6:	4770      	bx	lr

080030a8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80030a8:	b480      	push	{r7}
 80030aa:	b083      	sub	sp, #12
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2200      	movs	r2, #0
 80030b4:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80030b6:	bf00      	nop
 80030b8:	370c      	adds	r7, #12
 80030ba:	46bd      	mov	sp, r7
 80030bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c0:	4770      	bx	lr

080030c2 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80030c2:	b480      	push	{r7}
 80030c4:	b085      	sub	sp, #20
 80030c6:	af00      	add	r7, sp, #0
 80030c8:	6078      	str	r0, [r7, #4]
 80030ca:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80030d2:	68bb      	ldr	r3, [r7, #8]
 80030d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030d8:	d103      	bne.n	80030e2 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	691b      	ldr	r3, [r3, #16]
 80030de:	60fb      	str	r3, [r7, #12]
 80030e0:	e00c      	b.n	80030fc <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	3308      	adds	r3, #8
 80030e6:	60fb      	str	r3, [r7, #12]
 80030e8:	e002      	b.n	80030f0 <vListInsert+0x2e>
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	60fb      	str	r3, [r7, #12]
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	68ba      	ldr	r2, [r7, #8]
 80030f8:	429a      	cmp	r2, r3
 80030fa:	d2f6      	bcs.n	80030ea <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	685a      	ldr	r2, [r3, #4]
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	683a      	ldr	r2, [r7, #0]
 800310a:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	68fa      	ldr	r2, [r7, #12]
 8003110:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	683a      	ldr	r2, [r7, #0]
 8003116:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	687a      	ldr	r2, [r7, #4]
 800311c:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	1c5a      	adds	r2, r3, #1
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	601a      	str	r2, [r3, #0]
}
 8003128:	bf00      	nop
 800312a:	3714      	adds	r7, #20
 800312c:	46bd      	mov	sp, r7
 800312e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003132:	4770      	bx	lr

08003134 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003134:	b480      	push	{r7}
 8003136:	b085      	sub	sp, #20
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	691b      	ldr	r3, [r3, #16]
 8003140:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	687a      	ldr	r2, [r7, #4]
 8003148:	6892      	ldr	r2, [r2, #8]
 800314a:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	687a      	ldr	r2, [r7, #4]
 8003152:	6852      	ldr	r2, [r2, #4]
 8003154:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	687a      	ldr	r2, [r7, #4]
 800315c:	429a      	cmp	r2, r3
 800315e:	d103      	bne.n	8003168 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	689a      	ldr	r2, [r3, #8]
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2200      	movs	r2, #0
 800316c:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	1e5a      	subs	r2, r3, #1
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
}
 800317c:	4618      	mov	r0, r3
 800317e:	3714      	adds	r7, #20
 8003180:	46bd      	mov	sp, r7
 8003182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003186:	4770      	bx	lr

08003188 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b086      	sub	sp, #24
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
 8003190:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8003192:	2301      	movs	r3, #1
 8003194:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 800319a:	693b      	ldr	r3, [r7, #16]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d10a      	bne.n	80031b6 <xQueueGenericReset+0x2e>
        __asm volatile
 80031a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031a4:	f383 8811 	msr	BASEPRI, r3
 80031a8:	f3bf 8f6f 	isb	sy
 80031ac:	f3bf 8f4f 	dsb	sy
 80031b0:	60fb      	str	r3, [r7, #12]
    }
 80031b2:	bf00      	nop
 80031b4:	e7fe      	b.n	80031b4 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d05d      	beq.n	8003278 <xQueueGenericReset+0xf0>
        ( pxQueue->uxLength >= 1U ) &&
 80031bc:	693b      	ldr	r3, [r7, #16]
 80031be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d059      	beq.n	8003278 <xQueueGenericReset+0xf0>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 80031c4:	693b      	ldr	r3, [r7, #16]
 80031c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80031c8:	693b      	ldr	r3, [r7, #16]
 80031ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031cc:	2100      	movs	r1, #0
 80031ce:	fba3 2302 	umull	r2, r3, r3, r2
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d000      	beq.n	80031d8 <xQueueGenericReset+0x50>
 80031d6:	2101      	movs	r1, #1
 80031d8:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d14c      	bne.n	8003278 <xQueueGenericReset+0xf0>
    {
        taskENTER_CRITICAL();
 80031de:	f001 fdeb 	bl	8004db8 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	681a      	ldr	r2, [r3, #0]
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031ea:	6939      	ldr	r1, [r7, #16]
 80031ec:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80031ee:	fb01 f303 	mul.w	r3, r1, r3
 80031f2:	441a      	add	r2, r3
 80031f4:	693b      	ldr	r3, [r7, #16]
 80031f6:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80031f8:	693b      	ldr	r3, [r7, #16]
 80031fa:	2200      	movs	r2, #0
 80031fc:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	681a      	ldr	r2, [r3, #0]
 8003202:	693b      	ldr	r3, [r7, #16]
 8003204:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	681a      	ldr	r2, [r3, #0]
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800320e:	3b01      	subs	r3, #1
 8003210:	6939      	ldr	r1, [r7, #16]
 8003212:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003214:	fb01 f303 	mul.w	r3, r1, r3
 8003218:	441a      	add	r2, r3
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 800321e:	693b      	ldr	r3, [r7, #16]
 8003220:	22ff      	movs	r2, #255	; 0xff
 8003222:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	22ff      	movs	r2, #255	; 0xff
 800322a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d114      	bne.n	800325e <xQueueGenericReset+0xd6>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003234:	693b      	ldr	r3, [r7, #16]
 8003236:	691b      	ldr	r3, [r3, #16]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d01a      	beq.n	8003272 <xQueueGenericReset+0xea>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800323c:	693b      	ldr	r3, [r7, #16]
 800323e:	3310      	adds	r3, #16
 8003240:	4618      	mov	r0, r3
 8003242:	f000 ff57 	bl	80040f4 <xTaskRemoveFromEventList>
 8003246:	4603      	mov	r3, r0
 8003248:	2b00      	cmp	r3, #0
 800324a:	d012      	beq.n	8003272 <xQueueGenericReset+0xea>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800324c:	4b15      	ldr	r3, [pc, #84]	; (80032a4 <xQueueGenericReset+0x11c>)
 800324e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003252:	601a      	str	r2, [r3, #0]
 8003254:	f3bf 8f4f 	dsb	sy
 8003258:	f3bf 8f6f 	isb	sy
 800325c:	e009      	b.n	8003272 <xQueueGenericReset+0xea>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800325e:	693b      	ldr	r3, [r7, #16]
 8003260:	3310      	adds	r3, #16
 8003262:	4618      	mov	r0, r3
 8003264:	f7ff ff00 	bl	8003068 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003268:	693b      	ldr	r3, [r7, #16]
 800326a:	3324      	adds	r3, #36	; 0x24
 800326c:	4618      	mov	r0, r3
 800326e:	f7ff fefb 	bl	8003068 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8003272:	f001 fdd1 	bl	8004e18 <vPortExitCritical>
 8003276:	e001      	b.n	800327c <xQueueGenericReset+0xf4>
    }
    else
    {
        xReturn = pdFAIL;
 8003278:	2300      	movs	r3, #0
 800327a:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 800327c:	697b      	ldr	r3, [r7, #20]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d10a      	bne.n	8003298 <xQueueGenericReset+0x110>
        __asm volatile
 8003282:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003286:	f383 8811 	msr	BASEPRI, r3
 800328a:	f3bf 8f6f 	isb	sy
 800328e:	f3bf 8f4f 	dsb	sy
 8003292:	60bb      	str	r3, [r7, #8]
    }
 8003294:	bf00      	nop
 8003296:	e7fe      	b.n	8003296 <xQueueGenericReset+0x10e>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8003298:	697b      	ldr	r3, [r7, #20]
}
 800329a:	4618      	mov	r0, r3
 800329c:	3718      	adds	r7, #24
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}
 80032a2:	bf00      	nop
 80032a4:	e000ed04 	.word	0xe000ed04

080032a8 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b08a      	sub	sp, #40	; 0x28
 80032ac:	af02      	add	r7, sp, #8
 80032ae:	60f8      	str	r0, [r7, #12]
 80032b0:	60b9      	str	r1, [r7, #8]
 80032b2:	4613      	mov	r3, r2
 80032b4:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 80032b6:	2300      	movs	r3, #0
 80032b8:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d02e      	beq.n	800331e <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80032c0:	2100      	movs	r1, #0
 80032c2:	68ba      	ldr	r2, [r7, #8]
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	fba3 2302 	umull	r2, r3, r3, r2
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d000      	beq.n	80032d0 <xQueueGenericCreate+0x28>
 80032ce:	2101      	movs	r1, #1
 80032d0:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d123      	bne.n	800331e <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	68ba      	ldr	r2, [r7, #8]
 80032da:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80032de:	f113 0f51 	cmn.w	r3, #81	; 0x51
 80032e2:	d81c      	bhi.n	800331e <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	68ba      	ldr	r2, [r7, #8]
 80032e8:	fb02 f303 	mul.w	r3, r2, r3
 80032ec:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80032ee:	69bb      	ldr	r3, [r7, #24]
 80032f0:	3350      	adds	r3, #80	; 0x50
 80032f2:	4618      	mov	r0, r3
 80032f4:	f001 fe42 	bl	8004f7c <pvPortMalloc>
 80032f8:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 80032fa:	69fb      	ldr	r3, [r7, #28]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d01c      	beq.n	800333a <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003300:	69fb      	ldr	r3, [r7, #28]
 8003302:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	3350      	adds	r3, #80	; 0x50
 8003308:	617b      	str	r3, [r7, #20]
                         * deleted. */
                        pxNewQueue->ucStaticallyAllocated = pdFALSE;
                    }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800330a:	79fa      	ldrb	r2, [r7, #7]
 800330c:	69fb      	ldr	r3, [r7, #28]
 800330e:	9300      	str	r3, [sp, #0]
 8003310:	4613      	mov	r3, r2
 8003312:	697a      	ldr	r2, [r7, #20]
 8003314:	68b9      	ldr	r1, [r7, #8]
 8003316:	68f8      	ldr	r0, [r7, #12]
 8003318:	f000 f814 	bl	8003344 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 800331c:	e00d      	b.n	800333a <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 800331e:	69fb      	ldr	r3, [r7, #28]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d10a      	bne.n	800333a <xQueueGenericCreate+0x92>
        __asm volatile
 8003324:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003328:	f383 8811 	msr	BASEPRI, r3
 800332c:	f3bf 8f6f 	isb	sy
 8003330:	f3bf 8f4f 	dsb	sy
 8003334:	613b      	str	r3, [r7, #16]
    }
 8003336:	bf00      	nop
 8003338:	e7fe      	b.n	8003338 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 800333a:	69fb      	ldr	r3, [r7, #28]
    }
 800333c:	4618      	mov	r0, r3
 800333e:	3720      	adds	r7, #32
 8003340:	46bd      	mov	sp, r7
 8003342:	bd80      	pop	{r7, pc}

08003344 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b084      	sub	sp, #16
 8003348:	af00      	add	r7, sp, #0
 800334a:	60f8      	str	r0, [r7, #12]
 800334c:	60b9      	str	r1, [r7, #8]
 800334e:	607a      	str	r2, [r7, #4]
 8003350:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8003352:	68bb      	ldr	r3, [r7, #8]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d103      	bne.n	8003360 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003358:	69bb      	ldr	r3, [r7, #24]
 800335a:	69ba      	ldr	r2, [r7, #24]
 800335c:	601a      	str	r2, [r3, #0]
 800335e:	e002      	b.n	8003366 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003360:	69bb      	ldr	r3, [r7, #24]
 8003362:	687a      	ldr	r2, [r7, #4]
 8003364:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8003366:	69bb      	ldr	r3, [r7, #24]
 8003368:	68fa      	ldr	r2, [r7, #12]
 800336a:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 800336c:	69bb      	ldr	r3, [r7, #24]
 800336e:	68ba      	ldr	r2, [r7, #8]
 8003370:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003372:	2101      	movs	r1, #1
 8003374:	69b8      	ldr	r0, [r7, #24]
 8003376:	f7ff ff07 	bl	8003188 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 800337a:	69bb      	ldr	r3, [r7, #24]
 800337c:	78fa      	ldrb	r2, [r7, #3]
 800337e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8003382:	bf00      	nop
 8003384:	3710      	adds	r7, #16
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}
	...

0800338c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b08c      	sub	sp, #48	; 0x30
 8003390:	af00      	add	r7, sp, #0
 8003392:	60f8      	str	r0, [r7, #12]
 8003394:	60b9      	str	r1, [r7, #8]
 8003396:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8003398:	2300      	movs	r3, #0
 800339a:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80033a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d10a      	bne.n	80033bc <xQueueReceive+0x30>
        __asm volatile
 80033a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033aa:	f383 8811 	msr	BASEPRI, r3
 80033ae:	f3bf 8f6f 	isb	sy
 80033b2:	f3bf 8f4f 	dsb	sy
 80033b6:	623b      	str	r3, [r7, #32]
    }
 80033b8:	bf00      	nop
 80033ba:	e7fe      	b.n	80033ba <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d103      	bne.n	80033ca <xQueueReceive+0x3e>
 80033c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d101      	bne.n	80033ce <xQueueReceive+0x42>
 80033ca:	2301      	movs	r3, #1
 80033cc:	e000      	b.n	80033d0 <xQueueReceive+0x44>
 80033ce:	2300      	movs	r3, #0
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d10a      	bne.n	80033ea <xQueueReceive+0x5e>
        __asm volatile
 80033d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033d8:	f383 8811 	msr	BASEPRI, r3
 80033dc:	f3bf 8f6f 	isb	sy
 80033e0:	f3bf 8f4f 	dsb	sy
 80033e4:	61fb      	str	r3, [r7, #28]
    }
 80033e6:	bf00      	nop
 80033e8:	e7fe      	b.n	80033e8 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80033ea:	f001 f893 	bl	8004514 <xTaskGetSchedulerState>
 80033ee:	4603      	mov	r3, r0
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d102      	bne.n	80033fa <xQueueReceive+0x6e>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d101      	bne.n	80033fe <xQueueReceive+0x72>
 80033fa:	2301      	movs	r3, #1
 80033fc:	e000      	b.n	8003400 <xQueueReceive+0x74>
 80033fe:	2300      	movs	r3, #0
 8003400:	2b00      	cmp	r3, #0
 8003402:	d10a      	bne.n	800341a <xQueueReceive+0x8e>
        __asm volatile
 8003404:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003408:	f383 8811 	msr	BASEPRI, r3
 800340c:	f3bf 8f6f 	isb	sy
 8003410:	f3bf 8f4f 	dsb	sy
 8003414:	61bb      	str	r3, [r7, #24]
    }
 8003416:	bf00      	nop
 8003418:	e7fe      	b.n	8003418 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800341a:	f001 fccd 	bl	8004db8 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800341e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003420:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003422:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003426:	2b00      	cmp	r3, #0
 8003428:	d01f      	beq.n	800346a <xQueueReceive+0xde>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 800342a:	68b9      	ldr	r1, [r7, #8]
 800342c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800342e:	f000 f88d 	bl	800354c <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003434:	1e5a      	subs	r2, r3, #1
 8003436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003438:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800343a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800343c:	691b      	ldr	r3, [r3, #16]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d00f      	beq.n	8003462 <xQueueReceive+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003444:	3310      	adds	r3, #16
 8003446:	4618      	mov	r0, r3
 8003448:	f000 fe54 	bl	80040f4 <xTaskRemoveFromEventList>
 800344c:	4603      	mov	r3, r0
 800344e:	2b00      	cmp	r3, #0
 8003450:	d007      	beq.n	8003462 <xQueueReceive+0xd6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8003452:	4b3d      	ldr	r3, [pc, #244]	; (8003548 <xQueueReceive+0x1bc>)
 8003454:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003458:	601a      	str	r2, [r3, #0]
 800345a:	f3bf 8f4f 	dsb	sy
 800345e:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8003462:	f001 fcd9 	bl	8004e18 <vPortExitCritical>
                return pdPASS;
 8003466:	2301      	movs	r3, #1
 8003468:	e069      	b.n	800353e <xQueueReceive+0x1b2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d103      	bne.n	8003478 <xQueueReceive+0xec>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8003470:	f001 fcd2 	bl	8004e18 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8003474:	2300      	movs	r3, #0
 8003476:	e062      	b.n	800353e <xQueueReceive+0x1b2>
                }
                else if( xEntryTimeSet == pdFALSE )
 8003478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800347a:	2b00      	cmp	r3, #0
 800347c:	d106      	bne.n	800348c <xQueueReceive+0x100>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800347e:	f107 0310 	add.w	r3, r7, #16
 8003482:	4618      	mov	r0, r3
 8003484:	f000 ff0c 	bl	80042a0 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8003488:	2301      	movs	r3, #1
 800348a:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800348c:	f001 fcc4 	bl	8004e18 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8003490:	f000 fb3a 	bl	8003b08 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8003494:	f001 fc90 	bl	8004db8 <vPortEnterCritical>
 8003498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800349a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800349e:	b25b      	sxtb	r3, r3
 80034a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034a4:	d103      	bne.n	80034ae <xQueueReceive+0x122>
 80034a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034a8:	2200      	movs	r2, #0
 80034aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80034ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034b0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80034b4:	b25b      	sxtb	r3, r3
 80034b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034ba:	d103      	bne.n	80034c4 <xQueueReceive+0x138>
 80034bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034be:	2200      	movs	r2, #0
 80034c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80034c4:	f001 fca8 	bl	8004e18 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80034c8:	1d3a      	adds	r2, r7, #4
 80034ca:	f107 0310 	add.w	r3, r7, #16
 80034ce:	4611      	mov	r1, r2
 80034d0:	4618      	mov	r0, r3
 80034d2:	f000 fefb 	bl	80042cc <xTaskCheckForTimeOut>
 80034d6:	4603      	mov	r3, r0
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d123      	bne.n	8003524 <xQueueReceive+0x198>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80034dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80034de:	f000 f8ad 	bl	800363c <prvIsQueueEmpty>
 80034e2:	4603      	mov	r3, r0
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d017      	beq.n	8003518 <xQueueReceive+0x18c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80034e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034ea:	3324      	adds	r3, #36	; 0x24
 80034ec:	687a      	ldr	r2, [r7, #4]
 80034ee:	4611      	mov	r1, r2
 80034f0:	4618      	mov	r0, r3
 80034f2:	f000 fd95 	bl	8004020 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80034f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80034f8:	f000 f84e 	bl	8003598 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80034fc:	f000 fb12 	bl	8003b24 <xTaskResumeAll>
 8003500:	4603      	mov	r3, r0
 8003502:	2b00      	cmp	r3, #0
 8003504:	d189      	bne.n	800341a <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8003506:	4b10      	ldr	r3, [pc, #64]	; (8003548 <xQueueReceive+0x1bc>)
 8003508:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800350c:	601a      	str	r2, [r3, #0]
 800350e:	f3bf 8f4f 	dsb	sy
 8003512:	f3bf 8f6f 	isb	sy
 8003516:	e780      	b.n	800341a <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8003518:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800351a:	f000 f83d 	bl	8003598 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800351e:	f000 fb01 	bl	8003b24 <xTaskResumeAll>
 8003522:	e77a      	b.n	800341a <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8003524:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003526:	f000 f837 	bl	8003598 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800352a:	f000 fafb 	bl	8003b24 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800352e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003530:	f000 f884 	bl	800363c <prvIsQueueEmpty>
 8003534:	4603      	mov	r3, r0
 8003536:	2b00      	cmp	r3, #0
 8003538:	f43f af6f 	beq.w	800341a <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 800353c:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 800353e:	4618      	mov	r0, r3
 8003540:	3730      	adds	r7, #48	; 0x30
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}
 8003546:	bf00      	nop
 8003548:	e000ed04 	.word	0xe000ed04

0800354c <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b082      	sub	sp, #8
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
 8003554:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800355a:	2b00      	cmp	r3, #0
 800355c:	d018      	beq.n	8003590 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	68da      	ldr	r2, [r3, #12]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003566:	441a      	add	r2, r3
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	68da      	ldr	r2, [r3, #12]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	689b      	ldr	r3, [r3, #8]
 8003574:	429a      	cmp	r2, r3
 8003576:	d303      	bcc.n	8003580 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681a      	ldr	r2, [r3, #0]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	68d9      	ldr	r1, [r3, #12]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003588:	461a      	mov	r2, r3
 800358a:	6838      	ldr	r0, [r7, #0]
 800358c:	f002 fabc 	bl	8005b08 <memcpy>
    }
}
 8003590:	bf00      	nop
 8003592:	3708      	adds	r7, #8
 8003594:	46bd      	mov	sp, r7
 8003596:	bd80      	pop	{r7, pc}

08003598 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b084      	sub	sp, #16
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80035a0:	f001 fc0a 	bl	8004db8 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80035aa:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80035ac:	e011      	b.n	80035d2 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d012      	beq.n	80035dc <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	3324      	adds	r3, #36	; 0x24
 80035ba:	4618      	mov	r0, r3
 80035bc:	f000 fd9a 	bl	80040f4 <xTaskRemoveFromEventList>
 80035c0:	4603      	mov	r3, r0
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d001      	beq.n	80035ca <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 80035c6:	f000 fee7 	bl	8004398 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80035ca:	7bfb      	ldrb	r3, [r7, #15]
 80035cc:	3b01      	subs	r3, #1
 80035ce:	b2db      	uxtb	r3, r3
 80035d0:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80035d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	dce9      	bgt.n	80035ae <prvUnlockQueue+0x16>
 80035da:	e000      	b.n	80035de <prvUnlockQueue+0x46>
                        break;
 80035dc:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	22ff      	movs	r2, #255	; 0xff
 80035e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 80035e6:	f001 fc17 	bl	8004e18 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 80035ea:	f001 fbe5 	bl	8004db8 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80035f4:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 80035f6:	e011      	b.n	800361c <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	691b      	ldr	r3, [r3, #16]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d012      	beq.n	8003626 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	3310      	adds	r3, #16
 8003604:	4618      	mov	r0, r3
 8003606:	f000 fd75 	bl	80040f4 <xTaskRemoveFromEventList>
 800360a:	4603      	mov	r3, r0
 800360c:	2b00      	cmp	r3, #0
 800360e:	d001      	beq.n	8003614 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8003610:	f000 fec2 	bl	8004398 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8003614:	7bbb      	ldrb	r3, [r7, #14]
 8003616:	3b01      	subs	r3, #1
 8003618:	b2db      	uxtb	r3, r3
 800361a:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 800361c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003620:	2b00      	cmp	r3, #0
 8003622:	dce9      	bgt.n	80035f8 <prvUnlockQueue+0x60>
 8003624:	e000      	b.n	8003628 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8003626:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	22ff      	movs	r2, #255	; 0xff
 800362c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8003630:	f001 fbf2 	bl	8004e18 <vPortExitCritical>
}
 8003634:	bf00      	nop
 8003636:	3710      	adds	r7, #16
 8003638:	46bd      	mov	sp, r7
 800363a:	bd80      	pop	{r7, pc}

0800363c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b084      	sub	sp, #16
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8003644:	f001 fbb8 	bl	8004db8 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800364c:	2b00      	cmp	r3, #0
 800364e:	d102      	bne.n	8003656 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8003650:	2301      	movs	r3, #1
 8003652:	60fb      	str	r3, [r7, #12]
 8003654:	e001      	b.n	800365a <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8003656:	2300      	movs	r3, #0
 8003658:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800365a:	f001 fbdd 	bl	8004e18 <vPortExitCritical>

    return xReturn;
 800365e:	68fb      	ldr	r3, [r7, #12]
}
 8003660:	4618      	mov	r0, r3
 8003662:	3710      	adds	r7, #16
 8003664:	46bd      	mov	sp, r7
 8003666:	bd80      	pop	{r7, pc}

08003668 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8003668:	b480      	push	{r7}
 800366a:	b087      	sub	sp, #28
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
 8003670:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        configASSERT( xQueue );
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d10a      	bne.n	800368e <vQueueAddToRegistry+0x26>
        __asm volatile
 8003678:	f04f 0350 	mov.w	r3, #80	; 0x50
 800367c:	f383 8811 	msr	BASEPRI, r3
 8003680:	f3bf 8f6f 	isb	sy
 8003684:	f3bf 8f4f 	dsb	sy
 8003688:	60fb      	str	r3, [r7, #12]
    }
 800368a:	bf00      	nop
 800368c:	e7fe      	b.n	800368c <vQueueAddToRegistry+0x24>

        QueueRegistryItem_t * pxEntryToWrite = NULL;
 800368e:	2300      	movs	r3, #0
 8003690:	613b      	str	r3, [r7, #16]

        if( pcQueueName != NULL )
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d024      	beq.n	80036e2 <vQueueAddToRegistry+0x7a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003698:	2300      	movs	r3, #0
 800369a:	617b      	str	r3, [r7, #20]
 800369c:	e01e      	b.n	80036dc <vQueueAddToRegistry+0x74>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 800369e:	4a18      	ldr	r2, [pc, #96]	; (8003700 <vQueueAddToRegistry+0x98>)
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	00db      	lsls	r3, r3, #3
 80036a4:	4413      	add	r3, r2
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	687a      	ldr	r2, [r7, #4]
 80036aa:	429a      	cmp	r2, r3
 80036ac:	d105      	bne.n	80036ba <vQueueAddToRegistry+0x52>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80036ae:	697b      	ldr	r3, [r7, #20]
 80036b0:	00db      	lsls	r3, r3, #3
 80036b2:	4a13      	ldr	r2, [pc, #76]	; (8003700 <vQueueAddToRegistry+0x98>)
 80036b4:	4413      	add	r3, r2
 80036b6:	613b      	str	r3, [r7, #16]
                    break;
 80036b8:	e013      	b.n	80036e2 <vQueueAddToRegistry+0x7a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 80036ba:	693b      	ldr	r3, [r7, #16]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d10a      	bne.n	80036d6 <vQueueAddToRegistry+0x6e>
 80036c0:	4a0f      	ldr	r2, [pc, #60]	; (8003700 <vQueueAddToRegistry+0x98>)
 80036c2:	697b      	ldr	r3, [r7, #20]
 80036c4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d104      	bne.n	80036d6 <vQueueAddToRegistry+0x6e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80036cc:	697b      	ldr	r3, [r7, #20]
 80036ce:	00db      	lsls	r3, r3, #3
 80036d0:	4a0b      	ldr	r2, [pc, #44]	; (8003700 <vQueueAddToRegistry+0x98>)
 80036d2:	4413      	add	r3, r2
 80036d4:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80036d6:	697b      	ldr	r3, [r7, #20]
 80036d8:	3301      	adds	r3, #1
 80036da:	617b      	str	r3, [r7, #20]
 80036dc:	697b      	ldr	r3, [r7, #20]
 80036de:	2b07      	cmp	r3, #7
 80036e0:	d9dd      	bls.n	800369e <vQueueAddToRegistry+0x36>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 80036e2:	693b      	ldr	r3, [r7, #16]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d005      	beq.n	80036f4 <vQueueAddToRegistry+0x8c>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 80036e8:	693b      	ldr	r3, [r7, #16]
 80036ea:	683a      	ldr	r2, [r7, #0]
 80036ec:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 80036ee:	693b      	ldr	r3, [r7, #16]
 80036f0:	687a      	ldr	r2, [r7, #4]
 80036f2:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 80036f4:	bf00      	nop
 80036f6:	371c      	adds	r7, #28
 80036f8:	46bd      	mov	sp, r7
 80036fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fe:	4770      	bx	lr
 8003700:	200000f0 	.word	0x200000f0

08003704 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8003704:	b580      	push	{r7, lr}
 8003706:	b086      	sub	sp, #24
 8003708:	af00      	add	r7, sp, #0
 800370a:	60f8      	str	r0, [r7, #12]
 800370c:	60b9      	str	r1, [r7, #8]
 800370e:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8003714:	f001 fb50 	bl	8004db8 <vPortEnterCritical>
 8003718:	697b      	ldr	r3, [r7, #20]
 800371a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800371e:	b25b      	sxtb	r3, r3
 8003720:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003724:	d103      	bne.n	800372e <vQueueWaitForMessageRestricted+0x2a>
 8003726:	697b      	ldr	r3, [r7, #20]
 8003728:	2200      	movs	r2, #0
 800372a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800372e:	697b      	ldr	r3, [r7, #20]
 8003730:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003734:	b25b      	sxtb	r3, r3
 8003736:	f1b3 3fff 	cmp.w	r3, #4294967295
 800373a:	d103      	bne.n	8003744 <vQueueWaitForMessageRestricted+0x40>
 800373c:	697b      	ldr	r3, [r7, #20]
 800373e:	2200      	movs	r2, #0
 8003740:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003744:	f001 fb68 	bl	8004e18 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003748:	697b      	ldr	r3, [r7, #20]
 800374a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800374c:	2b00      	cmp	r3, #0
 800374e:	d106      	bne.n	800375e <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003750:	697b      	ldr	r3, [r7, #20]
 8003752:	3324      	adds	r3, #36	; 0x24
 8003754:	687a      	ldr	r2, [r7, #4]
 8003756:	68b9      	ldr	r1, [r7, #8]
 8003758:	4618      	mov	r0, r3
 800375a:	f000 fc85 	bl	8004068 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 800375e:	6978      	ldr	r0, [r7, #20]
 8003760:	f7ff ff1a 	bl	8003598 <prvUnlockQueue>
    }
 8003764:	bf00      	nop
 8003766:	3718      	adds	r7, #24
 8003768:	46bd      	mov	sp, r7
 800376a:	bd80      	pop	{r7, pc}

0800376c <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 800376c:	b580      	push	{r7, lr}
 800376e:	b08c      	sub	sp, #48	; 0x30
 8003770:	af04      	add	r7, sp, #16
 8003772:	60f8      	str	r0, [r7, #12]
 8003774:	60b9      	str	r1, [r7, #8]
 8003776:	603b      	str	r3, [r7, #0]
 8003778:	4613      	mov	r3, r2
 800377a:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800377c:	88fb      	ldrh	r3, [r7, #6]
 800377e:	009b      	lsls	r3, r3, #2
 8003780:	4618      	mov	r0, r3
 8003782:	f001 fbfb 	bl	8004f7c <pvPortMalloc>
 8003786:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8003788:	697b      	ldr	r3, [r7, #20]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d00e      	beq.n	80037ac <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800378e:	2058      	movs	r0, #88	; 0x58
 8003790:	f001 fbf4 	bl	8004f7c <pvPortMalloc>
 8003794:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8003796:	69fb      	ldr	r3, [r7, #28]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d003      	beq.n	80037a4 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 800379c:	69fb      	ldr	r3, [r7, #28]
 800379e:	697a      	ldr	r2, [r7, #20]
 80037a0:	631a      	str	r2, [r3, #48]	; 0x30
 80037a2:	e005      	b.n	80037b0 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFreeStack( pxStack );
 80037a4:	6978      	ldr	r0, [r7, #20]
 80037a6:	f001 fcc9 	bl	800513c <vPortFree>
 80037aa:	e001      	b.n	80037b0 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 80037ac:	2300      	movs	r3, #0
 80037ae:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80037b0:	69fb      	ldr	r3, [r7, #28]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d013      	beq.n	80037de <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80037b6:	88fa      	ldrh	r2, [r7, #6]
 80037b8:	2300      	movs	r3, #0
 80037ba:	9303      	str	r3, [sp, #12]
 80037bc:	69fb      	ldr	r3, [r7, #28]
 80037be:	9302      	str	r3, [sp, #8]
 80037c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037c2:	9301      	str	r3, [sp, #4]
 80037c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037c6:	9300      	str	r3, [sp, #0]
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	68b9      	ldr	r1, [r7, #8]
 80037cc:	68f8      	ldr	r0, [r7, #12]
 80037ce:	f000 f80e 	bl	80037ee <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80037d2:	69f8      	ldr	r0, [r7, #28]
 80037d4:	f000 f8b0 	bl	8003938 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80037d8:	2301      	movs	r3, #1
 80037da:	61bb      	str	r3, [r7, #24]
 80037dc:	e002      	b.n	80037e4 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80037de:	f04f 33ff 	mov.w	r3, #4294967295
 80037e2:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80037e4:	69bb      	ldr	r3, [r7, #24]
    }
 80037e6:	4618      	mov	r0, r3
 80037e8:	3720      	adds	r7, #32
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bd80      	pop	{r7, pc}

080037ee <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80037ee:	b580      	push	{r7, lr}
 80037f0:	b088      	sub	sp, #32
 80037f2:	af00      	add	r7, sp, #0
 80037f4:	60f8      	str	r0, [r7, #12]
 80037f6:	60b9      	str	r1, [r7, #8]
 80037f8:	607a      	str	r2, [r7, #4]
 80037fa:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80037fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037fe:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	009b      	lsls	r3, r3, #2
 8003804:	461a      	mov	r2, r3
 8003806:	21a5      	movs	r1, #165	; 0xa5
 8003808:	f002 f98c 	bl	8005b24 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800380c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800380e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003816:	3b01      	subs	r3, #1
 8003818:	009b      	lsls	r3, r3, #2
 800381a:	4413      	add	r3, r2
 800381c:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800381e:	69bb      	ldr	r3, [r7, #24]
 8003820:	f023 0307 	bic.w	r3, r3, #7
 8003824:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003826:	69bb      	ldr	r3, [r7, #24]
 8003828:	f003 0307 	and.w	r3, r3, #7
 800382c:	2b00      	cmp	r3, #0
 800382e:	d00a      	beq.n	8003846 <prvInitialiseNewTask+0x58>
        __asm volatile
 8003830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003834:	f383 8811 	msr	BASEPRI, r3
 8003838:	f3bf 8f6f 	isb	sy
 800383c:	f3bf 8f4f 	dsb	sy
 8003840:	617b      	str	r3, [r7, #20]
    }
 8003842:	bf00      	nop
 8003844:	e7fe      	b.n	8003844 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8003846:	68bb      	ldr	r3, [r7, #8]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d01f      	beq.n	800388c <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800384c:	2300      	movs	r3, #0
 800384e:	61fb      	str	r3, [r7, #28]
 8003850:	e012      	b.n	8003878 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003852:	68ba      	ldr	r2, [r7, #8]
 8003854:	69fb      	ldr	r3, [r7, #28]
 8003856:	4413      	add	r3, r2
 8003858:	7819      	ldrb	r1, [r3, #0]
 800385a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800385c:	69fb      	ldr	r3, [r7, #28]
 800385e:	4413      	add	r3, r2
 8003860:	3334      	adds	r3, #52	; 0x34
 8003862:	460a      	mov	r2, r1
 8003864:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8003866:	68ba      	ldr	r2, [r7, #8]
 8003868:	69fb      	ldr	r3, [r7, #28]
 800386a:	4413      	add	r3, r2
 800386c:	781b      	ldrb	r3, [r3, #0]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d006      	beq.n	8003880 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003872:	69fb      	ldr	r3, [r7, #28]
 8003874:	3301      	adds	r3, #1
 8003876:	61fb      	str	r3, [r7, #28]
 8003878:	69fb      	ldr	r3, [r7, #28]
 800387a:	2b09      	cmp	r3, #9
 800387c:	d9e9      	bls.n	8003852 <prvInitialiseNewTask+0x64>
 800387e:	e000      	b.n	8003882 <prvInitialiseNewTask+0x94>
            {
                break;
 8003880:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003884:	2200      	movs	r2, #0
 8003886:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800388a:	e003      	b.n	8003894 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800388c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800388e:	2200      	movs	r2, #0
 8003890:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8003894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003896:	2b04      	cmp	r3, #4
 8003898:	d90a      	bls.n	80038b0 <prvInitialiseNewTask+0xc2>
        __asm volatile
 800389a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800389e:	f383 8811 	msr	BASEPRI, r3
 80038a2:	f3bf 8f6f 	isb	sy
 80038a6:	f3bf 8f4f 	dsb	sy
 80038aa:	613b      	str	r3, [r7, #16]
    }
 80038ac:	bf00      	nop
 80038ae:	e7fe      	b.n	80038ae <prvInitialiseNewTask+0xc0>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80038b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038b2:	2b04      	cmp	r3, #4
 80038b4:	d901      	bls.n	80038ba <prvInitialiseNewTask+0xcc>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80038b6:	2304      	movs	r3, #4
 80038b8:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80038ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80038be:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 80038c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80038c4:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 80038c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038c8:	2200      	movs	r2, #0
 80038ca:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80038cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038ce:	3304      	adds	r3, #4
 80038d0:	4618      	mov	r0, r3
 80038d2:	f7ff fbe9 	bl	80030a8 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80038d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038d8:	3318      	adds	r3, #24
 80038da:	4618      	mov	r0, r3
 80038dc:	f7ff fbe4 	bl	80030a8 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80038e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80038e4:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80038e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038e8:	f1c3 0205 	rsb	r2, r3, #5
 80038ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038ee:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80038f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80038f4:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 80038f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038f8:	3350      	adds	r3, #80	; 0x50
 80038fa:	2204      	movs	r2, #4
 80038fc:	2100      	movs	r1, #0
 80038fe:	4618      	mov	r0, r3
 8003900:	f002 f910 	bl	8005b24 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8003904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003906:	3354      	adds	r3, #84	; 0x54
 8003908:	2201      	movs	r2, #1
 800390a:	2100      	movs	r1, #0
 800390c:	4618      	mov	r0, r3
 800390e:	f002 f909 	bl	8005b24 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003912:	683a      	ldr	r2, [r7, #0]
 8003914:	68f9      	ldr	r1, [r7, #12]
 8003916:	69b8      	ldr	r0, [r7, #24]
 8003918:	f001 f91e 	bl	8004b58 <pxPortInitialiseStack>
 800391c:	4602      	mov	r2, r0
 800391e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003920:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8003922:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003924:	2b00      	cmp	r3, #0
 8003926:	d002      	beq.n	800392e <prvInitialiseNewTask+0x140>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003928:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800392a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800392c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800392e:	bf00      	nop
 8003930:	3720      	adds	r7, #32
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}
	...

08003938 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b084      	sub	sp, #16
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8003940:	f001 fa3a 	bl	8004db8 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8003944:	4b40      	ldr	r3, [pc, #256]	; (8003a48 <prvAddNewTaskToReadyList+0x110>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	3301      	adds	r3, #1
 800394a:	4a3f      	ldr	r2, [pc, #252]	; (8003a48 <prvAddNewTaskToReadyList+0x110>)
 800394c:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800394e:	4b3f      	ldr	r3, [pc, #252]	; (8003a4c <prvAddNewTaskToReadyList+0x114>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d109      	bne.n	800396a <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8003956:	4a3d      	ldr	r2, [pc, #244]	; (8003a4c <prvAddNewTaskToReadyList+0x114>)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800395c:	4b3a      	ldr	r3, [pc, #232]	; (8003a48 <prvAddNewTaskToReadyList+0x110>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	2b01      	cmp	r3, #1
 8003962:	d110      	bne.n	8003986 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8003964:	f000 fd3c 	bl	80043e0 <prvInitialiseTaskLists>
 8003968:	e00d      	b.n	8003986 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800396a:	4b39      	ldr	r3, [pc, #228]	; (8003a50 <prvAddNewTaskToReadyList+0x118>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d109      	bne.n	8003986 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003972:	4b36      	ldr	r3, [pc, #216]	; (8003a4c <prvAddNewTaskToReadyList+0x114>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800397c:	429a      	cmp	r2, r3
 800397e:	d802      	bhi.n	8003986 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8003980:	4a32      	ldr	r2, [pc, #200]	; (8003a4c <prvAddNewTaskToReadyList+0x114>)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8003986:	4b33      	ldr	r3, [pc, #204]	; (8003a54 <prvAddNewTaskToReadyList+0x11c>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	3301      	adds	r3, #1
 800398c:	4a31      	ldr	r2, [pc, #196]	; (8003a54 <prvAddNewTaskToReadyList+0x11c>)
 800398e:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003990:	4b30      	ldr	r3, [pc, #192]	; (8003a54 <prvAddNewTaskToReadyList+0x11c>)
 8003992:	681a      	ldr	r2, [r3, #0]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800399c:	2201      	movs	r2, #1
 800399e:	409a      	lsls	r2, r3
 80039a0:	4b2d      	ldr	r3, [pc, #180]	; (8003a58 <prvAddNewTaskToReadyList+0x120>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4313      	orrs	r3, r2
 80039a6:	4a2c      	ldr	r2, [pc, #176]	; (8003a58 <prvAddNewTaskToReadyList+0x120>)
 80039a8:	6013      	str	r3, [r2, #0]
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039ae:	492b      	ldr	r1, [pc, #172]	; (8003a5c <prvAddNewTaskToReadyList+0x124>)
 80039b0:	4613      	mov	r3, r2
 80039b2:	009b      	lsls	r3, r3, #2
 80039b4:	4413      	add	r3, r2
 80039b6:	009b      	lsls	r3, r3, #2
 80039b8:	440b      	add	r3, r1
 80039ba:	3304      	adds	r3, #4
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	60fb      	str	r3, [r7, #12]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	68fa      	ldr	r2, [r7, #12]
 80039c4:	609a      	str	r2, [r3, #8]
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	689a      	ldr	r2, [r3, #8]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	60da      	str	r2, [r3, #12]
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	689b      	ldr	r3, [r3, #8]
 80039d2:	687a      	ldr	r2, [r7, #4]
 80039d4:	3204      	adds	r2, #4
 80039d6:	605a      	str	r2, [r3, #4]
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	1d1a      	adds	r2, r3, #4
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	609a      	str	r2, [r3, #8]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039e4:	4613      	mov	r3, r2
 80039e6:	009b      	lsls	r3, r3, #2
 80039e8:	4413      	add	r3, r2
 80039ea:	009b      	lsls	r3, r3, #2
 80039ec:	4a1b      	ldr	r2, [pc, #108]	; (8003a5c <prvAddNewTaskToReadyList+0x124>)
 80039ee:	441a      	add	r2, r3
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	615a      	str	r2, [r3, #20]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039f8:	4918      	ldr	r1, [pc, #96]	; (8003a5c <prvAddNewTaskToReadyList+0x124>)
 80039fa:	4613      	mov	r3, r2
 80039fc:	009b      	lsls	r3, r3, #2
 80039fe:	4413      	add	r3, r2
 8003a00:	009b      	lsls	r3, r3, #2
 8003a02:	440b      	add	r3, r1
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	1c59      	adds	r1, r3, #1
 8003a08:	4814      	ldr	r0, [pc, #80]	; (8003a5c <prvAddNewTaskToReadyList+0x124>)
 8003a0a:	4613      	mov	r3, r2
 8003a0c:	009b      	lsls	r3, r3, #2
 8003a0e:	4413      	add	r3, r2
 8003a10:	009b      	lsls	r3, r3, #2
 8003a12:	4403      	add	r3, r0
 8003a14:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8003a16:	f001 f9ff 	bl	8004e18 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8003a1a:	4b0d      	ldr	r3, [pc, #52]	; (8003a50 <prvAddNewTaskToReadyList+0x118>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d00e      	beq.n	8003a40 <prvAddNewTaskToReadyList+0x108>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003a22:	4b0a      	ldr	r3, [pc, #40]	; (8003a4c <prvAddNewTaskToReadyList+0x114>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a2c:	429a      	cmp	r2, r3
 8003a2e:	d207      	bcs.n	8003a40 <prvAddNewTaskToReadyList+0x108>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8003a30:	4b0b      	ldr	r3, [pc, #44]	; (8003a60 <prvAddNewTaskToReadyList+0x128>)
 8003a32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a36:	601a      	str	r2, [r3, #0]
 8003a38:	f3bf 8f4f 	dsb	sy
 8003a3c:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003a40:	bf00      	nop
 8003a42:	3710      	adds	r7, #16
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd80      	pop	{r7, pc}
 8003a48:	20000208 	.word	0x20000208
 8003a4c:	20000130 	.word	0x20000130
 8003a50:	20000214 	.word	0x20000214
 8003a54:	20000224 	.word	0x20000224
 8003a58:	20000210 	.word	0x20000210
 8003a5c:	20000134 	.word	0x20000134
 8003a60:	e000ed04 	.word	0xe000ed04

08003a64 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b086      	sub	sp, #24
 8003a68:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8003a6a:	4b20      	ldr	r3, [pc, #128]	; (8003aec <vTaskStartScheduler+0x88>)
 8003a6c:	9301      	str	r3, [sp, #4]
 8003a6e:	2300      	movs	r3, #0
 8003a70:	9300      	str	r3, [sp, #0]
 8003a72:	2300      	movs	r3, #0
 8003a74:	2282      	movs	r2, #130	; 0x82
 8003a76:	491e      	ldr	r1, [pc, #120]	; (8003af0 <vTaskStartScheduler+0x8c>)
 8003a78:	481e      	ldr	r0, [pc, #120]	; (8003af4 <vTaskStartScheduler+0x90>)
 8003a7a:	f7ff fe77 	bl	800376c <xTaskCreate>
 8003a7e:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	2b01      	cmp	r3, #1
 8003a84:	d102      	bne.n	8003a8c <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8003a86:	f000 fde3 	bl	8004650 <xTimerCreateTimerTask>
 8003a8a:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	2b01      	cmp	r3, #1
 8003a90:	d116      	bne.n	8003ac0 <vTaskStartScheduler+0x5c>
        __asm volatile
 8003a92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a96:	f383 8811 	msr	BASEPRI, r3
 8003a9a:	f3bf 8f6f 	isb	sy
 8003a9e:	f3bf 8f4f 	dsb	sy
 8003aa2:	60bb      	str	r3, [r7, #8]
    }
 8003aa4:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8003aa6:	4b14      	ldr	r3, [pc, #80]	; (8003af8 <vTaskStartScheduler+0x94>)
 8003aa8:	f04f 32ff 	mov.w	r2, #4294967295
 8003aac:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8003aae:	4b13      	ldr	r3, [pc, #76]	; (8003afc <vTaskStartScheduler+0x98>)
 8003ab0:	2201      	movs	r2, #1
 8003ab2:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003ab4:	4b12      	ldr	r3, [pc, #72]	; (8003b00 <vTaskStartScheduler+0x9c>)
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8003aba:	f001 f8db 	bl	8004c74 <xPortStartScheduler>
 8003abe:	e00e      	b.n	8003ade <vTaskStartScheduler+0x7a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ac6:	d10a      	bne.n	8003ade <vTaskStartScheduler+0x7a>
        __asm volatile
 8003ac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003acc:	f383 8811 	msr	BASEPRI, r3
 8003ad0:	f3bf 8f6f 	isb	sy
 8003ad4:	f3bf 8f4f 	dsb	sy
 8003ad8:	607b      	str	r3, [r7, #4]
    }
 8003ada:	bf00      	nop
 8003adc:	e7fe      	b.n	8003adc <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8003ade:	4b09      	ldr	r3, [pc, #36]	; (8003b04 <vTaskStartScheduler+0xa0>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
}
 8003ae2:	bf00      	nop
 8003ae4:	3710      	adds	r7, #16
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bd80      	pop	{r7, pc}
 8003aea:	bf00      	nop
 8003aec:	2000022c 	.word	0x2000022c
 8003af0:	08005c48 	.word	0x08005c48
 8003af4:	080043b1 	.word	0x080043b1
 8003af8:	20000228 	.word	0x20000228
 8003afc:	20000214 	.word	0x20000214
 8003b00:	2000020c 	.word	0x2000020c
 8003b04:	2000000c 	.word	0x2000000c

08003b08 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003b08:	b480      	push	{r7}
 8003b0a:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8003b0c:	4b04      	ldr	r3, [pc, #16]	; (8003b20 <vTaskSuspendAll+0x18>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	3301      	adds	r3, #1
 8003b12:	4a03      	ldr	r2, [pc, #12]	; (8003b20 <vTaskSuspendAll+0x18>)
 8003b14:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8003b16:	bf00      	nop
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1e:	4770      	bx	lr
 8003b20:	20000230 	.word	0x20000230

08003b24 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b088      	sub	sp, #32
 8003b28:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8003b2e:	2300      	movs	r3, #0
 8003b30:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8003b32:	4b71      	ldr	r3, [pc, #452]	; (8003cf8 <xTaskResumeAll+0x1d4>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d10a      	bne.n	8003b50 <xTaskResumeAll+0x2c>
        __asm volatile
 8003b3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b3e:	f383 8811 	msr	BASEPRI, r3
 8003b42:	f3bf 8f6f 	isb	sy
 8003b46:	f3bf 8f4f 	dsb	sy
 8003b4a:	607b      	str	r3, [r7, #4]
    }
 8003b4c:	bf00      	nop
 8003b4e:	e7fe      	b.n	8003b4e <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8003b50:	f001 f932 	bl	8004db8 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8003b54:	4b68      	ldr	r3, [pc, #416]	; (8003cf8 <xTaskResumeAll+0x1d4>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	3b01      	subs	r3, #1
 8003b5a:	4a67      	ldr	r2, [pc, #412]	; (8003cf8 <xTaskResumeAll+0x1d4>)
 8003b5c:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003b5e:	4b66      	ldr	r3, [pc, #408]	; (8003cf8 <xTaskResumeAll+0x1d4>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	f040 80c0 	bne.w	8003ce8 <xTaskResumeAll+0x1c4>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003b68:	4b64      	ldr	r3, [pc, #400]	; (8003cfc <xTaskResumeAll+0x1d8>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	f000 80bb 	beq.w	8003ce8 <xTaskResumeAll+0x1c4>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003b72:	e08a      	b.n	8003c8a <xTaskResumeAll+0x166>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b74:	4b62      	ldr	r3, [pc, #392]	; (8003d00 <xTaskResumeAll+0x1dc>)
 8003b76:	68db      	ldr	r3, [r3, #12]
 8003b78:	68db      	ldr	r3, [r3, #12]
 8003b7a:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8003b7c:	69fb      	ldr	r3, [r7, #28]
 8003b7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b80:	613b      	str	r3, [r7, #16]
 8003b82:	69fb      	ldr	r3, [r7, #28]
 8003b84:	69db      	ldr	r3, [r3, #28]
 8003b86:	69fa      	ldr	r2, [r7, #28]
 8003b88:	6a12      	ldr	r2, [r2, #32]
 8003b8a:	609a      	str	r2, [r3, #8]
 8003b8c:	69fb      	ldr	r3, [r7, #28]
 8003b8e:	6a1b      	ldr	r3, [r3, #32]
 8003b90:	69fa      	ldr	r2, [r7, #28]
 8003b92:	69d2      	ldr	r2, [r2, #28]
 8003b94:	605a      	str	r2, [r3, #4]
 8003b96:	693b      	ldr	r3, [r7, #16]
 8003b98:	685a      	ldr	r2, [r3, #4]
 8003b9a:	69fb      	ldr	r3, [r7, #28]
 8003b9c:	3318      	adds	r3, #24
 8003b9e:	429a      	cmp	r2, r3
 8003ba0:	d103      	bne.n	8003baa <xTaskResumeAll+0x86>
 8003ba2:	69fb      	ldr	r3, [r7, #28]
 8003ba4:	6a1a      	ldr	r2, [r3, #32]
 8003ba6:	693b      	ldr	r3, [r7, #16]
 8003ba8:	605a      	str	r2, [r3, #4]
 8003baa:	69fb      	ldr	r3, [r7, #28]
 8003bac:	2200      	movs	r2, #0
 8003bae:	629a      	str	r2, [r3, #40]	; 0x28
 8003bb0:	693b      	ldr	r3, [r7, #16]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	1e5a      	subs	r2, r3, #1
 8003bb6:	693b      	ldr	r3, [r7, #16]
 8003bb8:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8003bba:	69fb      	ldr	r3, [r7, #28]
 8003bbc:	695b      	ldr	r3, [r3, #20]
 8003bbe:	60fb      	str	r3, [r7, #12]
 8003bc0:	69fb      	ldr	r3, [r7, #28]
 8003bc2:	689b      	ldr	r3, [r3, #8]
 8003bc4:	69fa      	ldr	r2, [r7, #28]
 8003bc6:	68d2      	ldr	r2, [r2, #12]
 8003bc8:	609a      	str	r2, [r3, #8]
 8003bca:	69fb      	ldr	r3, [r7, #28]
 8003bcc:	68db      	ldr	r3, [r3, #12]
 8003bce:	69fa      	ldr	r2, [r7, #28]
 8003bd0:	6892      	ldr	r2, [r2, #8]
 8003bd2:	605a      	str	r2, [r3, #4]
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	685a      	ldr	r2, [r3, #4]
 8003bd8:	69fb      	ldr	r3, [r7, #28]
 8003bda:	3304      	adds	r3, #4
 8003bdc:	429a      	cmp	r2, r3
 8003bde:	d103      	bne.n	8003be8 <xTaskResumeAll+0xc4>
 8003be0:	69fb      	ldr	r3, [r7, #28]
 8003be2:	68da      	ldr	r2, [r3, #12]
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	605a      	str	r2, [r3, #4]
 8003be8:	69fb      	ldr	r3, [r7, #28]
 8003bea:	2200      	movs	r2, #0
 8003bec:	615a      	str	r2, [r3, #20]
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	1e5a      	subs	r2, r3, #1
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8003bf8:	69fb      	ldr	r3, [r7, #28]
 8003bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bfc:	2201      	movs	r2, #1
 8003bfe:	409a      	lsls	r2, r3
 8003c00:	4b40      	ldr	r3, [pc, #256]	; (8003d04 <xTaskResumeAll+0x1e0>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4313      	orrs	r3, r2
 8003c06:	4a3f      	ldr	r2, [pc, #252]	; (8003d04 <xTaskResumeAll+0x1e0>)
 8003c08:	6013      	str	r3, [r2, #0]
 8003c0a:	69fb      	ldr	r3, [r7, #28]
 8003c0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c0e:	493e      	ldr	r1, [pc, #248]	; (8003d08 <xTaskResumeAll+0x1e4>)
 8003c10:	4613      	mov	r3, r2
 8003c12:	009b      	lsls	r3, r3, #2
 8003c14:	4413      	add	r3, r2
 8003c16:	009b      	lsls	r3, r3, #2
 8003c18:	440b      	add	r3, r1
 8003c1a:	3304      	adds	r3, #4
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	60bb      	str	r3, [r7, #8]
 8003c20:	69fb      	ldr	r3, [r7, #28]
 8003c22:	68ba      	ldr	r2, [r7, #8]
 8003c24:	609a      	str	r2, [r3, #8]
 8003c26:	68bb      	ldr	r3, [r7, #8]
 8003c28:	689a      	ldr	r2, [r3, #8]
 8003c2a:	69fb      	ldr	r3, [r7, #28]
 8003c2c:	60da      	str	r2, [r3, #12]
 8003c2e:	68bb      	ldr	r3, [r7, #8]
 8003c30:	689b      	ldr	r3, [r3, #8]
 8003c32:	69fa      	ldr	r2, [r7, #28]
 8003c34:	3204      	adds	r2, #4
 8003c36:	605a      	str	r2, [r3, #4]
 8003c38:	69fb      	ldr	r3, [r7, #28]
 8003c3a:	1d1a      	adds	r2, r3, #4
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	609a      	str	r2, [r3, #8]
 8003c40:	69fb      	ldr	r3, [r7, #28]
 8003c42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c44:	4613      	mov	r3, r2
 8003c46:	009b      	lsls	r3, r3, #2
 8003c48:	4413      	add	r3, r2
 8003c4a:	009b      	lsls	r3, r3, #2
 8003c4c:	4a2e      	ldr	r2, [pc, #184]	; (8003d08 <xTaskResumeAll+0x1e4>)
 8003c4e:	441a      	add	r2, r3
 8003c50:	69fb      	ldr	r3, [r7, #28]
 8003c52:	615a      	str	r2, [r3, #20]
 8003c54:	69fb      	ldr	r3, [r7, #28]
 8003c56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c58:	492b      	ldr	r1, [pc, #172]	; (8003d08 <xTaskResumeAll+0x1e4>)
 8003c5a:	4613      	mov	r3, r2
 8003c5c:	009b      	lsls	r3, r3, #2
 8003c5e:	4413      	add	r3, r2
 8003c60:	009b      	lsls	r3, r3, #2
 8003c62:	440b      	add	r3, r1
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	1c59      	adds	r1, r3, #1
 8003c68:	4827      	ldr	r0, [pc, #156]	; (8003d08 <xTaskResumeAll+0x1e4>)
 8003c6a:	4613      	mov	r3, r2
 8003c6c:	009b      	lsls	r3, r3, #2
 8003c6e:	4413      	add	r3, r2
 8003c70:	009b      	lsls	r3, r3, #2
 8003c72:	4403      	add	r3, r0
 8003c74:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003c76:	69fb      	ldr	r3, [r7, #28]
 8003c78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c7a:	4b24      	ldr	r3, [pc, #144]	; (8003d0c <xTaskResumeAll+0x1e8>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c80:	429a      	cmp	r2, r3
 8003c82:	d302      	bcc.n	8003c8a <xTaskResumeAll+0x166>
                    {
                        xYieldPending = pdTRUE;
 8003c84:	4b22      	ldr	r3, [pc, #136]	; (8003d10 <xTaskResumeAll+0x1ec>)
 8003c86:	2201      	movs	r2, #1
 8003c88:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003c8a:	4b1d      	ldr	r3, [pc, #116]	; (8003d00 <xTaskResumeAll+0x1dc>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	f47f af70 	bne.w	8003b74 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8003c94:	69fb      	ldr	r3, [r7, #28]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d001      	beq.n	8003c9e <xTaskResumeAll+0x17a>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8003c9a:	f000 fc1f 	bl	80044dc <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003c9e:	4b1d      	ldr	r3, [pc, #116]	; (8003d14 <xTaskResumeAll+0x1f0>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8003ca4:	697b      	ldr	r3, [r7, #20]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d010      	beq.n	8003ccc <xTaskResumeAll+0x1a8>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8003caa:	f000 f847 	bl	8003d3c <xTaskIncrementTick>
 8003cae:	4603      	mov	r3, r0
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d002      	beq.n	8003cba <xTaskResumeAll+0x196>
                            {
                                xYieldPending = pdTRUE;
 8003cb4:	4b16      	ldr	r3, [pc, #88]	; (8003d10 <xTaskResumeAll+0x1ec>)
 8003cb6:	2201      	movs	r2, #1
 8003cb8:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	3b01      	subs	r3, #1
 8003cbe:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8003cc0:	697b      	ldr	r3, [r7, #20]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d1f1      	bne.n	8003caa <xTaskResumeAll+0x186>

                        xPendedTicks = 0;
 8003cc6:	4b13      	ldr	r3, [pc, #76]	; (8003d14 <xTaskResumeAll+0x1f0>)
 8003cc8:	2200      	movs	r2, #0
 8003cca:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8003ccc:	4b10      	ldr	r3, [pc, #64]	; (8003d10 <xTaskResumeAll+0x1ec>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d009      	beq.n	8003ce8 <xTaskResumeAll+0x1c4>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	61bb      	str	r3, [r7, #24]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8003cd8:	4b0f      	ldr	r3, [pc, #60]	; (8003d18 <xTaskResumeAll+0x1f4>)
 8003cda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003cde:	601a      	str	r2, [r3, #0]
 8003ce0:	f3bf 8f4f 	dsb	sy
 8003ce4:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8003ce8:	f001 f896 	bl	8004e18 <vPortExitCritical>

    return xAlreadyYielded;
 8003cec:	69bb      	ldr	r3, [r7, #24]
}
 8003cee:	4618      	mov	r0, r3
 8003cf0:	3720      	adds	r7, #32
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bd80      	pop	{r7, pc}
 8003cf6:	bf00      	nop
 8003cf8:	20000230 	.word	0x20000230
 8003cfc:	20000208 	.word	0x20000208
 8003d00:	200001c8 	.word	0x200001c8
 8003d04:	20000210 	.word	0x20000210
 8003d08:	20000134 	.word	0x20000134
 8003d0c:	20000130 	.word	0x20000130
 8003d10:	2000021c 	.word	0x2000021c
 8003d14:	20000218 	.word	0x20000218
 8003d18:	e000ed04 	.word	0xe000ed04

08003d1c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	b083      	sub	sp, #12
 8003d20:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8003d22:	4b05      	ldr	r3, [pc, #20]	; (8003d38 <xTaskGetTickCount+0x1c>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8003d28:	687b      	ldr	r3, [r7, #4]
}
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	370c      	adds	r7, #12
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d34:	4770      	bx	lr
 8003d36:	bf00      	nop
 8003d38:	2000020c 	.word	0x2000020c

08003d3c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b08a      	sub	sp, #40	; 0x28
 8003d40:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8003d42:	2300      	movs	r3, #0
 8003d44:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003d46:	4b7d      	ldr	r3, [pc, #500]	; (8003f3c <xTaskIncrementTick+0x200>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	f040 80ec 	bne.w	8003f28 <xTaskIncrementTick+0x1ec>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003d50:	4b7b      	ldr	r3, [pc, #492]	; (8003f40 <xTaskIncrementTick+0x204>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	3301      	adds	r3, #1
 8003d56:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8003d58:	4a79      	ldr	r2, [pc, #484]	; (8003f40 <xTaskIncrementTick+0x204>)
 8003d5a:	6a3b      	ldr	r3, [r7, #32]
 8003d5c:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003d5e:	6a3b      	ldr	r3, [r7, #32]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d120      	bne.n	8003da6 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8003d64:	4b77      	ldr	r3, [pc, #476]	; (8003f44 <xTaskIncrementTick+0x208>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d00a      	beq.n	8003d84 <xTaskIncrementTick+0x48>
        __asm volatile
 8003d6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d72:	f383 8811 	msr	BASEPRI, r3
 8003d76:	f3bf 8f6f 	isb	sy
 8003d7a:	f3bf 8f4f 	dsb	sy
 8003d7e:	607b      	str	r3, [r7, #4]
    }
 8003d80:	bf00      	nop
 8003d82:	e7fe      	b.n	8003d82 <xTaskIncrementTick+0x46>
 8003d84:	4b6f      	ldr	r3, [pc, #444]	; (8003f44 <xTaskIncrementTick+0x208>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	61fb      	str	r3, [r7, #28]
 8003d8a:	4b6f      	ldr	r3, [pc, #444]	; (8003f48 <xTaskIncrementTick+0x20c>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a6d      	ldr	r2, [pc, #436]	; (8003f44 <xTaskIncrementTick+0x208>)
 8003d90:	6013      	str	r3, [r2, #0]
 8003d92:	4a6d      	ldr	r2, [pc, #436]	; (8003f48 <xTaskIncrementTick+0x20c>)
 8003d94:	69fb      	ldr	r3, [r7, #28]
 8003d96:	6013      	str	r3, [r2, #0]
 8003d98:	4b6c      	ldr	r3, [pc, #432]	; (8003f4c <xTaskIncrementTick+0x210>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	3301      	adds	r3, #1
 8003d9e:	4a6b      	ldr	r2, [pc, #428]	; (8003f4c <xTaskIncrementTick+0x210>)
 8003da0:	6013      	str	r3, [r2, #0]
 8003da2:	f000 fb9b 	bl	80044dc <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8003da6:	4b6a      	ldr	r3, [pc, #424]	; (8003f50 <xTaskIncrementTick+0x214>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	6a3a      	ldr	r2, [r7, #32]
 8003dac:	429a      	cmp	r2, r3
 8003dae:	f0c0 80a6 	bcc.w	8003efe <xTaskIncrementTick+0x1c2>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003db2:	4b64      	ldr	r3, [pc, #400]	; (8003f44 <xTaskIncrementTick+0x208>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d104      	bne.n	8003dc6 <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003dbc:	4b64      	ldr	r3, [pc, #400]	; (8003f50 <xTaskIncrementTick+0x214>)
 8003dbe:	f04f 32ff 	mov.w	r2, #4294967295
 8003dc2:	601a      	str	r2, [r3, #0]
                    break;
 8003dc4:	e09b      	b.n	8003efe <xTaskIncrementTick+0x1c2>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003dc6:	4b5f      	ldr	r3, [pc, #380]	; (8003f44 <xTaskIncrementTick+0x208>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	68db      	ldr	r3, [r3, #12]
 8003dcc:	68db      	ldr	r3, [r3, #12]
 8003dce:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003dd0:	69bb      	ldr	r3, [r7, #24]
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8003dd6:	6a3a      	ldr	r2, [r7, #32]
 8003dd8:	697b      	ldr	r3, [r7, #20]
 8003dda:	429a      	cmp	r2, r3
 8003ddc:	d203      	bcs.n	8003de6 <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8003dde:	4a5c      	ldr	r2, [pc, #368]	; (8003f50 <xTaskIncrementTick+0x214>)
 8003de0:	697b      	ldr	r3, [r7, #20]
 8003de2:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8003de4:	e08b      	b.n	8003efe <xTaskIncrementTick+0x1c2>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8003de6:	69bb      	ldr	r3, [r7, #24]
 8003de8:	695b      	ldr	r3, [r3, #20]
 8003dea:	613b      	str	r3, [r7, #16]
 8003dec:	69bb      	ldr	r3, [r7, #24]
 8003dee:	689b      	ldr	r3, [r3, #8]
 8003df0:	69ba      	ldr	r2, [r7, #24]
 8003df2:	68d2      	ldr	r2, [r2, #12]
 8003df4:	609a      	str	r2, [r3, #8]
 8003df6:	69bb      	ldr	r3, [r7, #24]
 8003df8:	68db      	ldr	r3, [r3, #12]
 8003dfa:	69ba      	ldr	r2, [r7, #24]
 8003dfc:	6892      	ldr	r2, [r2, #8]
 8003dfe:	605a      	str	r2, [r3, #4]
 8003e00:	693b      	ldr	r3, [r7, #16]
 8003e02:	685a      	ldr	r2, [r3, #4]
 8003e04:	69bb      	ldr	r3, [r7, #24]
 8003e06:	3304      	adds	r3, #4
 8003e08:	429a      	cmp	r2, r3
 8003e0a:	d103      	bne.n	8003e14 <xTaskIncrementTick+0xd8>
 8003e0c:	69bb      	ldr	r3, [r7, #24]
 8003e0e:	68da      	ldr	r2, [r3, #12]
 8003e10:	693b      	ldr	r3, [r7, #16]
 8003e12:	605a      	str	r2, [r3, #4]
 8003e14:	69bb      	ldr	r3, [r7, #24]
 8003e16:	2200      	movs	r2, #0
 8003e18:	615a      	str	r2, [r3, #20]
 8003e1a:	693b      	ldr	r3, [r7, #16]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	1e5a      	subs	r2, r3, #1
 8003e20:	693b      	ldr	r3, [r7, #16]
 8003e22:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003e24:	69bb      	ldr	r3, [r7, #24]
 8003e26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d01e      	beq.n	8003e6a <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8003e2c:	69bb      	ldr	r3, [r7, #24]
 8003e2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e30:	60fb      	str	r3, [r7, #12]
 8003e32:	69bb      	ldr	r3, [r7, #24]
 8003e34:	69db      	ldr	r3, [r3, #28]
 8003e36:	69ba      	ldr	r2, [r7, #24]
 8003e38:	6a12      	ldr	r2, [r2, #32]
 8003e3a:	609a      	str	r2, [r3, #8]
 8003e3c:	69bb      	ldr	r3, [r7, #24]
 8003e3e:	6a1b      	ldr	r3, [r3, #32]
 8003e40:	69ba      	ldr	r2, [r7, #24]
 8003e42:	69d2      	ldr	r2, [r2, #28]
 8003e44:	605a      	str	r2, [r3, #4]
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	685a      	ldr	r2, [r3, #4]
 8003e4a:	69bb      	ldr	r3, [r7, #24]
 8003e4c:	3318      	adds	r3, #24
 8003e4e:	429a      	cmp	r2, r3
 8003e50:	d103      	bne.n	8003e5a <xTaskIncrementTick+0x11e>
 8003e52:	69bb      	ldr	r3, [r7, #24]
 8003e54:	6a1a      	ldr	r2, [r3, #32]
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	605a      	str	r2, [r3, #4]
 8003e5a:	69bb      	ldr	r3, [r7, #24]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	629a      	str	r2, [r3, #40]	; 0x28
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	1e5a      	subs	r2, r3, #1
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8003e6a:	69bb      	ldr	r3, [r7, #24]
 8003e6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e6e:	2201      	movs	r2, #1
 8003e70:	409a      	lsls	r2, r3
 8003e72:	4b38      	ldr	r3, [pc, #224]	; (8003f54 <xTaskIncrementTick+0x218>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4313      	orrs	r3, r2
 8003e78:	4a36      	ldr	r2, [pc, #216]	; (8003f54 <xTaskIncrementTick+0x218>)
 8003e7a:	6013      	str	r3, [r2, #0]
 8003e7c:	69bb      	ldr	r3, [r7, #24]
 8003e7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e80:	4935      	ldr	r1, [pc, #212]	; (8003f58 <xTaskIncrementTick+0x21c>)
 8003e82:	4613      	mov	r3, r2
 8003e84:	009b      	lsls	r3, r3, #2
 8003e86:	4413      	add	r3, r2
 8003e88:	009b      	lsls	r3, r3, #2
 8003e8a:	440b      	add	r3, r1
 8003e8c:	3304      	adds	r3, #4
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	60bb      	str	r3, [r7, #8]
 8003e92:	69bb      	ldr	r3, [r7, #24]
 8003e94:	68ba      	ldr	r2, [r7, #8]
 8003e96:	609a      	str	r2, [r3, #8]
 8003e98:	68bb      	ldr	r3, [r7, #8]
 8003e9a:	689a      	ldr	r2, [r3, #8]
 8003e9c:	69bb      	ldr	r3, [r7, #24]
 8003e9e:	60da      	str	r2, [r3, #12]
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	689b      	ldr	r3, [r3, #8]
 8003ea4:	69ba      	ldr	r2, [r7, #24]
 8003ea6:	3204      	adds	r2, #4
 8003ea8:	605a      	str	r2, [r3, #4]
 8003eaa:	69bb      	ldr	r3, [r7, #24]
 8003eac:	1d1a      	adds	r2, r3, #4
 8003eae:	68bb      	ldr	r3, [r7, #8]
 8003eb0:	609a      	str	r2, [r3, #8]
 8003eb2:	69bb      	ldr	r3, [r7, #24]
 8003eb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003eb6:	4613      	mov	r3, r2
 8003eb8:	009b      	lsls	r3, r3, #2
 8003eba:	4413      	add	r3, r2
 8003ebc:	009b      	lsls	r3, r3, #2
 8003ebe:	4a26      	ldr	r2, [pc, #152]	; (8003f58 <xTaskIncrementTick+0x21c>)
 8003ec0:	441a      	add	r2, r3
 8003ec2:	69bb      	ldr	r3, [r7, #24]
 8003ec4:	615a      	str	r2, [r3, #20]
 8003ec6:	69bb      	ldr	r3, [r7, #24]
 8003ec8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003eca:	4923      	ldr	r1, [pc, #140]	; (8003f58 <xTaskIncrementTick+0x21c>)
 8003ecc:	4613      	mov	r3, r2
 8003ece:	009b      	lsls	r3, r3, #2
 8003ed0:	4413      	add	r3, r2
 8003ed2:	009b      	lsls	r3, r3, #2
 8003ed4:	440b      	add	r3, r1
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	1c59      	adds	r1, r3, #1
 8003eda:	481f      	ldr	r0, [pc, #124]	; (8003f58 <xTaskIncrementTick+0x21c>)
 8003edc:	4613      	mov	r3, r2
 8003ede:	009b      	lsls	r3, r3, #2
 8003ee0:	4413      	add	r3, r2
 8003ee2:	009b      	lsls	r3, r3, #2
 8003ee4:	4403      	add	r3, r0
 8003ee6:	6019      	str	r1, [r3, #0]
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003ee8:	69bb      	ldr	r3, [r7, #24]
 8003eea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003eec:	4b1b      	ldr	r3, [pc, #108]	; (8003f5c <xTaskIncrementTick+0x220>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ef2:	429a      	cmp	r2, r3
 8003ef4:	f4ff af5d 	bcc.w	8003db2 <xTaskIncrementTick+0x76>
                            {
                                xSwitchRequired = pdTRUE;
 8003ef8:	2301      	movs	r3, #1
 8003efa:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003efc:	e759      	b.n	8003db2 <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003efe:	4b17      	ldr	r3, [pc, #92]	; (8003f5c <xTaskIncrementTick+0x220>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f04:	4914      	ldr	r1, [pc, #80]	; (8003f58 <xTaskIncrementTick+0x21c>)
 8003f06:	4613      	mov	r3, r2
 8003f08:	009b      	lsls	r3, r3, #2
 8003f0a:	4413      	add	r3, r2
 8003f0c:	009b      	lsls	r3, r3, #2
 8003f0e:	440b      	add	r3, r1
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	2b01      	cmp	r3, #1
 8003f14:	d901      	bls.n	8003f1a <xTaskIncrementTick+0x1de>
                {
                    xSwitchRequired = pdTRUE;
 8003f16:	2301      	movs	r3, #1
 8003f18:	627b      	str	r3, [r7, #36]	; 0x24
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8003f1a:	4b11      	ldr	r3, [pc, #68]	; (8003f60 <xTaskIncrementTick+0x224>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d007      	beq.n	8003f32 <xTaskIncrementTick+0x1f6>
                {
                    xSwitchRequired = pdTRUE;
 8003f22:	2301      	movs	r3, #1
 8003f24:	627b      	str	r3, [r7, #36]	; 0x24
 8003f26:	e004      	b.n	8003f32 <xTaskIncrementTick+0x1f6>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8003f28:	4b0e      	ldr	r3, [pc, #56]	; (8003f64 <xTaskIncrementTick+0x228>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	3301      	adds	r3, #1
 8003f2e:	4a0d      	ldr	r2, [pc, #52]	; (8003f64 <xTaskIncrementTick+0x228>)
 8003f30:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8003f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003f34:	4618      	mov	r0, r3
 8003f36:	3728      	adds	r7, #40	; 0x28
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	bd80      	pop	{r7, pc}
 8003f3c:	20000230 	.word	0x20000230
 8003f40:	2000020c 	.word	0x2000020c
 8003f44:	200001c0 	.word	0x200001c0
 8003f48:	200001c4 	.word	0x200001c4
 8003f4c:	20000220 	.word	0x20000220
 8003f50:	20000228 	.word	0x20000228
 8003f54:	20000210 	.word	0x20000210
 8003f58:	20000134 	.word	0x20000134
 8003f5c:	20000130 	.word	0x20000130
 8003f60:	2000021c 	.word	0x2000021c
 8003f64:	20000218 	.word	0x20000218

08003f68 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b087      	sub	sp, #28
 8003f6c:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003f6e:	4b27      	ldr	r3, [pc, #156]	; (800400c <vTaskSwitchContext+0xa4>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d003      	beq.n	8003f7e <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8003f76:	4b26      	ldr	r3, [pc, #152]	; (8004010 <vTaskSwitchContext+0xa8>)
 8003f78:	2201      	movs	r2, #1
 8003f7a:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8003f7c:	e03f      	b.n	8003ffe <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 8003f7e:	4b24      	ldr	r3, [pc, #144]	; (8004010 <vTaskSwitchContext+0xa8>)
 8003f80:	2200      	movs	r2, #0
 8003f82:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f84:	4b23      	ldr	r3, [pc, #140]	; (8004014 <vTaskSwitchContext+0xac>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	fab3 f383 	clz	r3, r3
 8003f90:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8003f92:	7afb      	ldrb	r3, [r7, #11]
 8003f94:	f1c3 031f 	rsb	r3, r3, #31
 8003f98:	617b      	str	r3, [r7, #20]
 8003f9a:	491f      	ldr	r1, [pc, #124]	; (8004018 <vTaskSwitchContext+0xb0>)
 8003f9c:	697a      	ldr	r2, [r7, #20]
 8003f9e:	4613      	mov	r3, r2
 8003fa0:	009b      	lsls	r3, r3, #2
 8003fa2:	4413      	add	r3, r2
 8003fa4:	009b      	lsls	r3, r3, #2
 8003fa6:	440b      	add	r3, r1
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d10a      	bne.n	8003fc4 <vTaskSwitchContext+0x5c>
        __asm volatile
 8003fae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fb2:	f383 8811 	msr	BASEPRI, r3
 8003fb6:	f3bf 8f6f 	isb	sy
 8003fba:	f3bf 8f4f 	dsb	sy
 8003fbe:	607b      	str	r3, [r7, #4]
    }
 8003fc0:	bf00      	nop
 8003fc2:	e7fe      	b.n	8003fc2 <vTaskSwitchContext+0x5a>
 8003fc4:	697a      	ldr	r2, [r7, #20]
 8003fc6:	4613      	mov	r3, r2
 8003fc8:	009b      	lsls	r3, r3, #2
 8003fca:	4413      	add	r3, r2
 8003fcc:	009b      	lsls	r3, r3, #2
 8003fce:	4a12      	ldr	r2, [pc, #72]	; (8004018 <vTaskSwitchContext+0xb0>)
 8003fd0:	4413      	add	r3, r2
 8003fd2:	613b      	str	r3, [r7, #16]
 8003fd4:	693b      	ldr	r3, [r7, #16]
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	685a      	ldr	r2, [r3, #4]
 8003fda:	693b      	ldr	r3, [r7, #16]
 8003fdc:	605a      	str	r2, [r3, #4]
 8003fde:	693b      	ldr	r3, [r7, #16]
 8003fe0:	685a      	ldr	r2, [r3, #4]
 8003fe2:	693b      	ldr	r3, [r7, #16]
 8003fe4:	3308      	adds	r3, #8
 8003fe6:	429a      	cmp	r2, r3
 8003fe8:	d104      	bne.n	8003ff4 <vTaskSwitchContext+0x8c>
 8003fea:	693b      	ldr	r3, [r7, #16]
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	685a      	ldr	r2, [r3, #4]
 8003ff0:	693b      	ldr	r3, [r7, #16]
 8003ff2:	605a      	str	r2, [r3, #4]
 8003ff4:	693b      	ldr	r3, [r7, #16]
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	68db      	ldr	r3, [r3, #12]
 8003ffa:	4a08      	ldr	r2, [pc, #32]	; (800401c <vTaskSwitchContext+0xb4>)
 8003ffc:	6013      	str	r3, [r2, #0]
}
 8003ffe:	bf00      	nop
 8004000:	371c      	adds	r7, #28
 8004002:	46bd      	mov	sp, r7
 8004004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004008:	4770      	bx	lr
 800400a:	bf00      	nop
 800400c:	20000230 	.word	0x20000230
 8004010:	2000021c 	.word	0x2000021c
 8004014:	20000210 	.word	0x20000210
 8004018:	20000134 	.word	0x20000134
 800401c:	20000130 	.word	0x20000130

08004020 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b084      	sub	sp, #16
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
 8004028:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d10a      	bne.n	8004046 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8004030:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004034:	f383 8811 	msr	BASEPRI, r3
 8004038:	f3bf 8f6f 	isb	sy
 800403c:	f3bf 8f4f 	dsb	sy
 8004040:	60fb      	str	r3, [r7, #12]
    }
 8004042:	bf00      	nop
 8004044:	e7fe      	b.n	8004044 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004046:	4b07      	ldr	r3, [pc, #28]	; (8004064 <vTaskPlaceOnEventList+0x44>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	3318      	adds	r3, #24
 800404c:	4619      	mov	r1, r3
 800404e:	6878      	ldr	r0, [r7, #4]
 8004050:	f7ff f837 	bl	80030c2 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004054:	2101      	movs	r1, #1
 8004056:	6838      	ldr	r0, [r7, #0]
 8004058:	f000 fa7a 	bl	8004550 <prvAddCurrentTaskToDelayedList>
}
 800405c:	bf00      	nop
 800405e:	3710      	adds	r7, #16
 8004060:	46bd      	mov	sp, r7
 8004062:	bd80      	pop	{r7, pc}
 8004064:	20000130 	.word	0x20000130

08004068 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8004068:	b580      	push	{r7, lr}
 800406a:	b086      	sub	sp, #24
 800406c:	af00      	add	r7, sp, #0
 800406e:	60f8      	str	r0, [r7, #12]
 8004070:	60b9      	str	r1, [r7, #8]
 8004072:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d10a      	bne.n	8004090 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 800407a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800407e:	f383 8811 	msr	BASEPRI, r3
 8004082:	f3bf 8f6f 	isb	sy
 8004086:	f3bf 8f4f 	dsb	sy
 800408a:	613b      	str	r3, [r7, #16]
    }
 800408c:	bf00      	nop
 800408e:	e7fe      	b.n	800408e <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	617b      	str	r3, [r7, #20]
 8004096:	4b16      	ldr	r3, [pc, #88]	; (80040f0 <vTaskPlaceOnEventListRestricted+0x88>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	697a      	ldr	r2, [r7, #20]
 800409c:	61da      	str	r2, [r3, #28]
 800409e:	4b14      	ldr	r3, [pc, #80]	; (80040f0 <vTaskPlaceOnEventListRestricted+0x88>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	697a      	ldr	r2, [r7, #20]
 80040a4:	6892      	ldr	r2, [r2, #8]
 80040a6:	621a      	str	r2, [r3, #32]
 80040a8:	4b11      	ldr	r3, [pc, #68]	; (80040f0 <vTaskPlaceOnEventListRestricted+0x88>)
 80040aa:	681a      	ldr	r2, [r3, #0]
 80040ac:	697b      	ldr	r3, [r7, #20]
 80040ae:	689b      	ldr	r3, [r3, #8]
 80040b0:	3218      	adds	r2, #24
 80040b2:	605a      	str	r2, [r3, #4]
 80040b4:	4b0e      	ldr	r3, [pc, #56]	; (80040f0 <vTaskPlaceOnEventListRestricted+0x88>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f103 0218 	add.w	r2, r3, #24
 80040bc:	697b      	ldr	r3, [r7, #20]
 80040be:	609a      	str	r2, [r3, #8]
 80040c0:	4b0b      	ldr	r3, [pc, #44]	; (80040f0 <vTaskPlaceOnEventListRestricted+0x88>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	68fa      	ldr	r2, [r7, #12]
 80040c6:	629a      	str	r2, [r3, #40]	; 0x28
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	1c5a      	adds	r2, r3, #1
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d002      	beq.n	80040de <vTaskPlaceOnEventListRestricted+0x76>
        {
            xTicksToWait = portMAX_DELAY;
 80040d8:	f04f 33ff 	mov.w	r3, #4294967295
 80040dc:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80040de:	6879      	ldr	r1, [r7, #4]
 80040e0:	68b8      	ldr	r0, [r7, #8]
 80040e2:	f000 fa35 	bl	8004550 <prvAddCurrentTaskToDelayedList>
    }
 80040e6:	bf00      	nop
 80040e8:	3718      	adds	r7, #24
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bd80      	pop	{r7, pc}
 80040ee:	bf00      	nop
 80040f0:	20000130 	.word	0x20000130

080040f4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80040f4:	b480      	push	{r7}
 80040f6:	b08b      	sub	sp, #44	; 0x2c
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	68db      	ldr	r3, [r3, #12]
 8004100:	68db      	ldr	r3, [r3, #12]
 8004102:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8004104:	6a3b      	ldr	r3, [r7, #32]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d10a      	bne.n	8004120 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 800410a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800410e:	f383 8811 	msr	BASEPRI, r3
 8004112:	f3bf 8f6f 	isb	sy
 8004116:	f3bf 8f4f 	dsb	sy
 800411a:	60fb      	str	r3, [r7, #12]
    }
 800411c:	bf00      	nop
 800411e:	e7fe      	b.n	800411e <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8004120:	6a3b      	ldr	r3, [r7, #32]
 8004122:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004124:	61fb      	str	r3, [r7, #28]
 8004126:	6a3b      	ldr	r3, [r7, #32]
 8004128:	69db      	ldr	r3, [r3, #28]
 800412a:	6a3a      	ldr	r2, [r7, #32]
 800412c:	6a12      	ldr	r2, [r2, #32]
 800412e:	609a      	str	r2, [r3, #8]
 8004130:	6a3b      	ldr	r3, [r7, #32]
 8004132:	6a1b      	ldr	r3, [r3, #32]
 8004134:	6a3a      	ldr	r2, [r7, #32]
 8004136:	69d2      	ldr	r2, [r2, #28]
 8004138:	605a      	str	r2, [r3, #4]
 800413a:	69fb      	ldr	r3, [r7, #28]
 800413c:	685a      	ldr	r2, [r3, #4]
 800413e:	6a3b      	ldr	r3, [r7, #32]
 8004140:	3318      	adds	r3, #24
 8004142:	429a      	cmp	r2, r3
 8004144:	d103      	bne.n	800414e <xTaskRemoveFromEventList+0x5a>
 8004146:	6a3b      	ldr	r3, [r7, #32]
 8004148:	6a1a      	ldr	r2, [r3, #32]
 800414a:	69fb      	ldr	r3, [r7, #28]
 800414c:	605a      	str	r2, [r3, #4]
 800414e:	6a3b      	ldr	r3, [r7, #32]
 8004150:	2200      	movs	r2, #0
 8004152:	629a      	str	r2, [r3, #40]	; 0x28
 8004154:	69fb      	ldr	r3, [r7, #28]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	1e5a      	subs	r2, r3, #1
 800415a:	69fb      	ldr	r3, [r7, #28]
 800415c:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800415e:	4b4a      	ldr	r3, [pc, #296]	; (8004288 <xTaskRemoveFromEventList+0x194>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d15e      	bne.n	8004224 <xTaskRemoveFromEventList+0x130>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8004166:	6a3b      	ldr	r3, [r7, #32]
 8004168:	695b      	ldr	r3, [r3, #20]
 800416a:	617b      	str	r3, [r7, #20]
 800416c:	6a3b      	ldr	r3, [r7, #32]
 800416e:	689b      	ldr	r3, [r3, #8]
 8004170:	6a3a      	ldr	r2, [r7, #32]
 8004172:	68d2      	ldr	r2, [r2, #12]
 8004174:	609a      	str	r2, [r3, #8]
 8004176:	6a3b      	ldr	r3, [r7, #32]
 8004178:	68db      	ldr	r3, [r3, #12]
 800417a:	6a3a      	ldr	r2, [r7, #32]
 800417c:	6892      	ldr	r2, [r2, #8]
 800417e:	605a      	str	r2, [r3, #4]
 8004180:	697b      	ldr	r3, [r7, #20]
 8004182:	685a      	ldr	r2, [r3, #4]
 8004184:	6a3b      	ldr	r3, [r7, #32]
 8004186:	3304      	adds	r3, #4
 8004188:	429a      	cmp	r2, r3
 800418a:	d103      	bne.n	8004194 <xTaskRemoveFromEventList+0xa0>
 800418c:	6a3b      	ldr	r3, [r7, #32]
 800418e:	68da      	ldr	r2, [r3, #12]
 8004190:	697b      	ldr	r3, [r7, #20]
 8004192:	605a      	str	r2, [r3, #4]
 8004194:	6a3b      	ldr	r3, [r7, #32]
 8004196:	2200      	movs	r2, #0
 8004198:	615a      	str	r2, [r3, #20]
 800419a:	697b      	ldr	r3, [r7, #20]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	1e5a      	subs	r2, r3, #1
 80041a0:	697b      	ldr	r3, [r7, #20]
 80041a2:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 80041a4:	6a3b      	ldr	r3, [r7, #32]
 80041a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041a8:	2201      	movs	r2, #1
 80041aa:	409a      	lsls	r2, r3
 80041ac:	4b37      	ldr	r3, [pc, #220]	; (800428c <xTaskRemoveFromEventList+0x198>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4313      	orrs	r3, r2
 80041b2:	4a36      	ldr	r2, [pc, #216]	; (800428c <xTaskRemoveFromEventList+0x198>)
 80041b4:	6013      	str	r3, [r2, #0]
 80041b6:	6a3b      	ldr	r3, [r7, #32]
 80041b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041ba:	4935      	ldr	r1, [pc, #212]	; (8004290 <xTaskRemoveFromEventList+0x19c>)
 80041bc:	4613      	mov	r3, r2
 80041be:	009b      	lsls	r3, r3, #2
 80041c0:	4413      	add	r3, r2
 80041c2:	009b      	lsls	r3, r3, #2
 80041c4:	440b      	add	r3, r1
 80041c6:	3304      	adds	r3, #4
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	613b      	str	r3, [r7, #16]
 80041cc:	6a3b      	ldr	r3, [r7, #32]
 80041ce:	693a      	ldr	r2, [r7, #16]
 80041d0:	609a      	str	r2, [r3, #8]
 80041d2:	693b      	ldr	r3, [r7, #16]
 80041d4:	689a      	ldr	r2, [r3, #8]
 80041d6:	6a3b      	ldr	r3, [r7, #32]
 80041d8:	60da      	str	r2, [r3, #12]
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	689b      	ldr	r3, [r3, #8]
 80041de:	6a3a      	ldr	r2, [r7, #32]
 80041e0:	3204      	adds	r2, #4
 80041e2:	605a      	str	r2, [r3, #4]
 80041e4:	6a3b      	ldr	r3, [r7, #32]
 80041e6:	1d1a      	adds	r2, r3, #4
 80041e8:	693b      	ldr	r3, [r7, #16]
 80041ea:	609a      	str	r2, [r3, #8]
 80041ec:	6a3b      	ldr	r3, [r7, #32]
 80041ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041f0:	4613      	mov	r3, r2
 80041f2:	009b      	lsls	r3, r3, #2
 80041f4:	4413      	add	r3, r2
 80041f6:	009b      	lsls	r3, r3, #2
 80041f8:	4a25      	ldr	r2, [pc, #148]	; (8004290 <xTaskRemoveFromEventList+0x19c>)
 80041fa:	441a      	add	r2, r3
 80041fc:	6a3b      	ldr	r3, [r7, #32]
 80041fe:	615a      	str	r2, [r3, #20]
 8004200:	6a3b      	ldr	r3, [r7, #32]
 8004202:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004204:	4922      	ldr	r1, [pc, #136]	; (8004290 <xTaskRemoveFromEventList+0x19c>)
 8004206:	4613      	mov	r3, r2
 8004208:	009b      	lsls	r3, r3, #2
 800420a:	4413      	add	r3, r2
 800420c:	009b      	lsls	r3, r3, #2
 800420e:	440b      	add	r3, r1
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	1c59      	adds	r1, r3, #1
 8004214:	481e      	ldr	r0, [pc, #120]	; (8004290 <xTaskRemoveFromEventList+0x19c>)
 8004216:	4613      	mov	r3, r2
 8004218:	009b      	lsls	r3, r3, #2
 800421a:	4413      	add	r3, r2
 800421c:	009b      	lsls	r3, r3, #2
 800421e:	4403      	add	r3, r0
 8004220:	6019      	str	r1, [r3, #0]
 8004222:	e01b      	b.n	800425c <xTaskRemoveFromEventList+0x168>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004224:	4b1b      	ldr	r3, [pc, #108]	; (8004294 <xTaskRemoveFromEventList+0x1a0>)
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	61bb      	str	r3, [r7, #24]
 800422a:	6a3b      	ldr	r3, [r7, #32]
 800422c:	69ba      	ldr	r2, [r7, #24]
 800422e:	61da      	str	r2, [r3, #28]
 8004230:	69bb      	ldr	r3, [r7, #24]
 8004232:	689a      	ldr	r2, [r3, #8]
 8004234:	6a3b      	ldr	r3, [r7, #32]
 8004236:	621a      	str	r2, [r3, #32]
 8004238:	69bb      	ldr	r3, [r7, #24]
 800423a:	689b      	ldr	r3, [r3, #8]
 800423c:	6a3a      	ldr	r2, [r7, #32]
 800423e:	3218      	adds	r2, #24
 8004240:	605a      	str	r2, [r3, #4]
 8004242:	6a3b      	ldr	r3, [r7, #32]
 8004244:	f103 0218 	add.w	r2, r3, #24
 8004248:	69bb      	ldr	r3, [r7, #24]
 800424a:	609a      	str	r2, [r3, #8]
 800424c:	6a3b      	ldr	r3, [r7, #32]
 800424e:	4a11      	ldr	r2, [pc, #68]	; (8004294 <xTaskRemoveFromEventList+0x1a0>)
 8004250:	629a      	str	r2, [r3, #40]	; 0x28
 8004252:	4b10      	ldr	r3, [pc, #64]	; (8004294 <xTaskRemoveFromEventList+0x1a0>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	3301      	adds	r3, #1
 8004258:	4a0e      	ldr	r2, [pc, #56]	; (8004294 <xTaskRemoveFromEventList+0x1a0>)
 800425a:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800425c:	6a3b      	ldr	r3, [r7, #32]
 800425e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004260:	4b0d      	ldr	r3, [pc, #52]	; (8004298 <xTaskRemoveFromEventList+0x1a4>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004266:	429a      	cmp	r2, r3
 8004268:	d905      	bls.n	8004276 <xTaskRemoveFromEventList+0x182>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 800426a:	2301      	movs	r3, #1
 800426c:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 800426e:	4b0b      	ldr	r3, [pc, #44]	; (800429c <xTaskRemoveFromEventList+0x1a8>)
 8004270:	2201      	movs	r2, #1
 8004272:	601a      	str	r2, [r3, #0]
 8004274:	e001      	b.n	800427a <xTaskRemoveFromEventList+0x186>
    }
    else
    {
        xReturn = pdFALSE;
 8004276:	2300      	movs	r3, #0
 8004278:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 800427a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800427c:	4618      	mov	r0, r3
 800427e:	372c      	adds	r7, #44	; 0x2c
 8004280:	46bd      	mov	sp, r7
 8004282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004286:	4770      	bx	lr
 8004288:	20000230 	.word	0x20000230
 800428c:	20000210 	.word	0x20000210
 8004290:	20000134 	.word	0x20000134
 8004294:	200001c8 	.word	0x200001c8
 8004298:	20000130 	.word	0x20000130
 800429c:	2000021c 	.word	0x2000021c

080042a0 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80042a0:	b480      	push	{r7}
 80042a2:	b083      	sub	sp, #12
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80042a8:	4b06      	ldr	r3, [pc, #24]	; (80042c4 <vTaskInternalSetTimeOutState+0x24>)
 80042aa:	681a      	ldr	r2, [r3, #0]
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80042b0:	4b05      	ldr	r3, [pc, #20]	; (80042c8 <vTaskInternalSetTimeOutState+0x28>)
 80042b2:	681a      	ldr	r2, [r3, #0]
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	605a      	str	r2, [r3, #4]
}
 80042b8:	bf00      	nop
 80042ba:	370c      	adds	r7, #12
 80042bc:	46bd      	mov	sp, r7
 80042be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c2:	4770      	bx	lr
 80042c4:	20000220 	.word	0x20000220
 80042c8:	2000020c 	.word	0x2000020c

080042cc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b088      	sub	sp, #32
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
 80042d4:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d10a      	bne.n	80042f2 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 80042dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042e0:	f383 8811 	msr	BASEPRI, r3
 80042e4:	f3bf 8f6f 	isb	sy
 80042e8:	f3bf 8f4f 	dsb	sy
 80042ec:	613b      	str	r3, [r7, #16]
    }
 80042ee:	bf00      	nop
 80042f0:	e7fe      	b.n	80042f0 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d10a      	bne.n	800430e <xTaskCheckForTimeOut+0x42>
        __asm volatile
 80042f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042fc:	f383 8811 	msr	BASEPRI, r3
 8004300:	f3bf 8f6f 	isb	sy
 8004304:	f3bf 8f4f 	dsb	sy
 8004308:	60fb      	str	r3, [r7, #12]
    }
 800430a:	bf00      	nop
 800430c:	e7fe      	b.n	800430c <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 800430e:	f000 fd53 	bl	8004db8 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8004312:	4b1f      	ldr	r3, [pc, #124]	; (8004390 <xTaskCheckForTimeOut+0xc4>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	69ba      	ldr	r2, [r7, #24]
 800431e:	1ad3      	subs	r3, r2, r3
 8004320:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f1b3 3fff 	cmp.w	r3, #4294967295
 800432a:	d102      	bne.n	8004332 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 800432c:	2300      	movs	r3, #0
 800432e:	61fb      	str	r3, [r7, #28]
 8004330:	e026      	b.n	8004380 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681a      	ldr	r2, [r3, #0]
 8004336:	4b17      	ldr	r3, [pc, #92]	; (8004394 <xTaskCheckForTimeOut+0xc8>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	429a      	cmp	r2, r3
 800433c:	d00a      	beq.n	8004354 <xTaskCheckForTimeOut+0x88>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	69ba      	ldr	r2, [r7, #24]
 8004344:	429a      	cmp	r2, r3
 8004346:	d305      	bcc.n	8004354 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8004348:	2301      	movs	r3, #1
 800434a:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	2200      	movs	r2, #0
 8004350:	601a      	str	r2, [r3, #0]
 8004352:	e015      	b.n	8004380 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	697a      	ldr	r2, [r7, #20]
 800435a:	429a      	cmp	r2, r3
 800435c:	d20b      	bcs.n	8004376 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	681a      	ldr	r2, [r3, #0]
 8004362:	697b      	ldr	r3, [r7, #20]
 8004364:	1ad2      	subs	r2, r2, r3
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800436a:	6878      	ldr	r0, [r7, #4]
 800436c:	f7ff ff98 	bl	80042a0 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8004370:	2300      	movs	r3, #0
 8004372:	61fb      	str	r3, [r7, #28]
 8004374:	e004      	b.n	8004380 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	2200      	movs	r2, #0
 800437a:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 800437c:	2301      	movs	r3, #1
 800437e:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8004380:	f000 fd4a 	bl	8004e18 <vPortExitCritical>

    return xReturn;
 8004384:	69fb      	ldr	r3, [r7, #28]
}
 8004386:	4618      	mov	r0, r3
 8004388:	3720      	adds	r7, #32
 800438a:	46bd      	mov	sp, r7
 800438c:	bd80      	pop	{r7, pc}
 800438e:	bf00      	nop
 8004390:	2000020c 	.word	0x2000020c
 8004394:	20000220 	.word	0x20000220

08004398 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004398:	b480      	push	{r7}
 800439a:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 800439c:	4b03      	ldr	r3, [pc, #12]	; (80043ac <vTaskMissedYield+0x14>)
 800439e:	2201      	movs	r2, #1
 80043a0:	601a      	str	r2, [r3, #0]
}
 80043a2:	bf00      	nop
 80043a4:	46bd      	mov	sp, r7
 80043a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043aa:	4770      	bx	lr
 80043ac:	2000021c 	.word	0x2000021c

080043b0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b082      	sub	sp, #8
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80043b8:	f000 f852 	bl	8004460 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80043bc:	4b06      	ldr	r3, [pc, #24]	; (80043d8 <prvIdleTask+0x28>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	2b01      	cmp	r3, #1
 80043c2:	d9f9      	bls.n	80043b8 <prvIdleTask+0x8>
                {
                    taskYIELD();
 80043c4:	4b05      	ldr	r3, [pc, #20]	; (80043dc <prvIdleTask+0x2c>)
 80043c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043ca:	601a      	str	r2, [r3, #0]
 80043cc:	f3bf 8f4f 	dsb	sy
 80043d0:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80043d4:	e7f0      	b.n	80043b8 <prvIdleTask+0x8>
 80043d6:	bf00      	nop
 80043d8:	20000134 	.word	0x20000134
 80043dc:	e000ed04 	.word	0xe000ed04

080043e0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b082      	sub	sp, #8
 80043e4:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80043e6:	2300      	movs	r3, #0
 80043e8:	607b      	str	r3, [r7, #4]
 80043ea:	e00c      	b.n	8004406 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80043ec:	687a      	ldr	r2, [r7, #4]
 80043ee:	4613      	mov	r3, r2
 80043f0:	009b      	lsls	r3, r3, #2
 80043f2:	4413      	add	r3, r2
 80043f4:	009b      	lsls	r3, r3, #2
 80043f6:	4a12      	ldr	r2, [pc, #72]	; (8004440 <prvInitialiseTaskLists+0x60>)
 80043f8:	4413      	add	r3, r2
 80043fa:	4618      	mov	r0, r3
 80043fc:	f7fe fe34 	bl	8003068 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	3301      	adds	r3, #1
 8004404:	607b      	str	r3, [r7, #4]
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2b04      	cmp	r3, #4
 800440a:	d9ef      	bls.n	80043ec <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 800440c:	480d      	ldr	r0, [pc, #52]	; (8004444 <prvInitialiseTaskLists+0x64>)
 800440e:	f7fe fe2b 	bl	8003068 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8004412:	480d      	ldr	r0, [pc, #52]	; (8004448 <prvInitialiseTaskLists+0x68>)
 8004414:	f7fe fe28 	bl	8003068 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8004418:	480c      	ldr	r0, [pc, #48]	; (800444c <prvInitialiseTaskLists+0x6c>)
 800441a:	f7fe fe25 	bl	8003068 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 800441e:	480c      	ldr	r0, [pc, #48]	; (8004450 <prvInitialiseTaskLists+0x70>)
 8004420:	f7fe fe22 	bl	8003068 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8004424:	480b      	ldr	r0, [pc, #44]	; (8004454 <prvInitialiseTaskLists+0x74>)
 8004426:	f7fe fe1f 	bl	8003068 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800442a:	4b0b      	ldr	r3, [pc, #44]	; (8004458 <prvInitialiseTaskLists+0x78>)
 800442c:	4a05      	ldr	r2, [pc, #20]	; (8004444 <prvInitialiseTaskLists+0x64>)
 800442e:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004430:	4b0a      	ldr	r3, [pc, #40]	; (800445c <prvInitialiseTaskLists+0x7c>)
 8004432:	4a05      	ldr	r2, [pc, #20]	; (8004448 <prvInitialiseTaskLists+0x68>)
 8004434:	601a      	str	r2, [r3, #0]
}
 8004436:	bf00      	nop
 8004438:	3708      	adds	r7, #8
 800443a:	46bd      	mov	sp, r7
 800443c:	bd80      	pop	{r7, pc}
 800443e:	bf00      	nop
 8004440:	20000134 	.word	0x20000134
 8004444:	20000198 	.word	0x20000198
 8004448:	200001ac 	.word	0x200001ac
 800444c:	200001c8 	.word	0x200001c8
 8004450:	200001dc 	.word	0x200001dc
 8004454:	200001f4 	.word	0x200001f4
 8004458:	200001c0 	.word	0x200001c0
 800445c:	200001c4 	.word	0x200001c4

08004460 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b082      	sub	sp, #8
 8004464:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004466:	e019      	b.n	800449c <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8004468:	f000 fca6 	bl	8004db8 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800446c:	4b10      	ldr	r3, [pc, #64]	; (80044b0 <prvCheckTasksWaitingTermination+0x50>)
 800446e:	68db      	ldr	r3, [r3, #12]
 8004470:	68db      	ldr	r3, [r3, #12]
 8004472:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	3304      	adds	r3, #4
 8004478:	4618      	mov	r0, r3
 800447a:	f7fe fe5b 	bl	8003134 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 800447e:	4b0d      	ldr	r3, [pc, #52]	; (80044b4 <prvCheckTasksWaitingTermination+0x54>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	3b01      	subs	r3, #1
 8004484:	4a0b      	ldr	r2, [pc, #44]	; (80044b4 <prvCheckTasksWaitingTermination+0x54>)
 8004486:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8004488:	4b0b      	ldr	r3, [pc, #44]	; (80044b8 <prvCheckTasksWaitingTermination+0x58>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	3b01      	subs	r3, #1
 800448e:	4a0a      	ldr	r2, [pc, #40]	; (80044b8 <prvCheckTasksWaitingTermination+0x58>)
 8004490:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8004492:	f000 fcc1 	bl	8004e18 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8004496:	6878      	ldr	r0, [r7, #4]
 8004498:	f000 f810 	bl	80044bc <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800449c:	4b06      	ldr	r3, [pc, #24]	; (80044b8 <prvCheckTasksWaitingTermination+0x58>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d1e1      	bne.n	8004468 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 80044a4:	bf00      	nop
 80044a6:	bf00      	nop
 80044a8:	3708      	adds	r7, #8
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bd80      	pop	{r7, pc}
 80044ae:	bf00      	nop
 80044b0:	200001dc 	.word	0x200001dc
 80044b4:	20000208 	.word	0x20000208
 80044b8:	200001f0 	.word	0x200001f0

080044bc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80044bc:	b580      	push	{r7, lr}
 80044be:	b082      	sub	sp, #8
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFreeStack( pxTCB->pxStack );
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044c8:	4618      	mov	r0, r3
 80044ca:	f000 fe37 	bl	800513c <vPortFree>
                vPortFree( pxTCB );
 80044ce:	6878      	ldr	r0, [r7, #4]
 80044d0:	f000 fe34 	bl	800513c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80044d4:	bf00      	nop
 80044d6:	3708      	adds	r7, #8
 80044d8:	46bd      	mov	sp, r7
 80044da:	bd80      	pop	{r7, pc}

080044dc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80044dc:	b480      	push	{r7}
 80044de:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80044e0:	4b0a      	ldr	r3, [pc, #40]	; (800450c <prvResetNextTaskUnblockTime+0x30>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d104      	bne.n	80044f4 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80044ea:	4b09      	ldr	r3, [pc, #36]	; (8004510 <prvResetNextTaskUnblockTime+0x34>)
 80044ec:	f04f 32ff 	mov.w	r2, #4294967295
 80044f0:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80044f2:	e005      	b.n	8004500 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80044f4:	4b05      	ldr	r3, [pc, #20]	; (800450c <prvResetNextTaskUnblockTime+0x30>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	68db      	ldr	r3, [r3, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4a04      	ldr	r2, [pc, #16]	; (8004510 <prvResetNextTaskUnblockTime+0x34>)
 80044fe:	6013      	str	r3, [r2, #0]
}
 8004500:	bf00      	nop
 8004502:	46bd      	mov	sp, r7
 8004504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004508:	4770      	bx	lr
 800450a:	bf00      	nop
 800450c:	200001c0 	.word	0x200001c0
 8004510:	20000228 	.word	0x20000228

08004514 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8004514:	b480      	push	{r7}
 8004516:	b083      	sub	sp, #12
 8004518:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 800451a:	4b0b      	ldr	r3, [pc, #44]	; (8004548 <xTaskGetSchedulerState+0x34>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d102      	bne.n	8004528 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8004522:	2301      	movs	r3, #1
 8004524:	607b      	str	r3, [r7, #4]
 8004526:	e008      	b.n	800453a <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004528:	4b08      	ldr	r3, [pc, #32]	; (800454c <xTaskGetSchedulerState+0x38>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d102      	bne.n	8004536 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8004530:	2302      	movs	r3, #2
 8004532:	607b      	str	r3, [r7, #4]
 8004534:	e001      	b.n	800453a <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8004536:	2300      	movs	r3, #0
 8004538:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 800453a:	687b      	ldr	r3, [r7, #4]
    }
 800453c:	4618      	mov	r0, r3
 800453e:	370c      	adds	r7, #12
 8004540:	46bd      	mov	sp, r7
 8004542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004546:	4770      	bx	lr
 8004548:	20000214 	.word	0x20000214
 800454c:	20000230 	.word	0x20000230

08004550 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b086      	sub	sp, #24
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
 8004558:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800455a:	4b36      	ldr	r3, [pc, #216]	; (8004634 <prvAddCurrentTaskToDelayedList+0xe4>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	617b      	str	r3, [r7, #20]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004560:	4b35      	ldr	r3, [pc, #212]	; (8004638 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	3304      	adds	r3, #4
 8004566:	4618      	mov	r0, r3
 8004568:	f7fe fde4 	bl	8003134 <uxListRemove>
 800456c:	4603      	mov	r3, r0
 800456e:	2b00      	cmp	r3, #0
 8004570:	d10b      	bne.n	800458a <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004572:	4b31      	ldr	r3, [pc, #196]	; (8004638 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004578:	2201      	movs	r2, #1
 800457a:	fa02 f303 	lsl.w	r3, r2, r3
 800457e:	43da      	mvns	r2, r3
 8004580:	4b2e      	ldr	r3, [pc, #184]	; (800463c <prvAddCurrentTaskToDelayedList+0xec>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4013      	ands	r3, r2
 8004586:	4a2d      	ldr	r2, [pc, #180]	; (800463c <prvAddCurrentTaskToDelayedList+0xec>)
 8004588:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004590:	d124      	bne.n	80045dc <prvAddCurrentTaskToDelayedList+0x8c>
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d021      	beq.n	80045dc <prvAddCurrentTaskToDelayedList+0x8c>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004598:	4b29      	ldr	r3, [pc, #164]	; (8004640 <prvAddCurrentTaskToDelayedList+0xf0>)
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	613b      	str	r3, [r7, #16]
 800459e:	4b26      	ldr	r3, [pc, #152]	; (8004638 <prvAddCurrentTaskToDelayedList+0xe8>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	693a      	ldr	r2, [r7, #16]
 80045a4:	609a      	str	r2, [r3, #8]
 80045a6:	4b24      	ldr	r3, [pc, #144]	; (8004638 <prvAddCurrentTaskToDelayedList+0xe8>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	693a      	ldr	r2, [r7, #16]
 80045ac:	6892      	ldr	r2, [r2, #8]
 80045ae:	60da      	str	r2, [r3, #12]
 80045b0:	4b21      	ldr	r3, [pc, #132]	; (8004638 <prvAddCurrentTaskToDelayedList+0xe8>)
 80045b2:	681a      	ldr	r2, [r3, #0]
 80045b4:	693b      	ldr	r3, [r7, #16]
 80045b6:	689b      	ldr	r3, [r3, #8]
 80045b8:	3204      	adds	r2, #4
 80045ba:	605a      	str	r2, [r3, #4]
 80045bc:	4b1e      	ldr	r3, [pc, #120]	; (8004638 <prvAddCurrentTaskToDelayedList+0xe8>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	1d1a      	adds	r2, r3, #4
 80045c2:	693b      	ldr	r3, [r7, #16]
 80045c4:	609a      	str	r2, [r3, #8]
 80045c6:	4b1c      	ldr	r3, [pc, #112]	; (8004638 <prvAddCurrentTaskToDelayedList+0xe8>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4a1d      	ldr	r2, [pc, #116]	; (8004640 <prvAddCurrentTaskToDelayedList+0xf0>)
 80045cc:	615a      	str	r2, [r3, #20]
 80045ce:	4b1c      	ldr	r3, [pc, #112]	; (8004640 <prvAddCurrentTaskToDelayedList+0xf0>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	3301      	adds	r3, #1
 80045d4:	4a1a      	ldr	r2, [pc, #104]	; (8004640 <prvAddCurrentTaskToDelayedList+0xf0>)
 80045d6:	6013      	str	r3, [r2, #0]
 80045d8:	bf00      	nop

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 80045da:	e026      	b.n	800462a <prvAddCurrentTaskToDelayedList+0xda>
                xTimeToWake = xConstTickCount + xTicksToWait;
 80045dc:	697a      	ldr	r2, [r7, #20]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	4413      	add	r3, r2
 80045e2:	60fb      	str	r3, [r7, #12]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80045e4:	4b14      	ldr	r3, [pc, #80]	; (8004638 <prvAddCurrentTaskToDelayedList+0xe8>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	68fa      	ldr	r2, [r7, #12]
 80045ea:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 80045ec:	68fa      	ldr	r2, [r7, #12]
 80045ee:	697b      	ldr	r3, [r7, #20]
 80045f0:	429a      	cmp	r2, r3
 80045f2:	d209      	bcs.n	8004608 <prvAddCurrentTaskToDelayedList+0xb8>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80045f4:	4b13      	ldr	r3, [pc, #76]	; (8004644 <prvAddCurrentTaskToDelayedList+0xf4>)
 80045f6:	681a      	ldr	r2, [r3, #0]
 80045f8:	4b0f      	ldr	r3, [pc, #60]	; (8004638 <prvAddCurrentTaskToDelayedList+0xe8>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	3304      	adds	r3, #4
 80045fe:	4619      	mov	r1, r3
 8004600:	4610      	mov	r0, r2
 8004602:	f7fe fd5e 	bl	80030c2 <vListInsert>
}
 8004606:	e010      	b.n	800462a <prvAddCurrentTaskToDelayedList+0xda>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004608:	4b0f      	ldr	r3, [pc, #60]	; (8004648 <prvAddCurrentTaskToDelayedList+0xf8>)
 800460a:	681a      	ldr	r2, [r3, #0]
 800460c:	4b0a      	ldr	r3, [pc, #40]	; (8004638 <prvAddCurrentTaskToDelayedList+0xe8>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	3304      	adds	r3, #4
 8004612:	4619      	mov	r1, r3
 8004614:	4610      	mov	r0, r2
 8004616:	f7fe fd54 	bl	80030c2 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 800461a:	4b0c      	ldr	r3, [pc, #48]	; (800464c <prvAddCurrentTaskToDelayedList+0xfc>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	68fa      	ldr	r2, [r7, #12]
 8004620:	429a      	cmp	r2, r3
 8004622:	d202      	bcs.n	800462a <prvAddCurrentTaskToDelayedList+0xda>
                        xNextTaskUnblockTime = xTimeToWake;
 8004624:	4a09      	ldr	r2, [pc, #36]	; (800464c <prvAddCurrentTaskToDelayedList+0xfc>)
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	6013      	str	r3, [r2, #0]
}
 800462a:	bf00      	nop
 800462c:	3718      	adds	r7, #24
 800462e:	46bd      	mov	sp, r7
 8004630:	bd80      	pop	{r7, pc}
 8004632:	bf00      	nop
 8004634:	2000020c 	.word	0x2000020c
 8004638:	20000130 	.word	0x20000130
 800463c:	20000210 	.word	0x20000210
 8004640:	200001f4 	.word	0x200001f4
 8004644:	200001c4 	.word	0x200001c4
 8004648:	200001c0 	.word	0x200001c0
 800464c:	20000228 	.word	0x20000228

08004650 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8004650:	b580      	push	{r7, lr}
 8004652:	b084      	sub	sp, #16
 8004654:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8004656:	2300      	movs	r3, #0
 8004658:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800465a:	f000 fa47 	bl	8004aec <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800465e:	4b11      	ldr	r3, [pc, #68]	; (80046a4 <xTimerCreateTimerTask+0x54>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d00b      	beq.n	800467e <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8004666:	4b10      	ldr	r3, [pc, #64]	; (80046a8 <xTimerCreateTimerTask+0x58>)
 8004668:	9301      	str	r3, [sp, #4]
 800466a:	2302      	movs	r3, #2
 800466c:	9300      	str	r3, [sp, #0]
 800466e:	2300      	movs	r3, #0
 8004670:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004674:	490d      	ldr	r1, [pc, #52]	; (80046ac <xTimerCreateTimerTask+0x5c>)
 8004676:	480e      	ldr	r0, [pc, #56]	; (80046b0 <xTimerCreateTimerTask+0x60>)
 8004678:	f7ff f878 	bl	800376c <xTaskCreate>
 800467c:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d10a      	bne.n	800469a <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8004684:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004688:	f383 8811 	msr	BASEPRI, r3
 800468c:	f3bf 8f6f 	isb	sy
 8004690:	f3bf 8f4f 	dsb	sy
 8004694:	603b      	str	r3, [r7, #0]
    }
 8004696:	bf00      	nop
 8004698:	e7fe      	b.n	8004698 <xTimerCreateTimerTask+0x48>
        return xReturn;
 800469a:	687b      	ldr	r3, [r7, #4]
    }
 800469c:	4618      	mov	r0, r3
 800469e:	3708      	adds	r7, #8
 80046a0:	46bd      	mov	sp, r7
 80046a2:	bd80      	pop	{r7, pc}
 80046a4:	20000264 	.word	0x20000264
 80046a8:	20000268 	.word	0x20000268
 80046ac:	08005c50 	.word	0x08005c50
 80046b0:	08004759 	.word	0x08004759

080046b4 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b084      	sub	sp, #16
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	60f8      	str	r0, [r7, #12]
 80046bc:	60b9      	str	r1, [r7, #8]
 80046be:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80046c0:	e008      	b.n	80046d4 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	699b      	ldr	r3, [r3, #24]
 80046c6:	68ba      	ldr	r2, [r7, #8]
 80046c8:	4413      	add	r3, r2
 80046ca:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	6a1b      	ldr	r3, [r3, #32]
 80046d0:	68f8      	ldr	r0, [r7, #12]
 80046d2:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	699a      	ldr	r2, [r3, #24]
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	18d1      	adds	r1, r2, r3
 80046dc:	68bb      	ldr	r3, [r7, #8]
 80046de:	687a      	ldr	r2, [r7, #4]
 80046e0:	68f8      	ldr	r0, [r7, #12]
 80046e2:	f000 f8dd 	bl	80048a0 <prvInsertTimerInActiveList>
 80046e6:	4603      	mov	r3, r0
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d1ea      	bne.n	80046c2 <prvReloadTimer+0xe>
        }
    }
 80046ec:	bf00      	nop
 80046ee:	bf00      	nop
 80046f0:	3710      	adds	r7, #16
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bd80      	pop	{r7, pc}
	...

080046f8 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b084      	sub	sp, #16
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
 8004700:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004702:	4b14      	ldr	r3, [pc, #80]	; (8004754 <prvProcessExpiredTimer+0x5c>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	68db      	ldr	r3, [r3, #12]
 8004708:	68db      	ldr	r3, [r3, #12]
 800470a:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	3304      	adds	r3, #4
 8004710:	4618      	mov	r0, r3
 8004712:	f7fe fd0f 	bl	8003134 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800471c:	f003 0304 	and.w	r3, r3, #4
 8004720:	2b00      	cmp	r3, #0
 8004722:	d005      	beq.n	8004730 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8004724:	683a      	ldr	r2, [r7, #0]
 8004726:	6879      	ldr	r1, [r7, #4]
 8004728:	68f8      	ldr	r0, [r7, #12]
 800472a:	f7ff ffc3 	bl	80046b4 <prvReloadTimer>
 800472e:	e008      	b.n	8004742 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004736:	f023 0301 	bic.w	r3, r3, #1
 800473a:	b2da      	uxtb	r2, r3
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	6a1b      	ldr	r3, [r3, #32]
 8004746:	68f8      	ldr	r0, [r7, #12]
 8004748:	4798      	blx	r3
    }
 800474a:	bf00      	nop
 800474c:	3710      	adds	r7, #16
 800474e:	46bd      	mov	sp, r7
 8004750:	bd80      	pop	{r7, pc}
 8004752:	bf00      	nop
 8004754:	2000025c 	.word	0x2000025c

08004758 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8004758:	b580      	push	{r7, lr}
 800475a:	b084      	sub	sp, #16
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004760:	f107 0308 	add.w	r3, r7, #8
 8004764:	4618      	mov	r0, r3
 8004766:	f000 f857 	bl	8004818 <prvGetNextExpireTime>
 800476a:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	4619      	mov	r1, r3
 8004770:	68f8      	ldr	r0, [r7, #12]
 8004772:	f000 f803 	bl	800477c <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8004776:	f000 f8d5 	bl	8004924 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800477a:	e7f1      	b.n	8004760 <prvTimerTask+0x8>

0800477c <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 800477c:	b580      	push	{r7, lr}
 800477e:	b084      	sub	sp, #16
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
 8004784:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8004786:	f7ff f9bf 	bl	8003b08 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800478a:	f107 0308 	add.w	r3, r7, #8
 800478e:	4618      	mov	r0, r3
 8004790:	f000 f866 	bl	8004860 <prvSampleTimeNow>
 8004794:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8004796:	68bb      	ldr	r3, [r7, #8]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d130      	bne.n	80047fe <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d10a      	bne.n	80047b8 <prvProcessTimerOrBlockTask+0x3c>
 80047a2:	687a      	ldr	r2, [r7, #4]
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	429a      	cmp	r2, r3
 80047a8:	d806      	bhi.n	80047b8 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 80047aa:	f7ff f9bb 	bl	8003b24 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80047ae:	68f9      	ldr	r1, [r7, #12]
 80047b0:	6878      	ldr	r0, [r7, #4]
 80047b2:	f7ff ffa1 	bl	80046f8 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 80047b6:	e024      	b.n	8004802 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d008      	beq.n	80047d0 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80047be:	4b13      	ldr	r3, [pc, #76]	; (800480c <prvProcessTimerOrBlockTask+0x90>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d101      	bne.n	80047cc <prvProcessTimerOrBlockTask+0x50>
 80047c8:	2301      	movs	r3, #1
 80047ca:	e000      	b.n	80047ce <prvProcessTimerOrBlockTask+0x52>
 80047cc:	2300      	movs	r3, #0
 80047ce:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80047d0:	4b0f      	ldr	r3, [pc, #60]	; (8004810 <prvProcessTimerOrBlockTask+0x94>)
 80047d2:	6818      	ldr	r0, [r3, #0]
 80047d4:	687a      	ldr	r2, [r7, #4]
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	1ad3      	subs	r3, r2, r3
 80047da:	683a      	ldr	r2, [r7, #0]
 80047dc:	4619      	mov	r1, r3
 80047de:	f7fe ff91 	bl	8003704 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 80047e2:	f7ff f99f 	bl	8003b24 <xTaskResumeAll>
 80047e6:	4603      	mov	r3, r0
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d10a      	bne.n	8004802 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 80047ec:	4b09      	ldr	r3, [pc, #36]	; (8004814 <prvProcessTimerOrBlockTask+0x98>)
 80047ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047f2:	601a      	str	r2, [r3, #0]
 80047f4:	f3bf 8f4f 	dsb	sy
 80047f8:	f3bf 8f6f 	isb	sy
    }
 80047fc:	e001      	b.n	8004802 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 80047fe:	f7ff f991 	bl	8003b24 <xTaskResumeAll>
    }
 8004802:	bf00      	nop
 8004804:	3710      	adds	r7, #16
 8004806:	46bd      	mov	sp, r7
 8004808:	bd80      	pop	{r7, pc}
 800480a:	bf00      	nop
 800480c:	20000260 	.word	0x20000260
 8004810:	20000264 	.word	0x20000264
 8004814:	e000ed04 	.word	0xe000ed04

08004818 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8004818:	b480      	push	{r7}
 800481a:	b085      	sub	sp, #20
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004820:	4b0e      	ldr	r3, [pc, #56]	; (800485c <prvGetNextExpireTime+0x44>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d101      	bne.n	800482e <prvGetNextExpireTime+0x16>
 800482a:	2201      	movs	r2, #1
 800482c:	e000      	b.n	8004830 <prvGetNextExpireTime+0x18>
 800482e:	2200      	movs	r2, #0
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d105      	bne.n	8004848 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800483c:	4b07      	ldr	r3, [pc, #28]	; (800485c <prvGetNextExpireTime+0x44>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	68db      	ldr	r3, [r3, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	60fb      	str	r3, [r7, #12]
 8004846:	e001      	b.n	800484c <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8004848:	2300      	movs	r3, #0
 800484a:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 800484c:	68fb      	ldr	r3, [r7, #12]
    }
 800484e:	4618      	mov	r0, r3
 8004850:	3714      	adds	r7, #20
 8004852:	46bd      	mov	sp, r7
 8004854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004858:	4770      	bx	lr
 800485a:	bf00      	nop
 800485c:	2000025c 	.word	0x2000025c

08004860 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8004860:	b580      	push	{r7, lr}
 8004862:	b084      	sub	sp, #16
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8004868:	f7ff fa58 	bl	8003d1c <xTaskGetTickCount>
 800486c:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 800486e:	4b0b      	ldr	r3, [pc, #44]	; (800489c <prvSampleTimeNow+0x3c>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	68fa      	ldr	r2, [r7, #12]
 8004874:	429a      	cmp	r2, r3
 8004876:	d205      	bcs.n	8004884 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8004878:	f000 f912 	bl	8004aa0 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2201      	movs	r2, #1
 8004880:	601a      	str	r2, [r3, #0]
 8004882:	e002      	b.n	800488a <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2200      	movs	r2, #0
 8004888:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 800488a:	4a04      	ldr	r2, [pc, #16]	; (800489c <prvSampleTimeNow+0x3c>)
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8004890:	68fb      	ldr	r3, [r7, #12]
    }
 8004892:	4618      	mov	r0, r3
 8004894:	3710      	adds	r7, #16
 8004896:	46bd      	mov	sp, r7
 8004898:	bd80      	pop	{r7, pc}
 800489a:	bf00      	nop
 800489c:	2000026c 	.word	0x2000026c

080048a0 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b086      	sub	sp, #24
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	60f8      	str	r0, [r7, #12]
 80048a8:	60b9      	str	r1, [r7, #8]
 80048aa:	607a      	str	r2, [r7, #4]
 80048ac:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 80048ae:	2300      	movs	r3, #0
 80048b0:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	68ba      	ldr	r2, [r7, #8]
 80048b6:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	68fa      	ldr	r2, [r7, #12]
 80048bc:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 80048be:	68ba      	ldr	r2, [r7, #8]
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	429a      	cmp	r2, r3
 80048c4:	d812      	bhi.n	80048ec <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80048c6:	687a      	ldr	r2, [r7, #4]
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	1ad2      	subs	r2, r2, r3
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	699b      	ldr	r3, [r3, #24]
 80048d0:	429a      	cmp	r2, r3
 80048d2:	d302      	bcc.n	80048da <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 80048d4:	2301      	movs	r3, #1
 80048d6:	617b      	str	r3, [r7, #20]
 80048d8:	e01b      	b.n	8004912 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80048da:	4b10      	ldr	r3, [pc, #64]	; (800491c <prvInsertTimerInActiveList+0x7c>)
 80048dc:	681a      	ldr	r2, [r3, #0]
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	3304      	adds	r3, #4
 80048e2:	4619      	mov	r1, r3
 80048e4:	4610      	mov	r0, r2
 80048e6:	f7fe fbec 	bl	80030c2 <vListInsert>
 80048ea:	e012      	b.n	8004912 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80048ec:	687a      	ldr	r2, [r7, #4]
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	429a      	cmp	r2, r3
 80048f2:	d206      	bcs.n	8004902 <prvInsertTimerInActiveList+0x62>
 80048f4:	68ba      	ldr	r2, [r7, #8]
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	429a      	cmp	r2, r3
 80048fa:	d302      	bcc.n	8004902 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 80048fc:	2301      	movs	r3, #1
 80048fe:	617b      	str	r3, [r7, #20]
 8004900:	e007      	b.n	8004912 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004902:	4b07      	ldr	r3, [pc, #28]	; (8004920 <prvInsertTimerInActiveList+0x80>)
 8004904:	681a      	ldr	r2, [r3, #0]
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	3304      	adds	r3, #4
 800490a:	4619      	mov	r1, r3
 800490c:	4610      	mov	r0, r2
 800490e:	f7fe fbd8 	bl	80030c2 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8004912:	697b      	ldr	r3, [r7, #20]
    }
 8004914:	4618      	mov	r0, r3
 8004916:	3718      	adds	r7, #24
 8004918:	46bd      	mov	sp, r7
 800491a:	bd80      	pop	{r7, pc}
 800491c:	20000260 	.word	0x20000260
 8004920:	2000025c 	.word	0x2000025c

08004924 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8004924:	b580      	push	{r7, lr}
 8004926:	b088      	sub	sp, #32
 8004928:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800492a:	e0a6      	b.n	8004a7a <prvProcessReceivedCommands+0x156>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800492c:	68bb      	ldr	r3, [r7, #8]
 800492e:	2b00      	cmp	r3, #0
 8004930:	f2c0 80a2 	blt.w	8004a78 <prvProcessReceivedCommands+0x154>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004934:	693b      	ldr	r3, [r7, #16]
 8004936:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004938:	69fb      	ldr	r3, [r7, #28]
 800493a:	695b      	ldr	r3, [r3, #20]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d004      	beq.n	800494a <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004940:	69fb      	ldr	r3, [r7, #28]
 8004942:	3304      	adds	r3, #4
 8004944:	4618      	mov	r0, r3
 8004946:	f7fe fbf5 	bl	8003134 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800494a:	1d3b      	adds	r3, r7, #4
 800494c:	4618      	mov	r0, r3
 800494e:	f7ff ff87 	bl	8004860 <prvSampleTimeNow>
 8004952:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8004954:	68bb      	ldr	r3, [r7, #8]
 8004956:	3b01      	subs	r3, #1
 8004958:	2b08      	cmp	r3, #8
 800495a:	f200 808e 	bhi.w	8004a7a <prvProcessReceivedCommands+0x156>
 800495e:	a201      	add	r2, pc, #4	; (adr r2, 8004964 <prvProcessReceivedCommands+0x40>)
 8004960:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004964:	08004989 	.word	0x08004989
 8004968:	08004989 	.word	0x08004989
 800496c:	080049f1 	.word	0x080049f1
 8004970:	08004a05 	.word	0x08004a05
 8004974:	08004a4f 	.word	0x08004a4f
 8004978:	08004989 	.word	0x08004989
 800497c:	08004989 	.word	0x08004989
 8004980:	080049f1 	.word	0x080049f1
 8004984:	08004a05 	.word	0x08004a05
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004988:	69fb      	ldr	r3, [r7, #28]
 800498a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800498e:	f043 0301 	orr.w	r3, r3, #1
 8004992:	b2da      	uxtb	r2, r3
 8004994:	69fb      	ldr	r3, [r7, #28]
 8004996:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800499a:	68fa      	ldr	r2, [r7, #12]
 800499c:	69fb      	ldr	r3, [r7, #28]
 800499e:	699b      	ldr	r3, [r3, #24]
 80049a0:	18d1      	adds	r1, r2, r3
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	69ba      	ldr	r2, [r7, #24]
 80049a6:	69f8      	ldr	r0, [r7, #28]
 80049a8:	f7ff ff7a 	bl	80048a0 <prvInsertTimerInActiveList>
 80049ac:	4603      	mov	r3, r0
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d063      	beq.n	8004a7a <prvProcessReceivedCommands+0x156>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80049b2:	69fb      	ldr	r3, [r7, #28]
 80049b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80049b8:	f003 0304 	and.w	r3, r3, #4
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d009      	beq.n	80049d4 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 80049c0:	68fa      	ldr	r2, [r7, #12]
 80049c2:	69fb      	ldr	r3, [r7, #28]
 80049c4:	699b      	ldr	r3, [r3, #24]
 80049c6:	4413      	add	r3, r2
 80049c8:	69ba      	ldr	r2, [r7, #24]
 80049ca:	4619      	mov	r1, r3
 80049cc:	69f8      	ldr	r0, [r7, #28]
 80049ce:	f7ff fe71 	bl	80046b4 <prvReloadTimer>
 80049d2:	e008      	b.n	80049e6 <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80049d4:	69fb      	ldr	r3, [r7, #28]
 80049d6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80049da:	f023 0301 	bic.w	r3, r3, #1
 80049de:	b2da      	uxtb	r2, r3
 80049e0:	69fb      	ldr	r3, [r7, #28]
 80049e2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80049e6:	69fb      	ldr	r3, [r7, #28]
 80049e8:	6a1b      	ldr	r3, [r3, #32]
 80049ea:	69f8      	ldr	r0, [r7, #28]
 80049ec:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 80049ee:	e044      	b.n	8004a7a <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80049f0:	69fb      	ldr	r3, [r7, #28]
 80049f2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80049f6:	f023 0301 	bic.w	r3, r3, #1
 80049fa:	b2da      	uxtb	r2, r3
 80049fc:	69fb      	ldr	r3, [r7, #28]
 80049fe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8004a02:	e03a      	b.n	8004a7a <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004a04:	69fb      	ldr	r3, [r7, #28]
 8004a06:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004a0a:	f043 0301 	orr.w	r3, r3, #1
 8004a0e:	b2da      	uxtb	r2, r3
 8004a10:	69fb      	ldr	r3, [r7, #28]
 8004a12:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004a16:	68fa      	ldr	r2, [r7, #12]
 8004a18:	69fb      	ldr	r3, [r7, #28]
 8004a1a:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004a1c:	69fb      	ldr	r3, [r7, #28]
 8004a1e:	699b      	ldr	r3, [r3, #24]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d10a      	bne.n	8004a3a <prvProcessReceivedCommands+0x116>
        __asm volatile
 8004a24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a28:	f383 8811 	msr	BASEPRI, r3
 8004a2c:	f3bf 8f6f 	isb	sy
 8004a30:	f3bf 8f4f 	dsb	sy
 8004a34:	617b      	str	r3, [r7, #20]
    }
 8004a36:	bf00      	nop
 8004a38:	e7fe      	b.n	8004a38 <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004a3a:	69fb      	ldr	r3, [r7, #28]
 8004a3c:	699a      	ldr	r2, [r3, #24]
 8004a3e:	69bb      	ldr	r3, [r7, #24]
 8004a40:	18d1      	adds	r1, r2, r3
 8004a42:	69bb      	ldr	r3, [r7, #24]
 8004a44:	69ba      	ldr	r2, [r7, #24]
 8004a46:	69f8      	ldr	r0, [r7, #28]
 8004a48:	f7ff ff2a 	bl	80048a0 <prvInsertTimerInActiveList>
                        break;
 8004a4c:	e015      	b.n	8004a7a <prvProcessReceivedCommands+0x156>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004a4e:	69fb      	ldr	r3, [r7, #28]
 8004a50:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004a54:	f003 0302 	and.w	r3, r3, #2
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d103      	bne.n	8004a64 <prvProcessReceivedCommands+0x140>
                                {
                                    vPortFree( pxTimer );
 8004a5c:	69f8      	ldr	r0, [r7, #28]
 8004a5e:	f000 fb6d 	bl	800513c <vPortFree>
 8004a62:	e00a      	b.n	8004a7a <prvProcessReceivedCommands+0x156>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004a64:	69fb      	ldr	r3, [r7, #28]
 8004a66:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004a6a:	f023 0301 	bic.w	r3, r3, #1
 8004a6e:	b2da      	uxtb	r2, r3
 8004a70:	69fb      	ldr	r3, [r7, #28]
 8004a72:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8004a76:	e000      	b.n	8004a7a <prvProcessReceivedCommands+0x156>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8004a78:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004a7a:	4b08      	ldr	r3, [pc, #32]	; (8004a9c <prvProcessReceivedCommands+0x178>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f107 0108 	add.w	r1, r7, #8
 8004a82:	2200      	movs	r2, #0
 8004a84:	4618      	mov	r0, r3
 8004a86:	f7fe fc81 	bl	800338c <xQueueReceive>
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	f47f af4d 	bne.w	800492c <prvProcessReceivedCommands+0x8>
        }
    }
 8004a92:	bf00      	nop
 8004a94:	bf00      	nop
 8004a96:	3720      	adds	r7, #32
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	bd80      	pop	{r7, pc}
 8004a9c:	20000264 	.word	0x20000264

08004aa0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b082      	sub	sp, #8
 8004aa4:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004aa6:	e009      	b.n	8004abc <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004aa8:	4b0e      	ldr	r3, [pc, #56]	; (8004ae4 <prvSwitchTimerLists+0x44>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	68db      	ldr	r3, [r3, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8004ab2:	f04f 31ff 	mov.w	r1, #4294967295
 8004ab6:	6838      	ldr	r0, [r7, #0]
 8004ab8:	f7ff fe1e 	bl	80046f8 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004abc:	4b09      	ldr	r3, [pc, #36]	; (8004ae4 <prvSwitchTimerLists+0x44>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d1f0      	bne.n	8004aa8 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8004ac6:	4b07      	ldr	r3, [pc, #28]	; (8004ae4 <prvSwitchTimerLists+0x44>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8004acc:	4b06      	ldr	r3, [pc, #24]	; (8004ae8 <prvSwitchTimerLists+0x48>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	4a04      	ldr	r2, [pc, #16]	; (8004ae4 <prvSwitchTimerLists+0x44>)
 8004ad2:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8004ad4:	4a04      	ldr	r2, [pc, #16]	; (8004ae8 <prvSwitchTimerLists+0x48>)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6013      	str	r3, [r2, #0]
    }
 8004ada:	bf00      	nop
 8004adc:	3708      	adds	r7, #8
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	bd80      	pop	{r7, pc}
 8004ae2:	bf00      	nop
 8004ae4:	2000025c 	.word	0x2000025c
 8004ae8:	20000260 	.word	0x20000260

08004aec <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8004aec:	b580      	push	{r7, lr}
 8004aee:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8004af0:	f000 f962 	bl	8004db8 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8004af4:	4b12      	ldr	r3, [pc, #72]	; (8004b40 <prvCheckForValidListAndQueue+0x54>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d11d      	bne.n	8004b38 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8004afc:	4811      	ldr	r0, [pc, #68]	; (8004b44 <prvCheckForValidListAndQueue+0x58>)
 8004afe:	f7fe fab3 	bl	8003068 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8004b02:	4811      	ldr	r0, [pc, #68]	; (8004b48 <prvCheckForValidListAndQueue+0x5c>)
 8004b04:	f7fe fab0 	bl	8003068 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8004b08:	4b10      	ldr	r3, [pc, #64]	; (8004b4c <prvCheckForValidListAndQueue+0x60>)
 8004b0a:	4a0e      	ldr	r2, [pc, #56]	; (8004b44 <prvCheckForValidListAndQueue+0x58>)
 8004b0c:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8004b0e:	4b10      	ldr	r3, [pc, #64]	; (8004b50 <prvCheckForValidListAndQueue+0x64>)
 8004b10:	4a0d      	ldr	r2, [pc, #52]	; (8004b48 <prvCheckForValidListAndQueue+0x5c>)
 8004b12:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8004b14:	2200      	movs	r2, #0
 8004b16:	210c      	movs	r1, #12
 8004b18:	200a      	movs	r0, #10
 8004b1a:	f7fe fbc5 	bl	80032a8 <xQueueGenericCreate>
 8004b1e:	4603      	mov	r3, r0
 8004b20:	4a07      	ldr	r2, [pc, #28]	; (8004b40 <prvCheckForValidListAndQueue+0x54>)
 8004b22:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8004b24:	4b06      	ldr	r3, [pc, #24]	; (8004b40 <prvCheckForValidListAndQueue+0x54>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d005      	beq.n	8004b38 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004b2c:	4b04      	ldr	r3, [pc, #16]	; (8004b40 <prvCheckForValidListAndQueue+0x54>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	4908      	ldr	r1, [pc, #32]	; (8004b54 <prvCheckForValidListAndQueue+0x68>)
 8004b32:	4618      	mov	r0, r3
 8004b34:	f7fe fd98 	bl	8003668 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8004b38:	f000 f96e 	bl	8004e18 <vPortExitCritical>
    }
 8004b3c:	bf00      	nop
 8004b3e:	bd80      	pop	{r7, pc}
 8004b40:	20000264 	.word	0x20000264
 8004b44:	20000234 	.word	0x20000234
 8004b48:	20000248 	.word	0x20000248
 8004b4c:	2000025c 	.word	0x2000025c
 8004b50:	20000260 	.word	0x20000260
 8004b54:	08005c58 	.word	0x08005c58

08004b58 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8004b58:	b480      	push	{r7}
 8004b5a:	b085      	sub	sp, #20
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	60f8      	str	r0, [r7, #12]
 8004b60:	60b9      	str	r1, [r7, #8]
 8004b62:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	3b04      	subs	r3, #4
 8004b68:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004b70:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	3b04      	subs	r3, #4
 8004b76:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8004b78:	68bb      	ldr	r3, [r7, #8]
 8004b7a:	f023 0201 	bic.w	r2, r3, #1
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	3b04      	subs	r3, #4
 8004b86:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8004b88:	4a0c      	ldr	r2, [pc, #48]	; (8004bbc <pxPortInitialiseStack+0x64>)
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	3b14      	subs	r3, #20
 8004b92:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8004b94:	687a      	ldr	r2, [r7, #4]
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	3b04      	subs	r3, #4
 8004b9e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	f06f 0202 	mvn.w	r2, #2
 8004ba6:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	3b20      	subs	r3, #32
 8004bac:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8004bae:	68fb      	ldr	r3, [r7, #12]
}
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	3714      	adds	r7, #20
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bba:	4770      	bx	lr
 8004bbc:	08004bc1 	.word	0x08004bc1

08004bc0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004bc0:	b480      	push	{r7}
 8004bc2:	b085      	sub	sp, #20
 8004bc4:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8004bca:	4b12      	ldr	r3, [pc, #72]	; (8004c14 <prvTaskExitError+0x54>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bd2:	d00a      	beq.n	8004bea <prvTaskExitError+0x2a>
        __asm volatile
 8004bd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bd8:	f383 8811 	msr	BASEPRI, r3
 8004bdc:	f3bf 8f6f 	isb	sy
 8004be0:	f3bf 8f4f 	dsb	sy
 8004be4:	60fb      	str	r3, [r7, #12]
    }
 8004be6:	bf00      	nop
 8004be8:	e7fe      	b.n	8004be8 <prvTaskExitError+0x28>
        __asm volatile
 8004bea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bee:	f383 8811 	msr	BASEPRI, r3
 8004bf2:	f3bf 8f6f 	isb	sy
 8004bf6:	f3bf 8f4f 	dsb	sy
 8004bfa:	60bb      	str	r3, [r7, #8]
    }
 8004bfc:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8004bfe:	bf00      	nop
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d0fc      	beq.n	8004c00 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8004c06:	bf00      	nop
 8004c08:	bf00      	nop
 8004c0a:	3714      	adds	r7, #20
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c12:	4770      	bx	lr
 8004c14:	20000010 	.word	0x20000010
	...

08004c20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8004c20:	4b07      	ldr	r3, [pc, #28]	; (8004c40 <pxCurrentTCBConst2>)
 8004c22:	6819      	ldr	r1, [r3, #0]
 8004c24:	6808      	ldr	r0, [r1, #0]
 8004c26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c2a:	f380 8809 	msr	PSP, r0
 8004c2e:	f3bf 8f6f 	isb	sy
 8004c32:	f04f 0000 	mov.w	r0, #0
 8004c36:	f380 8811 	msr	BASEPRI, r0
 8004c3a:	4770      	bx	lr
 8004c3c:	f3af 8000 	nop.w

08004c40 <pxCurrentTCBConst2>:
 8004c40:	20000130 	.word	0x20000130
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8004c44:	bf00      	nop
 8004c46:	bf00      	nop

08004c48 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8004c48:	4808      	ldr	r0, [pc, #32]	; (8004c6c <prvPortStartFirstTask+0x24>)
 8004c4a:	6800      	ldr	r0, [r0, #0]
 8004c4c:	6800      	ldr	r0, [r0, #0]
 8004c4e:	f380 8808 	msr	MSP, r0
 8004c52:	f04f 0000 	mov.w	r0, #0
 8004c56:	f380 8814 	msr	CONTROL, r0
 8004c5a:	b662      	cpsie	i
 8004c5c:	b661      	cpsie	f
 8004c5e:	f3bf 8f4f 	dsb	sy
 8004c62:	f3bf 8f6f 	isb	sy
 8004c66:	df00      	svc	0
 8004c68:	bf00      	nop
 8004c6a:	0000      	.short	0x0000
 8004c6c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8004c70:	bf00      	nop
 8004c72:	bf00      	nop

08004c74 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b086      	sub	sp, #24
 8004c78:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004c7a:	4b46      	ldr	r3, [pc, #280]	; (8004d94 <xPortStartScheduler+0x120>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4a46      	ldr	r2, [pc, #280]	; (8004d98 <xPortStartScheduler+0x124>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d10a      	bne.n	8004c9a <xPortStartScheduler+0x26>
        __asm volatile
 8004c84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c88:	f383 8811 	msr	BASEPRI, r3
 8004c8c:	f3bf 8f6f 	isb	sy
 8004c90:	f3bf 8f4f 	dsb	sy
 8004c94:	613b      	str	r3, [r7, #16]
    }
 8004c96:	bf00      	nop
 8004c98:	e7fe      	b.n	8004c98 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004c9a:	4b3e      	ldr	r3, [pc, #248]	; (8004d94 <xPortStartScheduler+0x120>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4a3f      	ldr	r2, [pc, #252]	; (8004d9c <xPortStartScheduler+0x128>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d10a      	bne.n	8004cba <xPortStartScheduler+0x46>
        __asm volatile
 8004ca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ca8:	f383 8811 	msr	BASEPRI, r3
 8004cac:	f3bf 8f6f 	isb	sy
 8004cb0:	f3bf 8f4f 	dsb	sy
 8004cb4:	60fb      	str	r3, [r7, #12]
    }
 8004cb6:	bf00      	nop
 8004cb8:	e7fe      	b.n	8004cb8 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004cba:	4b39      	ldr	r3, [pc, #228]	; (8004da0 <xPortStartScheduler+0x12c>)
 8004cbc:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004cbe:	697b      	ldr	r3, [r7, #20]
 8004cc0:	781b      	ldrb	r3, [r3, #0]
 8004cc2:	b2db      	uxtb	r3, r3
 8004cc4:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004cc6:	697b      	ldr	r3, [r7, #20]
 8004cc8:	22ff      	movs	r2, #255	; 0xff
 8004cca:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004ccc:	697b      	ldr	r3, [r7, #20]
 8004cce:	781b      	ldrb	r3, [r3, #0]
 8004cd0:	b2db      	uxtb	r3, r3
 8004cd2:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004cd4:	78fb      	ldrb	r3, [r7, #3]
 8004cd6:	b2db      	uxtb	r3, r3
 8004cd8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004cdc:	b2da      	uxtb	r2, r3
 8004cde:	4b31      	ldr	r3, [pc, #196]	; (8004da4 <xPortStartScheduler+0x130>)
 8004ce0:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004ce2:	4b31      	ldr	r3, [pc, #196]	; (8004da8 <xPortStartScheduler+0x134>)
 8004ce4:	2207      	movs	r2, #7
 8004ce6:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004ce8:	e009      	b.n	8004cfe <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8004cea:	4b2f      	ldr	r3, [pc, #188]	; (8004da8 <xPortStartScheduler+0x134>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	3b01      	subs	r3, #1
 8004cf0:	4a2d      	ldr	r2, [pc, #180]	; (8004da8 <xPortStartScheduler+0x134>)
 8004cf2:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004cf4:	78fb      	ldrb	r3, [r7, #3]
 8004cf6:	b2db      	uxtb	r3, r3
 8004cf8:	005b      	lsls	r3, r3, #1
 8004cfa:	b2db      	uxtb	r3, r3
 8004cfc:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004cfe:	78fb      	ldrb	r3, [r7, #3]
 8004d00:	b2db      	uxtb	r3, r3
 8004d02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d06:	2b80      	cmp	r3, #128	; 0x80
 8004d08:	d0ef      	beq.n	8004cea <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004d0a:	4b27      	ldr	r3, [pc, #156]	; (8004da8 <xPortStartScheduler+0x134>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f1c3 0307 	rsb	r3, r3, #7
 8004d12:	2b04      	cmp	r3, #4
 8004d14:	d00a      	beq.n	8004d2c <xPortStartScheduler+0xb8>
        __asm volatile
 8004d16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d1a:	f383 8811 	msr	BASEPRI, r3
 8004d1e:	f3bf 8f6f 	isb	sy
 8004d22:	f3bf 8f4f 	dsb	sy
 8004d26:	60bb      	str	r3, [r7, #8]
    }
 8004d28:	bf00      	nop
 8004d2a:	e7fe      	b.n	8004d2a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004d2c:	4b1e      	ldr	r3, [pc, #120]	; (8004da8 <xPortStartScheduler+0x134>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	021b      	lsls	r3, r3, #8
 8004d32:	4a1d      	ldr	r2, [pc, #116]	; (8004da8 <xPortStartScheduler+0x134>)
 8004d34:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004d36:	4b1c      	ldr	r3, [pc, #112]	; (8004da8 <xPortStartScheduler+0x134>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004d3e:	4a1a      	ldr	r2, [pc, #104]	; (8004da8 <xPortStartScheduler+0x134>)
 8004d40:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	b2da      	uxtb	r2, r3
 8004d46:	697b      	ldr	r3, [r7, #20]
 8004d48:	701a      	strb	r2, [r3, #0]
        }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8004d4a:	4b18      	ldr	r3, [pc, #96]	; (8004dac <xPortStartScheduler+0x138>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4a17      	ldr	r2, [pc, #92]	; (8004dac <xPortStartScheduler+0x138>)
 8004d50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004d54:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8004d56:	4b15      	ldr	r3, [pc, #84]	; (8004dac <xPortStartScheduler+0x138>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	4a14      	ldr	r2, [pc, #80]	; (8004dac <xPortStartScheduler+0x138>)
 8004d5c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004d60:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8004d62:	f000 f8db 	bl	8004f1c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8004d66:	4b12      	ldr	r3, [pc, #72]	; (8004db0 <xPortStartScheduler+0x13c>)
 8004d68:	2200      	movs	r2, #0
 8004d6a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8004d6c:	f000 f8fa 	bl	8004f64 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004d70:	4b10      	ldr	r3, [pc, #64]	; (8004db4 <xPortStartScheduler+0x140>)
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	4a0f      	ldr	r2, [pc, #60]	; (8004db4 <xPortStartScheduler+0x140>)
 8004d76:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004d7a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8004d7c:	f7ff ff64 	bl	8004c48 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8004d80:	f7ff f8f2 	bl	8003f68 <vTaskSwitchContext>
    prvTaskExitError();
 8004d84:	f7ff ff1c 	bl	8004bc0 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8004d88:	2300      	movs	r3, #0
}
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	3718      	adds	r7, #24
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	bd80      	pop	{r7, pc}
 8004d92:	bf00      	nop
 8004d94:	e000ed00 	.word	0xe000ed00
 8004d98:	410fc271 	.word	0x410fc271
 8004d9c:	410fc270 	.word	0x410fc270
 8004da0:	e000e400 	.word	0xe000e400
 8004da4:	20000270 	.word	0x20000270
 8004da8:	20000274 	.word	0x20000274
 8004dac:	e000ed20 	.word	0xe000ed20
 8004db0:	20000010 	.word	0x20000010
 8004db4:	e000ef34 	.word	0xe000ef34

08004db8 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004db8:	b480      	push	{r7}
 8004dba:	b083      	sub	sp, #12
 8004dbc:	af00      	add	r7, sp, #0
        __asm volatile
 8004dbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dc2:	f383 8811 	msr	BASEPRI, r3
 8004dc6:	f3bf 8f6f 	isb	sy
 8004dca:	f3bf 8f4f 	dsb	sy
 8004dce:	607b      	str	r3, [r7, #4]
    }
 8004dd0:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8004dd2:	4b0f      	ldr	r3, [pc, #60]	; (8004e10 <vPortEnterCritical+0x58>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	3301      	adds	r3, #1
 8004dd8:	4a0d      	ldr	r2, [pc, #52]	; (8004e10 <vPortEnterCritical+0x58>)
 8004dda:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8004ddc:	4b0c      	ldr	r3, [pc, #48]	; (8004e10 <vPortEnterCritical+0x58>)
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	2b01      	cmp	r3, #1
 8004de2:	d10f      	bne.n	8004e04 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004de4:	4b0b      	ldr	r3, [pc, #44]	; (8004e14 <vPortEnterCritical+0x5c>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	b2db      	uxtb	r3, r3
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d00a      	beq.n	8004e04 <vPortEnterCritical+0x4c>
        __asm volatile
 8004dee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004df2:	f383 8811 	msr	BASEPRI, r3
 8004df6:	f3bf 8f6f 	isb	sy
 8004dfa:	f3bf 8f4f 	dsb	sy
 8004dfe:	603b      	str	r3, [r7, #0]
    }
 8004e00:	bf00      	nop
 8004e02:	e7fe      	b.n	8004e02 <vPortEnterCritical+0x4a>
    }
}
 8004e04:	bf00      	nop
 8004e06:	370c      	adds	r7, #12
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0e:	4770      	bx	lr
 8004e10:	20000010 	.word	0x20000010
 8004e14:	e000ed04 	.word	0xe000ed04

08004e18 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004e18:	b480      	push	{r7}
 8004e1a:	b083      	sub	sp, #12
 8004e1c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8004e1e:	4b12      	ldr	r3, [pc, #72]	; (8004e68 <vPortExitCritical+0x50>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d10a      	bne.n	8004e3c <vPortExitCritical+0x24>
        __asm volatile
 8004e26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e2a:	f383 8811 	msr	BASEPRI, r3
 8004e2e:	f3bf 8f6f 	isb	sy
 8004e32:	f3bf 8f4f 	dsb	sy
 8004e36:	607b      	str	r3, [r7, #4]
    }
 8004e38:	bf00      	nop
 8004e3a:	e7fe      	b.n	8004e3a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8004e3c:	4b0a      	ldr	r3, [pc, #40]	; (8004e68 <vPortExitCritical+0x50>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	3b01      	subs	r3, #1
 8004e42:	4a09      	ldr	r2, [pc, #36]	; (8004e68 <vPortExitCritical+0x50>)
 8004e44:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8004e46:	4b08      	ldr	r3, [pc, #32]	; (8004e68 <vPortExitCritical+0x50>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d105      	bne.n	8004e5a <vPortExitCritical+0x42>
 8004e4e:	2300      	movs	r3, #0
 8004e50:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8004e58:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8004e5a:	bf00      	nop
 8004e5c:	370c      	adds	r7, #12
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e64:	4770      	bx	lr
 8004e66:	bf00      	nop
 8004e68:	20000010 	.word	0x20000010
 8004e6c:	00000000 	.word	0x00000000

08004e70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8004e70:	f3ef 8009 	mrs	r0, PSP
 8004e74:	f3bf 8f6f 	isb	sy
 8004e78:	4b15      	ldr	r3, [pc, #84]	; (8004ed0 <pxCurrentTCBConst>)
 8004e7a:	681a      	ldr	r2, [r3, #0]
 8004e7c:	f01e 0f10 	tst.w	lr, #16
 8004e80:	bf08      	it	eq
 8004e82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004e86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e8a:	6010      	str	r0, [r2, #0]
 8004e8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004e90:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004e94:	f380 8811 	msr	BASEPRI, r0
 8004e98:	f3bf 8f4f 	dsb	sy
 8004e9c:	f3bf 8f6f 	isb	sy
 8004ea0:	f7ff f862 	bl	8003f68 <vTaskSwitchContext>
 8004ea4:	f04f 0000 	mov.w	r0, #0
 8004ea8:	f380 8811 	msr	BASEPRI, r0
 8004eac:	bc09      	pop	{r0, r3}
 8004eae:	6819      	ldr	r1, [r3, #0]
 8004eb0:	6808      	ldr	r0, [r1, #0]
 8004eb2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004eb6:	f01e 0f10 	tst.w	lr, #16
 8004eba:	bf08      	it	eq
 8004ebc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004ec0:	f380 8809 	msr	PSP, r0
 8004ec4:	f3bf 8f6f 	isb	sy
 8004ec8:	4770      	bx	lr
 8004eca:	bf00      	nop
 8004ecc:	f3af 8000 	nop.w

08004ed0 <pxCurrentTCBConst>:
 8004ed0:	20000130 	.word	0x20000130
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8004ed4:	bf00      	nop
 8004ed6:	bf00      	nop

08004ed8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b082      	sub	sp, #8
 8004edc:	af00      	add	r7, sp, #0
        __asm volatile
 8004ede:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ee2:	f383 8811 	msr	BASEPRI, r3
 8004ee6:	f3bf 8f6f 	isb	sy
 8004eea:	f3bf 8f4f 	dsb	sy
 8004eee:	607b      	str	r3, [r7, #4]
    }
 8004ef0:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004ef2:	f7fe ff23 	bl	8003d3c <xTaskIncrementTick>
 8004ef6:	4603      	mov	r3, r0
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d003      	beq.n	8004f04 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004efc:	4b06      	ldr	r3, [pc, #24]	; (8004f18 <SysTick_Handler+0x40>)
 8004efe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f02:	601a      	str	r2, [r3, #0]
 8004f04:	2300      	movs	r3, #0
 8004f06:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	f383 8811 	msr	BASEPRI, r3
    }
 8004f0e:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8004f10:	bf00      	nop
 8004f12:	3708      	adds	r7, #8
 8004f14:	46bd      	mov	sp, r7
 8004f16:	bd80      	pop	{r7, pc}
 8004f18:	e000ed04 	.word	0xe000ed04

08004f1c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8004f1c:	b480      	push	{r7}
 8004f1e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004f20:	4b0b      	ldr	r3, [pc, #44]	; (8004f50 <vPortSetupTimerInterrupt+0x34>)
 8004f22:	2200      	movs	r2, #0
 8004f24:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004f26:	4b0b      	ldr	r3, [pc, #44]	; (8004f54 <vPortSetupTimerInterrupt+0x38>)
 8004f28:	2200      	movs	r2, #0
 8004f2a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004f2c:	4b0a      	ldr	r3, [pc, #40]	; (8004f58 <vPortSetupTimerInterrupt+0x3c>)
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4a0a      	ldr	r2, [pc, #40]	; (8004f5c <vPortSetupTimerInterrupt+0x40>)
 8004f32:	fba2 2303 	umull	r2, r3, r2, r3
 8004f36:	099b      	lsrs	r3, r3, #6
 8004f38:	4a09      	ldr	r2, [pc, #36]	; (8004f60 <vPortSetupTimerInterrupt+0x44>)
 8004f3a:	3b01      	subs	r3, #1
 8004f3c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004f3e:	4b04      	ldr	r3, [pc, #16]	; (8004f50 <vPortSetupTimerInterrupt+0x34>)
 8004f40:	2207      	movs	r2, #7
 8004f42:	601a      	str	r2, [r3, #0]
}
 8004f44:	bf00      	nop
 8004f46:	46bd      	mov	sp, r7
 8004f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4c:	4770      	bx	lr
 8004f4e:	bf00      	nop
 8004f50:	e000e010 	.word	0xe000e010
 8004f54:	e000e018 	.word	0xe000e018
 8004f58:	20000000 	.word	0x20000000
 8004f5c:	10624dd3 	.word	0x10624dd3
 8004f60:	e000e014 	.word	0xe000e014

08004f64 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8004f64:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004f74 <vPortEnableVFP+0x10>
 8004f68:	6801      	ldr	r1, [r0, #0]
 8004f6a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004f6e:	6001      	str	r1, [r0, #0]
 8004f70:	4770      	bx	lr
 8004f72:	0000      	.short	0x0000
 8004f74:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8004f78:	bf00      	nop
 8004f7a:	bf00      	nop

08004f7c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b08a      	sub	sp, #40	; 0x28
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8004f84:	2300      	movs	r3, #0
 8004f86:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8004f88:	f7fe fdbe 	bl	8003b08 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8004f8c:	4b65      	ldr	r3, [pc, #404]	; (8005124 <pvPortMalloc+0x1a8>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d101      	bne.n	8004f98 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8004f94:	f000 f934 	bl	8005200 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004f98:	4b63      	ldr	r3, [pc, #396]	; (8005128 <pvPortMalloc+0x1ac>)
 8004f9a:	681a      	ldr	r2, [r3, #0]
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	4013      	ands	r3, r2
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	f040 80a7 	bne.w	80050f4 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) &&
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d02d      	beq.n	8005008 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8004fac:	2208      	movs	r2, #8
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) &&
 8004fb2:	687a      	ldr	r2, [r7, #4]
 8004fb4:	429a      	cmp	r2, r3
 8004fb6:	d227      	bcs.n	8005008 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8004fb8:	2208      	movs	r2, #8
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	4413      	add	r3, r2
 8004fbe:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	f003 0307 	and.w	r3, r3, #7
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d021      	beq.n	800500e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) )
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	f023 0307 	bic.w	r3, r3, #7
 8004fd0:	3308      	adds	r3, #8
 8004fd2:	687a      	ldr	r2, [r7, #4]
 8004fd4:	429a      	cmp	r2, r3
 8004fd6:	d214      	bcs.n	8005002 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	f023 0307 	bic.w	r3, r3, #7
 8004fde:	3308      	adds	r3, #8
 8004fe0:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	f003 0307 	and.w	r3, r3, #7
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d010      	beq.n	800500e <pvPortMalloc+0x92>
        __asm volatile
 8004fec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ff0:	f383 8811 	msr	BASEPRI, r3
 8004ff4:	f3bf 8f6f 	isb	sy
 8004ff8:	f3bf 8f4f 	dsb	sy
 8004ffc:	617b      	str	r3, [r7, #20]
    }
 8004ffe:	bf00      	nop
 8005000:	e7fe      	b.n	8005000 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8005002:	2300      	movs	r3, #0
 8005004:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005006:	e002      	b.n	800500e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else
            {
                xWantedSize = 0;
 8005008:	2300      	movs	r3, #0
 800500a:	607b      	str	r3, [r7, #4]
 800500c:	e000      	b.n	8005010 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800500e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d06e      	beq.n	80050f4 <pvPortMalloc+0x178>
 8005016:	4b45      	ldr	r3, [pc, #276]	; (800512c <pvPortMalloc+0x1b0>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	687a      	ldr	r2, [r7, #4]
 800501c:	429a      	cmp	r2, r3
 800501e:	d869      	bhi.n	80050f4 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8005020:	4b43      	ldr	r3, [pc, #268]	; (8005130 <pvPortMalloc+0x1b4>)
 8005022:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8005024:	4b42      	ldr	r3, [pc, #264]	; (8005130 <pvPortMalloc+0x1b4>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800502a:	e004      	b.n	8005036 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 800502c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800502e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8005030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005038:	685b      	ldr	r3, [r3, #4]
 800503a:	687a      	ldr	r2, [r7, #4]
 800503c:	429a      	cmp	r2, r3
 800503e:	d903      	bls.n	8005048 <pvPortMalloc+0xcc>
 8005040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d1f1      	bne.n	800502c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8005048:	4b36      	ldr	r3, [pc, #216]	; (8005124 <pvPortMalloc+0x1a8>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800504e:	429a      	cmp	r2, r3
 8005050:	d050      	beq.n	80050f4 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005052:	6a3b      	ldr	r3, [r7, #32]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	2208      	movs	r2, #8
 8005058:	4413      	add	r3, r2
 800505a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800505c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800505e:	681a      	ldr	r2, [r3, #0]
 8005060:	6a3b      	ldr	r3, [r7, #32]
 8005062:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005066:	685a      	ldr	r2, [r3, #4]
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	1ad2      	subs	r2, r2, r3
 800506c:	2308      	movs	r3, #8
 800506e:	005b      	lsls	r3, r3, #1
 8005070:	429a      	cmp	r2, r3
 8005072:	d91f      	bls.n	80050b4 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005074:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	4413      	add	r3, r2
 800507a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800507c:	69bb      	ldr	r3, [r7, #24]
 800507e:	f003 0307 	and.w	r3, r3, #7
 8005082:	2b00      	cmp	r3, #0
 8005084:	d00a      	beq.n	800509c <pvPortMalloc+0x120>
        __asm volatile
 8005086:	f04f 0350 	mov.w	r3, #80	; 0x50
 800508a:	f383 8811 	msr	BASEPRI, r3
 800508e:	f3bf 8f6f 	isb	sy
 8005092:	f3bf 8f4f 	dsb	sy
 8005096:	613b      	str	r3, [r7, #16]
    }
 8005098:	bf00      	nop
 800509a:	e7fe      	b.n	800509a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800509c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800509e:	685a      	ldr	r2, [r3, #4]
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	1ad2      	subs	r2, r2, r3
 80050a4:	69bb      	ldr	r3, [r7, #24]
 80050a6:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80050a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050aa:	687a      	ldr	r2, [r7, #4]
 80050ac:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80050ae:	69b8      	ldr	r0, [r7, #24]
 80050b0:	f000 f908 	bl	80052c4 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80050b4:	4b1d      	ldr	r3, [pc, #116]	; (800512c <pvPortMalloc+0x1b0>)
 80050b6:	681a      	ldr	r2, [r3, #0]
 80050b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ba:	685b      	ldr	r3, [r3, #4]
 80050bc:	1ad3      	subs	r3, r2, r3
 80050be:	4a1b      	ldr	r2, [pc, #108]	; (800512c <pvPortMalloc+0x1b0>)
 80050c0:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80050c2:	4b1a      	ldr	r3, [pc, #104]	; (800512c <pvPortMalloc+0x1b0>)
 80050c4:	681a      	ldr	r2, [r3, #0]
 80050c6:	4b1b      	ldr	r3, [pc, #108]	; (8005134 <pvPortMalloc+0x1b8>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	429a      	cmp	r2, r3
 80050cc:	d203      	bcs.n	80050d6 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80050ce:	4b17      	ldr	r3, [pc, #92]	; (800512c <pvPortMalloc+0x1b0>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	4a18      	ldr	r2, [pc, #96]	; (8005134 <pvPortMalloc+0x1b8>)
 80050d4:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 80050d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050d8:	685a      	ldr	r2, [r3, #4]
 80050da:	4b13      	ldr	r3, [pc, #76]	; (8005128 <pvPortMalloc+0x1ac>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	431a      	orrs	r2, r3
 80050e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050e2:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80050e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050e6:	2200      	movs	r2, #0
 80050e8:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80050ea:	4b13      	ldr	r3, [pc, #76]	; (8005138 <pvPortMalloc+0x1bc>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	3301      	adds	r3, #1
 80050f0:	4a11      	ldr	r2, [pc, #68]	; (8005138 <pvPortMalloc+0x1bc>)
 80050f2:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80050f4:	f7fe fd16 	bl	8003b24 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80050f8:	69fb      	ldr	r3, [r7, #28]
 80050fa:	f003 0307 	and.w	r3, r3, #7
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d00a      	beq.n	8005118 <pvPortMalloc+0x19c>
        __asm volatile
 8005102:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005106:	f383 8811 	msr	BASEPRI, r3
 800510a:	f3bf 8f6f 	isb	sy
 800510e:	f3bf 8f4f 	dsb	sy
 8005112:	60fb      	str	r3, [r7, #12]
    }
 8005114:	bf00      	nop
 8005116:	e7fe      	b.n	8005116 <pvPortMalloc+0x19a>
    return pvReturn;
 8005118:	69fb      	ldr	r3, [r7, #28]
}
 800511a:	4618      	mov	r0, r3
 800511c:	3728      	adds	r7, #40	; 0x28
 800511e:	46bd      	mov	sp, r7
 8005120:	bd80      	pop	{r7, pc}
 8005122:	bf00      	nop
 8005124:	20012e80 	.word	0x20012e80
 8005128:	20012e94 	.word	0x20012e94
 800512c:	20012e84 	.word	0x20012e84
 8005130:	20012e78 	.word	0x20012e78
 8005134:	20012e88 	.word	0x20012e88
 8005138:	20012e8c 	.word	0x20012e8c

0800513c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800513c:	b580      	push	{r7, lr}
 800513e:	b086      	sub	sp, #24
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d04d      	beq.n	80051ea <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800514e:	2308      	movs	r3, #8
 8005150:	425b      	negs	r3, r3
 8005152:	697a      	ldr	r2, [r7, #20]
 8005154:	4413      	add	r3, r2
 8005156:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8005158:	697b      	ldr	r3, [r7, #20]
 800515a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800515c:	693b      	ldr	r3, [r7, #16]
 800515e:	685a      	ldr	r2, [r3, #4]
 8005160:	4b24      	ldr	r3, [pc, #144]	; (80051f4 <vPortFree+0xb8>)
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	4013      	ands	r3, r2
 8005166:	2b00      	cmp	r3, #0
 8005168:	d10a      	bne.n	8005180 <vPortFree+0x44>
        __asm volatile
 800516a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800516e:	f383 8811 	msr	BASEPRI, r3
 8005172:	f3bf 8f6f 	isb	sy
 8005176:	f3bf 8f4f 	dsb	sy
 800517a:	60fb      	str	r3, [r7, #12]
    }
 800517c:	bf00      	nop
 800517e:	e7fe      	b.n	800517e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005180:	693b      	ldr	r3, [r7, #16]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d00a      	beq.n	800519e <vPortFree+0x62>
        __asm volatile
 8005188:	f04f 0350 	mov.w	r3, #80	; 0x50
 800518c:	f383 8811 	msr	BASEPRI, r3
 8005190:	f3bf 8f6f 	isb	sy
 8005194:	f3bf 8f4f 	dsb	sy
 8005198:	60bb      	str	r3, [r7, #8]
    }
 800519a:	bf00      	nop
 800519c:	e7fe      	b.n	800519c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800519e:	693b      	ldr	r3, [r7, #16]
 80051a0:	685a      	ldr	r2, [r3, #4]
 80051a2:	4b14      	ldr	r3, [pc, #80]	; (80051f4 <vPortFree+0xb8>)
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4013      	ands	r3, r2
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d01e      	beq.n	80051ea <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80051ac:	693b      	ldr	r3, [r7, #16]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d11a      	bne.n	80051ea <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80051b4:	693b      	ldr	r3, [r7, #16]
 80051b6:	685a      	ldr	r2, [r3, #4]
 80051b8:	4b0e      	ldr	r3, [pc, #56]	; (80051f4 <vPortFree+0xb8>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	43db      	mvns	r3, r3
 80051be:	401a      	ands	r2, r3
 80051c0:	693b      	ldr	r3, [r7, #16]
 80051c2:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 80051c4:	f7fe fca0 	bl	8003b08 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80051c8:	693b      	ldr	r3, [r7, #16]
 80051ca:	685a      	ldr	r2, [r3, #4]
 80051cc:	4b0a      	ldr	r3, [pc, #40]	; (80051f8 <vPortFree+0xbc>)
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4413      	add	r3, r2
 80051d2:	4a09      	ldr	r2, [pc, #36]	; (80051f8 <vPortFree+0xbc>)
 80051d4:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80051d6:	6938      	ldr	r0, [r7, #16]
 80051d8:	f000 f874 	bl	80052c4 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80051dc:	4b07      	ldr	r3, [pc, #28]	; (80051fc <vPortFree+0xc0>)
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	3301      	adds	r3, #1
 80051e2:	4a06      	ldr	r2, [pc, #24]	; (80051fc <vPortFree+0xc0>)
 80051e4:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80051e6:	f7fe fc9d 	bl	8003b24 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80051ea:	bf00      	nop
 80051ec:	3718      	adds	r7, #24
 80051ee:	46bd      	mov	sp, r7
 80051f0:	bd80      	pop	{r7, pc}
 80051f2:	bf00      	nop
 80051f4:	20012e94 	.word	0x20012e94
 80051f8:	20012e84 	.word	0x20012e84
 80051fc:	20012e90 	.word	0x20012e90

08005200 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8005200:	b480      	push	{r7}
 8005202:	b085      	sub	sp, #20
 8005204:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005206:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 800520a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 800520c:	4b27      	ldr	r3, [pc, #156]	; (80052ac <prvHeapInit+0xac>)
 800520e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	f003 0307 	and.w	r3, r3, #7
 8005216:	2b00      	cmp	r3, #0
 8005218:	d00c      	beq.n	8005234 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	3307      	adds	r3, #7
 800521e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	f023 0307 	bic.w	r3, r3, #7
 8005226:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005228:	68ba      	ldr	r2, [r7, #8]
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	1ad3      	subs	r3, r2, r3
 800522e:	4a1f      	ldr	r2, [pc, #124]	; (80052ac <prvHeapInit+0xac>)
 8005230:	4413      	add	r3, r2
 8005232:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005238:	4a1d      	ldr	r2, [pc, #116]	; (80052b0 <prvHeapInit+0xb0>)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800523e:	4b1c      	ldr	r3, [pc, #112]	; (80052b0 <prvHeapInit+0xb0>)
 8005240:	2200      	movs	r2, #0
 8005242:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	68ba      	ldr	r2, [r7, #8]
 8005248:	4413      	add	r3, r2
 800524a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800524c:	2208      	movs	r2, #8
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	1a9b      	subs	r3, r3, r2
 8005252:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	f023 0307 	bic.w	r3, r3, #7
 800525a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	4a15      	ldr	r2, [pc, #84]	; (80052b4 <prvHeapInit+0xb4>)
 8005260:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8005262:	4b14      	ldr	r3, [pc, #80]	; (80052b4 <prvHeapInit+0xb4>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	2200      	movs	r2, #0
 8005268:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800526a:	4b12      	ldr	r3, [pc, #72]	; (80052b4 <prvHeapInit+0xb4>)
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	2200      	movs	r2, #0
 8005270:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	68fa      	ldr	r2, [r7, #12]
 800527a:	1ad2      	subs	r2, r2, r3
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005280:	4b0c      	ldr	r3, [pc, #48]	; (80052b4 <prvHeapInit+0xb4>)
 8005282:	681a      	ldr	r2, [r3, #0]
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	685b      	ldr	r3, [r3, #4]
 800528c:	4a0a      	ldr	r2, [pc, #40]	; (80052b8 <prvHeapInit+0xb8>)
 800528e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	685b      	ldr	r3, [r3, #4]
 8005294:	4a09      	ldr	r2, [pc, #36]	; (80052bc <prvHeapInit+0xbc>)
 8005296:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005298:	4b09      	ldr	r3, [pc, #36]	; (80052c0 <prvHeapInit+0xc0>)
 800529a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800529e:	601a      	str	r2, [r3, #0]
}
 80052a0:	bf00      	nop
 80052a2:	3714      	adds	r7, #20
 80052a4:	46bd      	mov	sp, r7
 80052a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052aa:	4770      	bx	lr
 80052ac:	20000278 	.word	0x20000278
 80052b0:	20012e78 	.word	0x20012e78
 80052b4:	20012e80 	.word	0x20012e80
 80052b8:	20012e88 	.word	0x20012e88
 80052bc:	20012e84 	.word	0x20012e84
 80052c0:	20012e94 	.word	0x20012e94

080052c4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80052c4:	b480      	push	{r7}
 80052c6:	b085      	sub	sp, #20
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80052cc:	4b28      	ldr	r3, [pc, #160]	; (8005370 <prvInsertBlockIntoFreeList+0xac>)
 80052ce:	60fb      	str	r3, [r7, #12]
 80052d0:	e002      	b.n	80052d8 <prvInsertBlockIntoFreeList+0x14>
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	60fb      	str	r3, [r7, #12]
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	687a      	ldr	r2, [r7, #4]
 80052de:	429a      	cmp	r2, r3
 80052e0:	d8f7      	bhi.n	80052d2 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	685b      	ldr	r3, [r3, #4]
 80052ea:	68ba      	ldr	r2, [r7, #8]
 80052ec:	4413      	add	r3, r2
 80052ee:	687a      	ldr	r2, [r7, #4]
 80052f0:	429a      	cmp	r2, r3
 80052f2:	d108      	bne.n	8005306 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	685a      	ldr	r2, [r3, #4]
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	685b      	ldr	r3, [r3, #4]
 80052fc:	441a      	add	r2, r3
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	685b      	ldr	r3, [r3, #4]
 800530e:	68ba      	ldr	r2, [r7, #8]
 8005310:	441a      	add	r2, r3
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	429a      	cmp	r2, r3
 8005318:	d118      	bne.n	800534c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681a      	ldr	r2, [r3, #0]
 800531e:	4b15      	ldr	r3, [pc, #84]	; (8005374 <prvInsertBlockIntoFreeList+0xb0>)
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	429a      	cmp	r2, r3
 8005324:	d00d      	beq.n	8005342 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	685a      	ldr	r2, [r3, #4]
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	685b      	ldr	r3, [r3, #4]
 8005330:	441a      	add	r2, r3
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	681a      	ldr	r2, [r3, #0]
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	601a      	str	r2, [r3, #0]
 8005340:	e008      	b.n	8005354 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005342:	4b0c      	ldr	r3, [pc, #48]	; (8005374 <prvInsertBlockIntoFreeList+0xb0>)
 8005344:	681a      	ldr	r2, [r3, #0]
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	601a      	str	r2, [r3, #0]
 800534a:	e003      	b.n	8005354 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681a      	ldr	r2, [r3, #0]
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8005354:	68fa      	ldr	r2, [r7, #12]
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	429a      	cmp	r2, r3
 800535a:	d002      	beq.n	8005362 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	687a      	ldr	r2, [r7, #4]
 8005360:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8005362:	bf00      	nop
 8005364:	3714      	adds	r7, #20
 8005366:	46bd      	mov	sp, r7
 8005368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536c:	4770      	bx	lr
 800536e:	bf00      	nop
 8005370:	20012e78 	.word	0x20012e78
 8005374:	20012e80 	.word	0x20012e80

08005378 <Lamp_pushSwitch>:
#endif
/*.$endskip${QP_VERSION} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^*/
/*.$define${LampSM} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv*/
/*.${LampSM::Lamp} .........................................................*/
/*.${LampSM::Lamp::pushSwitch} .............................................*/
void Lamp_pushSwitch(Lamp * const me) {
 8005378:	b580      	push	{r7, lr}
 800537a:	b084      	sub	sp, #16
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
    QEvt e;
    e.sig = (QSignal)SOFT_CLICK_SIG;
 8005380:	2304      	movs	r3, #4
 8005382:	81bb      	strh	r3, [r7, #12]
    QHSM_DISPATCH(&me->super, &e, 0 );
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	685b      	ldr	r3, [r3, #4]
 800538a:	6878      	ldr	r0, [r7, #4]
 800538c:	f107 010c 	add.w	r1, r7, #12
 8005390:	2200      	movs	r2, #0
 8005392:	4798      	blx	r3
}
 8005394:	bf00      	nop
 8005396:	3710      	adds	r7, #16
 8005398:	46bd      	mov	sp, r7
 800539a:	bd80      	pop	{r7, pc}

0800539c <Lamp_ctor>:

/*.${LampSM::Lamp::ctor} ...................................................*/
void Lamp_ctor(Lamp * const me) {
 800539c:	b580      	push	{r7, lr}
 800539e:	b082      	sub	sp, #8
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
    QHsm_ctor(&me->super, Q_STATE_CAST(&Lamp_initial));
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	4904      	ldr	r1, [pc, #16]	; (80053b8 <Lamp_ctor+0x1c>)
 80053a8:	4618      	mov	r0, r3
 80053aa:	f000 f93b 	bl	8005624 <QHsm_ctor>
}
 80053ae:	bf00      	nop
 80053b0:	3708      	adds	r7, #8
 80053b2:	46bd      	mov	sp, r7
 80053b4:	bd80      	pop	{r7, pc}
 80053b6:	bf00      	nop
 80053b8:	08005405 	.word	0x08005405

080053bc <Lamp_holdSwitch>:

/*.${LampSM::Lamp::holdSwitch} .............................................*/
void Lamp_holdSwitch(Lamp * const me) {
 80053bc:	b580      	push	{r7, lr}
 80053be:	b084      	sub	sp, #16
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
    QEvt e;
    e.sig = (QSignal)HARD_CLICK_SIG;
 80053c4:	2305      	movs	r3, #5
 80053c6:	81bb      	strh	r3, [r7, #12]
    QHSM_DISPATCH(&me->super, &e, 0 );
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	685b      	ldr	r3, [r3, #4]
 80053ce:	6878      	ldr	r0, [r7, #4]
 80053d0:	f107 010c 	add.w	r1, r7, #12
 80053d4:	2200      	movs	r2, #0
 80053d6:	4798      	blx	r3
}
 80053d8:	bf00      	nop
 80053da:	3710      	adds	r7, #16
 80053dc:	46bd      	mov	sp, r7
 80053de:	bd80      	pop	{r7, pc}

080053e0 <Lamp_blink>:

/*.${LampSM::Lamp::blink} ..................................................*/
void Lamp_blink(Lamp * const me) {
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b084      	sub	sp, #16
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
        QEvt e;
        e.sig = (QSignal)BLINK_SIG;
 80053e8:	2306      	movs	r3, #6
 80053ea:	81bb      	strh	r3, [r7, #12]
        QHSM_DISPATCH(&me->super, &e, 0 );
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	685b      	ldr	r3, [r3, #4]
 80053f2:	6878      	ldr	r0, [r7, #4]
 80053f4:	f107 010c 	add.w	r1, r7, #12
 80053f8:	2200      	movs	r2, #0
 80053fa:	4798      	blx	r3
}
 80053fc:	bf00      	nop
 80053fe:	3710      	adds	r7, #16
 8005400:	46bd      	mov	sp, r7
 8005402:	bd80      	pop	{r7, pc}

08005404 <Lamp_initial>:

/*.${LampSM::Lamp::SM} .....................................................*/
QState Lamp_initial(Lamp * const me, void const * const par) {
 8005404:	b480      	push	{r7}
 8005406:	b083      	sub	sp, #12
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
 800540c:	6039      	str	r1, [r7, #0]
    /*.${LampSM::Lamp::SM::initial} */
    /* state history attributes */
    me->hist_LED_RED = Q_STATE_CAST(&Lamp_RED_BLINK);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	4a07      	ldr	r2, [pc, #28]	; (8005430 <Lamp_initial+0x2c>)
 8005412:	611a      	str	r2, [r3, #16]
    me->hist_LED_GREEN = Q_STATE_CAST(&Lamp_GREEN_BLINK);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	4a07      	ldr	r2, [pc, #28]	; (8005434 <Lamp_initial+0x30>)
 8005418:	615a      	str	r2, [r3, #20]
    return Q_TRAN(&Lamp_LED_RED);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	4a06      	ldr	r2, [pc, #24]	; (8005438 <Lamp_initial+0x34>)
 800541e:	609a      	str	r2, [r3, #8]
 8005420:	2308      	movs	r3, #8
}
 8005422:	4618      	mov	r0, r3
 8005424:	370c      	adds	r7, #12
 8005426:	46bd      	mov	sp, r7
 8005428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542c:	4770      	bx	lr
 800542e:	bf00      	nop
 8005430:	080054c5 	.word	0x080054c5
 8005434:	080055ad 	.word	0x080055ad
 8005438:	0800543d 	.word	0x0800543d

0800543c <Lamp_LED_RED>:
/*.${LampSM::Lamp::SM::LED_RED} ............................................*/
QState Lamp_LED_RED(Lamp * const me, QEvt const * const e) {
 800543c:	b580      	push	{r7, lr}
 800543e:	b084      	sub	sp, #16
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
 8005444:	6039      	str	r1, [r7, #0]
    QState status_;
    switch (e->sig) {
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	881b      	ldrh	r3, [r3, #0]
 800544a:	3b01      	subs	r3, #1
 800544c:	2b04      	cmp	r3, #4
 800544e:	d82a      	bhi.n	80054a6 <Lamp_LED_RED+0x6a>
 8005450:	a201      	add	r2, pc, #4	; (adr r2, 8005458 <Lamp_LED_RED+0x1c>)
 8005452:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005456:	bf00      	nop
 8005458:	0800546d 	.word	0x0800546d
 800545c:	08005477 	.word	0x08005477
 8005460:	080054a7 	.word	0x080054a7
 8005464:	0800548d 	.word	0x0800548d
 8005468:	0800549b 	.word	0x0800549b
        /*.${LampSM::Lamp::SM::LED_RED} */
        case Q_ENTRY_SIG: {
            APP_RED_LED_ON();
 800546c:	f7fb fa5e 	bl	800092c <APP_RED_LED_ON>
            status_ = Q_HANDLED();
 8005470:	2303      	movs	r3, #3
 8005472:	73fb      	strb	r3, [r7, #15]
            break;
 8005474:	e01d      	b.n	80054b2 <Lamp_LED_RED+0x76>
        }
        /*.${LampSM::Lamp::SM::LED_RED} */
        case Q_EXIT_SIG: {
            APP_RED_LED_OFF();
 8005476:	f7fb fa6d 	bl	8000954 <APP_RED_LED_OFF>
            /* save deep history */
            me->hist_LED_RED = QHsm_state(Q_HSM_UPCAST(me));
 800547a:	6878      	ldr	r0, [r7, #4]
 800547c:	f000 f8c6 	bl	800560c <QHsm_state>
 8005480:	4602      	mov	r2, r0
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	611a      	str	r2, [r3, #16]
            status_ = Q_HANDLED();
 8005486:	2303      	movs	r3, #3
 8005488:	73fb      	strb	r3, [r7, #15]
            break;
 800548a:	e012      	b.n	80054b2 <Lamp_LED_RED+0x76>
        }
        /*.${LampSM::Lamp::SM::LED_RED::SOFT_CLICK} */
        case SOFT_CLICK_SIG: {
            status_ = Q_TRAN_HIST(me->hist_LED_GREEN);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	695a      	ldr	r2, [r3, #20]
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	609a      	str	r2, [r3, #8]
 8005494:	230b      	movs	r3, #11
 8005496:	73fb      	strb	r3, [r7, #15]
            break;
 8005498:	e00b      	b.n	80054b2 <Lamp_LED_RED+0x76>
        }
        /*.${LampSM::Lamp::SM::LED_RED::HARD_CLICK} */
        case HARD_CLICK_SIG: {
            status_ = Q_TRAN(&Lamp_RED_BLINK);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	4a07      	ldr	r2, [pc, #28]	; (80054bc <Lamp_LED_RED+0x80>)
 800549e:	609a      	str	r2, [r3, #8]
 80054a0:	2308      	movs	r3, #8
 80054a2:	73fb      	strb	r3, [r7, #15]
            break;
 80054a4:	e005      	b.n	80054b2 <Lamp_LED_RED+0x76>
        }
        default: {
            status_ = Q_SUPER(&QHsm_top);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	4a05      	ldr	r2, [pc, #20]	; (80054c0 <Lamp_LED_RED+0x84>)
 80054aa:	609a      	str	r2, [r3, #8]
 80054ac:	2300      	movs	r3, #0
 80054ae:	73fb      	strb	r3, [r7, #15]
            break;
 80054b0:	bf00      	nop
        }
    }
    return status_;
 80054b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80054b4:	4618      	mov	r0, r3
 80054b6:	3710      	adds	r7, #16
 80054b8:	46bd      	mov	sp, r7
 80054ba:	bd80      	pop	{r7, pc}
 80054bc:	080054c5 	.word	0x080054c5
 80054c0:	08005655 	.word	0x08005655

080054c4 <Lamp_RED_BLINK>:
/*.${LampSM::Lamp::SM::LED_RED::RED_BLINK} .................................*/
QState Lamp_RED_BLINK(Lamp * const me, QEvt const * const e) {
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b084      	sub	sp, #16
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
 80054cc:	6039      	str	r1, [r7, #0]
    QState status_;
    switch (e->sig) {
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	881b      	ldrh	r3, [r3, #0]
 80054d2:	2b06      	cmp	r3, #6
 80054d4:	d013      	beq.n	80054fe <Lamp_RED_BLINK+0x3a>
 80054d6:	2b06      	cmp	r3, #6
 80054d8:	dc16      	bgt.n	8005508 <Lamp_RED_BLINK+0x44>
 80054da:	2b04      	cmp	r3, #4
 80054dc:	d002      	beq.n	80054e4 <Lamp_RED_BLINK+0x20>
 80054de:	2b05      	cmp	r3, #5
 80054e0:	d007      	beq.n	80054f2 <Lamp_RED_BLINK+0x2e>
 80054e2:	e011      	b.n	8005508 <Lamp_RED_BLINK+0x44>
        /*.${LampSM::Lamp::SM::LED_RED::RED_BLINK::SOFT_CLICK} */
        case SOFT_CLICK_SIG: {
            status_ = Q_TRAN_HIST(me->hist_LED_GREEN);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	695a      	ldr	r2, [r3, #20]
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	609a      	str	r2, [r3, #8]
 80054ec:	230b      	movs	r3, #11
 80054ee:	73fb      	strb	r3, [r7, #15]
            break;
 80054f0:	e010      	b.n	8005514 <Lamp_RED_BLINK+0x50>
        }
        /*.${LampSM::Lamp::SM::LED_RED::RED_BLINK::HARD_CLICK} */
        case HARD_CLICK_SIG: {
            status_ = Q_TRAN(&Lamp_LED_RED);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	4a0a      	ldr	r2, [pc, #40]	; (8005520 <Lamp_RED_BLINK+0x5c>)
 80054f6:	609a      	str	r2, [r3, #8]
 80054f8:	2308      	movs	r3, #8
 80054fa:	73fb      	strb	r3, [r7, #15]
            break;
 80054fc:	e00a      	b.n	8005514 <Lamp_RED_BLINK+0x50>
        }
        /*.${LampSM::Lamp::SM::LED_RED::RED_BLINK::BLINK} */
        case BLINK_SIG: {
            APP_RED_LED_BLINK();
 80054fe:	f7fb fa3d 	bl	800097c <APP_RED_LED_BLINK>
            status_ = Q_HANDLED();
 8005502:	2303      	movs	r3, #3
 8005504:	73fb      	strb	r3, [r7, #15]
            break;
 8005506:	e005      	b.n	8005514 <Lamp_RED_BLINK+0x50>
        }
        default: {
            status_ = Q_SUPER(&Lamp_LED_RED);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	4a05      	ldr	r2, [pc, #20]	; (8005520 <Lamp_RED_BLINK+0x5c>)
 800550c:	609a      	str	r2, [r3, #8]
 800550e:	2300      	movs	r3, #0
 8005510:	73fb      	strb	r3, [r7, #15]
            break;
 8005512:	bf00      	nop
        }
    }
    return status_;
 8005514:	7bfb      	ldrb	r3, [r7, #15]
}
 8005516:	4618      	mov	r0, r3
 8005518:	3710      	adds	r7, #16
 800551a:	46bd      	mov	sp, r7
 800551c:	bd80      	pop	{r7, pc}
 800551e:	bf00      	nop
 8005520:	0800543d 	.word	0x0800543d

08005524 <Lamp_LED_GREEN>:
/*.${LampSM::Lamp::SM::LED_GREEN} ..........................................*/
QState Lamp_LED_GREEN(Lamp * const me, QEvt const * const e) {
 8005524:	b580      	push	{r7, lr}
 8005526:	b084      	sub	sp, #16
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
 800552c:	6039      	str	r1, [r7, #0]
    QState status_;
    switch (e->sig) {
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	881b      	ldrh	r3, [r3, #0]
 8005532:	3b01      	subs	r3, #1
 8005534:	2b04      	cmp	r3, #4
 8005536:	d82a      	bhi.n	800558e <Lamp_LED_GREEN+0x6a>
 8005538:	a201      	add	r2, pc, #4	; (adr r2, 8005540 <Lamp_LED_GREEN+0x1c>)
 800553a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800553e:	bf00      	nop
 8005540:	08005555 	.word	0x08005555
 8005544:	0800555f 	.word	0x0800555f
 8005548:	0800558f 	.word	0x0800558f
 800554c:	08005575 	.word	0x08005575
 8005550:	08005583 	.word	0x08005583
        /*.${LampSM::Lamp::SM::LED_GREEN} */
        case Q_ENTRY_SIG: {
            APP_GREEN_LED_ON();
 8005554:	f7fb f9a6 	bl	80008a4 <APP_GREEN_LED_ON>
            status_ = Q_HANDLED();
 8005558:	2303      	movs	r3, #3
 800555a:	73fb      	strb	r3, [r7, #15]
            break;
 800555c:	e01d      	b.n	800559a <Lamp_LED_GREEN+0x76>
        }
        /*.${LampSM::Lamp::SM::LED_GREEN} */
        case Q_EXIT_SIG: {
            APP_GREEN_LED_OFF();
 800555e:	f7fb f9b9 	bl	80008d4 <APP_GREEN_LED_OFF>
            /* save deep history */
            me->hist_LED_GREEN = QHsm_state(Q_HSM_UPCAST(me));
 8005562:	6878      	ldr	r0, [r7, #4]
 8005564:	f000 f852 	bl	800560c <QHsm_state>
 8005568:	4602      	mov	r2, r0
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	615a      	str	r2, [r3, #20]
            status_ = Q_HANDLED();
 800556e:	2303      	movs	r3, #3
 8005570:	73fb      	strb	r3, [r7, #15]
            break;
 8005572:	e012      	b.n	800559a <Lamp_LED_GREEN+0x76>
        }
        /*.${LampSM::Lamp::SM::LED_GREEN::SOFT_CLICK} */
        case SOFT_CLICK_SIG: {
            status_ = Q_TRAN_HIST(me->hist_LED_RED);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	691a      	ldr	r2, [r3, #16]
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	609a      	str	r2, [r3, #8]
 800557c:	230b      	movs	r3, #11
 800557e:	73fb      	strb	r3, [r7, #15]
            break;
 8005580:	e00b      	b.n	800559a <Lamp_LED_GREEN+0x76>
        }
        /*.${LampSM::Lamp::SM::LED_GREEN::HARD_CLICK} */
        case HARD_CLICK_SIG: {
            status_ = Q_TRAN(&Lamp_GREEN_BLINK);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	4a07      	ldr	r2, [pc, #28]	; (80055a4 <Lamp_LED_GREEN+0x80>)
 8005586:	609a      	str	r2, [r3, #8]
 8005588:	2308      	movs	r3, #8
 800558a:	73fb      	strb	r3, [r7, #15]
            break;
 800558c:	e005      	b.n	800559a <Lamp_LED_GREEN+0x76>
        }
        default: {
            status_ = Q_SUPER(&QHsm_top);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	4a05      	ldr	r2, [pc, #20]	; (80055a8 <Lamp_LED_GREEN+0x84>)
 8005592:	609a      	str	r2, [r3, #8]
 8005594:	2300      	movs	r3, #0
 8005596:	73fb      	strb	r3, [r7, #15]
            break;
 8005598:	bf00      	nop
        }
    }
    return status_;
 800559a:	7bfb      	ldrb	r3, [r7, #15]
}
 800559c:	4618      	mov	r0, r3
 800559e:	3710      	adds	r7, #16
 80055a0:	46bd      	mov	sp, r7
 80055a2:	bd80      	pop	{r7, pc}
 80055a4:	080055ad 	.word	0x080055ad
 80055a8:	08005655 	.word	0x08005655

080055ac <Lamp_GREEN_BLINK>:
/*.${LampSM::Lamp::SM::LED_GREEN::GREEN_BLINK} .............................*/
QState Lamp_GREEN_BLINK(Lamp * const me, QEvt const * const e) {
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b084      	sub	sp, #16
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
 80055b4:	6039      	str	r1, [r7, #0]
    QState status_;
    switch (e->sig) {
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	881b      	ldrh	r3, [r3, #0]
 80055ba:	2b06      	cmp	r3, #6
 80055bc:	d006      	beq.n	80055cc <Lamp_GREEN_BLINK+0x20>
 80055be:	2b06      	cmp	r3, #6
 80055c0:	dc16      	bgt.n	80055f0 <Lamp_GREEN_BLINK+0x44>
 80055c2:	2b04      	cmp	r3, #4
 80055c4:	d00d      	beq.n	80055e2 <Lamp_GREEN_BLINK+0x36>
 80055c6:	2b05      	cmp	r3, #5
 80055c8:	d005      	beq.n	80055d6 <Lamp_GREEN_BLINK+0x2a>
 80055ca:	e011      	b.n	80055f0 <Lamp_GREEN_BLINK+0x44>
        /*.${LampSM::Lamp::SM::LED_GREEN::GREEN_BLINK::BLINK} */
        case BLINK_SIG: {
            APP_GREEN_LED_BLINK();
 80055cc:	f7fb f996 	bl	80008fc <APP_GREEN_LED_BLINK>
            status_ = Q_HANDLED();
 80055d0:	2303      	movs	r3, #3
 80055d2:	73fb      	strb	r3, [r7, #15]
            break;
 80055d4:	e012      	b.n	80055fc <Lamp_GREEN_BLINK+0x50>
        }
        /*.${LampSM::Lamp::SM::LED_GREEN::GREEN_BLINK::HARD_CLICK} */
        case HARD_CLICK_SIG: {
            status_ = Q_TRAN(&Lamp_LED_GREEN);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	4a0b      	ldr	r2, [pc, #44]	; (8005608 <Lamp_GREEN_BLINK+0x5c>)
 80055da:	609a      	str	r2, [r3, #8]
 80055dc:	2308      	movs	r3, #8
 80055de:	73fb      	strb	r3, [r7, #15]
            break;
 80055e0:	e00c      	b.n	80055fc <Lamp_GREEN_BLINK+0x50>
        }
        /*.${LampSM::Lamp::SM::LED_GREEN::GREEN_BLINK::SOFT_CLICK} */
        case SOFT_CLICK_SIG: {
            status_ = Q_TRAN_HIST(me->hist_LED_RED);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	691a      	ldr	r2, [r3, #16]
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	609a      	str	r2, [r3, #8]
 80055ea:	230b      	movs	r3, #11
 80055ec:	73fb      	strb	r3, [r7, #15]
            break;
 80055ee:	e005      	b.n	80055fc <Lamp_GREEN_BLINK+0x50>
        }
        default: {
            status_ = Q_SUPER(&Lamp_LED_GREEN);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	4a05      	ldr	r2, [pc, #20]	; (8005608 <Lamp_GREEN_BLINK+0x5c>)
 80055f4:	609a      	str	r2, [r3, #8]
 80055f6:	2300      	movs	r3, #0
 80055f8:	73fb      	strb	r3, [r7, #15]
            break;
 80055fa:	bf00      	nop
        }
    }
    return status_;
 80055fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80055fe:	4618      	mov	r0, r3
 8005600:	3710      	adds	r7, #16
 8005602:	46bd      	mov	sp, r7
 8005604:	bd80      	pop	{r7, pc}
 8005606:	bf00      	nop
 8005608:	08005525 	.word	0x08005525

0800560c <QHsm_state>:

    return inState; /* return the status */
}

/*${QEP::QHsm::state} ......................................................*/
QStateHandler QHsm_state(QHsm * const me) {
 800560c:	b480      	push	{r7}
 800560e:	b083      	sub	sp, #12
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
    return Q_STATE_CAST(me->state.fun);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	685b      	ldr	r3, [r3, #4]
}
 8005618:	4618      	mov	r0, r3
 800561a:	370c      	adds	r7, #12
 800561c:	46bd      	mov	sp, r7
 800561e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005622:	4770      	bx	lr

08005624 <QHsm_ctor>:
}

/*${QEP::QHsm::ctor} .......................................................*/
void QHsm_ctor(QHsm * const me,
    QStateHandler initial)
{
 8005624:	b480      	push	{r7}
 8005626:	b083      	sub	sp, #12
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
 800562c:	6039      	str	r1, [r7, #0]
        &QHsm_dispatch_
    #ifdef Q_SPY
        ,&QHsm_getStateHandler_
    #endif
    };
    me->vptr      = &vtable;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	4a06      	ldr	r2, [pc, #24]	; (800564c <QHsm_ctor+0x28>)
 8005632:	601a      	str	r2, [r3, #0]
    me->state.fun = Q_STATE_CAST(&QHsm_top);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	4a06      	ldr	r2, [pc, #24]	; (8005650 <QHsm_ctor+0x2c>)
 8005638:	605a      	str	r2, [r3, #4]
    me->temp.fun  = initial;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	683a      	ldr	r2, [r7, #0]
 800563e:	609a      	str	r2, [r3, #8]
}
 8005640:	bf00      	nop
 8005642:	370c      	adds	r7, #12
 8005644:	46bd      	mov	sp, r7
 8005646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564a:	4770      	bx	lr
 800564c:	08005ca4 	.word	0x08005ca4
 8005650:	08005655 	.word	0x08005655

08005654 <QHsm_top>:

/*${QEP::QHsm::top} ........................................................*/
QState QHsm_top(QHsm const * const me,
    QEvt const * const e)
{
 8005654:	b480      	push	{r7}
 8005656:	b083      	sub	sp, #12
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
 800565c:	6039      	str	r1, [r7, #0]
    Q_UNUSED_PAR(me);
    Q_UNUSED_PAR(e);
    return Q_RET_IGNORED; /* the top state ignores all events */
 800565e:	2304      	movs	r3, #4
}
 8005660:	4618      	mov	r0, r3
 8005662:	370c      	adds	r7, #12
 8005664:	46bd      	mov	sp, r7
 8005666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566a:	4770      	bx	lr

0800566c <QHsm_init_>:

/*${QEP::QHsm::init_} ......................................................*/
void QHsm_init_(QHsm * const me,
    void const * const e,
    uint_fast8_t const qs_id)
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b08e      	sub	sp, #56	; 0x38
 8005670:	af00      	add	r7, sp, #0
 8005672:	60f8      	str	r0, [r7, #12]
 8005674:	60b9      	str	r1, [r7, #8]
 8005676:	607a      	str	r2, [r7, #4]
    #ifndef Q_SPY
    (void)qs_id; /* unused parameter */
    #endif

    QStateHandler t = me->state.fun;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	685b      	ldr	r3, [r3, #4]
 800567c:	637b      	str	r3, [r7, #52]	; 0x34

    /*! @pre the virtual pointer must be initialized, the top-most initial
    * transition must be initialized, and the initial transition must not
    * be taken yet.
    */
    Q_REQUIRE_ID(200, (me->vptr != (struct QHsmVtable *)0)
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d007      	beq.n	8005696 <QHsm_init_+0x2a>
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	689b      	ldr	r3, [r3, #8]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d003      	beq.n	8005696 <QHsm_init_+0x2a>
 800568e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005690:	4a33      	ldr	r2, [pc, #204]	; (8005760 <QHsm_init_+0xf4>)
 8005692:	4293      	cmp	r3, r2
 8005694:	d003      	beq.n	800569e <QHsm_init_+0x32>
 8005696:	21c8      	movs	r1, #200	; 0xc8
 8005698:	4832      	ldr	r0, [pc, #200]	; (8005764 <QHsm_init_+0xf8>)
 800569a:	f7fb fca9 	bl	8000ff0 <Q_onAssert>
                      && (me->temp.fun != Q_STATE_CAST(0))
                      && (t == Q_STATE_CAST(&QHsm_top)));

    /* execute the top-most initial tran. */
    QState r = (*me->temp.fun)(me, Q_EVT_CAST(QEvt));
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	689b      	ldr	r3, [r3, #8]
 80056a2:	68b9      	ldr	r1, [r7, #8]
 80056a4:	68f8      	ldr	r0, [r7, #12]
 80056a6:	4798      	blx	r3
 80056a8:	4603      	mov	r3, r0
 80056aa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* the top-most initial transition must be taken */
    Q_ASSERT_ID(210, r == Q_RET_TRAN);
 80056ae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80056b2:	2b08      	cmp	r3, #8
 80056b4:	d003      	beq.n	80056be <QHsm_init_+0x52>
 80056b6:	21d2      	movs	r1, #210	; 0xd2
 80056b8:	482a      	ldr	r0, [pc, #168]	; (8005764 <QHsm_init_+0xf8>)
 80056ba:	f7fb fc99 	bl	8000ff0 <Q_onAssert>
    QS_END_PRE_()

    /* drill down into the state hierarchy with initial transitions... */
    do {
        QStateHandler path[QHSM_MAX_NEST_DEPTH_]; /* tran entry path array */
        int_fast8_t ip = 0; /* tran entry path index */
 80056be:	2300      	movs	r3, #0
 80056c0:	633b      	str	r3, [r7, #48]	; 0x30

        path[0] = me->temp.fun;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	689b      	ldr	r3, [r3, #8]
 80056c6:	617b      	str	r3, [r7, #20]
        (void)QEP_TRIG_(me->temp.fun, QEP_EMPTY_SIG_);
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	689b      	ldr	r3, [r3, #8]
 80056cc:	4926      	ldr	r1, [pc, #152]	; (8005768 <QHsm_init_+0xfc>)
 80056ce:	68f8      	ldr	r0, [r7, #12]
 80056d0:	4798      	blx	r3
        while (me->temp.fun != t) {
 80056d2:	e016      	b.n	8005702 <QHsm_init_+0x96>
            ++ip;
 80056d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056d6:	3301      	adds	r3, #1
 80056d8:	633b      	str	r3, [r7, #48]	; 0x30
            Q_ASSERT_ID(220, ip < QHSM_MAX_NEST_DEPTH_);
 80056da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056dc:	2b05      	cmp	r3, #5
 80056de:	dd03      	ble.n	80056e8 <QHsm_init_+0x7c>
 80056e0:	21dc      	movs	r1, #220	; 0xdc
 80056e2:	4820      	ldr	r0, [pc, #128]	; (8005764 <QHsm_init_+0xf8>)
 80056e4:	f7fb fc84 	bl	8000ff0 <Q_onAssert>
            path[ip] = me->temp.fun;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	689a      	ldr	r2, [r3, #8]
 80056ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056ee:	009b      	lsls	r3, r3, #2
 80056f0:	3338      	adds	r3, #56	; 0x38
 80056f2:	443b      	add	r3, r7
 80056f4:	f843 2c24 	str.w	r2, [r3, #-36]
            (void)QEP_TRIG_(me->temp.fun, QEP_EMPTY_SIG_);
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	689b      	ldr	r3, [r3, #8]
 80056fc:	491a      	ldr	r1, [pc, #104]	; (8005768 <QHsm_init_+0xfc>)
 80056fe:	68f8      	ldr	r0, [r7, #12]
 8005700:	4798      	blx	r3
        while (me->temp.fun != t) {
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	689b      	ldr	r3, [r3, #8]
 8005706:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005708:	429a      	cmp	r2, r3
 800570a:	d1e3      	bne.n	80056d4 <QHsm_init_+0x68>
        }
        me->temp.fun = path[0];
 800570c:	697a      	ldr	r2, [r7, #20]
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	609a      	str	r2, [r3, #8]

        /* nested initial transition, drill into the target hierarchy... */
        do {
            QEP_ENTER_(path[ip], qs_id); /* enter path[ip] */
 8005712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005714:	009b      	lsls	r3, r3, #2
 8005716:	3338      	adds	r3, #56	; 0x38
 8005718:	443b      	add	r3, r7
 800571a:	f853 3c24 	ldr.w	r3, [r3, #-36]
 800571e:	4913      	ldr	r1, [pc, #76]	; (800576c <QHsm_init_+0x100>)
 8005720:	68f8      	ldr	r0, [r7, #12]
 8005722:	4798      	blx	r3
            --ip;
 8005724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005726:	3b01      	subs	r3, #1
 8005728:	633b      	str	r3, [r7, #48]	; 0x30
        } while (ip >= 0);
 800572a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800572c:	2b00      	cmp	r3, #0
 800572e:	daf0      	bge.n	8005712 <QHsm_init_+0xa6>

        t = path[0]; /* current state becomes the new source */
 8005730:	697b      	ldr	r3, [r7, #20]
 8005732:	637b      	str	r3, [r7, #52]	; 0x34

        r = QEP_TRIG_(t, Q_INIT_SIG); /* execute initial transition */
 8005734:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005736:	490e      	ldr	r1, [pc, #56]	; (8005770 <QHsm_init_+0x104>)
 8005738:	68f8      	ldr	r0, [r7, #12]
 800573a:	4798      	blx	r3
 800573c:	4603      	mov	r3, r0
 800573e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                QS_FUN_PRE_(me->temp.fun); /* target of the initial tran. */
            QS_END_PRE_()
        }
    #endif /* Q_SPY */

    } while (r == Q_RET_TRAN);
 8005742:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005746:	2b08      	cmp	r3, #8
 8005748:	d0b9      	beq.n	80056be <QHsm_init_+0x52>
        QS_TIME_PRE_();    /* time stamp */
        QS_OBJ_PRE_(me);   /* this state machine object */
        QS_FUN_PRE_(t);    /* the new active state */
    QS_END_PRE_()

    me->state.fun = t; /* change the current active state */
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800574e:	605a      	str	r2, [r3, #4]
    me->temp.fun  = t; /* mark the configuration as stable */
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005754:	609a      	str	r2, [r3, #8]
}
 8005756:	bf00      	nop
 8005758:	3738      	adds	r7, #56	; 0x38
 800575a:	46bd      	mov	sp, r7
 800575c:	bd80      	pop	{r7, pc}
 800575e:	bf00      	nop
 8005760:	08005655 	.word	0x08005655
 8005764:	08005c8c 	.word	0x08005c8c
 8005768:	08005c94 	.word	0x08005c94
 800576c:	08005c98 	.word	0x08005c98
 8005770:	08005ca0 	.word	0x08005ca0

08005774 <QHsm_dispatch_>:

/*${QEP::QHsm::dispatch_} ..................................................*/
void QHsm_dispatch_(QHsm * const me,
    QEvt const * const e,
    uint_fast8_t const qs_id)
{
 8005774:	b580      	push	{r7, lr}
 8005776:	b08e      	sub	sp, #56	; 0x38
 8005778:	af00      	add	r7, sp, #0
 800577a:	60f8      	str	r0, [r7, #12]
 800577c:	60b9      	str	r1, [r7, #8]
 800577e:	607a      	str	r2, [r7, #4]
    Q_UNUSED_PAR(qs_id); /* unused when Q_SPY undefined */

    QStateHandler t = me->state.fun;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	685b      	ldr	r3, [r3, #4]
 8005784:	637b      	str	r3, [r7, #52]	; 0x34
    QS_CRIT_STAT_

    /*! @pre the current state must be initialized and
    * the state configuration must be stable
    */
    Q_REQUIRE_ID(400, (t != Q_STATE_CAST(0))
 8005786:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005788:	2b00      	cmp	r3, #0
 800578a:	d004      	beq.n	8005796 <QHsm_dispatch_+0x22>
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	689b      	ldr	r3, [r3, #8]
 8005790:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005792:	429a      	cmp	r2, r3
 8005794:	d004      	beq.n	80057a0 <QHsm_dispatch_+0x2c>
 8005796:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800579a:	4852      	ldr	r0, [pc, #328]	; (80058e4 <QHsm_dispatch_+0x170>)
 800579c:	f7fb fc28 	bl	8000ff0 <Q_onAssert>

    QStateHandler s;
    QState r;
    /* process the event hierarchically... */
    do {
        s = me->temp.fun;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	689b      	ldr	r3, [r3, #8]
 80057a4:	62bb      	str	r3, [r7, #40]	; 0x28
        r = (*s)(me, e); /* invoke state handler s */
 80057a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057a8:	68b9      	ldr	r1, [r7, #8]
 80057aa:	68f8      	ldr	r0, [r7, #12]
 80057ac:	4798      	blx	r3
 80057ae:	4603      	mov	r3, r0
 80057b0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

        if (r == Q_RET_UNHANDLED) { /* unhandled due to a guard? */
 80057b4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80057b8:	2b02      	cmp	r3, #2
 80057ba:	d106      	bne.n	80057ca <QHsm_dispatch_+0x56>
                QS_SIG_PRE_(e->sig); /* the signal of the event */
                QS_OBJ_PRE_(me);     /* this state machine object */
                QS_FUN_PRE_(s);      /* the current state */
            QS_END_PRE_()

            r = QEP_TRIG_(s, QEP_EMPTY_SIG_); /* find superstate of s */
 80057bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057be:	494a      	ldr	r1, [pc, #296]	; (80058e8 <QHsm_dispatch_+0x174>)
 80057c0:	68f8      	ldr	r0, [r7, #12]
 80057c2:	4798      	blx	r3
 80057c4:	4603      	mov	r3, r0
 80057c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        }
    } while (r == Q_RET_SUPER);
 80057ca:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d0e6      	beq.n	80057a0 <QHsm_dispatch_+0x2c>

    /* regular transition taken? */
    /*! @tr{RQP120E} */
    if (r >= Q_RET_TRAN) {
 80057d2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80057d6:	2b07      	cmp	r3, #7
 80057d8:	d97a      	bls.n	80058d0 <QHsm_dispatch_+0x15c>
        QStateHandler path[QHSM_MAX_NEST_DEPTH_];

        path[0] = me->temp.fun; /* save the target of the transition */
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	689b      	ldr	r3, [r3, #8]
 80057de:	613b      	str	r3, [r7, #16]
        path[1] = t;
 80057e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057e2:	617b      	str	r3, [r7, #20]
        path[2] = s;
 80057e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057e6:	61bb      	str	r3, [r7, #24]

        /* exit current state to transition source s... */
        /*! @tr{RQP120C} */
        for (; t != s; t = me->temp.fun) {
 80057e8:	e00d      	b.n	8005806 <QHsm_dispatch_+0x92>
            if (QEP_TRIG_(t, Q_EXIT_SIG) == Q_RET_HANDLED) {
 80057ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057ec:	493f      	ldr	r1, [pc, #252]	; (80058ec <QHsm_dispatch_+0x178>)
 80057ee:	68f8      	ldr	r0, [r7, #12]
 80057f0:	4798      	blx	r3
 80057f2:	4603      	mov	r3, r0
 80057f4:	2b03      	cmp	r3, #3
 80057f6:	d103      	bne.n	8005800 <QHsm_dispatch_+0x8c>
                    QS_OBJ_PRE_(me);  /* this state machine object */
                    QS_FUN_PRE_(t);   /* the exited state */
                QS_END_PRE_()

                /* find superstate of t */
                (void)QEP_TRIG_(t, QEP_EMPTY_SIG_);
 80057f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057fa:	493b      	ldr	r1, [pc, #236]	; (80058e8 <QHsm_dispatch_+0x174>)
 80057fc:	68f8      	ldr	r0, [r7, #12]
 80057fe:	4798      	blx	r3
        for (; t != s; t = me->temp.fun) {
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	689b      	ldr	r3, [r3, #8]
 8005804:	637b      	str	r3, [r7, #52]	; 0x34
 8005806:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800580a:	429a      	cmp	r2, r3
 800580c:	d1ed      	bne.n	80057ea <QHsm_dispatch_+0x76>
            }
        }

        int_fast8_t ip = QHsm_tran_(me, path, qs_id); /* the HSM transition */
 800580e:	f107 0310 	add.w	r3, r7, #16
 8005812:	687a      	ldr	r2, [r7, #4]
 8005814:	4619      	mov	r1, r3
 8005816:	68f8      	ldr	r0, [r7, #12]
 8005818:	f000 f86e 	bl	80058f8 <QHsm_tran_>
 800581c:	62f8      	str	r0, [r7, #44]	; 0x2c
        }
    #endif /* Q_SPY */

        /* execute state entry actions in the desired order... */
        /*! @tr{RQP120B} */
        for (; ip >= 0; --ip) {
 800581e:	e00b      	b.n	8005838 <QHsm_dispatch_+0xc4>
            QEP_ENTER_(path[ip], qs_id);  /* enter path[ip] */
 8005820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005822:	009b      	lsls	r3, r3, #2
 8005824:	3338      	adds	r3, #56	; 0x38
 8005826:	443b      	add	r3, r7
 8005828:	f853 3c28 	ldr.w	r3, [r3, #-40]
 800582c:	4930      	ldr	r1, [pc, #192]	; (80058f0 <QHsm_dispatch_+0x17c>)
 800582e:	68f8      	ldr	r0, [r7, #12]
 8005830:	4798      	blx	r3
        for (; ip >= 0; --ip) {
 8005832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005834:	3b01      	subs	r3, #1
 8005836:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800583a:	2b00      	cmp	r3, #0
 800583c:	daf0      	bge.n	8005820 <QHsm_dispatch_+0xac>
        }

        t = path[0];      /* stick the target into register */
 800583e:	693b      	ldr	r3, [r7, #16]
 8005840:	637b      	str	r3, [r7, #52]	; 0x34
        me->temp.fun = t; /* update the next state */
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005846:	609a      	str	r2, [r3, #8]

        /* while nested initial transition... */
        /*! @tr{RQP120I} */
        while (QEP_TRIG_(t, Q_INIT_SIG) == Q_RET_TRAN) {
 8005848:	e03b      	b.n	80058c2 <QHsm_dispatch_+0x14e>
                QS_OBJ_PRE_(me);           /* this state machine object */
                QS_FUN_PRE_(t);            /* the source (pseudo)state */
                QS_FUN_PRE_(me->temp.fun); /* the target of the transition */
            QS_END_PRE_()

            ip = 0;
 800584a:	2300      	movs	r3, #0
 800584c:	62fb      	str	r3, [r7, #44]	; 0x2c
            path[0] = me->temp.fun;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	689b      	ldr	r3, [r3, #8]
 8005852:	613b      	str	r3, [r7, #16]

            /* find superstate */
            (void)QEP_TRIG_(me->temp.fun, QEP_EMPTY_SIG_);
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	689b      	ldr	r3, [r3, #8]
 8005858:	4923      	ldr	r1, [pc, #140]	; (80058e8 <QHsm_dispatch_+0x174>)
 800585a:	68f8      	ldr	r0, [r7, #12]
 800585c:	4798      	blx	r3

            while (me->temp.fun != t) {
 800585e:	e00f      	b.n	8005880 <QHsm_dispatch_+0x10c>
                ++ip;
 8005860:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005862:	3301      	adds	r3, #1
 8005864:	62fb      	str	r3, [r7, #44]	; 0x2c
                path[ip] = me->temp.fun;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	689a      	ldr	r2, [r3, #8]
 800586a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800586c:	009b      	lsls	r3, r3, #2
 800586e:	3338      	adds	r3, #56	; 0x38
 8005870:	443b      	add	r3, r7
 8005872:	f843 2c28 	str.w	r2, [r3, #-40]
                /* find superstate */
                (void)QEP_TRIG_(me->temp.fun, QEP_EMPTY_SIG_);
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	689b      	ldr	r3, [r3, #8]
 800587a:	491b      	ldr	r1, [pc, #108]	; (80058e8 <QHsm_dispatch_+0x174>)
 800587c:	68f8      	ldr	r0, [r7, #12]
 800587e:	4798      	blx	r3
            while (me->temp.fun != t) {
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	689b      	ldr	r3, [r3, #8]
 8005884:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005886:	429a      	cmp	r2, r3
 8005888:	d1ea      	bne.n	8005860 <QHsm_dispatch_+0xec>
            }
            me->temp.fun = path[0];
 800588a:	693a      	ldr	r2, [r7, #16]
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	609a      	str	r2, [r3, #8]

            /* entry path must not overflow */
            Q_ASSERT_ID(410, ip < QHSM_MAX_NEST_DEPTH_);
 8005890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005892:	2b05      	cmp	r3, #5
 8005894:	dd04      	ble.n	80058a0 <QHsm_dispatch_+0x12c>
 8005896:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 800589a:	4812      	ldr	r0, [pc, #72]	; (80058e4 <QHsm_dispatch_+0x170>)
 800589c:	f7fb fba8 	bl	8000ff0 <Q_onAssert>

            /* retrace the entry path in reverse (correct) order... */
            do {
                QEP_ENTER_(path[ip], qs_id); /* enter path[ip] */
 80058a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058a2:	009b      	lsls	r3, r3, #2
 80058a4:	3338      	adds	r3, #56	; 0x38
 80058a6:	443b      	add	r3, r7
 80058a8:	f853 3c28 	ldr.w	r3, [r3, #-40]
 80058ac:	4910      	ldr	r1, [pc, #64]	; (80058f0 <QHsm_dispatch_+0x17c>)
 80058ae:	68f8      	ldr	r0, [r7, #12]
 80058b0:	4798      	blx	r3
                --ip;
 80058b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058b4:	3b01      	subs	r3, #1
 80058b6:	62fb      	str	r3, [r7, #44]	; 0x2c
            } while (ip >= 0);
 80058b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	daf0      	bge.n	80058a0 <QHsm_dispatch_+0x12c>

            t = path[0]; /* current state becomes the new source */
 80058be:	693b      	ldr	r3, [r7, #16]
 80058c0:	637b      	str	r3, [r7, #52]	; 0x34
        while (QEP_TRIG_(t, Q_INIT_SIG) == Q_RET_TRAN) {
 80058c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058c4:	490b      	ldr	r1, [pc, #44]	; (80058f4 <QHsm_dispatch_+0x180>)
 80058c6:	68f8      	ldr	r0, [r7, #12]
 80058c8:	4798      	blx	r3
 80058ca:	4603      	mov	r3, r0
 80058cc:	2b08      	cmp	r3, #8
 80058ce:	d0bc      	beq.n	800584a <QHsm_dispatch_+0xd6>
        QS_END_PRE_()

    }
    #endif /* Q_SPY */

    me->state.fun = t; /* change the current active state */
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80058d4:	605a      	str	r2, [r3, #4]
    me->temp.fun  = t; /* mark the configuration as stable */
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80058da:	609a      	str	r2, [r3, #8]
}
 80058dc:	bf00      	nop
 80058de:	3738      	adds	r7, #56	; 0x38
 80058e0:	46bd      	mov	sp, r7
 80058e2:	bd80      	pop	{r7, pc}
 80058e4:	08005c8c 	.word	0x08005c8c
 80058e8:	08005c94 	.word	0x08005c94
 80058ec:	08005c9c 	.word	0x08005c9c
 80058f0:	08005c98 	.word	0x08005c98
 80058f4:	08005ca0 	.word	0x08005ca0

080058f8 <QHsm_tran_>:

/*${QEP::QHsm::tran_} ......................................................*/
int_fast8_t QHsm_tran_(QHsm * const me,
    QStateHandler path[QHSM_MAX_NEST_DEPTH_],
    uint_fast8_t const qs_id)
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b08a      	sub	sp, #40	; 0x28
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	60f8      	str	r0, [r7, #12]
 8005900:	60b9      	str	r1, [r7, #8]
 8005902:	607a      	str	r2, [r7, #4]
    Q_UNUSED_PAR(qs_id); // unused when Q_SPY undefined

    int_fast8_t ip = -1; /* transition entry path index */
 8005904:	f04f 33ff 	mov.w	r3, #4294967295
 8005908:	627b      	str	r3, [r7, #36]	; 0x24
    QStateHandler t = path[0];
 800590a:	68bb      	ldr	r3, [r7, #8]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	623b      	str	r3, [r7, #32]
    QStateHandler const s = path[2];
 8005910:	68bb      	ldr	r3, [r7, #8]
 8005912:	689b      	ldr	r3, [r3, #8]
 8005914:	617b      	str	r3, [r7, #20]
    QS_CRIT_STAT_

    /* (a) check source==target (transition to self)... */
    if (s == t) {
 8005916:	697a      	ldr	r2, [r7, #20]
 8005918:	6a3b      	ldr	r3, [r7, #32]
 800591a:	429a      	cmp	r2, r3
 800591c:	d106      	bne.n	800592c <QHsm_tran_+0x34>
        QEP_EXIT_(s, qs_id); /* exit the source */
 800591e:	697b      	ldr	r3, [r7, #20]
 8005920:	4964      	ldr	r1, [pc, #400]	; (8005ab4 <QHsm_tran_+0x1bc>)
 8005922:	68f8      	ldr	r0, [r7, #12]
 8005924:	4798      	blx	r3
        ip = 0; /* enter the target */
 8005926:	2300      	movs	r3, #0
 8005928:	627b      	str	r3, [r7, #36]	; 0x24
 800592a:	e0be      	b.n	8005aaa <QHsm_tran_+0x1b2>
    }
    else {
        /* find superstate of target */
        (void)QEP_TRIG_(t, QEP_EMPTY_SIG_);
 800592c:	6a3b      	ldr	r3, [r7, #32]
 800592e:	4962      	ldr	r1, [pc, #392]	; (8005ab8 <QHsm_tran_+0x1c0>)
 8005930:	68f8      	ldr	r0, [r7, #12]
 8005932:	4798      	blx	r3

        t = me->temp.fun;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	689b      	ldr	r3, [r3, #8]
 8005938:	623b      	str	r3, [r7, #32]

        /* (b) check source==target->super... */
        if (s == t) {
 800593a:	697a      	ldr	r2, [r7, #20]
 800593c:	6a3b      	ldr	r3, [r7, #32]
 800593e:	429a      	cmp	r2, r3
 8005940:	d102      	bne.n	8005948 <QHsm_tran_+0x50>
            ip = 0; /* enter the target */
 8005942:	2300      	movs	r3, #0
 8005944:	627b      	str	r3, [r7, #36]	; 0x24
 8005946:	e0b0      	b.n	8005aaa <QHsm_tran_+0x1b2>
        }
        else {
            /* find superstate of src */
            (void)QEP_TRIG_(s, QEP_EMPTY_SIG_);
 8005948:	697b      	ldr	r3, [r7, #20]
 800594a:	495b      	ldr	r1, [pc, #364]	; (8005ab8 <QHsm_tran_+0x1c0>)
 800594c:	68f8      	ldr	r0, [r7, #12]
 800594e:	4798      	blx	r3

            /* (c) check source->super==target->super... */
            if (me->temp.fun == t) {
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	689b      	ldr	r3, [r3, #8]
 8005954:	6a3a      	ldr	r2, [r7, #32]
 8005956:	429a      	cmp	r2, r3
 8005958:	d106      	bne.n	8005968 <QHsm_tran_+0x70>
                QEP_EXIT_(s, qs_id); /* exit the source */
 800595a:	697b      	ldr	r3, [r7, #20]
 800595c:	4955      	ldr	r1, [pc, #340]	; (8005ab4 <QHsm_tran_+0x1bc>)
 800595e:	68f8      	ldr	r0, [r7, #12]
 8005960:	4798      	blx	r3
                ip = 0; /* enter the target */
 8005962:	2300      	movs	r3, #0
 8005964:	627b      	str	r3, [r7, #36]	; 0x24
 8005966:	e0a0      	b.n	8005aaa <QHsm_tran_+0x1b2>
            }
            else {
                /* (d) check source->super==target... */
                if (me->temp.fun == path[0]) {
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	689a      	ldr	r2, [r3, #8]
 800596c:	68bb      	ldr	r3, [r7, #8]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	429a      	cmp	r2, r3
 8005972:	d104      	bne.n	800597e <QHsm_tran_+0x86>
                    QEP_EXIT_(s, qs_id); /* exit the source */
 8005974:	697b      	ldr	r3, [r7, #20]
 8005976:	494f      	ldr	r1, [pc, #316]	; (8005ab4 <QHsm_tran_+0x1bc>)
 8005978:	68f8      	ldr	r0, [r7, #12]
 800597a:	4798      	blx	r3
 800597c:	e095      	b.n	8005aaa <QHsm_tran_+0x1b2>
                }
                else {
                    /* (e) check rest of source==target->super->super..
                    * and store the entry path along the way
                    */
                    int_fast8_t iq = 0; /* indicate that LCA not found */
 800597e:	2300      	movs	r3, #0
 8005980:	61fb      	str	r3, [r7, #28]
                    ip = 1; /* enter target and its superstate */
 8005982:	2301      	movs	r3, #1
 8005984:	627b      	str	r3, [r7, #36]	; 0x24
                    path[1] = t;      /* save the superstate of target */
 8005986:	68bb      	ldr	r3, [r7, #8]
 8005988:	3304      	adds	r3, #4
 800598a:	6a3a      	ldr	r2, [r7, #32]
 800598c:	601a      	str	r2, [r3, #0]
                    t = me->temp.fun; /* save source->super */
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	689b      	ldr	r3, [r3, #8]
 8005992:	623b      	str	r3, [r7, #32]

                    /* find target->super->super... */
                    QState r = QEP_TRIG_(path[1], QEP_EMPTY_SIG_);
 8005994:	68bb      	ldr	r3, [r7, #8]
 8005996:	3304      	adds	r3, #4
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	4947      	ldr	r1, [pc, #284]	; (8005ab8 <QHsm_tran_+0x1c0>)
 800599c:	68f8      	ldr	r0, [r7, #12]
 800599e:	4798      	blx	r3
 80059a0:	4603      	mov	r3, r0
 80059a2:	76fb      	strb	r3, [r7, #27]
                    while (r == Q_RET_SUPER) {
 80059a4:	e025      	b.n	80059f2 <QHsm_tran_+0xfa>
                        ++ip;
 80059a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059a8:	3301      	adds	r3, #1
 80059aa:	627b      	str	r3, [r7, #36]	; 0x24
                        path[ip] = me->temp.fun; /* store the entry path */
 80059ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ae:	009b      	lsls	r3, r3, #2
 80059b0:	68ba      	ldr	r2, [r7, #8]
 80059b2:	4413      	add	r3, r2
 80059b4:	68fa      	ldr	r2, [r7, #12]
 80059b6:	6892      	ldr	r2, [r2, #8]
 80059b8:	601a      	str	r2, [r3, #0]
                        if (me->temp.fun == s) { /* is it the source? */
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	689b      	ldr	r3, [r3, #8]
 80059be:	697a      	ldr	r2, [r7, #20]
 80059c0:	429a      	cmp	r2, r3
 80059c2:	d10f      	bne.n	80059e4 <QHsm_tran_+0xec>
                            iq = 1; /* indicate that LCA found */
 80059c4:	2301      	movs	r3, #1
 80059c6:	61fb      	str	r3, [r7, #28]

                            /* entry path must not overflow */
                            Q_ASSERT_ID(510,
 80059c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ca:	2b05      	cmp	r3, #5
 80059cc:	dd04      	ble.n	80059d8 <QHsm_tran_+0xe0>
 80059ce:	f44f 71ff 	mov.w	r1, #510	; 0x1fe
 80059d2:	483a      	ldr	r0, [pc, #232]	; (8005abc <QHsm_tran_+0x1c4>)
 80059d4:	f7fb fb0c 	bl	8000ff0 <Q_onAssert>
                                ip < QHSM_MAX_NEST_DEPTH_);
                            --ip; /* do not enter the source */
 80059d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059da:	3b01      	subs	r3, #1
 80059dc:	627b      	str	r3, [r7, #36]	; 0x24
                            r = Q_RET_HANDLED; /* terminate loop */
 80059de:	2303      	movs	r3, #3
 80059e0:	76fb      	strb	r3, [r7, #27]
 80059e2:	e006      	b.n	80059f2 <QHsm_tran_+0xfa>
                        }
                         /* it is not the source, keep going up */
                        else {
                            r = QEP_TRIG_(me->temp.fun, QEP_EMPTY_SIG_);
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	689b      	ldr	r3, [r3, #8]
 80059e8:	4933      	ldr	r1, [pc, #204]	; (8005ab8 <QHsm_tran_+0x1c0>)
 80059ea:	68f8      	ldr	r0, [r7, #12]
 80059ec:	4798      	blx	r3
 80059ee:	4603      	mov	r3, r0
 80059f0:	76fb      	strb	r3, [r7, #27]
                    while (r == Q_RET_SUPER) {
 80059f2:	7efb      	ldrb	r3, [r7, #27]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d0d6      	beq.n	80059a6 <QHsm_tran_+0xae>
                        }
                    }

                    /* the LCA not found yet? */
                    if (iq == 0) {
 80059f8:	69fb      	ldr	r3, [r7, #28]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d155      	bne.n	8005aaa <QHsm_tran_+0x1b2>

                        /* entry path must not overflow */
                        Q_ASSERT_ID(520, ip < QHSM_MAX_NEST_DEPTH_);
 80059fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a00:	2b05      	cmp	r3, #5
 8005a02:	dd04      	ble.n	8005a0e <QHsm_tran_+0x116>
 8005a04:	f44f 7102 	mov.w	r1, #520	; 0x208
 8005a08:	482c      	ldr	r0, [pc, #176]	; (8005abc <QHsm_tran_+0x1c4>)
 8005a0a:	f7fb faf1 	bl	8000ff0 <Q_onAssert>

                        QEP_EXIT_(s, qs_id); /* exit the source */
 8005a0e:	697b      	ldr	r3, [r7, #20]
 8005a10:	4928      	ldr	r1, [pc, #160]	; (8005ab4 <QHsm_tran_+0x1bc>)
 8005a12:	68f8      	ldr	r0, [r7, #12]
 8005a14:	4798      	blx	r3

                        /* (f) check the rest of source->super
                        *                  == target->super->super...
                        */
                        iq = ip;
 8005a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a18:	61fb      	str	r3, [r7, #28]
                        r = Q_RET_IGNORED; /* LCA NOT found */
 8005a1a:	2304      	movs	r3, #4
 8005a1c:	76fb      	strb	r3, [r7, #27]
                        do {
                            if (t == path[iq]) { /* is this the LCA? */
 8005a1e:	69fb      	ldr	r3, [r7, #28]
 8005a20:	009b      	lsls	r3, r3, #2
 8005a22:	68ba      	ldr	r2, [r7, #8]
 8005a24:	4413      	add	r3, r2
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	6a3a      	ldr	r2, [r7, #32]
 8005a2a:	429a      	cmp	r2, r3
 8005a2c:	d108      	bne.n	8005a40 <QHsm_tran_+0x148>
                                r = Q_RET_HANDLED; /* LCA found */
 8005a2e:	2303      	movs	r3, #3
 8005a30:	76fb      	strb	r3, [r7, #27]
                                ip = iq - 1; /* do not enter LCA */
 8005a32:	69fb      	ldr	r3, [r7, #28]
 8005a34:	3b01      	subs	r3, #1
 8005a36:	627b      	str	r3, [r7, #36]	; 0x24
                                iq = -1; /* cause termintion of the loop */
 8005a38:	f04f 33ff 	mov.w	r3, #4294967295
 8005a3c:	61fb      	str	r3, [r7, #28]
 8005a3e:	e002      	b.n	8005a46 <QHsm_tran_+0x14e>
                            }
                            else {
                                --iq; /* try lower superstate of target */
 8005a40:	69fb      	ldr	r3, [r7, #28]
 8005a42:	3b01      	subs	r3, #1
 8005a44:	61fb      	str	r3, [r7, #28]
                            }
                        } while (iq >= 0);
 8005a46:	69fb      	ldr	r3, [r7, #28]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	dae8      	bge.n	8005a1e <QHsm_tran_+0x126>

                        /* LCA not found? */
                        if (r != Q_RET_HANDLED) {
 8005a4c:	7efb      	ldrb	r3, [r7, #27]
 8005a4e:	2b03      	cmp	r3, #3
 8005a50:	d02b      	beq.n	8005aaa <QHsm_tran_+0x1b2>
                            /* (g) check each source->super->...
                            * for each target->super...
                            */
                            r = Q_RET_IGNORED; /* keep looping */
 8005a52:	2304      	movs	r3, #4
 8005a54:	76fb      	strb	r3, [r7, #27]
                            do {
                                /* exit t unhandled? */
                                if (QEP_TRIG_(t, Q_EXIT_SIG)
 8005a56:	6a3b      	ldr	r3, [r7, #32]
 8005a58:	4916      	ldr	r1, [pc, #88]	; (8005ab4 <QHsm_tran_+0x1bc>)
 8005a5a:	68f8      	ldr	r0, [r7, #12]
 8005a5c:	4798      	blx	r3
 8005a5e:	4603      	mov	r3, r0
 8005a60:	2b03      	cmp	r3, #3
 8005a62:	d103      	bne.n	8005a6c <QHsm_tran_+0x174>
                                    QS_BEGIN_PRE_(QS_QEP_STATE_EXIT, qs_id)
                                        QS_OBJ_PRE_(me);
                                        QS_FUN_PRE_(t);
                                    QS_END_PRE_()

                                    (void)QEP_TRIG_(t, QEP_EMPTY_SIG_);
 8005a64:	6a3b      	ldr	r3, [r7, #32]
 8005a66:	4914      	ldr	r1, [pc, #80]	; (8005ab8 <QHsm_tran_+0x1c0>)
 8005a68:	68f8      	ldr	r0, [r7, #12]
 8005a6a:	4798      	blx	r3
                                }
                                t = me->temp.fun; /* set to super of t */
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	689b      	ldr	r3, [r3, #8]
 8005a70:	623b      	str	r3, [r7, #32]
                                iq = ip;
 8005a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a74:	61fb      	str	r3, [r7, #28]
                                do {
                                    /* is this LCA? */
                                    if (t == path[iq]) {
 8005a76:	69fb      	ldr	r3, [r7, #28]
 8005a78:	009b      	lsls	r3, r3, #2
 8005a7a:	68ba      	ldr	r2, [r7, #8]
 8005a7c:	4413      	add	r3, r2
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	6a3a      	ldr	r2, [r7, #32]
 8005a82:	429a      	cmp	r2, r3
 8005a84:	d108      	bne.n	8005a98 <QHsm_tran_+0x1a0>
                                        /* do not enter LCA */
                                        ip = (int_fast8_t)(iq - 1);
 8005a86:	69fb      	ldr	r3, [r7, #28]
 8005a88:	3b01      	subs	r3, #1
 8005a8a:	627b      	str	r3, [r7, #36]	; 0x24
                                        iq = -1; /* break out of inner loop */
 8005a8c:	f04f 33ff 	mov.w	r3, #4294967295
 8005a90:	61fb      	str	r3, [r7, #28]
                                        /* break out of outer loop */
                                        r = Q_RET_HANDLED;
 8005a92:	2303      	movs	r3, #3
 8005a94:	76fb      	strb	r3, [r7, #27]
 8005a96:	e002      	b.n	8005a9e <QHsm_tran_+0x1a6>
                                    }
                                    else {
                                        --iq;
 8005a98:	69fb      	ldr	r3, [r7, #28]
 8005a9a:	3b01      	subs	r3, #1
 8005a9c:	61fb      	str	r3, [r7, #28]
                                    }
                                } while (iq >= 0);
 8005a9e:	69fb      	ldr	r3, [r7, #28]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	dae8      	bge.n	8005a76 <QHsm_tran_+0x17e>
                            } while (r != Q_RET_HANDLED);
 8005aa4:	7efb      	ldrb	r3, [r7, #27]
 8005aa6:	2b03      	cmp	r3, #3
 8005aa8:	d1d5      	bne.n	8005a56 <QHsm_tran_+0x15e>
                    }
                }
            }
        }
    }
    return ip;
 8005aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005aac:	4618      	mov	r0, r3
 8005aae:	3728      	adds	r7, #40	; 0x28
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	bd80      	pop	{r7, pc}
 8005ab4:	08005c9c 	.word	0x08005c9c
 8005ab8:	08005c94 	.word	0x08005c94
 8005abc:	08005c8c 	.word	0x08005c8c

08005ac0 <__libc_init_array>:
 8005ac0:	b570      	push	{r4, r5, r6, lr}
 8005ac2:	4d0d      	ldr	r5, [pc, #52]	; (8005af8 <__libc_init_array+0x38>)
 8005ac4:	4c0d      	ldr	r4, [pc, #52]	; (8005afc <__libc_init_array+0x3c>)
 8005ac6:	1b64      	subs	r4, r4, r5
 8005ac8:	10a4      	asrs	r4, r4, #2
 8005aca:	2600      	movs	r6, #0
 8005acc:	42a6      	cmp	r6, r4
 8005ace:	d109      	bne.n	8005ae4 <__libc_init_array+0x24>
 8005ad0:	4d0b      	ldr	r5, [pc, #44]	; (8005b00 <__libc_init_array+0x40>)
 8005ad2:	4c0c      	ldr	r4, [pc, #48]	; (8005b04 <__libc_init_array+0x44>)
 8005ad4:	f000 f82e 	bl	8005b34 <_init>
 8005ad8:	1b64      	subs	r4, r4, r5
 8005ada:	10a4      	asrs	r4, r4, #2
 8005adc:	2600      	movs	r6, #0
 8005ade:	42a6      	cmp	r6, r4
 8005ae0:	d105      	bne.n	8005aee <__libc_init_array+0x2e>
 8005ae2:	bd70      	pop	{r4, r5, r6, pc}
 8005ae4:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ae8:	4798      	blx	r3
 8005aea:	3601      	adds	r6, #1
 8005aec:	e7ee      	b.n	8005acc <__libc_init_array+0xc>
 8005aee:	f855 3b04 	ldr.w	r3, [r5], #4
 8005af2:	4798      	blx	r3
 8005af4:	3601      	adds	r6, #1
 8005af6:	e7f2      	b.n	8005ade <__libc_init_array+0x1e>
 8005af8:	08005cb4 	.word	0x08005cb4
 8005afc:	08005cb4 	.word	0x08005cb4
 8005b00:	08005cb4 	.word	0x08005cb4
 8005b04:	08005cb8 	.word	0x08005cb8

08005b08 <memcpy>:
 8005b08:	440a      	add	r2, r1
 8005b0a:	4291      	cmp	r1, r2
 8005b0c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005b10:	d100      	bne.n	8005b14 <memcpy+0xc>
 8005b12:	4770      	bx	lr
 8005b14:	b510      	push	{r4, lr}
 8005b16:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005b1a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005b1e:	4291      	cmp	r1, r2
 8005b20:	d1f9      	bne.n	8005b16 <memcpy+0xe>
 8005b22:	bd10      	pop	{r4, pc}

08005b24 <memset>:
 8005b24:	4402      	add	r2, r0
 8005b26:	4603      	mov	r3, r0
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d100      	bne.n	8005b2e <memset+0xa>
 8005b2c:	4770      	bx	lr
 8005b2e:	f803 1b01 	strb.w	r1, [r3], #1
 8005b32:	e7f9      	b.n	8005b28 <memset+0x4>

08005b34 <_init>:
 8005b34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b36:	bf00      	nop
 8005b38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b3a:	bc08      	pop	{r3}
 8005b3c:	469e      	mov	lr, r3
 8005b3e:	4770      	bx	lr

08005b40 <_fini>:
 8005b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b42:	bf00      	nop
 8005b44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b46:	bc08      	pop	{r3}
 8005b48:	469e      	mov	lr, r3
 8005b4a:	4770      	bx	lr
