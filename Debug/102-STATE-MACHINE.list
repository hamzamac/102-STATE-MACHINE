
102-STATE-MACHINE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000521c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000148  080053cc  080053cc  000153cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005514  08005514  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08005514  08005514  00015514  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800551c  0800551c  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800551c  0800551c  0001551c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005520  08005520  00015520  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08005524  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020014  2**0
                  CONTENTS
 10 .bss          00012e3c  20000014  20000014  00020014  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20012e50  20012e50  00020014  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f524  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000029f8  00000000  00000000  0002f568  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c80  00000000  00000000  00031f60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000b88  00000000  00000000  00032be0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000248fc  00000000  00000000  00033768  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000eb6d  00000000  00000000  00058064  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dc671  00000000  00000000  00066bd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00143242  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000031f8  00000000  00000000  00143294  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000014 	.word	0x20000014
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080053b4 	.word	0x080053b4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000018 	.word	0x20000018
 80001ec:	080053b4 	.word	0x080053b4

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <__aeabi_uldivmod>:
 8000200:	b953      	cbnz	r3, 8000218 <__aeabi_uldivmod+0x18>
 8000202:	b94a      	cbnz	r2, 8000218 <__aeabi_uldivmod+0x18>
 8000204:	2900      	cmp	r1, #0
 8000206:	bf08      	it	eq
 8000208:	2800      	cmpeq	r0, #0
 800020a:	bf1c      	itt	ne
 800020c:	f04f 31ff 	movne.w	r1, #4294967295
 8000210:	f04f 30ff 	movne.w	r0, #4294967295
 8000214:	f000 b974 	b.w	8000500 <__aeabi_idiv0>
 8000218:	f1ad 0c08 	sub.w	ip, sp, #8
 800021c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000220:	f000 f806 	bl	8000230 <__udivmoddi4>
 8000224:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000228:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800022c:	b004      	add	sp, #16
 800022e:	4770      	bx	lr

08000230 <__udivmoddi4>:
 8000230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000234:	9d08      	ldr	r5, [sp, #32]
 8000236:	4604      	mov	r4, r0
 8000238:	468e      	mov	lr, r1
 800023a:	2b00      	cmp	r3, #0
 800023c:	d14d      	bne.n	80002da <__udivmoddi4+0xaa>
 800023e:	428a      	cmp	r2, r1
 8000240:	4694      	mov	ip, r2
 8000242:	d969      	bls.n	8000318 <__udivmoddi4+0xe8>
 8000244:	fab2 f282 	clz	r2, r2
 8000248:	b152      	cbz	r2, 8000260 <__udivmoddi4+0x30>
 800024a:	fa01 f302 	lsl.w	r3, r1, r2
 800024e:	f1c2 0120 	rsb	r1, r2, #32
 8000252:	fa20 f101 	lsr.w	r1, r0, r1
 8000256:	fa0c fc02 	lsl.w	ip, ip, r2
 800025a:	ea41 0e03 	orr.w	lr, r1, r3
 800025e:	4094      	lsls	r4, r2
 8000260:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000264:	0c21      	lsrs	r1, r4, #16
 8000266:	fbbe f6f8 	udiv	r6, lr, r8
 800026a:	fa1f f78c 	uxth.w	r7, ip
 800026e:	fb08 e316 	mls	r3, r8, r6, lr
 8000272:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000276:	fb06 f107 	mul.w	r1, r6, r7
 800027a:	4299      	cmp	r1, r3
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x64>
 800027e:	eb1c 0303 	adds.w	r3, ip, r3
 8000282:	f106 30ff 	add.w	r0, r6, #4294967295
 8000286:	f080 811f 	bcs.w	80004c8 <__udivmoddi4+0x298>
 800028a:	4299      	cmp	r1, r3
 800028c:	f240 811c 	bls.w	80004c8 <__udivmoddi4+0x298>
 8000290:	3e02      	subs	r6, #2
 8000292:	4463      	add	r3, ip
 8000294:	1a5b      	subs	r3, r3, r1
 8000296:	b2a4      	uxth	r4, r4
 8000298:	fbb3 f0f8 	udiv	r0, r3, r8
 800029c:	fb08 3310 	mls	r3, r8, r0, r3
 80002a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a4:	fb00 f707 	mul.w	r7, r0, r7
 80002a8:	42a7      	cmp	r7, r4
 80002aa:	d90a      	bls.n	80002c2 <__udivmoddi4+0x92>
 80002ac:	eb1c 0404 	adds.w	r4, ip, r4
 80002b0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b4:	f080 810a 	bcs.w	80004cc <__udivmoddi4+0x29c>
 80002b8:	42a7      	cmp	r7, r4
 80002ba:	f240 8107 	bls.w	80004cc <__udivmoddi4+0x29c>
 80002be:	4464      	add	r4, ip
 80002c0:	3802      	subs	r0, #2
 80002c2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c6:	1be4      	subs	r4, r4, r7
 80002c8:	2600      	movs	r6, #0
 80002ca:	b11d      	cbz	r5, 80002d4 <__udivmoddi4+0xa4>
 80002cc:	40d4      	lsrs	r4, r2
 80002ce:	2300      	movs	r3, #0
 80002d0:	e9c5 4300 	strd	r4, r3, [r5]
 80002d4:	4631      	mov	r1, r6
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d909      	bls.n	80002f2 <__udivmoddi4+0xc2>
 80002de:	2d00      	cmp	r5, #0
 80002e0:	f000 80ef 	beq.w	80004c2 <__udivmoddi4+0x292>
 80002e4:	2600      	movs	r6, #0
 80002e6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ea:	4630      	mov	r0, r6
 80002ec:	4631      	mov	r1, r6
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	fab3 f683 	clz	r6, r3
 80002f6:	2e00      	cmp	r6, #0
 80002f8:	d14a      	bne.n	8000390 <__udivmoddi4+0x160>
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d302      	bcc.n	8000304 <__udivmoddi4+0xd4>
 80002fe:	4282      	cmp	r2, r0
 8000300:	f200 80f9 	bhi.w	80004f6 <__udivmoddi4+0x2c6>
 8000304:	1a84      	subs	r4, r0, r2
 8000306:	eb61 0303 	sbc.w	r3, r1, r3
 800030a:	2001      	movs	r0, #1
 800030c:	469e      	mov	lr, r3
 800030e:	2d00      	cmp	r5, #0
 8000310:	d0e0      	beq.n	80002d4 <__udivmoddi4+0xa4>
 8000312:	e9c5 4e00 	strd	r4, lr, [r5]
 8000316:	e7dd      	b.n	80002d4 <__udivmoddi4+0xa4>
 8000318:	b902      	cbnz	r2, 800031c <__udivmoddi4+0xec>
 800031a:	deff      	udf	#255	; 0xff
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	2a00      	cmp	r2, #0
 8000322:	f040 8092 	bne.w	800044a <__udivmoddi4+0x21a>
 8000326:	eba1 010c 	sub.w	r1, r1, ip
 800032a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032e:	fa1f fe8c 	uxth.w	lr, ip
 8000332:	2601      	movs	r6, #1
 8000334:	0c20      	lsrs	r0, r4, #16
 8000336:	fbb1 f3f7 	udiv	r3, r1, r7
 800033a:	fb07 1113 	mls	r1, r7, r3, r1
 800033e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000342:	fb0e f003 	mul.w	r0, lr, r3
 8000346:	4288      	cmp	r0, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0x12c>
 800034a:	eb1c 0101 	adds.w	r1, ip, r1
 800034e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x12a>
 8000354:	4288      	cmp	r0, r1
 8000356:	f200 80cb 	bhi.w	80004f0 <__udivmoddi4+0x2c0>
 800035a:	4643      	mov	r3, r8
 800035c:	1a09      	subs	r1, r1, r0
 800035e:	b2a4      	uxth	r4, r4
 8000360:	fbb1 f0f7 	udiv	r0, r1, r7
 8000364:	fb07 1110 	mls	r1, r7, r0, r1
 8000368:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800036c:	fb0e fe00 	mul.w	lr, lr, r0
 8000370:	45a6      	cmp	lr, r4
 8000372:	d908      	bls.n	8000386 <__udivmoddi4+0x156>
 8000374:	eb1c 0404 	adds.w	r4, ip, r4
 8000378:	f100 31ff 	add.w	r1, r0, #4294967295
 800037c:	d202      	bcs.n	8000384 <__udivmoddi4+0x154>
 800037e:	45a6      	cmp	lr, r4
 8000380:	f200 80bb 	bhi.w	80004fa <__udivmoddi4+0x2ca>
 8000384:	4608      	mov	r0, r1
 8000386:	eba4 040e 	sub.w	r4, r4, lr
 800038a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800038e:	e79c      	b.n	80002ca <__udivmoddi4+0x9a>
 8000390:	f1c6 0720 	rsb	r7, r6, #32
 8000394:	40b3      	lsls	r3, r6
 8000396:	fa22 fc07 	lsr.w	ip, r2, r7
 800039a:	ea4c 0c03 	orr.w	ip, ip, r3
 800039e:	fa20 f407 	lsr.w	r4, r0, r7
 80003a2:	fa01 f306 	lsl.w	r3, r1, r6
 80003a6:	431c      	orrs	r4, r3
 80003a8:	40f9      	lsrs	r1, r7
 80003aa:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ae:	fa00 f306 	lsl.w	r3, r0, r6
 80003b2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003b6:	0c20      	lsrs	r0, r4, #16
 80003b8:	fa1f fe8c 	uxth.w	lr, ip
 80003bc:	fb09 1118 	mls	r1, r9, r8, r1
 80003c0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c4:	fb08 f00e 	mul.w	r0, r8, lr
 80003c8:	4288      	cmp	r0, r1
 80003ca:	fa02 f206 	lsl.w	r2, r2, r6
 80003ce:	d90b      	bls.n	80003e8 <__udivmoddi4+0x1b8>
 80003d0:	eb1c 0101 	adds.w	r1, ip, r1
 80003d4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003d8:	f080 8088 	bcs.w	80004ec <__udivmoddi4+0x2bc>
 80003dc:	4288      	cmp	r0, r1
 80003de:	f240 8085 	bls.w	80004ec <__udivmoddi4+0x2bc>
 80003e2:	f1a8 0802 	sub.w	r8, r8, #2
 80003e6:	4461      	add	r1, ip
 80003e8:	1a09      	subs	r1, r1, r0
 80003ea:	b2a4      	uxth	r4, r4
 80003ec:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f0:	fb09 1110 	mls	r1, r9, r0, r1
 80003f4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003f8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003fc:	458e      	cmp	lr, r1
 80003fe:	d908      	bls.n	8000412 <__udivmoddi4+0x1e2>
 8000400:	eb1c 0101 	adds.w	r1, ip, r1
 8000404:	f100 34ff 	add.w	r4, r0, #4294967295
 8000408:	d26c      	bcs.n	80004e4 <__udivmoddi4+0x2b4>
 800040a:	458e      	cmp	lr, r1
 800040c:	d96a      	bls.n	80004e4 <__udivmoddi4+0x2b4>
 800040e:	3802      	subs	r0, #2
 8000410:	4461      	add	r1, ip
 8000412:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000416:	fba0 9402 	umull	r9, r4, r0, r2
 800041a:	eba1 010e 	sub.w	r1, r1, lr
 800041e:	42a1      	cmp	r1, r4
 8000420:	46c8      	mov	r8, r9
 8000422:	46a6      	mov	lr, r4
 8000424:	d356      	bcc.n	80004d4 <__udivmoddi4+0x2a4>
 8000426:	d053      	beq.n	80004d0 <__udivmoddi4+0x2a0>
 8000428:	b15d      	cbz	r5, 8000442 <__udivmoddi4+0x212>
 800042a:	ebb3 0208 	subs.w	r2, r3, r8
 800042e:	eb61 010e 	sbc.w	r1, r1, lr
 8000432:	fa01 f707 	lsl.w	r7, r1, r7
 8000436:	fa22 f306 	lsr.w	r3, r2, r6
 800043a:	40f1      	lsrs	r1, r6
 800043c:	431f      	orrs	r7, r3
 800043e:	e9c5 7100 	strd	r7, r1, [r5]
 8000442:	2600      	movs	r6, #0
 8000444:	4631      	mov	r1, r6
 8000446:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044a:	f1c2 0320 	rsb	r3, r2, #32
 800044e:	40d8      	lsrs	r0, r3
 8000450:	fa0c fc02 	lsl.w	ip, ip, r2
 8000454:	fa21 f303 	lsr.w	r3, r1, r3
 8000458:	4091      	lsls	r1, r2
 800045a:	4301      	orrs	r1, r0
 800045c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000460:	fa1f fe8c 	uxth.w	lr, ip
 8000464:	fbb3 f0f7 	udiv	r0, r3, r7
 8000468:	fb07 3610 	mls	r6, r7, r0, r3
 800046c:	0c0b      	lsrs	r3, r1, #16
 800046e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000472:	fb00 f60e 	mul.w	r6, r0, lr
 8000476:	429e      	cmp	r6, r3
 8000478:	fa04 f402 	lsl.w	r4, r4, r2
 800047c:	d908      	bls.n	8000490 <__udivmoddi4+0x260>
 800047e:	eb1c 0303 	adds.w	r3, ip, r3
 8000482:	f100 38ff 	add.w	r8, r0, #4294967295
 8000486:	d22f      	bcs.n	80004e8 <__udivmoddi4+0x2b8>
 8000488:	429e      	cmp	r6, r3
 800048a:	d92d      	bls.n	80004e8 <__udivmoddi4+0x2b8>
 800048c:	3802      	subs	r0, #2
 800048e:	4463      	add	r3, ip
 8000490:	1b9b      	subs	r3, r3, r6
 8000492:	b289      	uxth	r1, r1
 8000494:	fbb3 f6f7 	udiv	r6, r3, r7
 8000498:	fb07 3316 	mls	r3, r7, r6, r3
 800049c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a0:	fb06 f30e 	mul.w	r3, r6, lr
 80004a4:	428b      	cmp	r3, r1
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x28a>
 80004a8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ac:	f106 38ff 	add.w	r8, r6, #4294967295
 80004b0:	d216      	bcs.n	80004e0 <__udivmoddi4+0x2b0>
 80004b2:	428b      	cmp	r3, r1
 80004b4:	d914      	bls.n	80004e0 <__udivmoddi4+0x2b0>
 80004b6:	3e02      	subs	r6, #2
 80004b8:	4461      	add	r1, ip
 80004ba:	1ac9      	subs	r1, r1, r3
 80004bc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c0:	e738      	b.n	8000334 <__udivmoddi4+0x104>
 80004c2:	462e      	mov	r6, r5
 80004c4:	4628      	mov	r0, r5
 80004c6:	e705      	b.n	80002d4 <__udivmoddi4+0xa4>
 80004c8:	4606      	mov	r6, r0
 80004ca:	e6e3      	b.n	8000294 <__udivmoddi4+0x64>
 80004cc:	4618      	mov	r0, r3
 80004ce:	e6f8      	b.n	80002c2 <__udivmoddi4+0x92>
 80004d0:	454b      	cmp	r3, r9
 80004d2:	d2a9      	bcs.n	8000428 <__udivmoddi4+0x1f8>
 80004d4:	ebb9 0802 	subs.w	r8, r9, r2
 80004d8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004dc:	3801      	subs	r0, #1
 80004de:	e7a3      	b.n	8000428 <__udivmoddi4+0x1f8>
 80004e0:	4646      	mov	r6, r8
 80004e2:	e7ea      	b.n	80004ba <__udivmoddi4+0x28a>
 80004e4:	4620      	mov	r0, r4
 80004e6:	e794      	b.n	8000412 <__udivmoddi4+0x1e2>
 80004e8:	4640      	mov	r0, r8
 80004ea:	e7d1      	b.n	8000490 <__udivmoddi4+0x260>
 80004ec:	46d0      	mov	r8, sl
 80004ee:	e77b      	b.n	80003e8 <__udivmoddi4+0x1b8>
 80004f0:	3b02      	subs	r3, #2
 80004f2:	4461      	add	r1, ip
 80004f4:	e732      	b.n	800035c <__udivmoddi4+0x12c>
 80004f6:	4630      	mov	r0, r6
 80004f8:	e709      	b.n	800030e <__udivmoddi4+0xde>
 80004fa:	4464      	add	r4, ip
 80004fc:	3802      	subs	r0, #2
 80004fe:	e742      	b.n	8000386 <__udivmoddi4+0x156>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <APP_GREEN_LED_ON>:
#include "FreeRTOS.h"
#include "task.h"

extern UART_HandleTypeDef huart1;

void APP_GREEN_LED_ON(){
 8000504:	b5b0      	push	{r4, r5, r7, lr}
 8000506:	b086      	sub	sp, #24
 8000508:	af00      	add	r7, sp, #0
	uint8_t log[] = "APP_GREEN_LED_ON\r\n";
 800050a:	4b0c      	ldr	r3, [pc, #48]	; (800053c <APP_GREEN_LED_ON+0x38>)
 800050c:	1d3c      	adds	r4, r7, #4
 800050e:	461d      	mov	r5, r3
 8000510:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000512:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000514:	682b      	ldr	r3, [r5, #0]
 8000516:	461a      	mov	r2, r3
 8000518:	8022      	strh	r2, [r4, #0]
 800051a:	3402      	adds	r4, #2
 800051c:	0c1b      	lsrs	r3, r3, #16
 800051e:	7023      	strb	r3, [r4, #0]
	uart_log(log);
 8000520:	1d3b      	adds	r3, r7, #4
 8000522:	4618      	mov	r0, r3
 8000524:	f000 f89c 	bl	8000660 <uart_log>
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, SET);
 8000528:	2201      	movs	r2, #1
 800052a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800052e:	4804      	ldr	r0, [pc, #16]	; (8000540 <APP_GREEN_LED_ON+0x3c>)
 8000530:	f001 f936 	bl	80017a0 <HAL_GPIO_WritePin>
}
 8000534:	bf00      	nop
 8000536:	3718      	adds	r7, #24
 8000538:	46bd      	mov	sp, r7
 800053a:	bdb0      	pop	{r4, r5, r7, pc}
 800053c:	080053cc 	.word	0x080053cc
 8000540:	40021800 	.word	0x40021800

08000544 <APP_GREEN_LED_OFF>:

void APP_GREEN_LED_OFF(){
 8000544:	b5b0      	push	{r4, r5, r7, lr}
 8000546:	b086      	sub	sp, #24
 8000548:	af00      	add	r7, sp, #0
	uint8_t log[] = "APP_GREEN_LED_OFF\r\n";
 800054a:	4b0a      	ldr	r3, [pc, #40]	; (8000574 <APP_GREEN_LED_OFF+0x30>)
 800054c:	1d3c      	adds	r4, r7, #4
 800054e:	461d      	mov	r5, r3
 8000550:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000552:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000554:	682b      	ldr	r3, [r5, #0]
 8000556:	6023      	str	r3, [r4, #0]
	uart_log(log);
 8000558:	1d3b      	adds	r3, r7, #4
 800055a:	4618      	mov	r0, r3
 800055c:	f000 f880 	bl	8000660 <uart_log>
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, RESET);
 8000560:	2200      	movs	r2, #0
 8000562:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000566:	4804      	ldr	r0, [pc, #16]	; (8000578 <APP_GREEN_LED_OFF+0x34>)
 8000568:	f001 f91a 	bl	80017a0 <HAL_GPIO_WritePin>
}
 800056c:	bf00      	nop
 800056e:	3718      	adds	r7, #24
 8000570:	46bd      	mov	sp, r7
 8000572:	bdb0      	pop	{r4, r5, r7, pc}
 8000574:	080053e0 	.word	0x080053e0
 8000578:	40021800 	.word	0x40021800

0800057c <APP_GREEN_LED_BLINK>:

void APP_GREEN_LED_BLINK(){
 800057c:	b5b0      	push	{r4, r5, r7, lr}
 800057e:	b086      	sub	sp, #24
 8000580:	af00      	add	r7, sp, #0
	uint8_t log[] = "APP_GREEN_LED_BLINK\r\n";
 8000582:	4b0b      	ldr	r3, [pc, #44]	; (80005b0 <APP_GREEN_LED_BLINK+0x34>)
 8000584:	463c      	mov	r4, r7
 8000586:	461d      	mov	r5, r3
 8000588:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800058a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800058c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000590:	6020      	str	r0, [r4, #0]
 8000592:	3404      	adds	r4, #4
 8000594:	8021      	strh	r1, [r4, #0]
	uart_log(log);
 8000596:	463b      	mov	r3, r7
 8000598:	4618      	mov	r0, r3
 800059a:	f000 f861 	bl	8000660 <uart_log>
	HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 800059e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005a2:	4804      	ldr	r0, [pc, #16]	; (80005b4 <APP_GREEN_LED_BLINK+0x38>)
 80005a4:	f001 f915 	bl	80017d2 <HAL_GPIO_TogglePin>
}
 80005a8:	bf00      	nop
 80005aa:	3718      	adds	r7, #24
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bdb0      	pop	{r4, r5, r7, pc}
 80005b0:	080053f4 	.word	0x080053f4
 80005b4:	40021800 	.word	0x40021800

080005b8 <APP_RED_LED_ON>:

void APP_RED_LED_ON(){
 80005b8:	b5b0      	push	{r4, r5, r7, lr}
 80005ba:	b086      	sub	sp, #24
 80005bc:	af00      	add	r7, sp, #0
	uint8_t log[] = "APP_RED_LED_ON\r\n";
 80005be:	4b0a      	ldr	r3, [pc, #40]	; (80005e8 <APP_RED_LED_ON+0x30>)
 80005c0:	1d3c      	adds	r4, r7, #4
 80005c2:	461d      	mov	r5, r3
 80005c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005c8:	682b      	ldr	r3, [r5, #0]
 80005ca:	7023      	strb	r3, [r4, #0]
	uart_log(log);
 80005cc:	1d3b      	adds	r3, r7, #4
 80005ce:	4618      	mov	r0, r3
 80005d0:	f000 f846 	bl	8000660 <uart_log>
	HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, SET);
 80005d4:	2201      	movs	r2, #1
 80005d6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005da:	4804      	ldr	r0, [pc, #16]	; (80005ec <APP_RED_LED_ON+0x34>)
 80005dc:	f001 f8e0 	bl	80017a0 <HAL_GPIO_WritePin>
}
 80005e0:	bf00      	nop
 80005e2:	3718      	adds	r7, #24
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bdb0      	pop	{r4, r5, r7, pc}
 80005e8:	0800540c 	.word	0x0800540c
 80005ec:	40021800 	.word	0x40021800

080005f0 <APP_RED_LED_OFF>:

void APP_RED_LED_OFF(){
 80005f0:	b5b0      	push	{r4, r5, r7, lr}
 80005f2:	b086      	sub	sp, #24
 80005f4:	af00      	add	r7, sp, #0
	uint8_t log[] = "APP_RED_LED_OFF\r\n";
 80005f6:	4b0a      	ldr	r3, [pc, #40]	; (8000620 <APP_RED_LED_OFF+0x30>)
 80005f8:	1d3c      	adds	r4, r7, #4
 80005fa:	461d      	mov	r5, r3
 80005fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000600:	682b      	ldr	r3, [r5, #0]
 8000602:	8023      	strh	r3, [r4, #0]
	uart_log(log);
 8000604:	1d3b      	adds	r3, r7, #4
 8000606:	4618      	mov	r0, r3
 8000608:	f000 f82a 	bl	8000660 <uart_log>
	HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, RESET);
 800060c:	2200      	movs	r2, #0
 800060e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000612:	4804      	ldr	r0, [pc, #16]	; (8000624 <APP_RED_LED_OFF+0x34>)
 8000614:	f001 f8c4 	bl	80017a0 <HAL_GPIO_WritePin>
}
 8000618:	bf00      	nop
 800061a:	3718      	adds	r7, #24
 800061c:	46bd      	mov	sp, r7
 800061e:	bdb0      	pop	{r4, r5, r7, pc}
 8000620:	08005420 	.word	0x08005420
 8000624:	40021800 	.word	0x40021800

08000628 <APP_RED_LED_BLINK>:

void APP_RED_LED_BLINK(){
 8000628:	b5b0      	push	{r4, r5, r7, lr}
 800062a:	b086      	sub	sp, #24
 800062c:	af00      	add	r7, sp, #0
	uint8_t log[] = "APP_RED_LED_BLINK\r\n";
 800062e:	4b0a      	ldr	r3, [pc, #40]	; (8000658 <APP_RED_LED_BLINK+0x30>)
 8000630:	1d3c      	adds	r4, r7, #4
 8000632:	461d      	mov	r5, r3
 8000634:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000636:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000638:	682b      	ldr	r3, [r5, #0]
 800063a:	6023      	str	r3, [r4, #0]
	uart_log(log);
 800063c:	1d3b      	adds	r3, r7, #4
 800063e:	4618      	mov	r0, r3
 8000640:	f000 f80e 	bl	8000660 <uart_log>
	HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
 8000644:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000648:	4804      	ldr	r0, [pc, #16]	; (800065c <APP_RED_LED_BLINK+0x34>)
 800064a:	f001 f8c2 	bl	80017d2 <HAL_GPIO_TogglePin>
}
 800064e:	bf00      	nop
 8000650:	3718      	adds	r7, #24
 8000652:	46bd      	mov	sp, r7
 8000654:	bdb0      	pop	{r4, r5, r7, pc}
 8000656:	bf00      	nop
 8000658:	08005434 	.word	0x08005434
 800065c:	40021800 	.word	0x40021800

08000660 <uart_log>:

void uart_log(uint8_t * str){
 8000660:	b580      	push	{r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, str, strlen((char *)str), HAL_MAX_DELAY);
 8000668:	6878      	ldr	r0, [r7, #4]
 800066a:	f7ff fdc1 	bl	80001f0 <strlen>
 800066e:	4603      	mov	r3, r0
 8000670:	b29a      	uxth	r2, r3
 8000672:	f04f 33ff 	mov.w	r3, #4294967295
 8000676:	6879      	ldr	r1, [r7, #4]
 8000678:	4803      	ldr	r0, [pc, #12]	; (8000688 <uart_log+0x28>)
 800067a:	f001 fdc2 	bl	8002202 <HAL_UART_Transmit>
}
 800067e:	bf00      	nop
 8000680:	3708      	adds	r7, #8
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	20000048 	.word	0x20000048

0800068c <AppInit>:
				*handleGREEN_LED_BLINK,
				*handleRED_LED_ON,
				*handleRED_LED_OFF,
				*handleRED_LED_BLINK;

void AppInit(){
 800068c:	b580      	push	{r7, lr}
 800068e:	b08a      	sub	sp, #40	; 0x28
 8000690:	af02      	add	r7, sp, #8

	BaseType_t result = xTaskCreate( taskGREEN_LED_ON, "GREEN_LED_ON", 1000, NULL, 1, handleGREEN_LED_ON );
 8000692:	4b54      	ldr	r3, [pc, #336]	; (80007e4 <AppInit+0x158>)
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	9301      	str	r3, [sp, #4]
 8000698:	2301      	movs	r3, #1
 800069a:	9300      	str	r3, [sp, #0]
 800069c:	2300      	movs	r3, #0
 800069e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80006a2:	4951      	ldr	r1, [pc, #324]	; (80007e8 <AppInit+0x15c>)
 80006a4:	4851      	ldr	r0, [pc, #324]	; (80007ec <AppInit+0x160>)
 80006a6:	f002 fca3 	bl	8002ff0 <xTaskCreate>
 80006aa:	61f8      	str	r0, [r7, #28]
	configASSERT( result == pdPASS );
 80006ac:	69fb      	ldr	r3, [r7, #28]
 80006ae:	2b01      	cmp	r3, #1
 80006b0:	d00a      	beq.n	80006c8 <AppInit+0x3c>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80006b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80006b6:	f383 8811 	msr	BASEPRI, r3
 80006ba:	f3bf 8f6f 	isb	sy
 80006be:	f3bf 8f4f 	dsb	sy
 80006c2:	61bb      	str	r3, [r7, #24]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80006c4:	bf00      	nop
 80006c6:	e7fe      	b.n	80006c6 <AppInit+0x3a>

	result = xTaskCreate( taskGREEN_LED_OFF, "GREEN_LED_OFF", 1000, NULL, 1, handleGREEN_LED_OFF );
 80006c8:	4b49      	ldr	r3, [pc, #292]	; (80007f0 <AppInit+0x164>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	9301      	str	r3, [sp, #4]
 80006ce:	2301      	movs	r3, #1
 80006d0:	9300      	str	r3, [sp, #0]
 80006d2:	2300      	movs	r3, #0
 80006d4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80006d8:	4946      	ldr	r1, [pc, #280]	; (80007f4 <AppInit+0x168>)
 80006da:	4847      	ldr	r0, [pc, #284]	; (80007f8 <AppInit+0x16c>)
 80006dc:	f002 fc88 	bl	8002ff0 <xTaskCreate>
 80006e0:	61f8      	str	r0, [r7, #28]
	configASSERT( result == pdPASS );
 80006e2:	69fb      	ldr	r3, [r7, #28]
 80006e4:	2b01      	cmp	r3, #1
 80006e6:	d00a      	beq.n	80006fe <AppInit+0x72>
        __asm volatile
 80006e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80006ec:	f383 8811 	msr	BASEPRI, r3
 80006f0:	f3bf 8f6f 	isb	sy
 80006f4:	f3bf 8f4f 	dsb	sy
 80006f8:	617b      	str	r3, [r7, #20]
    }
 80006fa:	bf00      	nop
 80006fc:	e7fe      	b.n	80006fc <AppInit+0x70>

	result = xTaskCreate( taskGREEN_LED_BLINK, "GREEN_LED_BLINK", 1000, NULL, 1, handleGREEN_LED_BLINK );
 80006fe:	4b3f      	ldr	r3, [pc, #252]	; (80007fc <AppInit+0x170>)
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	9301      	str	r3, [sp, #4]
 8000704:	2301      	movs	r3, #1
 8000706:	9300      	str	r3, [sp, #0]
 8000708:	2300      	movs	r3, #0
 800070a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800070e:	493c      	ldr	r1, [pc, #240]	; (8000800 <AppInit+0x174>)
 8000710:	483c      	ldr	r0, [pc, #240]	; (8000804 <AppInit+0x178>)
 8000712:	f002 fc6d 	bl	8002ff0 <xTaskCreate>
 8000716:	61f8      	str	r0, [r7, #28]
	configASSERT( result == pdPASS );
 8000718:	69fb      	ldr	r3, [r7, #28]
 800071a:	2b01      	cmp	r3, #1
 800071c:	d00a      	beq.n	8000734 <AppInit+0xa8>
        __asm volatile
 800071e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000722:	f383 8811 	msr	BASEPRI, r3
 8000726:	f3bf 8f6f 	isb	sy
 800072a:	f3bf 8f4f 	dsb	sy
 800072e:	613b      	str	r3, [r7, #16]
    }
 8000730:	bf00      	nop
 8000732:	e7fe      	b.n	8000732 <AppInit+0xa6>

	result = xTaskCreate( taskRED_LED_ON, "RED_LED_ON", 1000, NULL, 1, handleRED_LED_ON );
 8000734:	4b34      	ldr	r3, [pc, #208]	; (8000808 <AppInit+0x17c>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	9301      	str	r3, [sp, #4]
 800073a:	2301      	movs	r3, #1
 800073c:	9300      	str	r3, [sp, #0]
 800073e:	2300      	movs	r3, #0
 8000740:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000744:	4931      	ldr	r1, [pc, #196]	; (800080c <AppInit+0x180>)
 8000746:	4832      	ldr	r0, [pc, #200]	; (8000810 <AppInit+0x184>)
 8000748:	f002 fc52 	bl	8002ff0 <xTaskCreate>
 800074c:	61f8      	str	r0, [r7, #28]
	configASSERT( result == pdPASS );
 800074e:	69fb      	ldr	r3, [r7, #28]
 8000750:	2b01      	cmp	r3, #1
 8000752:	d00a      	beq.n	800076a <AppInit+0xde>
        __asm volatile
 8000754:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000758:	f383 8811 	msr	BASEPRI, r3
 800075c:	f3bf 8f6f 	isb	sy
 8000760:	f3bf 8f4f 	dsb	sy
 8000764:	60fb      	str	r3, [r7, #12]
    }
 8000766:	bf00      	nop
 8000768:	e7fe      	b.n	8000768 <AppInit+0xdc>

	result = xTaskCreate( taskRED_LED_OFF, "RED_LED_OFF", 1000, NULL, 1, handleRED_LED_OFF );
 800076a:	4b2a      	ldr	r3, [pc, #168]	; (8000814 <AppInit+0x188>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	9301      	str	r3, [sp, #4]
 8000770:	2301      	movs	r3, #1
 8000772:	9300      	str	r3, [sp, #0]
 8000774:	2300      	movs	r3, #0
 8000776:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800077a:	4927      	ldr	r1, [pc, #156]	; (8000818 <AppInit+0x18c>)
 800077c:	4827      	ldr	r0, [pc, #156]	; (800081c <AppInit+0x190>)
 800077e:	f002 fc37 	bl	8002ff0 <xTaskCreate>
 8000782:	61f8      	str	r0, [r7, #28]
	configASSERT( result == pdPASS );
 8000784:	69fb      	ldr	r3, [r7, #28]
 8000786:	2b01      	cmp	r3, #1
 8000788:	d00a      	beq.n	80007a0 <AppInit+0x114>
        __asm volatile
 800078a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800078e:	f383 8811 	msr	BASEPRI, r3
 8000792:	f3bf 8f6f 	isb	sy
 8000796:	f3bf 8f4f 	dsb	sy
 800079a:	60bb      	str	r3, [r7, #8]
    }
 800079c:	bf00      	nop
 800079e:	e7fe      	b.n	800079e <AppInit+0x112>

	result = xTaskCreate( taskRED_LED_BLINK, "RED_LED_BLINK", 1000, NULL, 1, handleRED_LED_BLINK );
 80007a0:	4b1f      	ldr	r3, [pc, #124]	; (8000820 <AppInit+0x194>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	9301      	str	r3, [sp, #4]
 80007a6:	2301      	movs	r3, #1
 80007a8:	9300      	str	r3, [sp, #0]
 80007aa:	2300      	movs	r3, #0
 80007ac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80007b0:	491c      	ldr	r1, [pc, #112]	; (8000824 <AppInit+0x198>)
 80007b2:	481d      	ldr	r0, [pc, #116]	; (8000828 <AppInit+0x19c>)
 80007b4:	f002 fc1c 	bl	8002ff0 <xTaskCreate>
 80007b8:	61f8      	str	r0, [r7, #28]
	configASSERT( result == pdPASS );
 80007ba:	69fb      	ldr	r3, [r7, #28]
 80007bc:	2b01      	cmp	r3, #1
 80007be:	d00a      	beq.n	80007d6 <AppInit+0x14a>
        __asm volatile
 80007c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80007c4:	f383 8811 	msr	BASEPRI, r3
 80007c8:	f3bf 8f6f 	isb	sy
 80007cc:	f3bf 8f4f 	dsb	sy
 80007d0:	607b      	str	r3, [r7, #4]
    }
 80007d2:	bf00      	nop
 80007d4:	e7fe      	b.n	80007d4 <AppInit+0x148>

	/* Start the scheduler. */
	vTaskStartScheduler();
 80007d6:	f002 fd87 	bl	80032e8 <vTaskStartScheduler>

}
 80007da:	bf00      	nop
 80007dc:	3720      	adds	r7, #32
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	20000030 	.word	0x20000030
 80007e8:	08005448 	.word	0x08005448
 80007ec:	0800082d 	.word	0x0800082d
 80007f0:	20000034 	.word	0x20000034
 80007f4:	08005458 	.word	0x08005458
 80007f8:	0800083b 	.word	0x0800083b
 80007fc:	20000038 	.word	0x20000038
 8000800:	08005468 	.word	0x08005468
 8000804:	08000849 	.word	0x08000849
 8000808:	2000003c 	.word	0x2000003c
 800080c:	08005478 	.word	0x08005478
 8000810:	08000857 	.word	0x08000857
 8000814:	20000040 	.word	0x20000040
 8000818:	08005484 	.word	0x08005484
 800081c:	08000865 	.word	0x08000865
 8000820:	20000044 	.word	0x20000044
 8000824:	08005490 	.word	0x08005490
 8000828:	08000873 	.word	0x08000873

0800082c <taskGREEN_LED_ON>:

void taskGREEN_LED_ON( void *pvParameters ){
 800082c:	b580      	push	{r7, lr}
 800082e:	b082      	sub	sp, #8
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
	APP_GREEN_LED_ON();
 8000834:	f7ff fe66 	bl	8000504 <APP_GREEN_LED_ON>
	while(1);
 8000838:	e7fe      	b.n	8000838 <taskGREEN_LED_ON+0xc>

0800083a <taskGREEN_LED_OFF>:
}

void taskGREEN_LED_OFF( void *pvParameters ){
 800083a:	b580      	push	{r7, lr}
 800083c:	b082      	sub	sp, #8
 800083e:	af00      	add	r7, sp, #0
 8000840:	6078      	str	r0, [r7, #4]
	APP_GREEN_LED_OFF();
 8000842:	f7ff fe7f 	bl	8000544 <APP_GREEN_LED_OFF>
	while(1);
 8000846:	e7fe      	b.n	8000846 <taskGREEN_LED_OFF+0xc>

08000848 <taskGREEN_LED_BLINK>:
}

void taskGREEN_LED_BLINK( void *pvParameters ){
 8000848:	b580      	push	{r7, lr}
 800084a:	b082      	sub	sp, #8
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
	APP_GREEN_LED_BLINK();
 8000850:	f7ff fe94 	bl	800057c <APP_GREEN_LED_BLINK>
	while(1);
 8000854:	e7fe      	b.n	8000854 <taskGREEN_LED_BLINK+0xc>

08000856 <taskRED_LED_ON>:
}

void taskRED_LED_ON( void *pvParameters ){
 8000856:	b580      	push	{r7, lr}
 8000858:	b082      	sub	sp, #8
 800085a:	af00      	add	r7, sp, #0
 800085c:	6078      	str	r0, [r7, #4]
	APP_RED_LED_ON();
 800085e:	f7ff feab 	bl	80005b8 <APP_RED_LED_ON>
	while(1);
 8000862:	e7fe      	b.n	8000862 <taskRED_LED_ON+0xc>

08000864 <taskRED_LED_OFF>:
}

void taskRED_LED_OFF( void *pvParameters ){
 8000864:	b580      	push	{r7, lr}
 8000866:	b082      	sub	sp, #8
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
	APP_RED_LED_OFF();
 800086c:	f7ff fec0 	bl	80005f0 <APP_RED_LED_OFF>
	while(1);
 8000870:	e7fe      	b.n	8000870 <taskRED_LED_OFF+0xc>

08000872 <taskRED_LED_BLINK>:
}
void taskRED_LED_BLINK( void *pvParameters ){
 8000872:	b580      	push	{r7, lr}
 8000874:	b082      	sub	sp, #8
 8000876:	af00      	add	r7, sp, #0
 8000878:	6078      	str	r0, [r7, #4]
	APP_RED_LED_BLINK();
 800087a:	f7ff fed5 	bl	8000628 <APP_RED_LED_BLINK>
	while(1);
 800087e:	e7fe      	b.n	800087e <taskRED_LED_BLINK+0xc>

08000880 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000884:	f000 fc4c 	bl	8001120 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000888:	f000 f824 	bl	80008d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800088c:	f000 f8b8 	bl	8000a00 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000890:	f000 f88c 	bl	80009ac <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  Lamp_ctor(&lamp);
 8000894:	480d      	ldr	r0, [pc, #52]	; (80008cc <main+0x4c>)
 8000896:	f004 f9c1 	bl	8004c1c <Lamp_ctor>
  QHSM_INIT( &lamp.super, (QEvt *)0, 0 );
 800089a:	4b0c      	ldr	r3, [pc, #48]	; (80008cc <main+0x4c>)
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d103      	bne.n	80008aa <main+0x2a>
 80008a2:	215e      	movs	r1, #94	; 0x5e
 80008a4:	480a      	ldr	r0, [pc, #40]	; (80008d0 <main+0x50>)
 80008a6:	f000 fb3b 	bl	8000f20 <Q_onAssert>
 80008aa:	4b08      	ldr	r3, [pc, #32]	; (80008cc <main+0x4c>)
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	2200      	movs	r2, #0
 80008b2:	2100      	movs	r1, #0
 80008b4:	4805      	ldr	r0, [pc, #20]	; (80008cc <main+0x4c>)
 80008b6:	4798      	blx	r3

  AppInit();
 80008b8:	f7ff fee8 	bl	800068c <AppInit>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	 HAL_Delay(500);
 80008bc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80008c0:	f000 fc8c 	bl	80011dc <HAL_Delay>
	 Lamp_blink(&lamp);
 80008c4:	4801      	ldr	r0, [pc, #4]	; (80008cc <main+0x4c>)
 80008c6:	f004 f9cb 	bl	8004c60 <Lamp_blink>
	 HAL_Delay(500);
 80008ca:	e7f7      	b.n	80008bc <main+0x3c>
 80008cc:	2000008c 	.word	0x2000008c
 80008d0:	080054c8 	.word	0x080054c8

080008d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b094      	sub	sp, #80	; 0x50
 80008d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008da:	f107 0320 	add.w	r3, r7, #32
 80008de:	2230      	movs	r2, #48	; 0x30
 80008e0:	2100      	movs	r1, #0
 80008e2:	4618      	mov	r0, r3
 80008e4:	f004 fd5e 	bl	80053a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008e8:	f107 030c 	add.w	r3, r7, #12
 80008ec:	2200      	movs	r2, #0
 80008ee:	601a      	str	r2, [r3, #0]
 80008f0:	605a      	str	r2, [r3, #4]
 80008f2:	609a      	str	r2, [r3, #8]
 80008f4:	60da      	str	r2, [r3, #12]
 80008f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008f8:	2300      	movs	r3, #0
 80008fa:	60bb      	str	r3, [r7, #8]
 80008fc:	4b29      	ldr	r3, [pc, #164]	; (80009a4 <SystemClock_Config+0xd0>)
 80008fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000900:	4a28      	ldr	r2, [pc, #160]	; (80009a4 <SystemClock_Config+0xd0>)
 8000902:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000906:	6413      	str	r3, [r2, #64]	; 0x40
 8000908:	4b26      	ldr	r3, [pc, #152]	; (80009a4 <SystemClock_Config+0xd0>)
 800090a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800090c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000910:	60bb      	str	r3, [r7, #8]
 8000912:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000914:	2300      	movs	r3, #0
 8000916:	607b      	str	r3, [r7, #4]
 8000918:	4b23      	ldr	r3, [pc, #140]	; (80009a8 <SystemClock_Config+0xd4>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000920:	4a21      	ldr	r2, [pc, #132]	; (80009a8 <SystemClock_Config+0xd4>)
 8000922:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000926:	6013      	str	r3, [r2, #0]
 8000928:	4b1f      	ldr	r3, [pc, #124]	; (80009a8 <SystemClock_Config+0xd4>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000930:	607b      	str	r3, [r7, #4]
 8000932:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000934:	2302      	movs	r3, #2
 8000936:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000938:	2301      	movs	r3, #1
 800093a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800093c:	2310      	movs	r3, #16
 800093e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000940:	2302      	movs	r3, #2
 8000942:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000944:	2300      	movs	r3, #0
 8000946:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000948:	2308      	movs	r3, #8
 800094a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 800094c:	2332      	movs	r3, #50	; 0x32
 800094e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000950:	2304      	movs	r3, #4
 8000952:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000954:	2307      	movs	r3, #7
 8000956:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000958:	f107 0320 	add.w	r3, r7, #32
 800095c:	4618      	mov	r0, r3
 800095e:	f000 ff6b 	bl	8001838 <HAL_RCC_OscConfig>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d001      	beq.n	800096c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000968:	f000 fb04 	bl	8000f74 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800096c:	230f      	movs	r3, #15
 800096e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000970:	2302      	movs	r3, #2
 8000972:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000974:	2300      	movs	r3, #0
 8000976:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8000978:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800097c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 800097e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000982:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000984:	f107 030c 	add.w	r3, r7, #12
 8000988:	2100      	movs	r1, #0
 800098a:	4618      	mov	r0, r3
 800098c:	f001 f9cc 	bl	8001d28 <HAL_RCC_ClockConfig>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d001      	beq.n	800099a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000996:	f000 faed 	bl	8000f74 <Error_Handler>
  }
}
 800099a:	bf00      	nop
 800099c:	3750      	adds	r7, #80	; 0x50
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	40023800 	.word	0x40023800
 80009a8:	40007000 	.word	0x40007000

080009ac <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80009b0:	4b11      	ldr	r3, [pc, #68]	; (80009f8 <MX_USART1_UART_Init+0x4c>)
 80009b2:	4a12      	ldr	r2, [pc, #72]	; (80009fc <MX_USART1_UART_Init+0x50>)
 80009b4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80009b6:	4b10      	ldr	r3, [pc, #64]	; (80009f8 <MX_USART1_UART_Init+0x4c>)
 80009b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009bc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009be:	4b0e      	ldr	r3, [pc, #56]	; (80009f8 <MX_USART1_UART_Init+0x4c>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80009c4:	4b0c      	ldr	r3, [pc, #48]	; (80009f8 <MX_USART1_UART_Init+0x4c>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80009ca:	4b0b      	ldr	r3, [pc, #44]	; (80009f8 <MX_USART1_UART_Init+0x4c>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80009d0:	4b09      	ldr	r3, [pc, #36]	; (80009f8 <MX_USART1_UART_Init+0x4c>)
 80009d2:	220c      	movs	r2, #12
 80009d4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009d6:	4b08      	ldr	r3, [pc, #32]	; (80009f8 <MX_USART1_UART_Init+0x4c>)
 80009d8:	2200      	movs	r2, #0
 80009da:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009dc:	4b06      	ldr	r3, [pc, #24]	; (80009f8 <MX_USART1_UART_Init+0x4c>)
 80009de:	2200      	movs	r2, #0
 80009e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80009e2:	4805      	ldr	r0, [pc, #20]	; (80009f8 <MX_USART1_UART_Init+0x4c>)
 80009e4:	f001 fbc0 	bl	8002168 <HAL_UART_Init>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80009ee:	f000 fac1 	bl	8000f74 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80009f2:	bf00      	nop
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	20000048 	.word	0x20000048
 80009fc:	40011000 	.word	0x40011000

08000a00 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b08e      	sub	sp, #56	; 0x38
 8000a04:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	601a      	str	r2, [r3, #0]
 8000a0e:	605a      	str	r2, [r3, #4]
 8000a10:	609a      	str	r2, [r3, #8]
 8000a12:	60da      	str	r2, [r3, #12]
 8000a14:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a16:	2300      	movs	r3, #0
 8000a18:	623b      	str	r3, [r7, #32]
 8000a1a:	4bb1      	ldr	r3, [pc, #708]	; (8000ce0 <MX_GPIO_Init+0x2e0>)
 8000a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1e:	4ab0      	ldr	r2, [pc, #704]	; (8000ce0 <MX_GPIO_Init+0x2e0>)
 8000a20:	f043 0304 	orr.w	r3, r3, #4
 8000a24:	6313      	str	r3, [r2, #48]	; 0x30
 8000a26:	4bae      	ldr	r3, [pc, #696]	; (8000ce0 <MX_GPIO_Init+0x2e0>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2a:	f003 0304 	and.w	r3, r3, #4
 8000a2e:	623b      	str	r3, [r7, #32]
 8000a30:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a32:	2300      	movs	r3, #0
 8000a34:	61fb      	str	r3, [r7, #28]
 8000a36:	4baa      	ldr	r3, [pc, #680]	; (8000ce0 <MX_GPIO_Init+0x2e0>)
 8000a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3a:	4aa9      	ldr	r2, [pc, #676]	; (8000ce0 <MX_GPIO_Init+0x2e0>)
 8000a3c:	f043 0320 	orr.w	r3, r3, #32
 8000a40:	6313      	str	r3, [r2, #48]	; 0x30
 8000a42:	4ba7      	ldr	r3, [pc, #668]	; (8000ce0 <MX_GPIO_Init+0x2e0>)
 8000a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a46:	f003 0320 	and.w	r3, r3, #32
 8000a4a:	61fb      	str	r3, [r7, #28]
 8000a4c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a4e:	2300      	movs	r3, #0
 8000a50:	61bb      	str	r3, [r7, #24]
 8000a52:	4ba3      	ldr	r3, [pc, #652]	; (8000ce0 <MX_GPIO_Init+0x2e0>)
 8000a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a56:	4aa2      	ldr	r2, [pc, #648]	; (8000ce0 <MX_GPIO_Init+0x2e0>)
 8000a58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a5e:	4ba0      	ldr	r3, [pc, #640]	; (8000ce0 <MX_GPIO_Init+0x2e0>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a66:	61bb      	str	r3, [r7, #24]
 8000a68:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	617b      	str	r3, [r7, #20]
 8000a6e:	4b9c      	ldr	r3, [pc, #624]	; (8000ce0 <MX_GPIO_Init+0x2e0>)
 8000a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a72:	4a9b      	ldr	r2, [pc, #620]	; (8000ce0 <MX_GPIO_Init+0x2e0>)
 8000a74:	f043 0301 	orr.w	r3, r3, #1
 8000a78:	6313      	str	r3, [r2, #48]	; 0x30
 8000a7a:	4b99      	ldr	r3, [pc, #612]	; (8000ce0 <MX_GPIO_Init+0x2e0>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7e:	f003 0301 	and.w	r3, r3, #1
 8000a82:	617b      	str	r3, [r7, #20]
 8000a84:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a86:	2300      	movs	r3, #0
 8000a88:	613b      	str	r3, [r7, #16]
 8000a8a:	4b95      	ldr	r3, [pc, #596]	; (8000ce0 <MX_GPIO_Init+0x2e0>)
 8000a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8e:	4a94      	ldr	r2, [pc, #592]	; (8000ce0 <MX_GPIO_Init+0x2e0>)
 8000a90:	f043 0302 	orr.w	r3, r3, #2
 8000a94:	6313      	str	r3, [r2, #48]	; 0x30
 8000a96:	4b92      	ldr	r3, [pc, #584]	; (8000ce0 <MX_GPIO_Init+0x2e0>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9a:	f003 0302 	and.w	r3, r3, #2
 8000a9e:	613b      	str	r3, [r7, #16]
 8000aa0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	60fb      	str	r3, [r7, #12]
 8000aa6:	4b8e      	ldr	r3, [pc, #568]	; (8000ce0 <MX_GPIO_Init+0x2e0>)
 8000aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aaa:	4a8d      	ldr	r2, [pc, #564]	; (8000ce0 <MX_GPIO_Init+0x2e0>)
 8000aac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ab0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ab2:	4b8b      	ldr	r3, [pc, #556]	; (8000ce0 <MX_GPIO_Init+0x2e0>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000aba:	60fb      	str	r3, [r7, #12]
 8000abc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000abe:	2300      	movs	r3, #0
 8000ac0:	60bb      	str	r3, [r7, #8]
 8000ac2:	4b87      	ldr	r3, [pc, #540]	; (8000ce0 <MX_GPIO_Init+0x2e0>)
 8000ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac6:	4a86      	ldr	r2, [pc, #536]	; (8000ce0 <MX_GPIO_Init+0x2e0>)
 8000ac8:	f043 0310 	orr.w	r3, r3, #16
 8000acc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ace:	4b84      	ldr	r3, [pc, #528]	; (8000ce0 <MX_GPIO_Init+0x2e0>)
 8000ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad2:	f003 0310 	and.w	r3, r3, #16
 8000ad6:	60bb      	str	r3, [r7, #8]
 8000ad8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ada:	2300      	movs	r3, #0
 8000adc:	607b      	str	r3, [r7, #4]
 8000ade:	4b80      	ldr	r3, [pc, #512]	; (8000ce0 <MX_GPIO_Init+0x2e0>)
 8000ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae2:	4a7f      	ldr	r2, [pc, #508]	; (8000ce0 <MX_GPIO_Init+0x2e0>)
 8000ae4:	f043 0308 	orr.w	r3, r3, #8
 8000ae8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aea:	4b7d      	ldr	r3, [pc, #500]	; (8000ce0 <MX_GPIO_Init+0x2e0>)
 8000aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aee:	f003 0308 	and.w	r3, r3, #8
 8000af2:	607b      	str	r3, [r7, #4]
 8000af4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|BOTTON_YELLOW_Pin, GPIO_PIN_RESET);
 8000af6:	2200      	movs	r2, #0
 8000af8:	2116      	movs	r1, #22
 8000afa:	487a      	ldr	r0, [pc, #488]	; (8000ce4 <MX_GPIO_Init+0x2e4>)
 8000afc:	f000 fe50 	bl	80017a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8000b00:	2200      	movs	r2, #0
 8000b02:	2180      	movs	r1, #128	; 0x80
 8000b04:	4878      	ldr	r0, [pc, #480]	; (8000ce8 <MX_GPIO_Init+0x2e8>)
 8000b06:	f000 fe4b 	bl	80017a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8000b10:	4876      	ldr	r0, [pc, #472]	; (8000cec <MX_GPIO_Init+0x2ec>)
 8000b12:	f000 fe45 	bl	80017a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8000b16:	2200      	movs	r2, #0
 8000b18:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000b1c:	4874      	ldr	r0, [pc, #464]	; (8000cf0 <MX_GPIO_Init+0x2f0>)
 8000b1e:	f000 fe3f 	bl	80017a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A0_Pin A1_Pin A2_Pin A3_Pin
                           A4_Pin A5_Pin SDNRAS_Pin A6_Pin
                           A7_Pin A8_Pin A9_Pin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8000b22:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8000b26:	627b      	str	r3, [r7, #36]	; 0x24
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b28:	2302      	movs	r3, #2
 8000b2a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b30:	2303      	movs	r3, #3
 8000b32:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000b34:	230c      	movs	r3, #12
 8000b36:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000b38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	486d      	ldr	r0, [pc, #436]	; (8000cf4 <MX_GPIO_Init+0x2f4>)
 8000b40:	f000 fc82 	bl	8001448 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI5_SCK_Pin SPI5_MISO_Pin SPI5_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8000b44:	f44f 7360 	mov.w	r3, #896	; 0x380
 8000b48:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b4a:	2302      	movs	r3, #2
 8000b4c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b52:	2300      	movs	r3, #0
 8000b54:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8000b56:	2305      	movs	r3, #5
 8000b58:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000b5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b5e:	4619      	mov	r1, r3
 8000b60:	4864      	ldr	r0, [pc, #400]	; (8000cf4 <MX_GPIO_Init+0x2f4>)
 8000b62:	f000 fc71 	bl	8001448 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENABLE_Pin */
  GPIO_InitStruct.Pin = ENABLE_Pin;
 8000b66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b6a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b6c:	2302      	movs	r3, #2
 8000b6e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b70:	2300      	movs	r3, #0
 8000b72:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b74:	2300      	movs	r3, #0
 8000b76:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000b78:	230e      	movs	r3, #14
 8000b7a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8000b7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b80:	4619      	mov	r1, r3
 8000b82:	485c      	ldr	r0, [pc, #368]	; (8000cf4 <MX_GPIO_Init+0x2f4>)
 8000b84:	f000 fc60 	bl	8001448 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDNWE_Pin */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 8000b88:	2301      	movs	r3, #1
 8000b8a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b8c:	2302      	movs	r3, #2
 8000b8e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b90:	2300      	movs	r3, #0
 8000b92:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b94:	2303      	movs	r3, #3
 8000b96:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000b98:	230c      	movs	r3, #12
 8000b9a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8000b9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	4850      	ldr	r0, [pc, #320]	; (8000ce4 <MX_GPIO_Init+0x2e4>)
 8000ba4:	f000 fc50 	bl	8001448 <HAL_GPIO_Init>

  /*Configure GPIO pin : NCS_MEMS_SPI_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin;
 8000ba8:	2302      	movs	r3, #2
 8000baa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bac:	2301      	movs	r3, #1
 8000bae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(NCS_MEMS_SPI_GPIO_Port, &GPIO_InitStruct);
 8000bb8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	4849      	ldr	r0, [pc, #292]	; (8000ce4 <MX_GPIO_Init+0x2e4>)
 8000bc0:	f000 fc42 	bl	8001448 <HAL_GPIO_Init>

  /*Configure GPIO pins : CSX_Pin BOTTON_YELLOW_Pin */
  GPIO_InitStruct.Pin = CSX_Pin|BOTTON_YELLOW_Pin;
 8000bc4:	2314      	movs	r3, #20
 8000bc6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bc8:	2301      	movs	r3, #1
 8000bca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000bcc:	2302      	movs	r3, #2
 8000bce:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bd8:	4619      	mov	r1, r3
 8000bda:	4842      	ldr	r0, [pc, #264]	; (8000ce4 <MX_GPIO_Init+0x2e4>)
 8000bdc:	f000 fc34 	bl	8001448 <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|TP_INT1_Pin;
 8000be0:	f248 0301 	movw	r3, #32769	; 0x8001
 8000be4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000be6:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000bea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bec:	2300      	movs	r3, #0
 8000bee:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bf0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	483c      	ldr	r0, [pc, #240]	; (8000ce8 <MX_GPIO_Init+0x2e8>)
 8000bf8:	f000 fc26 	bl	8001448 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_1_Pin BUTTON_2_Pin */
  GPIO_InitStruct.Pin = BUTTON_1_Pin|BUTTON_2_Pin;
 8000bfc:	2306      	movs	r3, #6
 8000bfe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c00:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000c04:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000c06:	2302      	movs	r3, #2
 8000c08:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c0e:	4619      	mov	r1, r3
 8000c10:	4835      	ldr	r0, [pc, #212]	; (8000ce8 <MX_GPIO_Init+0x2e8>)
 8000c12:	f000 fc19 	bl	8001448 <HAL_GPIO_Init>

  /*Configure GPIO pins : B5_Pin VSYNC_Pin G2_Pin R4_Pin
                           R5_Pin */
  GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8000c16:	f641 0358 	movw	r3, #6232	; 0x1858
 8000c1a:	627b      	str	r3, [r7, #36]	; 0x24
                          |R5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c1c:	2302      	movs	r3, #2
 8000c1e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c20:	2300      	movs	r3, #0
 8000c22:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c24:	2300      	movs	r3, #0
 8000c26:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000c28:	230e      	movs	r3, #14
 8000c2a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c30:	4619      	mov	r1, r3
 8000c32:	482d      	ldr	r0, [pc, #180]	; (8000ce8 <MX_GPIO_Init+0x2e8>)
 8000c34:	f000 fc08 	bl	8001448 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8000c38:	2380      	movs	r3, #128	; 0x80
 8000c3a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c3c:	2301      	movs	r3, #1
 8000c3e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c40:	2300      	movs	r3, #0
 8000c42:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c44:	2300      	movs	r3, #0
 8000c46:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8000c48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	4826      	ldr	r0, [pc, #152]	; (8000ce8 <MX_GPIO_Init+0x2e8>)
 8000c50:	f000 fbfa 	bl	8001448 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8000c54:	2320      	movs	r3, #32
 8000c56:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000c58:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000c5c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8000c62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c66:	4619      	mov	r1, r3
 8000c68:	481e      	ldr	r0, [pc, #120]	; (8000ce4 <MX_GPIO_Init+0x2e4>)
 8000c6a:	f000 fbed 	bl	8001448 <HAL_GPIO_Init>

  /*Configure GPIO pins : R3_Pin R6_Pin */
  GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8000c6e:	2303      	movs	r3, #3
 8000c70:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c72:	2302      	movs	r3, #2
 8000c74:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c76:	2300      	movs	r3, #0
 8000c78:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000c7e:	2309      	movs	r3, #9
 8000c80:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c86:	4619      	mov	r1, r3
 8000c88:	481b      	ldr	r0, [pc, #108]	; (8000cf8 <MX_GPIO_Init+0x2f8>)
 8000c8a:	f000 fbdd 	bl	8001448 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000c8e:	2304      	movs	r3, #4
 8000c90:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c92:	2300      	movs	r3, #0
 8000c94:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000c96:	2302      	movs	r3, #2
 8000c98:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000c9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	4815      	ldr	r0, [pc, #84]	; (8000cf8 <MX_GPIO_Init+0x2f8>)
 8000ca2:	f000 fbd1 	bl	8001448 <HAL_GPIO_Init>

  /*Configure GPIO pins : A10_Pin A11_Pin BA0_Pin BA1_Pin
                           SDCLK_Pin SDNCAS_Pin */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8000ca6:	f248 1333 	movw	r3, #33075	; 0x8133
 8000caa:	627b      	str	r3, [r7, #36]	; 0x24
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cac:	2302      	movs	r3, #2
 8000cae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cb4:	2303      	movs	r3, #3
 8000cb6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000cb8:	230c      	movs	r3, #12
 8000cba:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000cbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	480b      	ldr	r0, [pc, #44]	; (8000cf0 <MX_GPIO_Init+0x2f0>)
 8000cc4:	f000 fbc0 	bl	8001448 <HAL_GPIO_Init>

  /*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D7_Pin
                           D8_Pin D9_Pin D10_Pin D11_Pin
                           D12_Pin NBL0_Pin NBL1_Pin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8000cc8:	f64f 7383 	movw	r3, #65411	; 0xff83
 8000ccc:	627b      	str	r3, [r7, #36]	; 0x24
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cce:	2302      	movs	r3, #2
 8000cd0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cd6:	2303      	movs	r3, #3
 8000cd8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000cda:	230c      	movs	r3, #12
 8000cdc:	637b      	str	r3, [r7, #52]	; 0x34
 8000cde:	e00d      	b.n	8000cfc <MX_GPIO_Init+0x2fc>
 8000ce0:	40023800 	.word	0x40023800
 8000ce4:	40020800 	.word	0x40020800
 8000ce8:	40020000 	.word	0x40020000
 8000cec:	40020c00 	.word	0x40020c00
 8000cf0:	40021800 	.word	0x40021800
 8000cf4:	40021400 	.word	0x40021400
 8000cf8:	40020400 	.word	0x40020400
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000cfc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d00:	4619      	mov	r1, r3
 8000d02:	4881      	ldr	r0, [pc, #516]	; (8000f08 <MX_GPIO_Init+0x508>)
 8000d04:	f000 fba0 	bl	8001448 <HAL_GPIO_Init>

  /*Configure GPIO pins : G4_Pin G5_Pin B6_Pin B7_Pin */
  GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8000d08:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8000d0c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d0e:	2302      	movs	r3, #2
 8000d10:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d12:	2300      	movs	r3, #0
 8000d14:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d16:	2300      	movs	r3, #0
 8000d18:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000d1a:	230e      	movs	r3, #14
 8000d1c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d22:	4619      	mov	r1, r3
 8000d24:	4879      	ldr	r0, [pc, #484]	; (8000f0c <MX_GPIO_Init+0x50c>)
 8000d26:	f000 fb8f 	bl	8001448 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_HS_ID_Pin OTG_HS_DM_Pin OTG_HS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 8000d2a:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 8000d2e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d30:	2302      	movs	r3, #2
 8000d32:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d34:	2300      	movs	r3, #0
 8000d36:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8000d3c:	230c      	movs	r3, #12
 8000d3e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d44:	4619      	mov	r1, r3
 8000d46:	4871      	ldr	r0, [pc, #452]	; (8000f0c <MX_GPIO_Init+0x50c>)
 8000d48:	f000 fb7e 	bl	8001448 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_HS_Pin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 8000d4c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d50:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d52:	2300      	movs	r3, #0
 8000d54:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d56:	2300      	movs	r3, #0
 8000d58:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 8000d5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d5e:	4619      	mov	r1, r3
 8000d60:	486a      	ldr	r0, [pc, #424]	; (8000f0c <MX_GPIO_Init+0x50c>)
 8000d62:	f000 fb71 	bl	8001448 <HAL_GPIO_Init>

  /*Configure GPIO pins : D13_Pin D14_Pin D15_Pin D0_Pin
                           D1_Pin D2_Pin D3_Pin */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8000d66:	f24c 7303 	movw	r3, #50947	; 0xc703
 8000d6a:	627b      	str	r3, [r7, #36]	; 0x24
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d6c:	2302      	movs	r3, #2
 8000d6e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d70:	2300      	movs	r3, #0
 8000d72:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d74:	2303      	movs	r3, #3
 8000d76:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000d78:	230c      	movs	r3, #12
 8000d7a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d80:	4619      	mov	r1, r3
 8000d82:	4863      	ldr	r0, [pc, #396]	; (8000f10 <MX_GPIO_Init+0x510>)
 8000d84:	f000 fb60 	bl	8001448 <HAL_GPIO_Init>

  /*Configure GPIO pins : TE_Pin PD4 */
  GPIO_InitStruct.Pin = TE_Pin|GPIO_PIN_4;
 8000d88:	f44f 6301 	mov.w	r3, #2064	; 0x810
 8000d8c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d92:	2300      	movs	r3, #0
 8000d94:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	485c      	ldr	r0, [pc, #368]	; (8000f10 <MX_GPIO_Init+0x510>)
 8000d9e:	f000 fb53 	bl	8001448 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8000da2:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000da6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000da8:	2301      	movs	r3, #1
 8000daa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dac:	2300      	movs	r3, #0
 8000dae:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db0:	2300      	movs	r3, #0
 8000db2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000db4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000db8:	4619      	mov	r1, r3
 8000dba:	4855      	ldr	r0, [pc, #340]	; (8000f10 <MX_GPIO_Init+0x510>)
 8000dbc:	f000 fb44 	bl	8001448 <HAL_GPIO_Init>

  /*Configure GPIO pins : R7_Pin DOTCLK_Pin B3_Pin */
  GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8000dc0:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8000dc4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc6:	2302      	movs	r3, #2
 8000dc8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000dd2:	230e      	movs	r3, #14
 8000dd4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000dd6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dda:	4619      	mov	r1, r3
 8000ddc:	484d      	ldr	r0, [pc, #308]	; (8000f14 <MX_GPIO_Init+0x514>)
 8000dde:	f000 fb33 	bl	8001448 <HAL_GPIO_Init>

  /*Configure GPIO pins : HSYNC_Pin G6_Pin R2_Pin */
  GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8000de2:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8000de6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de8:	2302      	movs	r3, #2
 8000dea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dec:	2300      	movs	r3, #0
 8000dee:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df0:	2300      	movs	r3, #0
 8000df2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000df4:	230e      	movs	r3, #14
 8000df6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000df8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	4846      	ldr	r0, [pc, #280]	; (8000f18 <MX_GPIO_Init+0x518>)
 8000e00:	f000 fb22 	bl	8001448 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C3_SDA_Pin */
  GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8000e04:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e08:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e0a:	2312      	movs	r3, #18
 8000e0c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e12:	2300      	movs	r3, #0
 8000e14:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000e16:	2304      	movs	r3, #4
 8000e18:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8000e1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e1e:	4619      	mov	r1, r3
 8000e20:	483d      	ldr	r0, [pc, #244]	; (8000f18 <MX_GPIO_Init+0x518>)
 8000e22:	f000 fb11 	bl	8001448 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C3_SCL_Pin */
  GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8000e26:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e2a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e2c:	2312      	movs	r3, #18
 8000e2e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e30:	2300      	movs	r3, #0
 8000e32:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e34:	2300      	movs	r3, #0
 8000e36:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000e38:	2304      	movs	r3, #4
 8000e3a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8000e3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e40:	4619      	mov	r1, r3
 8000e42:	4836      	ldr	r0, [pc, #216]	; (8000f1c <MX_GPIO_Init+0x51c>)
 8000e44:	f000 fb00 	bl	8001448 <HAL_GPIO_Init>

  /*Configure GPIO pins : G7_Pin B2_Pin */
  GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8000e48:	2348      	movs	r3, #72	; 0x48
 8000e4a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e4c:	2302      	movs	r3, #2
 8000e4e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e50:	2300      	movs	r3, #0
 8000e52:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e54:	2300      	movs	r3, #0
 8000e56:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000e58:	230e      	movs	r3, #14
 8000e5a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e60:	4619      	mov	r1, r3
 8000e62:	482b      	ldr	r0, [pc, #172]	; (8000f10 <MX_GPIO_Init+0x510>)
 8000e64:	f000 faf0 	bl	8001448 <HAL_GPIO_Init>

  /*Configure GPIO pins : G3_Pin B4_Pin */
  GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8000e68:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000e6c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e6e:	2302      	movs	r3, #2
 8000e70:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e72:	2300      	movs	r3, #0
 8000e74:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e76:	2300      	movs	r3, #0
 8000e78:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000e7a:	2309      	movs	r3, #9
 8000e7c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e82:	4619      	mov	r1, r3
 8000e84:	4823      	ldr	r0, [pc, #140]	; (8000f14 <MX_GPIO_Init+0x514>)
 8000e86:	f000 fadf 	bl	8001448 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8000e8a:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000e8e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e90:	2301      	movs	r3, #1
 8000e92:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e94:	2300      	movs	r3, #0
 8000e96:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	481c      	ldr	r0, [pc, #112]	; (8000f14 <MX_GPIO_Init+0x514>)
 8000ea4:	f000 fad0 	bl	8001448 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000ea8:	2310      	movs	r3, #16
 8000eaa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000eac:	2300      	movs	r3, #0
 8000eae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eb8:	4619      	mov	r1, r3
 8000eba:	4814      	ldr	r0, [pc, #80]	; (8000f0c <MX_GPIO_Init+0x50c>)
 8000ebc:	f000 fac4 	bl	8001448 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDCKE1_Pin SDNE1_Pin */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8000ec0:	2360      	movs	r3, #96	; 0x60
 8000ec2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec4:	2302      	movs	r3, #2
 8000ec6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ecc:	2303      	movs	r3, #3
 8000ece:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000ed0:	230c      	movs	r3, #12
 8000ed2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ed4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ed8:	4619      	mov	r1, r3
 8000eda:	480c      	ldr	r0, [pc, #48]	; (8000f0c <MX_GPIO_Init+0x50c>)
 8000edc:	f000 fab4 	bl	8001448 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	2100      	movs	r1, #0
 8000ee4:	2007      	movs	r0, #7
 8000ee6:	f000 fa78 	bl	80013da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000eea:	2007      	movs	r0, #7
 8000eec:	f000 fa91 	bl	8001412 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	2100      	movs	r1, #0
 8000ef4:	2008      	movs	r0, #8
 8000ef6:	f000 fa70 	bl	80013da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000efa:	2008      	movs	r0, #8
 8000efc:	f000 fa89 	bl	8001412 <HAL_NVIC_EnableIRQ>

}
 8000f00:	bf00      	nop
 8000f02:	3738      	adds	r7, #56	; 0x38
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	40021000 	.word	0x40021000
 8000f0c:	40020400 	.word	0x40020400
 8000f10:	40020c00 	.word	0x40020c00
 8000f14:	40021800 	.word	0x40021800
 8000f18:	40020800 	.word	0x40020800
 8000f1c:	40020000 	.word	0x40020000

08000f20 <Q_onAssert>:

/* USER CODE BEGIN 4 */
void Q_onAssert( char const * 	module, int_t 	location ){
 8000f20:	b590      	push	{r4, r7, lr}
 8000f22:	b087      	sub	sp, #28
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
 8000f28:	6039      	str	r1, [r7, #0]
	uint8_t log[] = "Q_onAssert\r\n";
 8000f2a:	4b06      	ldr	r3, [pc, #24]	; (8000f44 <Q_onAssert+0x24>)
 8000f2c:	f107 0408 	add.w	r4, r7, #8
 8000f30:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f32:	c407      	stmia	r4!, {r0, r1, r2}
 8000f34:	7023      	strb	r3, [r4, #0]
	uart_log(log);
 8000f36:	f107 0308 	add.w	r3, r7, #8
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f7ff fb90 	bl	8000660 <uart_log>
	while(1);
 8000f40:	e7fe      	b.n	8000f40 <Q_onAssert+0x20>
 8000f42:	bf00      	nop
 8000f44:	080054a0 	.word	0x080054a0

08000f48 <HAL_GPIO_EXTI_Callback>:
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	4603      	mov	r3, r0
 8000f50:	80fb      	strh	r3, [r7, #6]

	if(GPIO_Pin == BUTTON_2_Pin){
 8000f52:	88fb      	ldrh	r3, [r7, #6]
 8000f54:	2b04      	cmp	r3, #4
 8000f56:	d103      	bne.n	8000f60 <HAL_GPIO_EXTI_Callback+0x18>
		Lamp_pushSwitch(&lamp);
 8000f58:	4805      	ldr	r0, [pc, #20]	; (8000f70 <HAL_GPIO_EXTI_Callback+0x28>)
 8000f5a:	f003 fe4d 	bl	8004bf8 <Lamp_pushSwitch>
	}else{
		Lamp_holdSwitch(&lamp);
	}
}
 8000f5e:	e002      	b.n	8000f66 <HAL_GPIO_EXTI_Callback+0x1e>
		Lamp_holdSwitch(&lamp);
 8000f60:	4803      	ldr	r0, [pc, #12]	; (8000f70 <HAL_GPIO_EXTI_Callback+0x28>)
 8000f62:	f003 fe6b 	bl	8004c3c <Lamp_holdSwitch>
}
 8000f66:	bf00      	nop
 8000f68:	3708      	adds	r7, #8
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	2000008c 	.word	0x2000008c

08000f74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f78:	b672      	cpsid	i
}
 8000f7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f7c:	e7fe      	b.n	8000f7c <Error_Handler+0x8>
	...

08000f80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f86:	2300      	movs	r3, #0
 8000f88:	607b      	str	r3, [r7, #4]
 8000f8a:	4b10      	ldr	r3, [pc, #64]	; (8000fcc <HAL_MspInit+0x4c>)
 8000f8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f8e:	4a0f      	ldr	r2, [pc, #60]	; (8000fcc <HAL_MspInit+0x4c>)
 8000f90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f94:	6453      	str	r3, [r2, #68]	; 0x44
 8000f96:	4b0d      	ldr	r3, [pc, #52]	; (8000fcc <HAL_MspInit+0x4c>)
 8000f98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f9e:	607b      	str	r3, [r7, #4]
 8000fa0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	603b      	str	r3, [r7, #0]
 8000fa6:	4b09      	ldr	r3, [pc, #36]	; (8000fcc <HAL_MspInit+0x4c>)
 8000fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000faa:	4a08      	ldr	r2, [pc, #32]	; (8000fcc <HAL_MspInit+0x4c>)
 8000fac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fb0:	6413      	str	r3, [r2, #64]	; 0x40
 8000fb2:	4b06      	ldr	r3, [pc, #24]	; (8000fcc <HAL_MspInit+0x4c>)
 8000fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fba:	603b      	str	r3, [r7, #0]
 8000fbc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000fbe:	2007      	movs	r0, #7
 8000fc0:	f000 fa00 	bl	80013c4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fc4:	bf00      	nop
 8000fc6:	3708      	adds	r7, #8
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	40023800 	.word	0x40023800

08000fd0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b08a      	sub	sp, #40	; 0x28
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd8:	f107 0314 	add.w	r3, r7, #20
 8000fdc:	2200      	movs	r2, #0
 8000fde:	601a      	str	r2, [r3, #0]
 8000fe0:	605a      	str	r2, [r3, #4]
 8000fe2:	609a      	str	r2, [r3, #8]
 8000fe4:	60da      	str	r2, [r3, #12]
 8000fe6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	4a19      	ldr	r2, [pc, #100]	; (8001054 <HAL_UART_MspInit+0x84>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d12c      	bne.n	800104c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	613b      	str	r3, [r7, #16]
 8000ff6:	4b18      	ldr	r3, [pc, #96]	; (8001058 <HAL_UART_MspInit+0x88>)
 8000ff8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ffa:	4a17      	ldr	r2, [pc, #92]	; (8001058 <HAL_UART_MspInit+0x88>)
 8000ffc:	f043 0310 	orr.w	r3, r3, #16
 8001000:	6453      	str	r3, [r2, #68]	; 0x44
 8001002:	4b15      	ldr	r3, [pc, #84]	; (8001058 <HAL_UART_MspInit+0x88>)
 8001004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001006:	f003 0310 	and.w	r3, r3, #16
 800100a:	613b      	str	r3, [r7, #16]
 800100c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800100e:	2300      	movs	r3, #0
 8001010:	60fb      	str	r3, [r7, #12]
 8001012:	4b11      	ldr	r3, [pc, #68]	; (8001058 <HAL_UART_MspInit+0x88>)
 8001014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001016:	4a10      	ldr	r2, [pc, #64]	; (8001058 <HAL_UART_MspInit+0x88>)
 8001018:	f043 0301 	orr.w	r3, r3, #1
 800101c:	6313      	str	r3, [r2, #48]	; 0x30
 800101e:	4b0e      	ldr	r3, [pc, #56]	; (8001058 <HAL_UART_MspInit+0x88>)
 8001020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001022:	f003 0301 	and.w	r3, r3, #1
 8001026:	60fb      	str	r3, [r7, #12]
 8001028:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800102a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800102e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001030:	2302      	movs	r3, #2
 8001032:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001034:	2300      	movs	r3, #0
 8001036:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001038:	2303      	movs	r3, #3
 800103a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800103c:	2307      	movs	r3, #7
 800103e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001040:	f107 0314 	add.w	r3, r7, #20
 8001044:	4619      	mov	r1, r3
 8001046:	4805      	ldr	r0, [pc, #20]	; (800105c <HAL_UART_MspInit+0x8c>)
 8001048:	f000 f9fe 	bl	8001448 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800104c:	bf00      	nop
 800104e:	3728      	adds	r7, #40	; 0x28
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	40011000 	.word	0x40011000
 8001058:	40023800 	.word	0x40023800
 800105c:	40020000 	.word	0x40020000

08001060 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001064:	e7fe      	b.n	8001064 <NMI_Handler+0x4>

08001066 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001066:	b480      	push	{r7}
 8001068:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800106a:	e7fe      	b.n	800106a <HardFault_Handler+0x4>

0800106c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001070:	e7fe      	b.n	8001070 <MemManage_Handler+0x4>

08001072 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001072:	b480      	push	{r7}
 8001074:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001076:	e7fe      	b.n	8001076 <BusFault_Handler+0x4>

08001078 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800107c:	e7fe      	b.n	800107c <UsageFault_Handler+0x4>

0800107e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800107e:	b480      	push	{r7}
 8001080:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001082:	bf00      	nop
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr

0800108c <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_1_Pin);
 8001090:	2002      	movs	r0, #2
 8001092:	f000 fbb9 	bl	8001808 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001096:	bf00      	nop
 8001098:	bd80      	pop	{r7, pc}

0800109a <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800109a:	b580      	push	{r7, lr}
 800109c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_2_Pin);
 800109e:	2004      	movs	r0, #4
 80010a0:	f000 fbb2 	bl	8001808 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80010a4:	bf00      	nop
 80010a6:	bd80      	pop	{r7, pc}

080010a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010ac:	4b06      	ldr	r3, [pc, #24]	; (80010c8 <SystemInit+0x20>)
 80010ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010b2:	4a05      	ldr	r2, [pc, #20]	; (80010c8 <SystemInit+0x20>)
 80010b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010bc:	bf00      	nop
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr
 80010c6:	bf00      	nop
 80010c8:	e000ed00 	.word	0xe000ed00

080010cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80010cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001104 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80010d0:	480d      	ldr	r0, [pc, #52]	; (8001108 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80010d2:	490e      	ldr	r1, [pc, #56]	; (800110c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80010d4:	4a0e      	ldr	r2, [pc, #56]	; (8001110 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80010d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010d8:	e002      	b.n	80010e0 <LoopCopyDataInit>

080010da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010de:	3304      	adds	r3, #4

080010e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010e4:	d3f9      	bcc.n	80010da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010e6:	4a0b      	ldr	r2, [pc, #44]	; (8001114 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80010e8:	4c0b      	ldr	r4, [pc, #44]	; (8001118 <LoopFillZerobss+0x26>)
  movs r3, #0
 80010ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010ec:	e001      	b.n	80010f2 <LoopFillZerobss>

080010ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010f0:	3204      	adds	r2, #4

080010f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010f4:	d3fb      	bcc.n	80010ee <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80010f6:	f7ff ffd7 	bl	80010a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010fa:	f004 f921 	bl	8005340 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010fe:	f7ff fbbf 	bl	8000880 <main>
  bx  lr    
 8001102:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001104:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001108:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800110c:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8001110:	08005524 	.word	0x08005524
  ldr r2, =_sbss
 8001114:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8001118:	20012e50 	.word	0x20012e50

0800111c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800111c:	e7fe      	b.n	800111c <ADC_IRQHandler>
	...

08001120 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001124:	4b0e      	ldr	r3, [pc, #56]	; (8001160 <HAL_Init+0x40>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4a0d      	ldr	r2, [pc, #52]	; (8001160 <HAL_Init+0x40>)
 800112a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800112e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001130:	4b0b      	ldr	r3, [pc, #44]	; (8001160 <HAL_Init+0x40>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4a0a      	ldr	r2, [pc, #40]	; (8001160 <HAL_Init+0x40>)
 8001136:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800113a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800113c:	4b08      	ldr	r3, [pc, #32]	; (8001160 <HAL_Init+0x40>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4a07      	ldr	r2, [pc, #28]	; (8001160 <HAL_Init+0x40>)
 8001142:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001146:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001148:	2003      	movs	r0, #3
 800114a:	f000 f93b 	bl	80013c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800114e:	2000      	movs	r0, #0
 8001150:	f000 f808 	bl	8001164 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001154:	f7ff ff14 	bl	8000f80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001158:	2300      	movs	r3, #0
}
 800115a:	4618      	mov	r0, r3
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	40023c00 	.word	0x40023c00

08001164 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800116c:	4b12      	ldr	r3, [pc, #72]	; (80011b8 <HAL_InitTick+0x54>)
 800116e:	681a      	ldr	r2, [r3, #0]
 8001170:	4b12      	ldr	r3, [pc, #72]	; (80011bc <HAL_InitTick+0x58>)
 8001172:	781b      	ldrb	r3, [r3, #0]
 8001174:	4619      	mov	r1, r3
 8001176:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800117a:	fbb3 f3f1 	udiv	r3, r3, r1
 800117e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001182:	4618      	mov	r0, r3
 8001184:	f000 f953 	bl	800142e <HAL_SYSTICK_Config>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d001      	beq.n	8001192 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800118e:	2301      	movs	r3, #1
 8001190:	e00e      	b.n	80011b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	2b0f      	cmp	r3, #15
 8001196:	d80a      	bhi.n	80011ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001198:	2200      	movs	r2, #0
 800119a:	6879      	ldr	r1, [r7, #4]
 800119c:	f04f 30ff 	mov.w	r0, #4294967295
 80011a0:	f000 f91b 	bl	80013da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011a4:	4a06      	ldr	r2, [pc, #24]	; (80011c0 <HAL_InitTick+0x5c>)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011aa:	2300      	movs	r3, #0
 80011ac:	e000      	b.n	80011b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011ae:	2301      	movs	r3, #1
}
 80011b0:	4618      	mov	r0, r3
 80011b2:	3708      	adds	r7, #8
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	20000000 	.word	0x20000000
 80011bc:	20000008 	.word	0x20000008
 80011c0:	20000004 	.word	0x20000004

080011c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
  return uwTick;
 80011c8:	4b03      	ldr	r3, [pc, #12]	; (80011d8 <HAL_GetTick+0x14>)
 80011ca:	681b      	ldr	r3, [r3, #0]
}
 80011cc:	4618      	mov	r0, r3
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr
 80011d6:	bf00      	nop
 80011d8:	200000a4 	.word	0x200000a4

080011dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b084      	sub	sp, #16
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011e4:	f7ff ffee 	bl	80011c4 <HAL_GetTick>
 80011e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011f4:	d005      	beq.n	8001202 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011f6:	4b0a      	ldr	r3, [pc, #40]	; (8001220 <HAL_Delay+0x44>)
 80011f8:	781b      	ldrb	r3, [r3, #0]
 80011fa:	461a      	mov	r2, r3
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	4413      	add	r3, r2
 8001200:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001202:	bf00      	nop
 8001204:	f7ff ffde 	bl	80011c4 <HAL_GetTick>
 8001208:	4602      	mov	r2, r0
 800120a:	68bb      	ldr	r3, [r7, #8]
 800120c:	1ad3      	subs	r3, r2, r3
 800120e:	68fa      	ldr	r2, [r7, #12]
 8001210:	429a      	cmp	r2, r3
 8001212:	d8f7      	bhi.n	8001204 <HAL_Delay+0x28>
  {
  }
}
 8001214:	bf00      	nop
 8001216:	bf00      	nop
 8001218:	3710      	adds	r7, #16
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	20000008 	.word	0x20000008

08001224 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001224:	b480      	push	{r7}
 8001226:	b085      	sub	sp, #20
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	f003 0307 	and.w	r3, r3, #7
 8001232:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001234:	4b0c      	ldr	r3, [pc, #48]	; (8001268 <__NVIC_SetPriorityGrouping+0x44>)
 8001236:	68db      	ldr	r3, [r3, #12]
 8001238:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800123a:	68ba      	ldr	r2, [r7, #8]
 800123c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001240:	4013      	ands	r3, r2
 8001242:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001248:	68bb      	ldr	r3, [r7, #8]
 800124a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800124c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001250:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001254:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001256:	4a04      	ldr	r2, [pc, #16]	; (8001268 <__NVIC_SetPriorityGrouping+0x44>)
 8001258:	68bb      	ldr	r3, [r7, #8]
 800125a:	60d3      	str	r3, [r2, #12]
}
 800125c:	bf00      	nop
 800125e:	3714      	adds	r7, #20
 8001260:	46bd      	mov	sp, r7
 8001262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001266:	4770      	bx	lr
 8001268:	e000ed00 	.word	0xe000ed00

0800126c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001270:	4b04      	ldr	r3, [pc, #16]	; (8001284 <__NVIC_GetPriorityGrouping+0x18>)
 8001272:	68db      	ldr	r3, [r3, #12]
 8001274:	0a1b      	lsrs	r3, r3, #8
 8001276:	f003 0307 	and.w	r3, r3, #7
}
 800127a:	4618      	mov	r0, r3
 800127c:	46bd      	mov	sp, r7
 800127e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001282:	4770      	bx	lr
 8001284:	e000ed00 	.word	0xe000ed00

08001288 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001288:	b480      	push	{r7}
 800128a:	b083      	sub	sp, #12
 800128c:	af00      	add	r7, sp, #0
 800128e:	4603      	mov	r3, r0
 8001290:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001292:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001296:	2b00      	cmp	r3, #0
 8001298:	db0b      	blt.n	80012b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800129a:	79fb      	ldrb	r3, [r7, #7]
 800129c:	f003 021f 	and.w	r2, r3, #31
 80012a0:	4907      	ldr	r1, [pc, #28]	; (80012c0 <__NVIC_EnableIRQ+0x38>)
 80012a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a6:	095b      	lsrs	r3, r3, #5
 80012a8:	2001      	movs	r0, #1
 80012aa:	fa00 f202 	lsl.w	r2, r0, r2
 80012ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80012b2:	bf00      	nop
 80012b4:	370c      	adds	r7, #12
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr
 80012be:	bf00      	nop
 80012c0:	e000e100 	.word	0xe000e100

080012c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b083      	sub	sp, #12
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	4603      	mov	r3, r0
 80012cc:	6039      	str	r1, [r7, #0]
 80012ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	db0a      	blt.n	80012ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	b2da      	uxtb	r2, r3
 80012dc:	490c      	ldr	r1, [pc, #48]	; (8001310 <__NVIC_SetPriority+0x4c>)
 80012de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012e2:	0112      	lsls	r2, r2, #4
 80012e4:	b2d2      	uxtb	r2, r2
 80012e6:	440b      	add	r3, r1
 80012e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012ec:	e00a      	b.n	8001304 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	b2da      	uxtb	r2, r3
 80012f2:	4908      	ldr	r1, [pc, #32]	; (8001314 <__NVIC_SetPriority+0x50>)
 80012f4:	79fb      	ldrb	r3, [r7, #7]
 80012f6:	f003 030f 	and.w	r3, r3, #15
 80012fa:	3b04      	subs	r3, #4
 80012fc:	0112      	lsls	r2, r2, #4
 80012fe:	b2d2      	uxtb	r2, r2
 8001300:	440b      	add	r3, r1
 8001302:	761a      	strb	r2, [r3, #24]
}
 8001304:	bf00      	nop
 8001306:	370c      	adds	r7, #12
 8001308:	46bd      	mov	sp, r7
 800130a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130e:	4770      	bx	lr
 8001310:	e000e100 	.word	0xe000e100
 8001314:	e000ed00 	.word	0xe000ed00

08001318 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001318:	b480      	push	{r7}
 800131a:	b089      	sub	sp, #36	; 0x24
 800131c:	af00      	add	r7, sp, #0
 800131e:	60f8      	str	r0, [r7, #12]
 8001320:	60b9      	str	r1, [r7, #8]
 8001322:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	f003 0307 	and.w	r3, r3, #7
 800132a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800132c:	69fb      	ldr	r3, [r7, #28]
 800132e:	f1c3 0307 	rsb	r3, r3, #7
 8001332:	2b04      	cmp	r3, #4
 8001334:	bf28      	it	cs
 8001336:	2304      	movcs	r3, #4
 8001338:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800133a:	69fb      	ldr	r3, [r7, #28]
 800133c:	3304      	adds	r3, #4
 800133e:	2b06      	cmp	r3, #6
 8001340:	d902      	bls.n	8001348 <NVIC_EncodePriority+0x30>
 8001342:	69fb      	ldr	r3, [r7, #28]
 8001344:	3b03      	subs	r3, #3
 8001346:	e000      	b.n	800134a <NVIC_EncodePriority+0x32>
 8001348:	2300      	movs	r3, #0
 800134a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800134c:	f04f 32ff 	mov.w	r2, #4294967295
 8001350:	69bb      	ldr	r3, [r7, #24]
 8001352:	fa02 f303 	lsl.w	r3, r2, r3
 8001356:	43da      	mvns	r2, r3
 8001358:	68bb      	ldr	r3, [r7, #8]
 800135a:	401a      	ands	r2, r3
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001360:	f04f 31ff 	mov.w	r1, #4294967295
 8001364:	697b      	ldr	r3, [r7, #20]
 8001366:	fa01 f303 	lsl.w	r3, r1, r3
 800136a:	43d9      	mvns	r1, r3
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001370:	4313      	orrs	r3, r2
         );
}
 8001372:	4618      	mov	r0, r3
 8001374:	3724      	adds	r7, #36	; 0x24
 8001376:	46bd      	mov	sp, r7
 8001378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137c:	4770      	bx	lr
	...

08001380 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b082      	sub	sp, #8
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	3b01      	subs	r3, #1
 800138c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001390:	d301      	bcc.n	8001396 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001392:	2301      	movs	r3, #1
 8001394:	e00f      	b.n	80013b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001396:	4a0a      	ldr	r2, [pc, #40]	; (80013c0 <SysTick_Config+0x40>)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	3b01      	subs	r3, #1
 800139c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800139e:	210f      	movs	r1, #15
 80013a0:	f04f 30ff 	mov.w	r0, #4294967295
 80013a4:	f7ff ff8e 	bl	80012c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013a8:	4b05      	ldr	r3, [pc, #20]	; (80013c0 <SysTick_Config+0x40>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013ae:	4b04      	ldr	r3, [pc, #16]	; (80013c0 <SysTick_Config+0x40>)
 80013b0:	2207      	movs	r2, #7
 80013b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013b4:	2300      	movs	r3, #0
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	3708      	adds	r7, #8
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	e000e010 	.word	0xe000e010

080013c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b082      	sub	sp, #8
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013cc:	6878      	ldr	r0, [r7, #4]
 80013ce:	f7ff ff29 	bl	8001224 <__NVIC_SetPriorityGrouping>
}
 80013d2:	bf00      	nop
 80013d4:	3708      	adds	r7, #8
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}

080013da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013da:	b580      	push	{r7, lr}
 80013dc:	b086      	sub	sp, #24
 80013de:	af00      	add	r7, sp, #0
 80013e0:	4603      	mov	r3, r0
 80013e2:	60b9      	str	r1, [r7, #8]
 80013e4:	607a      	str	r2, [r7, #4]
 80013e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013e8:	2300      	movs	r3, #0
 80013ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013ec:	f7ff ff3e 	bl	800126c <__NVIC_GetPriorityGrouping>
 80013f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013f2:	687a      	ldr	r2, [r7, #4]
 80013f4:	68b9      	ldr	r1, [r7, #8]
 80013f6:	6978      	ldr	r0, [r7, #20]
 80013f8:	f7ff ff8e 	bl	8001318 <NVIC_EncodePriority>
 80013fc:	4602      	mov	r2, r0
 80013fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001402:	4611      	mov	r1, r2
 8001404:	4618      	mov	r0, r3
 8001406:	f7ff ff5d 	bl	80012c4 <__NVIC_SetPriority>
}
 800140a:	bf00      	nop
 800140c:	3718      	adds	r7, #24
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}

08001412 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001412:	b580      	push	{r7, lr}
 8001414:	b082      	sub	sp, #8
 8001416:	af00      	add	r7, sp, #0
 8001418:	4603      	mov	r3, r0
 800141a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800141c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001420:	4618      	mov	r0, r3
 8001422:	f7ff ff31 	bl	8001288 <__NVIC_EnableIRQ>
}
 8001426:	bf00      	nop
 8001428:	3708      	adds	r7, #8
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}

0800142e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800142e:	b580      	push	{r7, lr}
 8001430:	b082      	sub	sp, #8
 8001432:	af00      	add	r7, sp, #0
 8001434:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001436:	6878      	ldr	r0, [r7, #4]
 8001438:	f7ff ffa2 	bl	8001380 <SysTick_Config>
 800143c:	4603      	mov	r3, r0
}
 800143e:	4618      	mov	r0, r3
 8001440:	3708      	adds	r7, #8
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
	...

08001448 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001448:	b480      	push	{r7}
 800144a:	b089      	sub	sp, #36	; 0x24
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
 8001450:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001452:	2300      	movs	r3, #0
 8001454:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001456:	2300      	movs	r3, #0
 8001458:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800145a:	2300      	movs	r3, #0
 800145c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800145e:	2300      	movs	r3, #0
 8001460:	61fb      	str	r3, [r7, #28]
 8001462:	e177      	b.n	8001754 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001464:	2201      	movs	r2, #1
 8001466:	69fb      	ldr	r3, [r7, #28]
 8001468:	fa02 f303 	lsl.w	r3, r2, r3
 800146c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	697a      	ldr	r2, [r7, #20]
 8001474:	4013      	ands	r3, r2
 8001476:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001478:	693a      	ldr	r2, [r7, #16]
 800147a:	697b      	ldr	r3, [r7, #20]
 800147c:	429a      	cmp	r2, r3
 800147e:	f040 8166 	bne.w	800174e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	f003 0303 	and.w	r3, r3, #3
 800148a:	2b01      	cmp	r3, #1
 800148c:	d005      	beq.n	800149a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001496:	2b02      	cmp	r3, #2
 8001498:	d130      	bne.n	80014fc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	689b      	ldr	r3, [r3, #8]
 800149e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80014a0:	69fb      	ldr	r3, [r7, #28]
 80014a2:	005b      	lsls	r3, r3, #1
 80014a4:	2203      	movs	r2, #3
 80014a6:	fa02 f303 	lsl.w	r3, r2, r3
 80014aa:	43db      	mvns	r3, r3
 80014ac:	69ba      	ldr	r2, [r7, #24]
 80014ae:	4013      	ands	r3, r2
 80014b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	68da      	ldr	r2, [r3, #12]
 80014b6:	69fb      	ldr	r3, [r7, #28]
 80014b8:	005b      	lsls	r3, r3, #1
 80014ba:	fa02 f303 	lsl.w	r3, r2, r3
 80014be:	69ba      	ldr	r2, [r7, #24]
 80014c0:	4313      	orrs	r3, r2
 80014c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	69ba      	ldr	r2, [r7, #24]
 80014c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80014d0:	2201      	movs	r2, #1
 80014d2:	69fb      	ldr	r3, [r7, #28]
 80014d4:	fa02 f303 	lsl.w	r3, r2, r3
 80014d8:	43db      	mvns	r3, r3
 80014da:	69ba      	ldr	r2, [r7, #24]
 80014dc:	4013      	ands	r3, r2
 80014de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	091b      	lsrs	r3, r3, #4
 80014e6:	f003 0201 	and.w	r2, r3, #1
 80014ea:	69fb      	ldr	r3, [r7, #28]
 80014ec:	fa02 f303 	lsl.w	r3, r2, r3
 80014f0:	69ba      	ldr	r2, [r7, #24]
 80014f2:	4313      	orrs	r3, r2
 80014f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	69ba      	ldr	r2, [r7, #24]
 80014fa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	f003 0303 	and.w	r3, r3, #3
 8001504:	2b03      	cmp	r3, #3
 8001506:	d017      	beq.n	8001538 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	68db      	ldr	r3, [r3, #12]
 800150c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800150e:	69fb      	ldr	r3, [r7, #28]
 8001510:	005b      	lsls	r3, r3, #1
 8001512:	2203      	movs	r2, #3
 8001514:	fa02 f303 	lsl.w	r3, r2, r3
 8001518:	43db      	mvns	r3, r3
 800151a:	69ba      	ldr	r2, [r7, #24]
 800151c:	4013      	ands	r3, r2
 800151e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	689a      	ldr	r2, [r3, #8]
 8001524:	69fb      	ldr	r3, [r7, #28]
 8001526:	005b      	lsls	r3, r3, #1
 8001528:	fa02 f303 	lsl.w	r3, r2, r3
 800152c:	69ba      	ldr	r2, [r7, #24]
 800152e:	4313      	orrs	r3, r2
 8001530:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	69ba      	ldr	r2, [r7, #24]
 8001536:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	f003 0303 	and.w	r3, r3, #3
 8001540:	2b02      	cmp	r3, #2
 8001542:	d123      	bne.n	800158c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001544:	69fb      	ldr	r3, [r7, #28]
 8001546:	08da      	lsrs	r2, r3, #3
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	3208      	adds	r2, #8
 800154c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001550:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001552:	69fb      	ldr	r3, [r7, #28]
 8001554:	f003 0307 	and.w	r3, r3, #7
 8001558:	009b      	lsls	r3, r3, #2
 800155a:	220f      	movs	r2, #15
 800155c:	fa02 f303 	lsl.w	r3, r2, r3
 8001560:	43db      	mvns	r3, r3
 8001562:	69ba      	ldr	r2, [r7, #24]
 8001564:	4013      	ands	r3, r2
 8001566:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	691a      	ldr	r2, [r3, #16]
 800156c:	69fb      	ldr	r3, [r7, #28]
 800156e:	f003 0307 	and.w	r3, r3, #7
 8001572:	009b      	lsls	r3, r3, #2
 8001574:	fa02 f303 	lsl.w	r3, r2, r3
 8001578:	69ba      	ldr	r2, [r7, #24]
 800157a:	4313      	orrs	r3, r2
 800157c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800157e:	69fb      	ldr	r3, [r7, #28]
 8001580:	08da      	lsrs	r2, r3, #3
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	3208      	adds	r2, #8
 8001586:	69b9      	ldr	r1, [r7, #24]
 8001588:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001592:	69fb      	ldr	r3, [r7, #28]
 8001594:	005b      	lsls	r3, r3, #1
 8001596:	2203      	movs	r2, #3
 8001598:	fa02 f303 	lsl.w	r3, r2, r3
 800159c:	43db      	mvns	r3, r3
 800159e:	69ba      	ldr	r2, [r7, #24]
 80015a0:	4013      	ands	r3, r2
 80015a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	f003 0203 	and.w	r2, r3, #3
 80015ac:	69fb      	ldr	r3, [r7, #28]
 80015ae:	005b      	lsls	r3, r3, #1
 80015b0:	fa02 f303 	lsl.w	r3, r2, r3
 80015b4:	69ba      	ldr	r2, [r7, #24]
 80015b6:	4313      	orrs	r3, r2
 80015b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	69ba      	ldr	r2, [r7, #24]
 80015be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	f000 80c0 	beq.w	800174e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015ce:	2300      	movs	r3, #0
 80015d0:	60fb      	str	r3, [r7, #12]
 80015d2:	4b66      	ldr	r3, [pc, #408]	; (800176c <HAL_GPIO_Init+0x324>)
 80015d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015d6:	4a65      	ldr	r2, [pc, #404]	; (800176c <HAL_GPIO_Init+0x324>)
 80015d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015dc:	6453      	str	r3, [r2, #68]	; 0x44
 80015de:	4b63      	ldr	r3, [pc, #396]	; (800176c <HAL_GPIO_Init+0x324>)
 80015e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015e6:	60fb      	str	r3, [r7, #12]
 80015e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80015ea:	4a61      	ldr	r2, [pc, #388]	; (8001770 <HAL_GPIO_Init+0x328>)
 80015ec:	69fb      	ldr	r3, [r7, #28]
 80015ee:	089b      	lsrs	r3, r3, #2
 80015f0:	3302      	adds	r3, #2
 80015f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80015f8:	69fb      	ldr	r3, [r7, #28]
 80015fa:	f003 0303 	and.w	r3, r3, #3
 80015fe:	009b      	lsls	r3, r3, #2
 8001600:	220f      	movs	r2, #15
 8001602:	fa02 f303 	lsl.w	r3, r2, r3
 8001606:	43db      	mvns	r3, r3
 8001608:	69ba      	ldr	r2, [r7, #24]
 800160a:	4013      	ands	r3, r2
 800160c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	4a58      	ldr	r2, [pc, #352]	; (8001774 <HAL_GPIO_Init+0x32c>)
 8001612:	4293      	cmp	r3, r2
 8001614:	d037      	beq.n	8001686 <HAL_GPIO_Init+0x23e>
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	4a57      	ldr	r2, [pc, #348]	; (8001778 <HAL_GPIO_Init+0x330>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d031      	beq.n	8001682 <HAL_GPIO_Init+0x23a>
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	4a56      	ldr	r2, [pc, #344]	; (800177c <HAL_GPIO_Init+0x334>)
 8001622:	4293      	cmp	r3, r2
 8001624:	d02b      	beq.n	800167e <HAL_GPIO_Init+0x236>
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	4a55      	ldr	r2, [pc, #340]	; (8001780 <HAL_GPIO_Init+0x338>)
 800162a:	4293      	cmp	r3, r2
 800162c:	d025      	beq.n	800167a <HAL_GPIO_Init+0x232>
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	4a54      	ldr	r2, [pc, #336]	; (8001784 <HAL_GPIO_Init+0x33c>)
 8001632:	4293      	cmp	r3, r2
 8001634:	d01f      	beq.n	8001676 <HAL_GPIO_Init+0x22e>
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	4a53      	ldr	r2, [pc, #332]	; (8001788 <HAL_GPIO_Init+0x340>)
 800163a:	4293      	cmp	r3, r2
 800163c:	d019      	beq.n	8001672 <HAL_GPIO_Init+0x22a>
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	4a52      	ldr	r2, [pc, #328]	; (800178c <HAL_GPIO_Init+0x344>)
 8001642:	4293      	cmp	r3, r2
 8001644:	d013      	beq.n	800166e <HAL_GPIO_Init+0x226>
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	4a51      	ldr	r2, [pc, #324]	; (8001790 <HAL_GPIO_Init+0x348>)
 800164a:	4293      	cmp	r3, r2
 800164c:	d00d      	beq.n	800166a <HAL_GPIO_Init+0x222>
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	4a50      	ldr	r2, [pc, #320]	; (8001794 <HAL_GPIO_Init+0x34c>)
 8001652:	4293      	cmp	r3, r2
 8001654:	d007      	beq.n	8001666 <HAL_GPIO_Init+0x21e>
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	4a4f      	ldr	r2, [pc, #316]	; (8001798 <HAL_GPIO_Init+0x350>)
 800165a:	4293      	cmp	r3, r2
 800165c:	d101      	bne.n	8001662 <HAL_GPIO_Init+0x21a>
 800165e:	2309      	movs	r3, #9
 8001660:	e012      	b.n	8001688 <HAL_GPIO_Init+0x240>
 8001662:	230a      	movs	r3, #10
 8001664:	e010      	b.n	8001688 <HAL_GPIO_Init+0x240>
 8001666:	2308      	movs	r3, #8
 8001668:	e00e      	b.n	8001688 <HAL_GPIO_Init+0x240>
 800166a:	2307      	movs	r3, #7
 800166c:	e00c      	b.n	8001688 <HAL_GPIO_Init+0x240>
 800166e:	2306      	movs	r3, #6
 8001670:	e00a      	b.n	8001688 <HAL_GPIO_Init+0x240>
 8001672:	2305      	movs	r3, #5
 8001674:	e008      	b.n	8001688 <HAL_GPIO_Init+0x240>
 8001676:	2304      	movs	r3, #4
 8001678:	e006      	b.n	8001688 <HAL_GPIO_Init+0x240>
 800167a:	2303      	movs	r3, #3
 800167c:	e004      	b.n	8001688 <HAL_GPIO_Init+0x240>
 800167e:	2302      	movs	r3, #2
 8001680:	e002      	b.n	8001688 <HAL_GPIO_Init+0x240>
 8001682:	2301      	movs	r3, #1
 8001684:	e000      	b.n	8001688 <HAL_GPIO_Init+0x240>
 8001686:	2300      	movs	r3, #0
 8001688:	69fa      	ldr	r2, [r7, #28]
 800168a:	f002 0203 	and.w	r2, r2, #3
 800168e:	0092      	lsls	r2, r2, #2
 8001690:	4093      	lsls	r3, r2
 8001692:	69ba      	ldr	r2, [r7, #24]
 8001694:	4313      	orrs	r3, r2
 8001696:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001698:	4935      	ldr	r1, [pc, #212]	; (8001770 <HAL_GPIO_Init+0x328>)
 800169a:	69fb      	ldr	r3, [r7, #28]
 800169c:	089b      	lsrs	r3, r3, #2
 800169e:	3302      	adds	r3, #2
 80016a0:	69ba      	ldr	r2, [r7, #24]
 80016a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80016a6:	4b3d      	ldr	r3, [pc, #244]	; (800179c <HAL_GPIO_Init+0x354>)
 80016a8:	689b      	ldr	r3, [r3, #8]
 80016aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016ac:	693b      	ldr	r3, [r7, #16]
 80016ae:	43db      	mvns	r3, r3
 80016b0:	69ba      	ldr	r2, [r7, #24]
 80016b2:	4013      	ands	r3, r2
 80016b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d003      	beq.n	80016ca <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80016c2:	69ba      	ldr	r2, [r7, #24]
 80016c4:	693b      	ldr	r3, [r7, #16]
 80016c6:	4313      	orrs	r3, r2
 80016c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80016ca:	4a34      	ldr	r2, [pc, #208]	; (800179c <HAL_GPIO_Init+0x354>)
 80016cc:	69bb      	ldr	r3, [r7, #24]
 80016ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80016d0:	4b32      	ldr	r3, [pc, #200]	; (800179c <HAL_GPIO_Init+0x354>)
 80016d2:	68db      	ldr	r3, [r3, #12]
 80016d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016d6:	693b      	ldr	r3, [r7, #16]
 80016d8:	43db      	mvns	r3, r3
 80016da:	69ba      	ldr	r2, [r7, #24]
 80016dc:	4013      	ands	r3, r2
 80016de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d003      	beq.n	80016f4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80016ec:	69ba      	ldr	r2, [r7, #24]
 80016ee:	693b      	ldr	r3, [r7, #16]
 80016f0:	4313      	orrs	r3, r2
 80016f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80016f4:	4a29      	ldr	r2, [pc, #164]	; (800179c <HAL_GPIO_Init+0x354>)
 80016f6:	69bb      	ldr	r3, [r7, #24]
 80016f8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80016fa:	4b28      	ldr	r3, [pc, #160]	; (800179c <HAL_GPIO_Init+0x354>)
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001700:	693b      	ldr	r3, [r7, #16]
 8001702:	43db      	mvns	r3, r3
 8001704:	69ba      	ldr	r2, [r7, #24]
 8001706:	4013      	ands	r3, r2
 8001708:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001712:	2b00      	cmp	r3, #0
 8001714:	d003      	beq.n	800171e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001716:	69ba      	ldr	r2, [r7, #24]
 8001718:	693b      	ldr	r3, [r7, #16]
 800171a:	4313      	orrs	r3, r2
 800171c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800171e:	4a1f      	ldr	r2, [pc, #124]	; (800179c <HAL_GPIO_Init+0x354>)
 8001720:	69bb      	ldr	r3, [r7, #24]
 8001722:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001724:	4b1d      	ldr	r3, [pc, #116]	; (800179c <HAL_GPIO_Init+0x354>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800172a:	693b      	ldr	r3, [r7, #16]
 800172c:	43db      	mvns	r3, r3
 800172e:	69ba      	ldr	r2, [r7, #24]
 8001730:	4013      	ands	r3, r2
 8001732:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800173c:	2b00      	cmp	r3, #0
 800173e:	d003      	beq.n	8001748 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001740:	69ba      	ldr	r2, [r7, #24]
 8001742:	693b      	ldr	r3, [r7, #16]
 8001744:	4313      	orrs	r3, r2
 8001746:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001748:	4a14      	ldr	r2, [pc, #80]	; (800179c <HAL_GPIO_Init+0x354>)
 800174a:	69bb      	ldr	r3, [r7, #24]
 800174c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800174e:	69fb      	ldr	r3, [r7, #28]
 8001750:	3301      	adds	r3, #1
 8001752:	61fb      	str	r3, [r7, #28]
 8001754:	69fb      	ldr	r3, [r7, #28]
 8001756:	2b0f      	cmp	r3, #15
 8001758:	f67f ae84 	bls.w	8001464 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800175c:	bf00      	nop
 800175e:	bf00      	nop
 8001760:	3724      	adds	r7, #36	; 0x24
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr
 800176a:	bf00      	nop
 800176c:	40023800 	.word	0x40023800
 8001770:	40013800 	.word	0x40013800
 8001774:	40020000 	.word	0x40020000
 8001778:	40020400 	.word	0x40020400
 800177c:	40020800 	.word	0x40020800
 8001780:	40020c00 	.word	0x40020c00
 8001784:	40021000 	.word	0x40021000
 8001788:	40021400 	.word	0x40021400
 800178c:	40021800 	.word	0x40021800
 8001790:	40021c00 	.word	0x40021c00
 8001794:	40022000 	.word	0x40022000
 8001798:	40022400 	.word	0x40022400
 800179c:	40013c00 	.word	0x40013c00

080017a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b083      	sub	sp, #12
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
 80017a8:	460b      	mov	r3, r1
 80017aa:	807b      	strh	r3, [r7, #2]
 80017ac:	4613      	mov	r3, r2
 80017ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80017b0:	787b      	ldrb	r3, [r7, #1]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d003      	beq.n	80017be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017b6:	887a      	ldrh	r2, [r7, #2]
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80017bc:	e003      	b.n	80017c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80017be:	887b      	ldrh	r3, [r7, #2]
 80017c0:	041a      	lsls	r2, r3, #16
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	619a      	str	r2, [r3, #24]
}
 80017c6:	bf00      	nop
 80017c8:	370c      	adds	r7, #12
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr

080017d2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80017d2:	b480      	push	{r7}
 80017d4:	b085      	sub	sp, #20
 80017d6:	af00      	add	r7, sp, #0
 80017d8:	6078      	str	r0, [r7, #4]
 80017da:	460b      	mov	r3, r1
 80017dc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	695b      	ldr	r3, [r3, #20]
 80017e2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80017e4:	887a      	ldrh	r2, [r7, #2]
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	4013      	ands	r3, r2
 80017ea:	041a      	lsls	r2, r3, #16
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	43d9      	mvns	r1, r3
 80017f0:	887b      	ldrh	r3, [r7, #2]
 80017f2:	400b      	ands	r3, r1
 80017f4:	431a      	orrs	r2, r3
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	619a      	str	r2, [r3, #24]
}
 80017fa:	bf00      	nop
 80017fc:	3714      	adds	r7, #20
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr
	...

08001808 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af00      	add	r7, sp, #0
 800180e:	4603      	mov	r3, r0
 8001810:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001812:	4b08      	ldr	r3, [pc, #32]	; (8001834 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001814:	695a      	ldr	r2, [r3, #20]
 8001816:	88fb      	ldrh	r3, [r7, #6]
 8001818:	4013      	ands	r3, r2
 800181a:	2b00      	cmp	r3, #0
 800181c:	d006      	beq.n	800182c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800181e:	4a05      	ldr	r2, [pc, #20]	; (8001834 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001820:	88fb      	ldrh	r3, [r7, #6]
 8001822:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001824:	88fb      	ldrh	r3, [r7, #6]
 8001826:	4618      	mov	r0, r3
 8001828:	f7ff fb8e 	bl	8000f48 <HAL_GPIO_EXTI_Callback>
  }
}
 800182c:	bf00      	nop
 800182e:	3708      	adds	r7, #8
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}
 8001834:	40013c00 	.word	0x40013c00

08001838 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b086      	sub	sp, #24
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d101      	bne.n	800184a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001846:	2301      	movs	r3, #1
 8001848:	e267      	b.n	8001d1a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f003 0301 	and.w	r3, r3, #1
 8001852:	2b00      	cmp	r3, #0
 8001854:	d075      	beq.n	8001942 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001856:	4b88      	ldr	r3, [pc, #544]	; (8001a78 <HAL_RCC_OscConfig+0x240>)
 8001858:	689b      	ldr	r3, [r3, #8]
 800185a:	f003 030c 	and.w	r3, r3, #12
 800185e:	2b04      	cmp	r3, #4
 8001860:	d00c      	beq.n	800187c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001862:	4b85      	ldr	r3, [pc, #532]	; (8001a78 <HAL_RCC_OscConfig+0x240>)
 8001864:	689b      	ldr	r3, [r3, #8]
 8001866:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800186a:	2b08      	cmp	r3, #8
 800186c:	d112      	bne.n	8001894 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800186e:	4b82      	ldr	r3, [pc, #520]	; (8001a78 <HAL_RCC_OscConfig+0x240>)
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001876:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800187a:	d10b      	bne.n	8001894 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800187c:	4b7e      	ldr	r3, [pc, #504]	; (8001a78 <HAL_RCC_OscConfig+0x240>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001884:	2b00      	cmp	r3, #0
 8001886:	d05b      	beq.n	8001940 <HAL_RCC_OscConfig+0x108>
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d157      	bne.n	8001940 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001890:	2301      	movs	r3, #1
 8001892:	e242      	b.n	8001d1a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800189c:	d106      	bne.n	80018ac <HAL_RCC_OscConfig+0x74>
 800189e:	4b76      	ldr	r3, [pc, #472]	; (8001a78 <HAL_RCC_OscConfig+0x240>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4a75      	ldr	r2, [pc, #468]	; (8001a78 <HAL_RCC_OscConfig+0x240>)
 80018a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018a8:	6013      	str	r3, [r2, #0]
 80018aa:	e01d      	b.n	80018e8 <HAL_RCC_OscConfig+0xb0>
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018b4:	d10c      	bne.n	80018d0 <HAL_RCC_OscConfig+0x98>
 80018b6:	4b70      	ldr	r3, [pc, #448]	; (8001a78 <HAL_RCC_OscConfig+0x240>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4a6f      	ldr	r2, [pc, #444]	; (8001a78 <HAL_RCC_OscConfig+0x240>)
 80018bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018c0:	6013      	str	r3, [r2, #0]
 80018c2:	4b6d      	ldr	r3, [pc, #436]	; (8001a78 <HAL_RCC_OscConfig+0x240>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4a6c      	ldr	r2, [pc, #432]	; (8001a78 <HAL_RCC_OscConfig+0x240>)
 80018c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018cc:	6013      	str	r3, [r2, #0]
 80018ce:	e00b      	b.n	80018e8 <HAL_RCC_OscConfig+0xb0>
 80018d0:	4b69      	ldr	r3, [pc, #420]	; (8001a78 <HAL_RCC_OscConfig+0x240>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a68      	ldr	r2, [pc, #416]	; (8001a78 <HAL_RCC_OscConfig+0x240>)
 80018d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018da:	6013      	str	r3, [r2, #0]
 80018dc:	4b66      	ldr	r3, [pc, #408]	; (8001a78 <HAL_RCC_OscConfig+0x240>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a65      	ldr	r2, [pc, #404]	; (8001a78 <HAL_RCC_OscConfig+0x240>)
 80018e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d013      	beq.n	8001918 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018f0:	f7ff fc68 	bl	80011c4 <HAL_GetTick>
 80018f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018f6:	e008      	b.n	800190a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018f8:	f7ff fc64 	bl	80011c4 <HAL_GetTick>
 80018fc:	4602      	mov	r2, r0
 80018fe:	693b      	ldr	r3, [r7, #16]
 8001900:	1ad3      	subs	r3, r2, r3
 8001902:	2b64      	cmp	r3, #100	; 0x64
 8001904:	d901      	bls.n	800190a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001906:	2303      	movs	r3, #3
 8001908:	e207      	b.n	8001d1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800190a:	4b5b      	ldr	r3, [pc, #364]	; (8001a78 <HAL_RCC_OscConfig+0x240>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001912:	2b00      	cmp	r3, #0
 8001914:	d0f0      	beq.n	80018f8 <HAL_RCC_OscConfig+0xc0>
 8001916:	e014      	b.n	8001942 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001918:	f7ff fc54 	bl	80011c4 <HAL_GetTick>
 800191c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800191e:	e008      	b.n	8001932 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001920:	f7ff fc50 	bl	80011c4 <HAL_GetTick>
 8001924:	4602      	mov	r2, r0
 8001926:	693b      	ldr	r3, [r7, #16]
 8001928:	1ad3      	subs	r3, r2, r3
 800192a:	2b64      	cmp	r3, #100	; 0x64
 800192c:	d901      	bls.n	8001932 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800192e:	2303      	movs	r3, #3
 8001930:	e1f3      	b.n	8001d1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001932:	4b51      	ldr	r3, [pc, #324]	; (8001a78 <HAL_RCC_OscConfig+0x240>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800193a:	2b00      	cmp	r3, #0
 800193c:	d1f0      	bne.n	8001920 <HAL_RCC_OscConfig+0xe8>
 800193e:	e000      	b.n	8001942 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001940:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f003 0302 	and.w	r3, r3, #2
 800194a:	2b00      	cmp	r3, #0
 800194c:	d063      	beq.n	8001a16 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800194e:	4b4a      	ldr	r3, [pc, #296]	; (8001a78 <HAL_RCC_OscConfig+0x240>)
 8001950:	689b      	ldr	r3, [r3, #8]
 8001952:	f003 030c 	and.w	r3, r3, #12
 8001956:	2b00      	cmp	r3, #0
 8001958:	d00b      	beq.n	8001972 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800195a:	4b47      	ldr	r3, [pc, #284]	; (8001a78 <HAL_RCC_OscConfig+0x240>)
 800195c:	689b      	ldr	r3, [r3, #8]
 800195e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001962:	2b08      	cmp	r3, #8
 8001964:	d11c      	bne.n	80019a0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001966:	4b44      	ldr	r3, [pc, #272]	; (8001a78 <HAL_RCC_OscConfig+0x240>)
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800196e:	2b00      	cmp	r3, #0
 8001970:	d116      	bne.n	80019a0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001972:	4b41      	ldr	r3, [pc, #260]	; (8001a78 <HAL_RCC_OscConfig+0x240>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f003 0302 	and.w	r3, r3, #2
 800197a:	2b00      	cmp	r3, #0
 800197c:	d005      	beq.n	800198a <HAL_RCC_OscConfig+0x152>
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	68db      	ldr	r3, [r3, #12]
 8001982:	2b01      	cmp	r3, #1
 8001984:	d001      	beq.n	800198a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001986:	2301      	movs	r3, #1
 8001988:	e1c7      	b.n	8001d1a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800198a:	4b3b      	ldr	r3, [pc, #236]	; (8001a78 <HAL_RCC_OscConfig+0x240>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	691b      	ldr	r3, [r3, #16]
 8001996:	00db      	lsls	r3, r3, #3
 8001998:	4937      	ldr	r1, [pc, #220]	; (8001a78 <HAL_RCC_OscConfig+0x240>)
 800199a:	4313      	orrs	r3, r2
 800199c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800199e:	e03a      	b.n	8001a16 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	68db      	ldr	r3, [r3, #12]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d020      	beq.n	80019ea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019a8:	4b34      	ldr	r3, [pc, #208]	; (8001a7c <HAL_RCC_OscConfig+0x244>)
 80019aa:	2201      	movs	r2, #1
 80019ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019ae:	f7ff fc09 	bl	80011c4 <HAL_GetTick>
 80019b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019b4:	e008      	b.n	80019c8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019b6:	f7ff fc05 	bl	80011c4 <HAL_GetTick>
 80019ba:	4602      	mov	r2, r0
 80019bc:	693b      	ldr	r3, [r7, #16]
 80019be:	1ad3      	subs	r3, r2, r3
 80019c0:	2b02      	cmp	r3, #2
 80019c2:	d901      	bls.n	80019c8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80019c4:	2303      	movs	r3, #3
 80019c6:	e1a8      	b.n	8001d1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019c8:	4b2b      	ldr	r3, [pc, #172]	; (8001a78 <HAL_RCC_OscConfig+0x240>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f003 0302 	and.w	r3, r3, #2
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d0f0      	beq.n	80019b6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019d4:	4b28      	ldr	r3, [pc, #160]	; (8001a78 <HAL_RCC_OscConfig+0x240>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	691b      	ldr	r3, [r3, #16]
 80019e0:	00db      	lsls	r3, r3, #3
 80019e2:	4925      	ldr	r1, [pc, #148]	; (8001a78 <HAL_RCC_OscConfig+0x240>)
 80019e4:	4313      	orrs	r3, r2
 80019e6:	600b      	str	r3, [r1, #0]
 80019e8:	e015      	b.n	8001a16 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019ea:	4b24      	ldr	r3, [pc, #144]	; (8001a7c <HAL_RCC_OscConfig+0x244>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019f0:	f7ff fbe8 	bl	80011c4 <HAL_GetTick>
 80019f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019f6:	e008      	b.n	8001a0a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019f8:	f7ff fbe4 	bl	80011c4 <HAL_GetTick>
 80019fc:	4602      	mov	r2, r0
 80019fe:	693b      	ldr	r3, [r7, #16]
 8001a00:	1ad3      	subs	r3, r2, r3
 8001a02:	2b02      	cmp	r3, #2
 8001a04:	d901      	bls.n	8001a0a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001a06:	2303      	movs	r3, #3
 8001a08:	e187      	b.n	8001d1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a0a:	4b1b      	ldr	r3, [pc, #108]	; (8001a78 <HAL_RCC_OscConfig+0x240>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f003 0302 	and.w	r3, r3, #2
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d1f0      	bne.n	80019f8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f003 0308 	and.w	r3, r3, #8
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d036      	beq.n	8001a90 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	695b      	ldr	r3, [r3, #20]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d016      	beq.n	8001a58 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a2a:	4b15      	ldr	r3, [pc, #84]	; (8001a80 <HAL_RCC_OscConfig+0x248>)
 8001a2c:	2201      	movs	r2, #1
 8001a2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a30:	f7ff fbc8 	bl	80011c4 <HAL_GetTick>
 8001a34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a36:	e008      	b.n	8001a4a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a38:	f7ff fbc4 	bl	80011c4 <HAL_GetTick>
 8001a3c:	4602      	mov	r2, r0
 8001a3e:	693b      	ldr	r3, [r7, #16]
 8001a40:	1ad3      	subs	r3, r2, r3
 8001a42:	2b02      	cmp	r3, #2
 8001a44:	d901      	bls.n	8001a4a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001a46:	2303      	movs	r3, #3
 8001a48:	e167      	b.n	8001d1a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a4a:	4b0b      	ldr	r3, [pc, #44]	; (8001a78 <HAL_RCC_OscConfig+0x240>)
 8001a4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a4e:	f003 0302 	and.w	r3, r3, #2
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d0f0      	beq.n	8001a38 <HAL_RCC_OscConfig+0x200>
 8001a56:	e01b      	b.n	8001a90 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a58:	4b09      	ldr	r3, [pc, #36]	; (8001a80 <HAL_RCC_OscConfig+0x248>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a5e:	f7ff fbb1 	bl	80011c4 <HAL_GetTick>
 8001a62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a64:	e00e      	b.n	8001a84 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a66:	f7ff fbad 	bl	80011c4 <HAL_GetTick>
 8001a6a:	4602      	mov	r2, r0
 8001a6c:	693b      	ldr	r3, [r7, #16]
 8001a6e:	1ad3      	subs	r3, r2, r3
 8001a70:	2b02      	cmp	r3, #2
 8001a72:	d907      	bls.n	8001a84 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001a74:	2303      	movs	r3, #3
 8001a76:	e150      	b.n	8001d1a <HAL_RCC_OscConfig+0x4e2>
 8001a78:	40023800 	.word	0x40023800
 8001a7c:	42470000 	.word	0x42470000
 8001a80:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a84:	4b88      	ldr	r3, [pc, #544]	; (8001ca8 <HAL_RCC_OscConfig+0x470>)
 8001a86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a88:	f003 0302 	and.w	r3, r3, #2
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d1ea      	bne.n	8001a66 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f003 0304 	and.w	r3, r3, #4
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	f000 8097 	beq.w	8001bcc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001aa2:	4b81      	ldr	r3, [pc, #516]	; (8001ca8 <HAL_RCC_OscConfig+0x470>)
 8001aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d10f      	bne.n	8001ace <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001aae:	2300      	movs	r3, #0
 8001ab0:	60bb      	str	r3, [r7, #8]
 8001ab2:	4b7d      	ldr	r3, [pc, #500]	; (8001ca8 <HAL_RCC_OscConfig+0x470>)
 8001ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab6:	4a7c      	ldr	r2, [pc, #496]	; (8001ca8 <HAL_RCC_OscConfig+0x470>)
 8001ab8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001abc:	6413      	str	r3, [r2, #64]	; 0x40
 8001abe:	4b7a      	ldr	r3, [pc, #488]	; (8001ca8 <HAL_RCC_OscConfig+0x470>)
 8001ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ac6:	60bb      	str	r3, [r7, #8]
 8001ac8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001aca:	2301      	movs	r3, #1
 8001acc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ace:	4b77      	ldr	r3, [pc, #476]	; (8001cac <HAL_RCC_OscConfig+0x474>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d118      	bne.n	8001b0c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ada:	4b74      	ldr	r3, [pc, #464]	; (8001cac <HAL_RCC_OscConfig+0x474>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a73      	ldr	r2, [pc, #460]	; (8001cac <HAL_RCC_OscConfig+0x474>)
 8001ae0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ae4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ae6:	f7ff fb6d 	bl	80011c4 <HAL_GetTick>
 8001aea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001aec:	e008      	b.n	8001b00 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001aee:	f7ff fb69 	bl	80011c4 <HAL_GetTick>
 8001af2:	4602      	mov	r2, r0
 8001af4:	693b      	ldr	r3, [r7, #16]
 8001af6:	1ad3      	subs	r3, r2, r3
 8001af8:	2b02      	cmp	r3, #2
 8001afa:	d901      	bls.n	8001b00 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001afc:	2303      	movs	r3, #3
 8001afe:	e10c      	b.n	8001d1a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b00:	4b6a      	ldr	r3, [pc, #424]	; (8001cac <HAL_RCC_OscConfig+0x474>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d0f0      	beq.n	8001aee <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	689b      	ldr	r3, [r3, #8]
 8001b10:	2b01      	cmp	r3, #1
 8001b12:	d106      	bne.n	8001b22 <HAL_RCC_OscConfig+0x2ea>
 8001b14:	4b64      	ldr	r3, [pc, #400]	; (8001ca8 <HAL_RCC_OscConfig+0x470>)
 8001b16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b18:	4a63      	ldr	r2, [pc, #396]	; (8001ca8 <HAL_RCC_OscConfig+0x470>)
 8001b1a:	f043 0301 	orr.w	r3, r3, #1
 8001b1e:	6713      	str	r3, [r2, #112]	; 0x70
 8001b20:	e01c      	b.n	8001b5c <HAL_RCC_OscConfig+0x324>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	689b      	ldr	r3, [r3, #8]
 8001b26:	2b05      	cmp	r3, #5
 8001b28:	d10c      	bne.n	8001b44 <HAL_RCC_OscConfig+0x30c>
 8001b2a:	4b5f      	ldr	r3, [pc, #380]	; (8001ca8 <HAL_RCC_OscConfig+0x470>)
 8001b2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b2e:	4a5e      	ldr	r2, [pc, #376]	; (8001ca8 <HAL_RCC_OscConfig+0x470>)
 8001b30:	f043 0304 	orr.w	r3, r3, #4
 8001b34:	6713      	str	r3, [r2, #112]	; 0x70
 8001b36:	4b5c      	ldr	r3, [pc, #368]	; (8001ca8 <HAL_RCC_OscConfig+0x470>)
 8001b38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b3a:	4a5b      	ldr	r2, [pc, #364]	; (8001ca8 <HAL_RCC_OscConfig+0x470>)
 8001b3c:	f043 0301 	orr.w	r3, r3, #1
 8001b40:	6713      	str	r3, [r2, #112]	; 0x70
 8001b42:	e00b      	b.n	8001b5c <HAL_RCC_OscConfig+0x324>
 8001b44:	4b58      	ldr	r3, [pc, #352]	; (8001ca8 <HAL_RCC_OscConfig+0x470>)
 8001b46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b48:	4a57      	ldr	r2, [pc, #348]	; (8001ca8 <HAL_RCC_OscConfig+0x470>)
 8001b4a:	f023 0301 	bic.w	r3, r3, #1
 8001b4e:	6713      	str	r3, [r2, #112]	; 0x70
 8001b50:	4b55      	ldr	r3, [pc, #340]	; (8001ca8 <HAL_RCC_OscConfig+0x470>)
 8001b52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b54:	4a54      	ldr	r2, [pc, #336]	; (8001ca8 <HAL_RCC_OscConfig+0x470>)
 8001b56:	f023 0304 	bic.w	r3, r3, #4
 8001b5a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	689b      	ldr	r3, [r3, #8]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d015      	beq.n	8001b90 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b64:	f7ff fb2e 	bl	80011c4 <HAL_GetTick>
 8001b68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b6a:	e00a      	b.n	8001b82 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b6c:	f7ff fb2a 	bl	80011c4 <HAL_GetTick>
 8001b70:	4602      	mov	r2, r0
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	1ad3      	subs	r3, r2, r3
 8001b76:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d901      	bls.n	8001b82 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001b7e:	2303      	movs	r3, #3
 8001b80:	e0cb      	b.n	8001d1a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b82:	4b49      	ldr	r3, [pc, #292]	; (8001ca8 <HAL_RCC_OscConfig+0x470>)
 8001b84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b86:	f003 0302 	and.w	r3, r3, #2
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d0ee      	beq.n	8001b6c <HAL_RCC_OscConfig+0x334>
 8001b8e:	e014      	b.n	8001bba <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b90:	f7ff fb18 	bl	80011c4 <HAL_GetTick>
 8001b94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b96:	e00a      	b.n	8001bae <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b98:	f7ff fb14 	bl	80011c4 <HAL_GetTick>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	693b      	ldr	r3, [r7, #16]
 8001ba0:	1ad3      	subs	r3, r2, r3
 8001ba2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d901      	bls.n	8001bae <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001baa:	2303      	movs	r3, #3
 8001bac:	e0b5      	b.n	8001d1a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bae:	4b3e      	ldr	r3, [pc, #248]	; (8001ca8 <HAL_RCC_OscConfig+0x470>)
 8001bb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bb2:	f003 0302 	and.w	r3, r3, #2
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d1ee      	bne.n	8001b98 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001bba:	7dfb      	ldrb	r3, [r7, #23]
 8001bbc:	2b01      	cmp	r3, #1
 8001bbe:	d105      	bne.n	8001bcc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bc0:	4b39      	ldr	r3, [pc, #228]	; (8001ca8 <HAL_RCC_OscConfig+0x470>)
 8001bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc4:	4a38      	ldr	r2, [pc, #224]	; (8001ca8 <HAL_RCC_OscConfig+0x470>)
 8001bc6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001bca:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	699b      	ldr	r3, [r3, #24]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	f000 80a1 	beq.w	8001d18 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001bd6:	4b34      	ldr	r3, [pc, #208]	; (8001ca8 <HAL_RCC_OscConfig+0x470>)
 8001bd8:	689b      	ldr	r3, [r3, #8]
 8001bda:	f003 030c 	and.w	r3, r3, #12
 8001bde:	2b08      	cmp	r3, #8
 8001be0:	d05c      	beq.n	8001c9c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	699b      	ldr	r3, [r3, #24]
 8001be6:	2b02      	cmp	r3, #2
 8001be8:	d141      	bne.n	8001c6e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bea:	4b31      	ldr	r3, [pc, #196]	; (8001cb0 <HAL_RCC_OscConfig+0x478>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bf0:	f7ff fae8 	bl	80011c4 <HAL_GetTick>
 8001bf4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bf6:	e008      	b.n	8001c0a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bf8:	f7ff fae4 	bl	80011c4 <HAL_GetTick>
 8001bfc:	4602      	mov	r2, r0
 8001bfe:	693b      	ldr	r3, [r7, #16]
 8001c00:	1ad3      	subs	r3, r2, r3
 8001c02:	2b02      	cmp	r3, #2
 8001c04:	d901      	bls.n	8001c0a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001c06:	2303      	movs	r3, #3
 8001c08:	e087      	b.n	8001d1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c0a:	4b27      	ldr	r3, [pc, #156]	; (8001ca8 <HAL_RCC_OscConfig+0x470>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d1f0      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	69da      	ldr	r2, [r3, #28]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6a1b      	ldr	r3, [r3, #32]
 8001c1e:	431a      	orrs	r2, r3
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c24:	019b      	lsls	r3, r3, #6
 8001c26:	431a      	orrs	r2, r3
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c2c:	085b      	lsrs	r3, r3, #1
 8001c2e:	3b01      	subs	r3, #1
 8001c30:	041b      	lsls	r3, r3, #16
 8001c32:	431a      	orrs	r2, r3
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c38:	061b      	lsls	r3, r3, #24
 8001c3a:	491b      	ldr	r1, [pc, #108]	; (8001ca8 <HAL_RCC_OscConfig+0x470>)
 8001c3c:	4313      	orrs	r3, r2
 8001c3e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c40:	4b1b      	ldr	r3, [pc, #108]	; (8001cb0 <HAL_RCC_OscConfig+0x478>)
 8001c42:	2201      	movs	r2, #1
 8001c44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c46:	f7ff fabd 	bl	80011c4 <HAL_GetTick>
 8001c4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c4c:	e008      	b.n	8001c60 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c4e:	f7ff fab9 	bl	80011c4 <HAL_GetTick>
 8001c52:	4602      	mov	r2, r0
 8001c54:	693b      	ldr	r3, [r7, #16]
 8001c56:	1ad3      	subs	r3, r2, r3
 8001c58:	2b02      	cmp	r3, #2
 8001c5a:	d901      	bls.n	8001c60 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001c5c:	2303      	movs	r3, #3
 8001c5e:	e05c      	b.n	8001d1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c60:	4b11      	ldr	r3, [pc, #68]	; (8001ca8 <HAL_RCC_OscConfig+0x470>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d0f0      	beq.n	8001c4e <HAL_RCC_OscConfig+0x416>
 8001c6c:	e054      	b.n	8001d18 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c6e:	4b10      	ldr	r3, [pc, #64]	; (8001cb0 <HAL_RCC_OscConfig+0x478>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c74:	f7ff faa6 	bl	80011c4 <HAL_GetTick>
 8001c78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c7a:	e008      	b.n	8001c8e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c7c:	f7ff faa2 	bl	80011c4 <HAL_GetTick>
 8001c80:	4602      	mov	r2, r0
 8001c82:	693b      	ldr	r3, [r7, #16]
 8001c84:	1ad3      	subs	r3, r2, r3
 8001c86:	2b02      	cmp	r3, #2
 8001c88:	d901      	bls.n	8001c8e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001c8a:	2303      	movs	r3, #3
 8001c8c:	e045      	b.n	8001d1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c8e:	4b06      	ldr	r3, [pc, #24]	; (8001ca8 <HAL_RCC_OscConfig+0x470>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d1f0      	bne.n	8001c7c <HAL_RCC_OscConfig+0x444>
 8001c9a:	e03d      	b.n	8001d18 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	699b      	ldr	r3, [r3, #24]
 8001ca0:	2b01      	cmp	r3, #1
 8001ca2:	d107      	bne.n	8001cb4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	e038      	b.n	8001d1a <HAL_RCC_OscConfig+0x4e2>
 8001ca8:	40023800 	.word	0x40023800
 8001cac:	40007000 	.word	0x40007000
 8001cb0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001cb4:	4b1b      	ldr	r3, [pc, #108]	; (8001d24 <HAL_RCC_OscConfig+0x4ec>)
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	699b      	ldr	r3, [r3, #24]
 8001cbe:	2b01      	cmp	r3, #1
 8001cc0:	d028      	beq.n	8001d14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ccc:	429a      	cmp	r2, r3
 8001cce:	d121      	bne.n	8001d14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cda:	429a      	cmp	r2, r3
 8001cdc:	d11a      	bne.n	8001d14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001cde:	68fa      	ldr	r2, [r7, #12]
 8001ce0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	687a      	ldr	r2, [r7, #4]
 8001ce8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001cea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d111      	bne.n	8001d14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cfa:	085b      	lsrs	r3, r3, #1
 8001cfc:	3b01      	subs	r3, #1
 8001cfe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d00:	429a      	cmp	r2, r3
 8001d02:	d107      	bne.n	8001d14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d0e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d10:	429a      	cmp	r2, r3
 8001d12:	d001      	beq.n	8001d18 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001d14:	2301      	movs	r3, #1
 8001d16:	e000      	b.n	8001d1a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001d18:	2300      	movs	r3, #0
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	3718      	adds	r7, #24
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	40023800 	.word	0x40023800

08001d28 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b084      	sub	sp, #16
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
 8001d30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d101      	bne.n	8001d3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	e0cc      	b.n	8001ed6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d3c:	4b68      	ldr	r3, [pc, #416]	; (8001ee0 <HAL_RCC_ClockConfig+0x1b8>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f003 030f 	and.w	r3, r3, #15
 8001d44:	683a      	ldr	r2, [r7, #0]
 8001d46:	429a      	cmp	r2, r3
 8001d48:	d90c      	bls.n	8001d64 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d4a:	4b65      	ldr	r3, [pc, #404]	; (8001ee0 <HAL_RCC_ClockConfig+0x1b8>)
 8001d4c:	683a      	ldr	r2, [r7, #0]
 8001d4e:	b2d2      	uxtb	r2, r2
 8001d50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d52:	4b63      	ldr	r3, [pc, #396]	; (8001ee0 <HAL_RCC_ClockConfig+0x1b8>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f003 030f 	and.w	r3, r3, #15
 8001d5a:	683a      	ldr	r2, [r7, #0]
 8001d5c:	429a      	cmp	r2, r3
 8001d5e:	d001      	beq.n	8001d64 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001d60:	2301      	movs	r3, #1
 8001d62:	e0b8      	b.n	8001ed6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f003 0302 	and.w	r3, r3, #2
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d020      	beq.n	8001db2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f003 0304 	and.w	r3, r3, #4
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d005      	beq.n	8001d88 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d7c:	4b59      	ldr	r3, [pc, #356]	; (8001ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8001d7e:	689b      	ldr	r3, [r3, #8]
 8001d80:	4a58      	ldr	r2, [pc, #352]	; (8001ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8001d82:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001d86:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f003 0308 	and.w	r3, r3, #8
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d005      	beq.n	8001da0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d94:	4b53      	ldr	r3, [pc, #332]	; (8001ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8001d96:	689b      	ldr	r3, [r3, #8]
 8001d98:	4a52      	ldr	r2, [pc, #328]	; (8001ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8001d9a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001d9e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001da0:	4b50      	ldr	r3, [pc, #320]	; (8001ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8001da2:	689b      	ldr	r3, [r3, #8]
 8001da4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	689b      	ldr	r3, [r3, #8]
 8001dac:	494d      	ldr	r1, [pc, #308]	; (8001ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8001dae:	4313      	orrs	r3, r2
 8001db0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f003 0301 	and.w	r3, r3, #1
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d044      	beq.n	8001e48 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	2b01      	cmp	r3, #1
 8001dc4:	d107      	bne.n	8001dd6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dc6:	4b47      	ldr	r3, [pc, #284]	; (8001ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d119      	bne.n	8001e06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e07f      	b.n	8001ed6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	2b02      	cmp	r3, #2
 8001ddc:	d003      	beq.n	8001de6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001de2:	2b03      	cmp	r3, #3
 8001de4:	d107      	bne.n	8001df6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001de6:	4b3f      	ldr	r3, [pc, #252]	; (8001ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d109      	bne.n	8001e06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
 8001df4:	e06f      	b.n	8001ed6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001df6:	4b3b      	ldr	r3, [pc, #236]	; (8001ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f003 0302 	and.w	r3, r3, #2
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d101      	bne.n	8001e06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
 8001e04:	e067      	b.n	8001ed6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e06:	4b37      	ldr	r3, [pc, #220]	; (8001ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8001e08:	689b      	ldr	r3, [r3, #8]
 8001e0a:	f023 0203 	bic.w	r2, r3, #3
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	4934      	ldr	r1, [pc, #208]	; (8001ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8001e14:	4313      	orrs	r3, r2
 8001e16:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e18:	f7ff f9d4 	bl	80011c4 <HAL_GetTick>
 8001e1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e1e:	e00a      	b.n	8001e36 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e20:	f7ff f9d0 	bl	80011c4 <HAL_GetTick>
 8001e24:	4602      	mov	r2, r0
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	1ad3      	subs	r3, r2, r3
 8001e2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d901      	bls.n	8001e36 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e32:	2303      	movs	r3, #3
 8001e34:	e04f      	b.n	8001ed6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e36:	4b2b      	ldr	r3, [pc, #172]	; (8001ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8001e38:	689b      	ldr	r3, [r3, #8]
 8001e3a:	f003 020c 	and.w	r2, r3, #12
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	009b      	lsls	r3, r3, #2
 8001e44:	429a      	cmp	r2, r3
 8001e46:	d1eb      	bne.n	8001e20 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e48:	4b25      	ldr	r3, [pc, #148]	; (8001ee0 <HAL_RCC_ClockConfig+0x1b8>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f003 030f 	and.w	r3, r3, #15
 8001e50:	683a      	ldr	r2, [r7, #0]
 8001e52:	429a      	cmp	r2, r3
 8001e54:	d20c      	bcs.n	8001e70 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e56:	4b22      	ldr	r3, [pc, #136]	; (8001ee0 <HAL_RCC_ClockConfig+0x1b8>)
 8001e58:	683a      	ldr	r2, [r7, #0]
 8001e5a:	b2d2      	uxtb	r2, r2
 8001e5c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e5e:	4b20      	ldr	r3, [pc, #128]	; (8001ee0 <HAL_RCC_ClockConfig+0x1b8>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f003 030f 	and.w	r3, r3, #15
 8001e66:	683a      	ldr	r2, [r7, #0]
 8001e68:	429a      	cmp	r2, r3
 8001e6a:	d001      	beq.n	8001e70 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	e032      	b.n	8001ed6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f003 0304 	and.w	r3, r3, #4
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d008      	beq.n	8001e8e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e7c:	4b19      	ldr	r3, [pc, #100]	; (8001ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8001e7e:	689b      	ldr	r3, [r3, #8]
 8001e80:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	68db      	ldr	r3, [r3, #12]
 8001e88:	4916      	ldr	r1, [pc, #88]	; (8001ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f003 0308 	and.w	r3, r3, #8
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d009      	beq.n	8001eae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e9a:	4b12      	ldr	r3, [pc, #72]	; (8001ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8001e9c:	689b      	ldr	r3, [r3, #8]
 8001e9e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	691b      	ldr	r3, [r3, #16]
 8001ea6:	00db      	lsls	r3, r3, #3
 8001ea8:	490e      	ldr	r1, [pc, #56]	; (8001ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001eae:	f000 f821 	bl	8001ef4 <HAL_RCC_GetSysClockFreq>
 8001eb2:	4602      	mov	r2, r0
 8001eb4:	4b0b      	ldr	r3, [pc, #44]	; (8001ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8001eb6:	689b      	ldr	r3, [r3, #8]
 8001eb8:	091b      	lsrs	r3, r3, #4
 8001eba:	f003 030f 	and.w	r3, r3, #15
 8001ebe:	490a      	ldr	r1, [pc, #40]	; (8001ee8 <HAL_RCC_ClockConfig+0x1c0>)
 8001ec0:	5ccb      	ldrb	r3, [r1, r3]
 8001ec2:	fa22 f303 	lsr.w	r3, r2, r3
 8001ec6:	4a09      	ldr	r2, [pc, #36]	; (8001eec <HAL_RCC_ClockConfig+0x1c4>)
 8001ec8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001eca:	4b09      	ldr	r3, [pc, #36]	; (8001ef0 <HAL_RCC_ClockConfig+0x1c8>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f7ff f948 	bl	8001164 <HAL_InitTick>

  return HAL_OK;
 8001ed4:	2300      	movs	r3, #0
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	3710      	adds	r7, #16
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	40023c00 	.word	0x40023c00
 8001ee4:	40023800 	.word	0x40023800
 8001ee8:	080054dc 	.word	0x080054dc
 8001eec:	20000000 	.word	0x20000000
 8001ef0:	20000004 	.word	0x20000004

08001ef4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ef4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ef8:	b094      	sub	sp, #80	; 0x50
 8001efa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001efc:	2300      	movs	r3, #0
 8001efe:	647b      	str	r3, [r7, #68]	; 0x44
 8001f00:	2300      	movs	r3, #0
 8001f02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001f04:	2300      	movs	r3, #0
 8001f06:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001f0c:	4b79      	ldr	r3, [pc, #484]	; (80020f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	f003 030c 	and.w	r3, r3, #12
 8001f14:	2b08      	cmp	r3, #8
 8001f16:	d00d      	beq.n	8001f34 <HAL_RCC_GetSysClockFreq+0x40>
 8001f18:	2b08      	cmp	r3, #8
 8001f1a:	f200 80e1 	bhi.w	80020e0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d002      	beq.n	8001f28 <HAL_RCC_GetSysClockFreq+0x34>
 8001f22:	2b04      	cmp	r3, #4
 8001f24:	d003      	beq.n	8001f2e <HAL_RCC_GetSysClockFreq+0x3a>
 8001f26:	e0db      	b.n	80020e0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001f28:	4b73      	ldr	r3, [pc, #460]	; (80020f8 <HAL_RCC_GetSysClockFreq+0x204>)
 8001f2a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001f2c:	e0db      	b.n	80020e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001f2e:	4b73      	ldr	r3, [pc, #460]	; (80020fc <HAL_RCC_GetSysClockFreq+0x208>)
 8001f30:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001f32:	e0d8      	b.n	80020e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001f34:	4b6f      	ldr	r3, [pc, #444]	; (80020f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001f3c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001f3e:	4b6d      	ldr	r3, [pc, #436]	; (80020f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d063      	beq.n	8002012 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f4a:	4b6a      	ldr	r3, [pc, #424]	; (80020f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	099b      	lsrs	r3, r3, #6
 8001f50:	2200      	movs	r2, #0
 8001f52:	63bb      	str	r3, [r7, #56]	; 0x38
 8001f54:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001f56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f5c:	633b      	str	r3, [r7, #48]	; 0x30
 8001f5e:	2300      	movs	r3, #0
 8001f60:	637b      	str	r3, [r7, #52]	; 0x34
 8001f62:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001f66:	4622      	mov	r2, r4
 8001f68:	462b      	mov	r3, r5
 8001f6a:	f04f 0000 	mov.w	r0, #0
 8001f6e:	f04f 0100 	mov.w	r1, #0
 8001f72:	0159      	lsls	r1, r3, #5
 8001f74:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001f78:	0150      	lsls	r0, r2, #5
 8001f7a:	4602      	mov	r2, r0
 8001f7c:	460b      	mov	r3, r1
 8001f7e:	4621      	mov	r1, r4
 8001f80:	1a51      	subs	r1, r2, r1
 8001f82:	6139      	str	r1, [r7, #16]
 8001f84:	4629      	mov	r1, r5
 8001f86:	eb63 0301 	sbc.w	r3, r3, r1
 8001f8a:	617b      	str	r3, [r7, #20]
 8001f8c:	f04f 0200 	mov.w	r2, #0
 8001f90:	f04f 0300 	mov.w	r3, #0
 8001f94:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001f98:	4659      	mov	r1, fp
 8001f9a:	018b      	lsls	r3, r1, #6
 8001f9c:	4651      	mov	r1, sl
 8001f9e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001fa2:	4651      	mov	r1, sl
 8001fa4:	018a      	lsls	r2, r1, #6
 8001fa6:	4651      	mov	r1, sl
 8001fa8:	ebb2 0801 	subs.w	r8, r2, r1
 8001fac:	4659      	mov	r1, fp
 8001fae:	eb63 0901 	sbc.w	r9, r3, r1
 8001fb2:	f04f 0200 	mov.w	r2, #0
 8001fb6:	f04f 0300 	mov.w	r3, #0
 8001fba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001fbe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001fc2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001fc6:	4690      	mov	r8, r2
 8001fc8:	4699      	mov	r9, r3
 8001fca:	4623      	mov	r3, r4
 8001fcc:	eb18 0303 	adds.w	r3, r8, r3
 8001fd0:	60bb      	str	r3, [r7, #8]
 8001fd2:	462b      	mov	r3, r5
 8001fd4:	eb49 0303 	adc.w	r3, r9, r3
 8001fd8:	60fb      	str	r3, [r7, #12]
 8001fda:	f04f 0200 	mov.w	r2, #0
 8001fde:	f04f 0300 	mov.w	r3, #0
 8001fe2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001fe6:	4629      	mov	r1, r5
 8001fe8:	024b      	lsls	r3, r1, #9
 8001fea:	4621      	mov	r1, r4
 8001fec:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001ff0:	4621      	mov	r1, r4
 8001ff2:	024a      	lsls	r2, r1, #9
 8001ff4:	4610      	mov	r0, r2
 8001ff6:	4619      	mov	r1, r3
 8001ff8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	62bb      	str	r3, [r7, #40]	; 0x28
 8001ffe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002000:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002004:	f7fe f8fc 	bl	8000200 <__aeabi_uldivmod>
 8002008:	4602      	mov	r2, r0
 800200a:	460b      	mov	r3, r1
 800200c:	4613      	mov	r3, r2
 800200e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002010:	e058      	b.n	80020c4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002012:	4b38      	ldr	r3, [pc, #224]	; (80020f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	099b      	lsrs	r3, r3, #6
 8002018:	2200      	movs	r2, #0
 800201a:	4618      	mov	r0, r3
 800201c:	4611      	mov	r1, r2
 800201e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002022:	623b      	str	r3, [r7, #32]
 8002024:	2300      	movs	r3, #0
 8002026:	627b      	str	r3, [r7, #36]	; 0x24
 8002028:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800202c:	4642      	mov	r2, r8
 800202e:	464b      	mov	r3, r9
 8002030:	f04f 0000 	mov.w	r0, #0
 8002034:	f04f 0100 	mov.w	r1, #0
 8002038:	0159      	lsls	r1, r3, #5
 800203a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800203e:	0150      	lsls	r0, r2, #5
 8002040:	4602      	mov	r2, r0
 8002042:	460b      	mov	r3, r1
 8002044:	4641      	mov	r1, r8
 8002046:	ebb2 0a01 	subs.w	sl, r2, r1
 800204a:	4649      	mov	r1, r9
 800204c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002050:	f04f 0200 	mov.w	r2, #0
 8002054:	f04f 0300 	mov.w	r3, #0
 8002058:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800205c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002060:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002064:	ebb2 040a 	subs.w	r4, r2, sl
 8002068:	eb63 050b 	sbc.w	r5, r3, fp
 800206c:	f04f 0200 	mov.w	r2, #0
 8002070:	f04f 0300 	mov.w	r3, #0
 8002074:	00eb      	lsls	r3, r5, #3
 8002076:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800207a:	00e2      	lsls	r2, r4, #3
 800207c:	4614      	mov	r4, r2
 800207e:	461d      	mov	r5, r3
 8002080:	4643      	mov	r3, r8
 8002082:	18e3      	adds	r3, r4, r3
 8002084:	603b      	str	r3, [r7, #0]
 8002086:	464b      	mov	r3, r9
 8002088:	eb45 0303 	adc.w	r3, r5, r3
 800208c:	607b      	str	r3, [r7, #4]
 800208e:	f04f 0200 	mov.w	r2, #0
 8002092:	f04f 0300 	mov.w	r3, #0
 8002096:	e9d7 4500 	ldrd	r4, r5, [r7]
 800209a:	4629      	mov	r1, r5
 800209c:	028b      	lsls	r3, r1, #10
 800209e:	4621      	mov	r1, r4
 80020a0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80020a4:	4621      	mov	r1, r4
 80020a6:	028a      	lsls	r2, r1, #10
 80020a8:	4610      	mov	r0, r2
 80020aa:	4619      	mov	r1, r3
 80020ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020ae:	2200      	movs	r2, #0
 80020b0:	61bb      	str	r3, [r7, #24]
 80020b2:	61fa      	str	r2, [r7, #28]
 80020b4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80020b8:	f7fe f8a2 	bl	8000200 <__aeabi_uldivmod>
 80020bc:	4602      	mov	r2, r0
 80020be:	460b      	mov	r3, r1
 80020c0:	4613      	mov	r3, r2
 80020c2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80020c4:	4b0b      	ldr	r3, [pc, #44]	; (80020f4 <HAL_RCC_GetSysClockFreq+0x200>)
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	0c1b      	lsrs	r3, r3, #16
 80020ca:	f003 0303 	and.w	r3, r3, #3
 80020ce:	3301      	adds	r3, #1
 80020d0:	005b      	lsls	r3, r3, #1
 80020d2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80020d4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80020d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80020dc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80020de:	e002      	b.n	80020e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80020e0:	4b05      	ldr	r3, [pc, #20]	; (80020f8 <HAL_RCC_GetSysClockFreq+0x204>)
 80020e2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80020e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80020e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	3750      	adds	r7, #80	; 0x50
 80020ec:	46bd      	mov	sp, r7
 80020ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80020f2:	bf00      	nop
 80020f4:	40023800 	.word	0x40023800
 80020f8:	00f42400 	.word	0x00f42400
 80020fc:	007a1200 	.word	0x007a1200

08002100 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002100:	b480      	push	{r7}
 8002102:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002104:	4b03      	ldr	r3, [pc, #12]	; (8002114 <HAL_RCC_GetHCLKFreq+0x14>)
 8002106:	681b      	ldr	r3, [r3, #0]
}
 8002108:	4618      	mov	r0, r3
 800210a:	46bd      	mov	sp, r7
 800210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002110:	4770      	bx	lr
 8002112:	bf00      	nop
 8002114:	20000000 	.word	0x20000000

08002118 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800211c:	f7ff fff0 	bl	8002100 <HAL_RCC_GetHCLKFreq>
 8002120:	4602      	mov	r2, r0
 8002122:	4b05      	ldr	r3, [pc, #20]	; (8002138 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002124:	689b      	ldr	r3, [r3, #8]
 8002126:	0a9b      	lsrs	r3, r3, #10
 8002128:	f003 0307 	and.w	r3, r3, #7
 800212c:	4903      	ldr	r1, [pc, #12]	; (800213c <HAL_RCC_GetPCLK1Freq+0x24>)
 800212e:	5ccb      	ldrb	r3, [r1, r3]
 8002130:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002134:	4618      	mov	r0, r3
 8002136:	bd80      	pop	{r7, pc}
 8002138:	40023800 	.word	0x40023800
 800213c:	080054ec 	.word	0x080054ec

08002140 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002144:	f7ff ffdc 	bl	8002100 <HAL_RCC_GetHCLKFreq>
 8002148:	4602      	mov	r2, r0
 800214a:	4b05      	ldr	r3, [pc, #20]	; (8002160 <HAL_RCC_GetPCLK2Freq+0x20>)
 800214c:	689b      	ldr	r3, [r3, #8]
 800214e:	0b5b      	lsrs	r3, r3, #13
 8002150:	f003 0307 	and.w	r3, r3, #7
 8002154:	4903      	ldr	r1, [pc, #12]	; (8002164 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002156:	5ccb      	ldrb	r3, [r1, r3]
 8002158:	fa22 f303 	lsr.w	r3, r2, r3
}
 800215c:	4618      	mov	r0, r3
 800215e:	bd80      	pop	{r7, pc}
 8002160:	40023800 	.word	0x40023800
 8002164:	080054ec 	.word	0x080054ec

08002168 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b082      	sub	sp, #8
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d101      	bne.n	800217a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002176:	2301      	movs	r3, #1
 8002178:	e03f      	b.n	80021fa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002180:	b2db      	uxtb	r3, r3
 8002182:	2b00      	cmp	r3, #0
 8002184:	d106      	bne.n	8002194 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2200      	movs	r2, #0
 800218a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800218e:	6878      	ldr	r0, [r7, #4]
 8002190:	f7fe ff1e 	bl	8000fd0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2224      	movs	r2, #36	; 0x24
 8002198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	68da      	ldr	r2, [r3, #12]
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80021aa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80021ac:	6878      	ldr	r0, [r7, #4]
 80021ae:	f000 f929 	bl	8002404 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	691a      	ldr	r2, [r3, #16]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80021c0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	695a      	ldr	r2, [r3, #20]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80021d0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	68da      	ldr	r2, [r3, #12]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80021e0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2200      	movs	r2, #0
 80021e6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2220      	movs	r2, #32
 80021ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2220      	movs	r2, #32
 80021f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80021f8:	2300      	movs	r3, #0
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	3708      	adds	r7, #8
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}

08002202 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002202:	b580      	push	{r7, lr}
 8002204:	b08a      	sub	sp, #40	; 0x28
 8002206:	af02      	add	r7, sp, #8
 8002208:	60f8      	str	r0, [r7, #12]
 800220a:	60b9      	str	r1, [r7, #8]
 800220c:	603b      	str	r3, [r7, #0]
 800220e:	4613      	mov	r3, r2
 8002210:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002212:	2300      	movs	r3, #0
 8002214:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800221c:	b2db      	uxtb	r3, r3
 800221e:	2b20      	cmp	r3, #32
 8002220:	d17c      	bne.n	800231c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002222:	68bb      	ldr	r3, [r7, #8]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d002      	beq.n	800222e <HAL_UART_Transmit+0x2c>
 8002228:	88fb      	ldrh	r3, [r7, #6]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d101      	bne.n	8002232 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800222e:	2301      	movs	r3, #1
 8002230:	e075      	b.n	800231e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002238:	2b01      	cmp	r3, #1
 800223a:	d101      	bne.n	8002240 <HAL_UART_Transmit+0x3e>
 800223c:	2302      	movs	r3, #2
 800223e:	e06e      	b.n	800231e <HAL_UART_Transmit+0x11c>
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	2201      	movs	r2, #1
 8002244:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	2200      	movs	r2, #0
 800224c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	2221      	movs	r2, #33	; 0x21
 8002252:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002256:	f7fe ffb5 	bl	80011c4 <HAL_GetTick>
 800225a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	88fa      	ldrh	r2, [r7, #6]
 8002260:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	88fa      	ldrh	r2, [r7, #6]
 8002266:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	689b      	ldr	r3, [r3, #8]
 800226c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002270:	d108      	bne.n	8002284 <HAL_UART_Transmit+0x82>
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	691b      	ldr	r3, [r3, #16]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d104      	bne.n	8002284 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800227a:	2300      	movs	r3, #0
 800227c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800227e:	68bb      	ldr	r3, [r7, #8]
 8002280:	61bb      	str	r3, [r7, #24]
 8002282:	e003      	b.n	800228c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002288:	2300      	movs	r3, #0
 800228a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	2200      	movs	r2, #0
 8002290:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002294:	e02a      	b.n	80022ec <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	9300      	str	r3, [sp, #0]
 800229a:	697b      	ldr	r3, [r7, #20]
 800229c:	2200      	movs	r2, #0
 800229e:	2180      	movs	r1, #128	; 0x80
 80022a0:	68f8      	ldr	r0, [r7, #12]
 80022a2:	f000 f840 	bl	8002326 <UART_WaitOnFlagUntilTimeout>
 80022a6:	4603      	mov	r3, r0
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d001      	beq.n	80022b0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80022ac:	2303      	movs	r3, #3
 80022ae:	e036      	b.n	800231e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80022b0:	69fb      	ldr	r3, [r7, #28]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d10b      	bne.n	80022ce <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80022b6:	69bb      	ldr	r3, [r7, #24]
 80022b8:	881b      	ldrh	r3, [r3, #0]
 80022ba:	461a      	mov	r2, r3
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80022c4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80022c6:	69bb      	ldr	r3, [r7, #24]
 80022c8:	3302      	adds	r3, #2
 80022ca:	61bb      	str	r3, [r7, #24]
 80022cc:	e007      	b.n	80022de <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80022ce:	69fb      	ldr	r3, [r7, #28]
 80022d0:	781a      	ldrb	r2, [r3, #0]
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80022d8:	69fb      	ldr	r3, [r7, #28]
 80022da:	3301      	adds	r3, #1
 80022dc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80022e2:	b29b      	uxth	r3, r3
 80022e4:	3b01      	subs	r3, #1
 80022e6:	b29a      	uxth	r2, r3
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80022f0:	b29b      	uxth	r3, r3
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d1cf      	bne.n	8002296 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	9300      	str	r3, [sp, #0]
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	2200      	movs	r2, #0
 80022fe:	2140      	movs	r1, #64	; 0x40
 8002300:	68f8      	ldr	r0, [r7, #12]
 8002302:	f000 f810 	bl	8002326 <UART_WaitOnFlagUntilTimeout>
 8002306:	4603      	mov	r3, r0
 8002308:	2b00      	cmp	r3, #0
 800230a:	d001      	beq.n	8002310 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800230c:	2303      	movs	r3, #3
 800230e:	e006      	b.n	800231e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	2220      	movs	r2, #32
 8002314:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002318:	2300      	movs	r3, #0
 800231a:	e000      	b.n	800231e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800231c:	2302      	movs	r3, #2
  }
}
 800231e:	4618      	mov	r0, r3
 8002320:	3720      	adds	r7, #32
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}

08002326 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002326:	b580      	push	{r7, lr}
 8002328:	b090      	sub	sp, #64	; 0x40
 800232a:	af00      	add	r7, sp, #0
 800232c:	60f8      	str	r0, [r7, #12]
 800232e:	60b9      	str	r1, [r7, #8]
 8002330:	603b      	str	r3, [r7, #0]
 8002332:	4613      	mov	r3, r2
 8002334:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002336:	e050      	b.n	80023da <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002338:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800233a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800233e:	d04c      	beq.n	80023da <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002340:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002342:	2b00      	cmp	r3, #0
 8002344:	d007      	beq.n	8002356 <UART_WaitOnFlagUntilTimeout+0x30>
 8002346:	f7fe ff3d 	bl	80011c4 <HAL_GetTick>
 800234a:	4602      	mov	r2, r0
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	1ad3      	subs	r3, r2, r3
 8002350:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002352:	429a      	cmp	r2, r3
 8002354:	d241      	bcs.n	80023da <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	330c      	adds	r3, #12
 800235c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800235e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002360:	e853 3f00 	ldrex	r3, [r3]
 8002364:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002368:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800236c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	330c      	adds	r3, #12
 8002374:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002376:	637a      	str	r2, [r7, #52]	; 0x34
 8002378:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800237a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800237c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800237e:	e841 2300 	strex	r3, r2, [r1]
 8002382:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002386:	2b00      	cmp	r3, #0
 8002388:	d1e5      	bne.n	8002356 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	3314      	adds	r3, #20
 8002390:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002392:	697b      	ldr	r3, [r7, #20]
 8002394:	e853 3f00 	ldrex	r3, [r3]
 8002398:	613b      	str	r3, [r7, #16]
   return(result);
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	f023 0301 	bic.w	r3, r3, #1
 80023a0:	63bb      	str	r3, [r7, #56]	; 0x38
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	3314      	adds	r3, #20
 80023a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80023aa:	623a      	str	r2, [r7, #32]
 80023ac:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023ae:	69f9      	ldr	r1, [r7, #28]
 80023b0:	6a3a      	ldr	r2, [r7, #32]
 80023b2:	e841 2300 	strex	r3, r2, [r1]
 80023b6:	61bb      	str	r3, [r7, #24]
   return(result);
 80023b8:	69bb      	ldr	r3, [r7, #24]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d1e5      	bne.n	800238a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	2220      	movs	r2, #32
 80023c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	2220      	movs	r2, #32
 80023ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	2200      	movs	r2, #0
 80023d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80023d6:	2303      	movs	r3, #3
 80023d8:	e00f      	b.n	80023fa <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	681a      	ldr	r2, [r3, #0]
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	4013      	ands	r3, r2
 80023e4:	68ba      	ldr	r2, [r7, #8]
 80023e6:	429a      	cmp	r2, r3
 80023e8:	bf0c      	ite	eq
 80023ea:	2301      	moveq	r3, #1
 80023ec:	2300      	movne	r3, #0
 80023ee:	b2db      	uxtb	r3, r3
 80023f0:	461a      	mov	r2, r3
 80023f2:	79fb      	ldrb	r3, [r7, #7]
 80023f4:	429a      	cmp	r2, r3
 80023f6:	d09f      	beq.n	8002338 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80023f8:	2300      	movs	r3, #0
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	3740      	adds	r7, #64	; 0x40
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}
	...

08002404 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002404:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002408:	b0c0      	sub	sp, #256	; 0x100
 800240a:	af00      	add	r7, sp, #0
 800240c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002410:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	691b      	ldr	r3, [r3, #16]
 8002418:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800241c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002420:	68d9      	ldr	r1, [r3, #12]
 8002422:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002426:	681a      	ldr	r2, [r3, #0]
 8002428:	ea40 0301 	orr.w	r3, r0, r1
 800242c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800242e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002432:	689a      	ldr	r2, [r3, #8]
 8002434:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002438:	691b      	ldr	r3, [r3, #16]
 800243a:	431a      	orrs	r2, r3
 800243c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002440:	695b      	ldr	r3, [r3, #20]
 8002442:	431a      	orrs	r2, r3
 8002444:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002448:	69db      	ldr	r3, [r3, #28]
 800244a:	4313      	orrs	r3, r2
 800244c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002450:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	68db      	ldr	r3, [r3, #12]
 8002458:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800245c:	f021 010c 	bic.w	r1, r1, #12
 8002460:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002464:	681a      	ldr	r2, [r3, #0]
 8002466:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800246a:	430b      	orrs	r3, r1
 800246c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800246e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	695b      	ldr	r3, [r3, #20]
 8002476:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800247a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800247e:	6999      	ldr	r1, [r3, #24]
 8002480:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002484:	681a      	ldr	r2, [r3, #0]
 8002486:	ea40 0301 	orr.w	r3, r0, r1
 800248a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800248c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002490:	681a      	ldr	r2, [r3, #0]
 8002492:	4b8f      	ldr	r3, [pc, #572]	; (80026d0 <UART_SetConfig+0x2cc>)
 8002494:	429a      	cmp	r2, r3
 8002496:	d005      	beq.n	80024a4 <UART_SetConfig+0xa0>
 8002498:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800249c:	681a      	ldr	r2, [r3, #0]
 800249e:	4b8d      	ldr	r3, [pc, #564]	; (80026d4 <UART_SetConfig+0x2d0>)
 80024a0:	429a      	cmp	r2, r3
 80024a2:	d104      	bne.n	80024ae <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80024a4:	f7ff fe4c 	bl	8002140 <HAL_RCC_GetPCLK2Freq>
 80024a8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80024ac:	e003      	b.n	80024b6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80024ae:	f7ff fe33 	bl	8002118 <HAL_RCC_GetPCLK1Freq>
 80024b2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80024b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024ba:	69db      	ldr	r3, [r3, #28]
 80024bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80024c0:	f040 810c 	bne.w	80026dc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80024c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80024c8:	2200      	movs	r2, #0
 80024ca:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80024ce:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80024d2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80024d6:	4622      	mov	r2, r4
 80024d8:	462b      	mov	r3, r5
 80024da:	1891      	adds	r1, r2, r2
 80024dc:	65b9      	str	r1, [r7, #88]	; 0x58
 80024de:	415b      	adcs	r3, r3
 80024e0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80024e2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80024e6:	4621      	mov	r1, r4
 80024e8:	eb12 0801 	adds.w	r8, r2, r1
 80024ec:	4629      	mov	r1, r5
 80024ee:	eb43 0901 	adc.w	r9, r3, r1
 80024f2:	f04f 0200 	mov.w	r2, #0
 80024f6:	f04f 0300 	mov.w	r3, #0
 80024fa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80024fe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002502:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002506:	4690      	mov	r8, r2
 8002508:	4699      	mov	r9, r3
 800250a:	4623      	mov	r3, r4
 800250c:	eb18 0303 	adds.w	r3, r8, r3
 8002510:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002514:	462b      	mov	r3, r5
 8002516:	eb49 0303 	adc.w	r3, r9, r3
 800251a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800251e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	2200      	movs	r2, #0
 8002526:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800252a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800252e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002532:	460b      	mov	r3, r1
 8002534:	18db      	adds	r3, r3, r3
 8002536:	653b      	str	r3, [r7, #80]	; 0x50
 8002538:	4613      	mov	r3, r2
 800253a:	eb42 0303 	adc.w	r3, r2, r3
 800253e:	657b      	str	r3, [r7, #84]	; 0x54
 8002540:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002544:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002548:	f7fd fe5a 	bl	8000200 <__aeabi_uldivmod>
 800254c:	4602      	mov	r2, r0
 800254e:	460b      	mov	r3, r1
 8002550:	4b61      	ldr	r3, [pc, #388]	; (80026d8 <UART_SetConfig+0x2d4>)
 8002552:	fba3 2302 	umull	r2, r3, r3, r2
 8002556:	095b      	lsrs	r3, r3, #5
 8002558:	011c      	lsls	r4, r3, #4
 800255a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800255e:	2200      	movs	r2, #0
 8002560:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002564:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002568:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800256c:	4642      	mov	r2, r8
 800256e:	464b      	mov	r3, r9
 8002570:	1891      	adds	r1, r2, r2
 8002572:	64b9      	str	r1, [r7, #72]	; 0x48
 8002574:	415b      	adcs	r3, r3
 8002576:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002578:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800257c:	4641      	mov	r1, r8
 800257e:	eb12 0a01 	adds.w	sl, r2, r1
 8002582:	4649      	mov	r1, r9
 8002584:	eb43 0b01 	adc.w	fp, r3, r1
 8002588:	f04f 0200 	mov.w	r2, #0
 800258c:	f04f 0300 	mov.w	r3, #0
 8002590:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002594:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002598:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800259c:	4692      	mov	sl, r2
 800259e:	469b      	mov	fp, r3
 80025a0:	4643      	mov	r3, r8
 80025a2:	eb1a 0303 	adds.w	r3, sl, r3
 80025a6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80025aa:	464b      	mov	r3, r9
 80025ac:	eb4b 0303 	adc.w	r3, fp, r3
 80025b0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80025b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	2200      	movs	r2, #0
 80025bc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80025c0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80025c4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80025c8:	460b      	mov	r3, r1
 80025ca:	18db      	adds	r3, r3, r3
 80025cc:	643b      	str	r3, [r7, #64]	; 0x40
 80025ce:	4613      	mov	r3, r2
 80025d0:	eb42 0303 	adc.w	r3, r2, r3
 80025d4:	647b      	str	r3, [r7, #68]	; 0x44
 80025d6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80025da:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80025de:	f7fd fe0f 	bl	8000200 <__aeabi_uldivmod>
 80025e2:	4602      	mov	r2, r0
 80025e4:	460b      	mov	r3, r1
 80025e6:	4611      	mov	r1, r2
 80025e8:	4b3b      	ldr	r3, [pc, #236]	; (80026d8 <UART_SetConfig+0x2d4>)
 80025ea:	fba3 2301 	umull	r2, r3, r3, r1
 80025ee:	095b      	lsrs	r3, r3, #5
 80025f0:	2264      	movs	r2, #100	; 0x64
 80025f2:	fb02 f303 	mul.w	r3, r2, r3
 80025f6:	1acb      	subs	r3, r1, r3
 80025f8:	00db      	lsls	r3, r3, #3
 80025fa:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80025fe:	4b36      	ldr	r3, [pc, #216]	; (80026d8 <UART_SetConfig+0x2d4>)
 8002600:	fba3 2302 	umull	r2, r3, r3, r2
 8002604:	095b      	lsrs	r3, r3, #5
 8002606:	005b      	lsls	r3, r3, #1
 8002608:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800260c:	441c      	add	r4, r3
 800260e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002612:	2200      	movs	r2, #0
 8002614:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002618:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800261c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002620:	4642      	mov	r2, r8
 8002622:	464b      	mov	r3, r9
 8002624:	1891      	adds	r1, r2, r2
 8002626:	63b9      	str	r1, [r7, #56]	; 0x38
 8002628:	415b      	adcs	r3, r3
 800262a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800262c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002630:	4641      	mov	r1, r8
 8002632:	1851      	adds	r1, r2, r1
 8002634:	6339      	str	r1, [r7, #48]	; 0x30
 8002636:	4649      	mov	r1, r9
 8002638:	414b      	adcs	r3, r1
 800263a:	637b      	str	r3, [r7, #52]	; 0x34
 800263c:	f04f 0200 	mov.w	r2, #0
 8002640:	f04f 0300 	mov.w	r3, #0
 8002644:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002648:	4659      	mov	r1, fp
 800264a:	00cb      	lsls	r3, r1, #3
 800264c:	4651      	mov	r1, sl
 800264e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002652:	4651      	mov	r1, sl
 8002654:	00ca      	lsls	r2, r1, #3
 8002656:	4610      	mov	r0, r2
 8002658:	4619      	mov	r1, r3
 800265a:	4603      	mov	r3, r0
 800265c:	4642      	mov	r2, r8
 800265e:	189b      	adds	r3, r3, r2
 8002660:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002664:	464b      	mov	r3, r9
 8002666:	460a      	mov	r2, r1
 8002668:	eb42 0303 	adc.w	r3, r2, r3
 800266c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002670:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	2200      	movs	r2, #0
 8002678:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800267c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002680:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002684:	460b      	mov	r3, r1
 8002686:	18db      	adds	r3, r3, r3
 8002688:	62bb      	str	r3, [r7, #40]	; 0x28
 800268a:	4613      	mov	r3, r2
 800268c:	eb42 0303 	adc.w	r3, r2, r3
 8002690:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002692:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002696:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800269a:	f7fd fdb1 	bl	8000200 <__aeabi_uldivmod>
 800269e:	4602      	mov	r2, r0
 80026a0:	460b      	mov	r3, r1
 80026a2:	4b0d      	ldr	r3, [pc, #52]	; (80026d8 <UART_SetConfig+0x2d4>)
 80026a4:	fba3 1302 	umull	r1, r3, r3, r2
 80026a8:	095b      	lsrs	r3, r3, #5
 80026aa:	2164      	movs	r1, #100	; 0x64
 80026ac:	fb01 f303 	mul.w	r3, r1, r3
 80026b0:	1ad3      	subs	r3, r2, r3
 80026b2:	00db      	lsls	r3, r3, #3
 80026b4:	3332      	adds	r3, #50	; 0x32
 80026b6:	4a08      	ldr	r2, [pc, #32]	; (80026d8 <UART_SetConfig+0x2d4>)
 80026b8:	fba2 2303 	umull	r2, r3, r2, r3
 80026bc:	095b      	lsrs	r3, r3, #5
 80026be:	f003 0207 	and.w	r2, r3, #7
 80026c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4422      	add	r2, r4
 80026ca:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80026cc:	e105      	b.n	80028da <UART_SetConfig+0x4d6>
 80026ce:	bf00      	nop
 80026d0:	40011000 	.word	0x40011000
 80026d4:	40011400 	.word	0x40011400
 80026d8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80026dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80026e0:	2200      	movs	r2, #0
 80026e2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80026e6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80026ea:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80026ee:	4642      	mov	r2, r8
 80026f0:	464b      	mov	r3, r9
 80026f2:	1891      	adds	r1, r2, r2
 80026f4:	6239      	str	r1, [r7, #32]
 80026f6:	415b      	adcs	r3, r3
 80026f8:	627b      	str	r3, [r7, #36]	; 0x24
 80026fa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80026fe:	4641      	mov	r1, r8
 8002700:	1854      	adds	r4, r2, r1
 8002702:	4649      	mov	r1, r9
 8002704:	eb43 0501 	adc.w	r5, r3, r1
 8002708:	f04f 0200 	mov.w	r2, #0
 800270c:	f04f 0300 	mov.w	r3, #0
 8002710:	00eb      	lsls	r3, r5, #3
 8002712:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002716:	00e2      	lsls	r2, r4, #3
 8002718:	4614      	mov	r4, r2
 800271a:	461d      	mov	r5, r3
 800271c:	4643      	mov	r3, r8
 800271e:	18e3      	adds	r3, r4, r3
 8002720:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002724:	464b      	mov	r3, r9
 8002726:	eb45 0303 	adc.w	r3, r5, r3
 800272a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800272e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	2200      	movs	r2, #0
 8002736:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800273a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800273e:	f04f 0200 	mov.w	r2, #0
 8002742:	f04f 0300 	mov.w	r3, #0
 8002746:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800274a:	4629      	mov	r1, r5
 800274c:	008b      	lsls	r3, r1, #2
 800274e:	4621      	mov	r1, r4
 8002750:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002754:	4621      	mov	r1, r4
 8002756:	008a      	lsls	r2, r1, #2
 8002758:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800275c:	f7fd fd50 	bl	8000200 <__aeabi_uldivmod>
 8002760:	4602      	mov	r2, r0
 8002762:	460b      	mov	r3, r1
 8002764:	4b60      	ldr	r3, [pc, #384]	; (80028e8 <UART_SetConfig+0x4e4>)
 8002766:	fba3 2302 	umull	r2, r3, r3, r2
 800276a:	095b      	lsrs	r3, r3, #5
 800276c:	011c      	lsls	r4, r3, #4
 800276e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002772:	2200      	movs	r2, #0
 8002774:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002778:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800277c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002780:	4642      	mov	r2, r8
 8002782:	464b      	mov	r3, r9
 8002784:	1891      	adds	r1, r2, r2
 8002786:	61b9      	str	r1, [r7, #24]
 8002788:	415b      	adcs	r3, r3
 800278a:	61fb      	str	r3, [r7, #28]
 800278c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002790:	4641      	mov	r1, r8
 8002792:	1851      	adds	r1, r2, r1
 8002794:	6139      	str	r1, [r7, #16]
 8002796:	4649      	mov	r1, r9
 8002798:	414b      	adcs	r3, r1
 800279a:	617b      	str	r3, [r7, #20]
 800279c:	f04f 0200 	mov.w	r2, #0
 80027a0:	f04f 0300 	mov.w	r3, #0
 80027a4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80027a8:	4659      	mov	r1, fp
 80027aa:	00cb      	lsls	r3, r1, #3
 80027ac:	4651      	mov	r1, sl
 80027ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80027b2:	4651      	mov	r1, sl
 80027b4:	00ca      	lsls	r2, r1, #3
 80027b6:	4610      	mov	r0, r2
 80027b8:	4619      	mov	r1, r3
 80027ba:	4603      	mov	r3, r0
 80027bc:	4642      	mov	r2, r8
 80027be:	189b      	adds	r3, r3, r2
 80027c0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80027c4:	464b      	mov	r3, r9
 80027c6:	460a      	mov	r2, r1
 80027c8:	eb42 0303 	adc.w	r3, r2, r3
 80027cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80027d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	2200      	movs	r2, #0
 80027d8:	67bb      	str	r3, [r7, #120]	; 0x78
 80027da:	67fa      	str	r2, [r7, #124]	; 0x7c
 80027dc:	f04f 0200 	mov.w	r2, #0
 80027e0:	f04f 0300 	mov.w	r3, #0
 80027e4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80027e8:	4649      	mov	r1, r9
 80027ea:	008b      	lsls	r3, r1, #2
 80027ec:	4641      	mov	r1, r8
 80027ee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80027f2:	4641      	mov	r1, r8
 80027f4:	008a      	lsls	r2, r1, #2
 80027f6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80027fa:	f7fd fd01 	bl	8000200 <__aeabi_uldivmod>
 80027fe:	4602      	mov	r2, r0
 8002800:	460b      	mov	r3, r1
 8002802:	4b39      	ldr	r3, [pc, #228]	; (80028e8 <UART_SetConfig+0x4e4>)
 8002804:	fba3 1302 	umull	r1, r3, r3, r2
 8002808:	095b      	lsrs	r3, r3, #5
 800280a:	2164      	movs	r1, #100	; 0x64
 800280c:	fb01 f303 	mul.w	r3, r1, r3
 8002810:	1ad3      	subs	r3, r2, r3
 8002812:	011b      	lsls	r3, r3, #4
 8002814:	3332      	adds	r3, #50	; 0x32
 8002816:	4a34      	ldr	r2, [pc, #208]	; (80028e8 <UART_SetConfig+0x4e4>)
 8002818:	fba2 2303 	umull	r2, r3, r2, r3
 800281c:	095b      	lsrs	r3, r3, #5
 800281e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002822:	441c      	add	r4, r3
 8002824:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002828:	2200      	movs	r2, #0
 800282a:	673b      	str	r3, [r7, #112]	; 0x70
 800282c:	677a      	str	r2, [r7, #116]	; 0x74
 800282e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002832:	4642      	mov	r2, r8
 8002834:	464b      	mov	r3, r9
 8002836:	1891      	adds	r1, r2, r2
 8002838:	60b9      	str	r1, [r7, #8]
 800283a:	415b      	adcs	r3, r3
 800283c:	60fb      	str	r3, [r7, #12]
 800283e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002842:	4641      	mov	r1, r8
 8002844:	1851      	adds	r1, r2, r1
 8002846:	6039      	str	r1, [r7, #0]
 8002848:	4649      	mov	r1, r9
 800284a:	414b      	adcs	r3, r1
 800284c:	607b      	str	r3, [r7, #4]
 800284e:	f04f 0200 	mov.w	r2, #0
 8002852:	f04f 0300 	mov.w	r3, #0
 8002856:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800285a:	4659      	mov	r1, fp
 800285c:	00cb      	lsls	r3, r1, #3
 800285e:	4651      	mov	r1, sl
 8002860:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002864:	4651      	mov	r1, sl
 8002866:	00ca      	lsls	r2, r1, #3
 8002868:	4610      	mov	r0, r2
 800286a:	4619      	mov	r1, r3
 800286c:	4603      	mov	r3, r0
 800286e:	4642      	mov	r2, r8
 8002870:	189b      	adds	r3, r3, r2
 8002872:	66bb      	str	r3, [r7, #104]	; 0x68
 8002874:	464b      	mov	r3, r9
 8002876:	460a      	mov	r2, r1
 8002878:	eb42 0303 	adc.w	r3, r2, r3
 800287c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800287e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	2200      	movs	r2, #0
 8002886:	663b      	str	r3, [r7, #96]	; 0x60
 8002888:	667a      	str	r2, [r7, #100]	; 0x64
 800288a:	f04f 0200 	mov.w	r2, #0
 800288e:	f04f 0300 	mov.w	r3, #0
 8002892:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002896:	4649      	mov	r1, r9
 8002898:	008b      	lsls	r3, r1, #2
 800289a:	4641      	mov	r1, r8
 800289c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80028a0:	4641      	mov	r1, r8
 80028a2:	008a      	lsls	r2, r1, #2
 80028a4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80028a8:	f7fd fcaa 	bl	8000200 <__aeabi_uldivmod>
 80028ac:	4602      	mov	r2, r0
 80028ae:	460b      	mov	r3, r1
 80028b0:	4b0d      	ldr	r3, [pc, #52]	; (80028e8 <UART_SetConfig+0x4e4>)
 80028b2:	fba3 1302 	umull	r1, r3, r3, r2
 80028b6:	095b      	lsrs	r3, r3, #5
 80028b8:	2164      	movs	r1, #100	; 0x64
 80028ba:	fb01 f303 	mul.w	r3, r1, r3
 80028be:	1ad3      	subs	r3, r2, r3
 80028c0:	011b      	lsls	r3, r3, #4
 80028c2:	3332      	adds	r3, #50	; 0x32
 80028c4:	4a08      	ldr	r2, [pc, #32]	; (80028e8 <UART_SetConfig+0x4e4>)
 80028c6:	fba2 2303 	umull	r2, r3, r2, r3
 80028ca:	095b      	lsrs	r3, r3, #5
 80028cc:	f003 020f 	and.w	r2, r3, #15
 80028d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4422      	add	r2, r4
 80028d8:	609a      	str	r2, [r3, #8]
}
 80028da:	bf00      	nop
 80028dc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80028e0:	46bd      	mov	sp, r7
 80028e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80028e6:	bf00      	nop
 80028e8:	51eb851f 	.word	0x51eb851f

080028ec <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80028ec:	b480      	push	{r7}
 80028ee:	b083      	sub	sp, #12
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	f103 0208 	add.w	r2, r3, #8
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	f04f 32ff 	mov.w	r2, #4294967295
 8002904:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	f103 0208 	add.w	r2, r3, #8
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	f103 0208 	add.w	r2, r3, #8
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2200      	movs	r2, #0
 800291e:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002920:	bf00      	nop
 8002922:	370c      	adds	r7, #12
 8002924:	46bd      	mov	sp, r7
 8002926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292a:	4770      	bx	lr

0800292c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800292c:	b480      	push	{r7}
 800292e:	b083      	sub	sp, #12
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2200      	movs	r2, #0
 8002938:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800293a:	bf00      	nop
 800293c:	370c      	adds	r7, #12
 800293e:	46bd      	mov	sp, r7
 8002940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002944:	4770      	bx	lr

08002946 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8002946:	b480      	push	{r7}
 8002948:	b085      	sub	sp, #20
 800294a:	af00      	add	r7, sp, #0
 800294c:	6078      	str	r0, [r7, #4]
 800294e:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8002956:	68bb      	ldr	r3, [r7, #8]
 8002958:	f1b3 3fff 	cmp.w	r3, #4294967295
 800295c:	d103      	bne.n	8002966 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	691b      	ldr	r3, [r3, #16]
 8002962:	60fb      	str	r3, [r7, #12]
 8002964:	e00c      	b.n	8002980 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	3308      	adds	r3, #8
 800296a:	60fb      	str	r3, [r7, #12]
 800296c:	e002      	b.n	8002974 <vListInsert+0x2e>
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	60fb      	str	r3, [r7, #12]
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	68ba      	ldr	r2, [r7, #8]
 800297c:	429a      	cmp	r2, r3
 800297e:	d2f6      	bcs.n	800296e <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	685a      	ldr	r2, [r3, #4]
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	683a      	ldr	r2, [r7, #0]
 800298e:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	68fa      	ldr	r2, [r7, #12]
 8002994:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	683a      	ldr	r2, [r7, #0]
 800299a:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	687a      	ldr	r2, [r7, #4]
 80029a0:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	1c5a      	adds	r2, r3, #1
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	601a      	str	r2, [r3, #0]
}
 80029ac:	bf00      	nop
 80029ae:	3714      	adds	r7, #20
 80029b0:	46bd      	mov	sp, r7
 80029b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b6:	4770      	bx	lr

080029b8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80029b8:	b480      	push	{r7}
 80029ba:	b085      	sub	sp, #20
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	691b      	ldr	r3, [r3, #16]
 80029c4:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	687a      	ldr	r2, [r7, #4]
 80029cc:	6892      	ldr	r2, [r2, #8]
 80029ce:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	687a      	ldr	r2, [r7, #4]
 80029d6:	6852      	ldr	r2, [r2, #4]
 80029d8:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	687a      	ldr	r2, [r7, #4]
 80029e0:	429a      	cmp	r2, r3
 80029e2:	d103      	bne.n	80029ec <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	689a      	ldr	r2, [r3, #8]
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2200      	movs	r2, #0
 80029f0:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	1e5a      	subs	r2, r3, #1
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
}
 8002a00:	4618      	mov	r0, r3
 8002a02:	3714      	adds	r7, #20
 8002a04:	46bd      	mov	sp, r7
 8002a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0a:	4770      	bx	lr

08002a0c <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b086      	sub	sp, #24
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
 8002a14:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8002a16:	2301      	movs	r3, #1
 8002a18:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8002a1e:	693b      	ldr	r3, [r7, #16]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d10a      	bne.n	8002a3a <xQueueGenericReset+0x2e>
        __asm volatile
 8002a24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a28:	f383 8811 	msr	BASEPRI, r3
 8002a2c:	f3bf 8f6f 	isb	sy
 8002a30:	f3bf 8f4f 	dsb	sy
 8002a34:	60fb      	str	r3, [r7, #12]
    }
 8002a36:	bf00      	nop
 8002a38:	e7fe      	b.n	8002a38 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8002a3a:	693b      	ldr	r3, [r7, #16]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d05d      	beq.n	8002afc <xQueueGenericReset+0xf0>
        ( pxQueue->uxLength >= 1U ) &&
 8002a40:	693b      	ldr	r3, [r7, #16]
 8002a42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d059      	beq.n	8002afc <xQueueGenericReset+0xf0>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8002a48:	693b      	ldr	r3, [r7, #16]
 8002a4a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a4c:	693b      	ldr	r3, [r7, #16]
 8002a4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a50:	2100      	movs	r1, #0
 8002a52:	fba3 2302 	umull	r2, r3, r3, r2
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d000      	beq.n	8002a5c <xQueueGenericReset+0x50>
 8002a5a:	2101      	movs	r1, #1
 8002a5c:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d14c      	bne.n	8002afc <xQueueGenericReset+0xf0>
    {
        taskENTER_CRITICAL();
 8002a62:	f001 fde9 	bl	8004638 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002a66:	693b      	ldr	r3, [r7, #16]
 8002a68:	681a      	ldr	r2, [r3, #0]
 8002a6a:	693b      	ldr	r3, [r7, #16]
 8002a6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a6e:	6939      	ldr	r1, [r7, #16]
 8002a70:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002a72:	fb01 f303 	mul.w	r3, r1, r3
 8002a76:	441a      	add	r2, r3
 8002a78:	693b      	ldr	r3, [r7, #16]
 8002a7a:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002a7c:	693b      	ldr	r3, [r7, #16]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002a82:	693b      	ldr	r3, [r7, #16]
 8002a84:	681a      	ldr	r2, [r3, #0]
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002a8a:	693b      	ldr	r3, [r7, #16]
 8002a8c:	681a      	ldr	r2, [r3, #0]
 8002a8e:	693b      	ldr	r3, [r7, #16]
 8002a90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a92:	3b01      	subs	r3, #1
 8002a94:	6939      	ldr	r1, [r7, #16]
 8002a96:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002a98:	fb01 f303 	mul.w	r3, r1, r3
 8002a9c:	441a      	add	r2, r3
 8002a9e:	693b      	ldr	r3, [r7, #16]
 8002aa0:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8002aa2:	693b      	ldr	r3, [r7, #16]
 8002aa4:	22ff      	movs	r2, #255	; 0xff
 8002aa6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	22ff      	movs	r2, #255	; 0xff
 8002aae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d114      	bne.n	8002ae2 <xQueueGenericReset+0xd6>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002ab8:	693b      	ldr	r3, [r7, #16]
 8002aba:	691b      	ldr	r3, [r3, #16]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d01a      	beq.n	8002af6 <xQueueGenericReset+0xea>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002ac0:	693b      	ldr	r3, [r7, #16]
 8002ac2:	3310      	adds	r3, #16
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f000 ff57 	bl	8003978 <xTaskRemoveFromEventList>
 8002aca:	4603      	mov	r3, r0
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d012      	beq.n	8002af6 <xQueueGenericReset+0xea>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002ad0:	4b15      	ldr	r3, [pc, #84]	; (8002b28 <xQueueGenericReset+0x11c>)
 8002ad2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ad6:	601a      	str	r2, [r3, #0]
 8002ad8:	f3bf 8f4f 	dsb	sy
 8002adc:	f3bf 8f6f 	isb	sy
 8002ae0:	e009      	b.n	8002af6 <xQueueGenericReset+0xea>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002ae2:	693b      	ldr	r3, [r7, #16]
 8002ae4:	3310      	adds	r3, #16
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f7ff ff00 	bl	80028ec <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002aec:	693b      	ldr	r3, [r7, #16]
 8002aee:	3324      	adds	r3, #36	; 0x24
 8002af0:	4618      	mov	r0, r3
 8002af2:	f7ff fefb 	bl	80028ec <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8002af6:	f001 fdcf 	bl	8004698 <vPortExitCritical>
 8002afa:	e001      	b.n	8002b00 <xQueueGenericReset+0xf4>
    }
    else
    {
        xReturn = pdFAIL;
 8002afc:	2300      	movs	r3, #0
 8002afe:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d10a      	bne.n	8002b1c <xQueueGenericReset+0x110>
        __asm volatile
 8002b06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b0a:	f383 8811 	msr	BASEPRI, r3
 8002b0e:	f3bf 8f6f 	isb	sy
 8002b12:	f3bf 8f4f 	dsb	sy
 8002b16:	60bb      	str	r3, [r7, #8]
    }
 8002b18:	bf00      	nop
 8002b1a:	e7fe      	b.n	8002b1a <xQueueGenericReset+0x10e>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8002b1c:	697b      	ldr	r3, [r7, #20]
}
 8002b1e:	4618      	mov	r0, r3
 8002b20:	3718      	adds	r7, #24
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}
 8002b26:	bf00      	nop
 8002b28:	e000ed04 	.word	0xe000ed04

08002b2c <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b08a      	sub	sp, #40	; 0x28
 8002b30:	af02      	add	r7, sp, #8
 8002b32:	60f8      	str	r0, [r7, #12]
 8002b34:	60b9      	str	r1, [r7, #8]
 8002b36:	4613      	mov	r3, r2
 8002b38:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d02e      	beq.n	8002ba2 <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8002b44:	2100      	movs	r1, #0
 8002b46:	68ba      	ldr	r2, [r7, #8]
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	fba3 2302 	umull	r2, r3, r3, r2
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d000      	beq.n	8002b54 <xQueueGenericCreate+0x28>
 8002b52:	2101      	movs	r1, #1
 8002b54:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d123      	bne.n	8002ba2 <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	68ba      	ldr	r2, [r7, #8]
 8002b5e:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8002b62:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8002b66:	d81c      	bhi.n	8002ba2 <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	68ba      	ldr	r2, [r7, #8]
 8002b6c:	fb02 f303 	mul.w	r3, r2, r3
 8002b70:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002b72:	69bb      	ldr	r3, [r7, #24]
 8002b74:	3350      	adds	r3, #80	; 0x50
 8002b76:	4618      	mov	r0, r3
 8002b78:	f001 fe40 	bl	80047fc <pvPortMalloc>
 8002b7c:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8002b7e:	69fb      	ldr	r3, [r7, #28]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d01c      	beq.n	8002bbe <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002b84:	69fb      	ldr	r3, [r7, #28]
 8002b86:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002b88:	697b      	ldr	r3, [r7, #20]
 8002b8a:	3350      	adds	r3, #80	; 0x50
 8002b8c:	617b      	str	r3, [r7, #20]
                         * deleted. */
                        pxNewQueue->ucStaticallyAllocated = pdFALSE;
                    }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002b8e:	79fa      	ldrb	r2, [r7, #7]
 8002b90:	69fb      	ldr	r3, [r7, #28]
 8002b92:	9300      	str	r3, [sp, #0]
 8002b94:	4613      	mov	r3, r2
 8002b96:	697a      	ldr	r2, [r7, #20]
 8002b98:	68b9      	ldr	r1, [r7, #8]
 8002b9a:	68f8      	ldr	r0, [r7, #12]
 8002b9c:	f000 f814 	bl	8002bc8 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8002ba0:	e00d      	b.n	8002bbe <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8002ba2:	69fb      	ldr	r3, [r7, #28]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d10a      	bne.n	8002bbe <xQueueGenericCreate+0x92>
        __asm volatile
 8002ba8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bac:	f383 8811 	msr	BASEPRI, r3
 8002bb0:	f3bf 8f6f 	isb	sy
 8002bb4:	f3bf 8f4f 	dsb	sy
 8002bb8:	613b      	str	r3, [r7, #16]
    }
 8002bba:	bf00      	nop
 8002bbc:	e7fe      	b.n	8002bbc <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8002bbe:	69fb      	ldr	r3, [r7, #28]
    }
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	3720      	adds	r7, #32
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bd80      	pop	{r7, pc}

08002bc8 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b084      	sub	sp, #16
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	60f8      	str	r0, [r7, #12]
 8002bd0:	60b9      	str	r1, [r7, #8]
 8002bd2:	607a      	str	r2, [r7, #4]
 8002bd4:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8002bd6:	68bb      	ldr	r3, [r7, #8]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d103      	bne.n	8002be4 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002bdc:	69bb      	ldr	r3, [r7, #24]
 8002bde:	69ba      	ldr	r2, [r7, #24]
 8002be0:	601a      	str	r2, [r3, #0]
 8002be2:	e002      	b.n	8002bea <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002be4:	69bb      	ldr	r3, [r7, #24]
 8002be6:	687a      	ldr	r2, [r7, #4]
 8002be8:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8002bea:	69bb      	ldr	r3, [r7, #24]
 8002bec:	68fa      	ldr	r2, [r7, #12]
 8002bee:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8002bf0:	69bb      	ldr	r3, [r7, #24]
 8002bf2:	68ba      	ldr	r2, [r7, #8]
 8002bf4:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002bf6:	2101      	movs	r1, #1
 8002bf8:	69b8      	ldr	r0, [r7, #24]
 8002bfa:	f7ff ff07 	bl	8002a0c <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8002bfe:	69bb      	ldr	r3, [r7, #24]
 8002c00:	78fa      	ldrb	r2, [r7, #3]
 8002c02:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8002c06:	bf00      	nop
 8002c08:	3710      	adds	r7, #16
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}
	...

08002c10 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b08c      	sub	sp, #48	; 0x30
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	60f8      	str	r0, [r7, #12]
 8002c18:	60b9      	str	r1, [r7, #8]
 8002c1a:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8002c24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d10a      	bne.n	8002c40 <xQueueReceive+0x30>
        __asm volatile
 8002c2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c2e:	f383 8811 	msr	BASEPRI, r3
 8002c32:	f3bf 8f6f 	isb	sy
 8002c36:	f3bf 8f4f 	dsb	sy
 8002c3a:	623b      	str	r3, [r7, #32]
    }
 8002c3c:	bf00      	nop
 8002c3e:	e7fe      	b.n	8002c3e <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d103      	bne.n	8002c4e <xQueueReceive+0x3e>
 8002c46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d101      	bne.n	8002c52 <xQueueReceive+0x42>
 8002c4e:	2301      	movs	r3, #1
 8002c50:	e000      	b.n	8002c54 <xQueueReceive+0x44>
 8002c52:	2300      	movs	r3, #0
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d10a      	bne.n	8002c6e <xQueueReceive+0x5e>
        __asm volatile
 8002c58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c5c:	f383 8811 	msr	BASEPRI, r3
 8002c60:	f3bf 8f6f 	isb	sy
 8002c64:	f3bf 8f4f 	dsb	sy
 8002c68:	61fb      	str	r3, [r7, #28]
    }
 8002c6a:	bf00      	nop
 8002c6c:	e7fe      	b.n	8002c6c <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002c6e:	f001 f893 	bl	8003d98 <xTaskGetSchedulerState>
 8002c72:	4603      	mov	r3, r0
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d102      	bne.n	8002c7e <xQueueReceive+0x6e>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d101      	bne.n	8002c82 <xQueueReceive+0x72>
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e000      	b.n	8002c84 <xQueueReceive+0x74>
 8002c82:	2300      	movs	r3, #0
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d10a      	bne.n	8002c9e <xQueueReceive+0x8e>
        __asm volatile
 8002c88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c8c:	f383 8811 	msr	BASEPRI, r3
 8002c90:	f3bf 8f6f 	isb	sy
 8002c94:	f3bf 8f4f 	dsb	sy
 8002c98:	61bb      	str	r3, [r7, #24]
    }
 8002c9a:	bf00      	nop
 8002c9c:	e7fe      	b.n	8002c9c <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002c9e:	f001 fccb 	bl	8004638 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002ca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ca4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ca6:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d01f      	beq.n	8002cee <xQueueReceive+0xde>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002cae:	68b9      	ldr	r1, [r7, #8]
 8002cb0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002cb2:	f000 f88d 	bl	8002dd0 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb8:	1e5a      	subs	r2, r3, #1
 8002cba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cbc:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cc0:	691b      	ldr	r3, [r3, #16]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d00f      	beq.n	8002ce6 <xQueueReceive+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002cc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cc8:	3310      	adds	r3, #16
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f000 fe54 	bl	8003978 <xTaskRemoveFromEventList>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d007      	beq.n	8002ce6 <xQueueReceive+0xd6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002cd6:	4b3d      	ldr	r3, [pc, #244]	; (8002dcc <xQueueReceive+0x1bc>)
 8002cd8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002cdc:	601a      	str	r2, [r3, #0]
 8002cde:	f3bf 8f4f 	dsb	sy
 8002ce2:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8002ce6:	f001 fcd7 	bl	8004698 <vPortExitCritical>
                return pdPASS;
 8002cea:	2301      	movs	r3, #1
 8002cec:	e069      	b.n	8002dc2 <xQueueReceive+0x1b2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d103      	bne.n	8002cfc <xQueueReceive+0xec>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002cf4:	f001 fcd0 	bl	8004698 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	e062      	b.n	8002dc2 <xQueueReceive+0x1b2>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002cfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d106      	bne.n	8002d10 <xQueueReceive+0x100>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002d02:	f107 0310 	add.w	r3, r7, #16
 8002d06:	4618      	mov	r0, r3
 8002d08:	f000 ff0c 	bl	8003b24 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002d10:	f001 fcc2 	bl	8004698 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002d14:	f000 fb3a 	bl	800338c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002d18:	f001 fc8e 	bl	8004638 <vPortEnterCritical>
 8002d1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d1e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002d22:	b25b      	sxtb	r3, r3
 8002d24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d28:	d103      	bne.n	8002d32 <xQueueReceive+0x122>
 8002d2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d34:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002d38:	b25b      	sxtb	r3, r3
 8002d3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d3e:	d103      	bne.n	8002d48 <xQueueReceive+0x138>
 8002d40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d42:	2200      	movs	r2, #0
 8002d44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002d48:	f001 fca6 	bl	8004698 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002d4c:	1d3a      	adds	r2, r7, #4
 8002d4e:	f107 0310 	add.w	r3, r7, #16
 8002d52:	4611      	mov	r1, r2
 8002d54:	4618      	mov	r0, r3
 8002d56:	f000 fefb 	bl	8003b50 <xTaskCheckForTimeOut>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d123      	bne.n	8002da8 <xQueueReceive+0x198>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002d60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002d62:	f000 f8ad 	bl	8002ec0 <prvIsQueueEmpty>
 8002d66:	4603      	mov	r3, r0
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d017      	beq.n	8002d9c <xQueueReceive+0x18c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002d6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d6e:	3324      	adds	r3, #36	; 0x24
 8002d70:	687a      	ldr	r2, [r7, #4]
 8002d72:	4611      	mov	r1, r2
 8002d74:	4618      	mov	r0, r3
 8002d76:	f000 fd95 	bl	80038a4 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8002d7a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002d7c:	f000 f84e 	bl	8002e1c <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8002d80:	f000 fb12 	bl	80033a8 <xTaskResumeAll>
 8002d84:	4603      	mov	r3, r0
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d189      	bne.n	8002c9e <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8002d8a:	4b10      	ldr	r3, [pc, #64]	; (8002dcc <xQueueReceive+0x1bc>)
 8002d8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d90:	601a      	str	r2, [r3, #0]
 8002d92:	f3bf 8f4f 	dsb	sy
 8002d96:	f3bf 8f6f 	isb	sy
 8002d9a:	e780      	b.n	8002c9e <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8002d9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002d9e:	f000 f83d 	bl	8002e1c <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002da2:	f000 fb01 	bl	80033a8 <xTaskResumeAll>
 8002da6:	e77a      	b.n	8002c9e <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8002da8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002daa:	f000 f837 	bl	8002e1c <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002dae:	f000 fafb 	bl	80033a8 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002db2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002db4:	f000 f884 	bl	8002ec0 <prvIsQueueEmpty>
 8002db8:	4603      	mov	r3, r0
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	f43f af6f 	beq.w	8002c9e <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8002dc0:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	3730      	adds	r7, #48	; 0x30
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}
 8002dca:	bf00      	nop
 8002dcc:	e000ed04 	.word	0xe000ed04

08002dd0 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b082      	sub	sp, #8
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
 8002dd8:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d018      	beq.n	8002e14 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	68da      	ldr	r2, [r3, #12]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dea:	441a      	add	r2, r3
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	68da      	ldr	r2, [r3, #12]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	689b      	ldr	r3, [r3, #8]
 8002df8:	429a      	cmp	r2, r3
 8002dfa:	d303      	bcc.n	8002e04 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681a      	ldr	r2, [r3, #0]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	68d9      	ldr	r1, [r3, #12]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e0c:	461a      	mov	r2, r3
 8002e0e:	6838      	ldr	r0, [r7, #0]
 8002e10:	f002 faba 	bl	8005388 <memcpy>
    }
}
 8002e14:	bf00      	nop
 8002e16:	3708      	adds	r7, #8
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd80      	pop	{r7, pc}

08002e1c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b084      	sub	sp, #16
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8002e24:	f001 fc08 	bl	8004638 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002e2e:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002e30:	e011      	b.n	8002e56 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d012      	beq.n	8002e60 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	3324      	adds	r3, #36	; 0x24
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f000 fd9a 	bl	8003978 <xTaskRemoveFromEventList>
 8002e44:	4603      	mov	r3, r0
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d001      	beq.n	8002e4e <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8002e4a:	f000 fee7 	bl	8003c1c <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8002e4e:	7bfb      	ldrb	r3, [r7, #15]
 8002e50:	3b01      	subs	r3, #1
 8002e52:	b2db      	uxtb	r3, r3
 8002e54:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002e56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	dce9      	bgt.n	8002e32 <prvUnlockQueue+0x16>
 8002e5e:	e000      	b.n	8002e62 <prvUnlockQueue+0x46>
                        break;
 8002e60:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	22ff      	movs	r2, #255	; 0xff
 8002e66:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8002e6a:	f001 fc15 	bl	8004698 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8002e6e:	f001 fbe3 	bl	8004638 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002e78:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002e7a:	e011      	b.n	8002ea0 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	691b      	ldr	r3, [r3, #16]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d012      	beq.n	8002eaa <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	3310      	adds	r3, #16
 8002e88:	4618      	mov	r0, r3
 8002e8a:	f000 fd75 	bl	8003978 <xTaskRemoveFromEventList>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d001      	beq.n	8002e98 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8002e94:	f000 fec2 	bl	8003c1c <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002e98:	7bbb      	ldrb	r3, [r7, #14]
 8002e9a:	3b01      	subs	r3, #1
 8002e9c:	b2db      	uxtb	r3, r3
 8002e9e:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002ea0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	dce9      	bgt.n	8002e7c <prvUnlockQueue+0x60>
 8002ea8:	e000      	b.n	8002eac <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8002eaa:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	22ff      	movs	r2, #255	; 0xff
 8002eb0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8002eb4:	f001 fbf0 	bl	8004698 <vPortExitCritical>
}
 8002eb8:	bf00      	nop
 8002eba:	3710      	adds	r7, #16
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bd80      	pop	{r7, pc}

08002ec0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b084      	sub	sp, #16
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002ec8:	f001 fbb6 	bl	8004638 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d102      	bne.n	8002eda <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	60fb      	str	r3, [r7, #12]
 8002ed8:	e001      	b.n	8002ede <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8002eda:	2300      	movs	r3, #0
 8002edc:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002ede:	f001 fbdb 	bl	8004698 <vPortExitCritical>

    return xReturn;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
}
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	3710      	adds	r7, #16
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd80      	pop	{r7, pc}

08002eec <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8002eec:	b480      	push	{r7}
 8002eee:	b087      	sub	sp, #28
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
 8002ef4:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        configASSERT( xQueue );
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d10a      	bne.n	8002f12 <vQueueAddToRegistry+0x26>
        __asm volatile
 8002efc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f00:	f383 8811 	msr	BASEPRI, r3
 8002f04:	f3bf 8f6f 	isb	sy
 8002f08:	f3bf 8f4f 	dsb	sy
 8002f0c:	60fb      	str	r3, [r7, #12]
    }
 8002f0e:	bf00      	nop
 8002f10:	e7fe      	b.n	8002f10 <vQueueAddToRegistry+0x24>

        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8002f12:	2300      	movs	r3, #0
 8002f14:	613b      	str	r3, [r7, #16]

        if( pcQueueName != NULL )
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d024      	beq.n	8002f66 <vQueueAddToRegistry+0x7a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	617b      	str	r3, [r7, #20]
 8002f20:	e01e      	b.n	8002f60 <vQueueAddToRegistry+0x74>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8002f22:	4a18      	ldr	r2, [pc, #96]	; (8002f84 <vQueueAddToRegistry+0x98>)
 8002f24:	697b      	ldr	r3, [r7, #20]
 8002f26:	00db      	lsls	r3, r3, #3
 8002f28:	4413      	add	r3, r2
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	687a      	ldr	r2, [r7, #4]
 8002f2e:	429a      	cmp	r2, r3
 8002f30:	d105      	bne.n	8002f3e <vQueueAddToRegistry+0x52>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8002f32:	697b      	ldr	r3, [r7, #20]
 8002f34:	00db      	lsls	r3, r3, #3
 8002f36:	4a13      	ldr	r2, [pc, #76]	; (8002f84 <vQueueAddToRegistry+0x98>)
 8002f38:	4413      	add	r3, r2
 8002f3a:	613b      	str	r3, [r7, #16]
                    break;
 8002f3c:	e013      	b.n	8002f66 <vQueueAddToRegistry+0x7a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8002f3e:	693b      	ldr	r3, [r7, #16]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d10a      	bne.n	8002f5a <vQueueAddToRegistry+0x6e>
 8002f44:	4a0f      	ldr	r2, [pc, #60]	; (8002f84 <vQueueAddToRegistry+0x98>)
 8002f46:	697b      	ldr	r3, [r7, #20]
 8002f48:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d104      	bne.n	8002f5a <vQueueAddToRegistry+0x6e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8002f50:	697b      	ldr	r3, [r7, #20]
 8002f52:	00db      	lsls	r3, r3, #3
 8002f54:	4a0b      	ldr	r2, [pc, #44]	; (8002f84 <vQueueAddToRegistry+0x98>)
 8002f56:	4413      	add	r3, r2
 8002f58:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002f5a:	697b      	ldr	r3, [r7, #20]
 8002f5c:	3301      	adds	r3, #1
 8002f5e:	617b      	str	r3, [r7, #20]
 8002f60:	697b      	ldr	r3, [r7, #20]
 8002f62:	2b07      	cmp	r3, #7
 8002f64:	d9dd      	bls.n	8002f22 <vQueueAddToRegistry+0x36>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d005      	beq.n	8002f78 <vQueueAddToRegistry+0x8c>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8002f6c:	693b      	ldr	r3, [r7, #16]
 8002f6e:	683a      	ldr	r2, [r7, #0]
 8002f70:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	687a      	ldr	r2, [r7, #4]
 8002f76:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 8002f78:	bf00      	nop
 8002f7a:	371c      	adds	r7, #28
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f82:	4770      	bx	lr
 8002f84:	200000a8 	.word	0x200000a8

08002f88 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b086      	sub	sp, #24
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	60f8      	str	r0, [r7, #12]
 8002f90:	60b9      	str	r1, [r7, #8]
 8002f92:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002f98:	f001 fb4e 	bl	8004638 <vPortEnterCritical>
 8002f9c:	697b      	ldr	r3, [r7, #20]
 8002f9e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002fa2:	b25b      	sxtb	r3, r3
 8002fa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fa8:	d103      	bne.n	8002fb2 <vQueueWaitForMessageRestricted+0x2a>
 8002faa:	697b      	ldr	r3, [r7, #20]
 8002fac:	2200      	movs	r2, #0
 8002fae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002fb8:	b25b      	sxtb	r3, r3
 8002fba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fbe:	d103      	bne.n	8002fc8 <vQueueWaitForMessageRestricted+0x40>
 8002fc0:	697b      	ldr	r3, [r7, #20]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002fc8:	f001 fb66 	bl	8004698 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002fcc:	697b      	ldr	r3, [r7, #20]
 8002fce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d106      	bne.n	8002fe2 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002fd4:	697b      	ldr	r3, [r7, #20]
 8002fd6:	3324      	adds	r3, #36	; 0x24
 8002fd8:	687a      	ldr	r2, [r7, #4]
 8002fda:	68b9      	ldr	r1, [r7, #8]
 8002fdc:	4618      	mov	r0, r3
 8002fde:	f000 fc85 	bl	80038ec <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8002fe2:	6978      	ldr	r0, [r7, #20]
 8002fe4:	f7ff ff1a 	bl	8002e1c <prvUnlockQueue>
    }
 8002fe8:	bf00      	nop
 8002fea:	3718      	adds	r7, #24
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bd80      	pop	{r7, pc}

08002ff0 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b08c      	sub	sp, #48	; 0x30
 8002ff4:	af04      	add	r7, sp, #16
 8002ff6:	60f8      	str	r0, [r7, #12]
 8002ff8:	60b9      	str	r1, [r7, #8]
 8002ffa:	603b      	str	r3, [r7, #0]
 8002ffc:	4613      	mov	r3, r2
 8002ffe:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003000:	88fb      	ldrh	r3, [r7, #6]
 8003002:	009b      	lsls	r3, r3, #2
 8003004:	4618      	mov	r0, r3
 8003006:	f001 fbf9 	bl	80047fc <pvPortMalloc>
 800300a:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 800300c:	697b      	ldr	r3, [r7, #20]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d00e      	beq.n	8003030 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003012:	2058      	movs	r0, #88	; 0x58
 8003014:	f001 fbf2 	bl	80047fc <pvPortMalloc>
 8003018:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 800301a:	69fb      	ldr	r3, [r7, #28]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d003      	beq.n	8003028 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8003020:	69fb      	ldr	r3, [r7, #28]
 8003022:	697a      	ldr	r2, [r7, #20]
 8003024:	631a      	str	r2, [r3, #48]	; 0x30
 8003026:	e005      	b.n	8003034 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFreeStack( pxStack );
 8003028:	6978      	ldr	r0, [r7, #20]
 800302a:	f001 fcc7 	bl	80049bc <vPortFree>
 800302e:	e001      	b.n	8003034 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8003030:	2300      	movs	r3, #0
 8003032:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8003034:	69fb      	ldr	r3, [r7, #28]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d013      	beq.n	8003062 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800303a:	88fa      	ldrh	r2, [r7, #6]
 800303c:	2300      	movs	r3, #0
 800303e:	9303      	str	r3, [sp, #12]
 8003040:	69fb      	ldr	r3, [r7, #28]
 8003042:	9302      	str	r3, [sp, #8]
 8003044:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003046:	9301      	str	r3, [sp, #4]
 8003048:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800304a:	9300      	str	r3, [sp, #0]
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	68b9      	ldr	r1, [r7, #8]
 8003050:	68f8      	ldr	r0, [r7, #12]
 8003052:	f000 f80e 	bl	8003072 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8003056:	69f8      	ldr	r0, [r7, #28]
 8003058:	f000 f8b0 	bl	80031bc <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 800305c:	2301      	movs	r3, #1
 800305e:	61bb      	str	r3, [r7, #24]
 8003060:	e002      	b.n	8003068 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003062:	f04f 33ff 	mov.w	r3, #4294967295
 8003066:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8003068:	69bb      	ldr	r3, [r7, #24]
    }
 800306a:	4618      	mov	r0, r3
 800306c:	3720      	adds	r7, #32
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}

08003072 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8003072:	b580      	push	{r7, lr}
 8003074:	b088      	sub	sp, #32
 8003076:	af00      	add	r7, sp, #0
 8003078:	60f8      	str	r0, [r7, #12]
 800307a:	60b9      	str	r1, [r7, #8]
 800307c:	607a      	str	r2, [r7, #4]
 800307e:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003080:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003082:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	009b      	lsls	r3, r3, #2
 8003088:	461a      	mov	r2, r3
 800308a:	21a5      	movs	r1, #165	; 0xa5
 800308c:	f002 f98a 	bl	80053a4 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003092:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800309a:	3b01      	subs	r3, #1
 800309c:	009b      	lsls	r3, r3, #2
 800309e:	4413      	add	r3, r2
 80030a0:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80030a2:	69bb      	ldr	r3, [r7, #24]
 80030a4:	f023 0307 	bic.w	r3, r3, #7
 80030a8:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80030aa:	69bb      	ldr	r3, [r7, #24]
 80030ac:	f003 0307 	and.w	r3, r3, #7
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d00a      	beq.n	80030ca <prvInitialiseNewTask+0x58>
        __asm volatile
 80030b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030b8:	f383 8811 	msr	BASEPRI, r3
 80030bc:	f3bf 8f6f 	isb	sy
 80030c0:	f3bf 8f4f 	dsb	sy
 80030c4:	617b      	str	r3, [r7, #20]
    }
 80030c6:	bf00      	nop
 80030c8:	e7fe      	b.n	80030c8 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80030ca:	68bb      	ldr	r3, [r7, #8]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d01f      	beq.n	8003110 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80030d0:	2300      	movs	r3, #0
 80030d2:	61fb      	str	r3, [r7, #28]
 80030d4:	e012      	b.n	80030fc <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80030d6:	68ba      	ldr	r2, [r7, #8]
 80030d8:	69fb      	ldr	r3, [r7, #28]
 80030da:	4413      	add	r3, r2
 80030dc:	7819      	ldrb	r1, [r3, #0]
 80030de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80030e0:	69fb      	ldr	r3, [r7, #28]
 80030e2:	4413      	add	r3, r2
 80030e4:	3334      	adds	r3, #52	; 0x34
 80030e6:	460a      	mov	r2, r1
 80030e8:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80030ea:	68ba      	ldr	r2, [r7, #8]
 80030ec:	69fb      	ldr	r3, [r7, #28]
 80030ee:	4413      	add	r3, r2
 80030f0:	781b      	ldrb	r3, [r3, #0]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d006      	beq.n	8003104 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80030f6:	69fb      	ldr	r3, [r7, #28]
 80030f8:	3301      	adds	r3, #1
 80030fa:	61fb      	str	r3, [r7, #28]
 80030fc:	69fb      	ldr	r3, [r7, #28]
 80030fe:	2b09      	cmp	r3, #9
 8003100:	d9e9      	bls.n	80030d6 <prvInitialiseNewTask+0x64>
 8003102:	e000      	b.n	8003106 <prvInitialiseNewTask+0x94>
            {
                break;
 8003104:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003108:	2200      	movs	r2, #0
 800310a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800310e:	e003      	b.n	8003118 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003112:	2200      	movs	r2, #0
 8003114:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8003118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800311a:	2b04      	cmp	r3, #4
 800311c:	d90a      	bls.n	8003134 <prvInitialiseNewTask+0xc2>
        __asm volatile
 800311e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003122:	f383 8811 	msr	BASEPRI, r3
 8003126:	f3bf 8f6f 	isb	sy
 800312a:	f3bf 8f4f 	dsb	sy
 800312e:	613b      	str	r3, [r7, #16]
    }
 8003130:	bf00      	nop
 8003132:	e7fe      	b.n	8003132 <prvInitialiseNewTask+0xc0>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003136:	2b04      	cmp	r3, #4
 8003138:	d901      	bls.n	800313e <prvInitialiseNewTask+0xcc>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800313a:	2304      	movs	r3, #4
 800313c:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800313e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003140:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003142:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8003144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003146:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003148:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 800314a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800314c:	2200      	movs	r2, #0
 800314e:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003152:	3304      	adds	r3, #4
 8003154:	4618      	mov	r0, r3
 8003156:	f7ff fbe9 	bl	800292c <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800315a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800315c:	3318      	adds	r3, #24
 800315e:	4618      	mov	r0, r3
 8003160:	f7ff fbe4 	bl	800292c <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003166:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003168:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800316a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800316c:	f1c3 0205 	rsb	r2, r3, #5
 8003170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003172:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003176:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003178:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 800317a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800317c:	3350      	adds	r3, #80	; 0x50
 800317e:	2204      	movs	r2, #4
 8003180:	2100      	movs	r1, #0
 8003182:	4618      	mov	r0, r3
 8003184:	f002 f90e 	bl	80053a4 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8003188:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800318a:	3354      	adds	r3, #84	; 0x54
 800318c:	2201      	movs	r2, #1
 800318e:	2100      	movs	r1, #0
 8003190:	4618      	mov	r0, r3
 8003192:	f002 f907 	bl	80053a4 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003196:	683a      	ldr	r2, [r7, #0]
 8003198:	68f9      	ldr	r1, [r7, #12]
 800319a:	69b8      	ldr	r0, [r7, #24]
 800319c:	f001 f91e 	bl	80043dc <pxPortInitialiseStack>
 80031a0:	4602      	mov	r2, r0
 80031a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031a4:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80031a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d002      	beq.n	80031b2 <prvInitialiseNewTask+0x140>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80031ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80031b0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80031b2:	bf00      	nop
 80031b4:	3720      	adds	r7, #32
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}
	...

080031bc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b084      	sub	sp, #16
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80031c4:	f001 fa38 	bl	8004638 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80031c8:	4b40      	ldr	r3, [pc, #256]	; (80032cc <prvAddNewTaskToReadyList+0x110>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	3301      	adds	r3, #1
 80031ce:	4a3f      	ldr	r2, [pc, #252]	; (80032cc <prvAddNewTaskToReadyList+0x110>)
 80031d0:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80031d2:	4b3f      	ldr	r3, [pc, #252]	; (80032d0 <prvAddNewTaskToReadyList+0x114>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d109      	bne.n	80031ee <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80031da:	4a3d      	ldr	r2, [pc, #244]	; (80032d0 <prvAddNewTaskToReadyList+0x114>)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80031e0:	4b3a      	ldr	r3, [pc, #232]	; (80032cc <prvAddNewTaskToReadyList+0x110>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	2b01      	cmp	r3, #1
 80031e6:	d110      	bne.n	800320a <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80031e8:	f000 fd3c 	bl	8003c64 <prvInitialiseTaskLists>
 80031ec:	e00d      	b.n	800320a <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80031ee:	4b39      	ldr	r3, [pc, #228]	; (80032d4 <prvAddNewTaskToReadyList+0x118>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d109      	bne.n	800320a <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80031f6:	4b36      	ldr	r3, [pc, #216]	; (80032d0 <prvAddNewTaskToReadyList+0x114>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003200:	429a      	cmp	r2, r3
 8003202:	d802      	bhi.n	800320a <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8003204:	4a32      	ldr	r2, [pc, #200]	; (80032d0 <prvAddNewTaskToReadyList+0x114>)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800320a:	4b33      	ldr	r3, [pc, #204]	; (80032d8 <prvAddNewTaskToReadyList+0x11c>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	3301      	adds	r3, #1
 8003210:	4a31      	ldr	r2, [pc, #196]	; (80032d8 <prvAddNewTaskToReadyList+0x11c>)
 8003212:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003214:	4b30      	ldr	r3, [pc, #192]	; (80032d8 <prvAddNewTaskToReadyList+0x11c>)
 8003216:	681a      	ldr	r2, [r3, #0]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003220:	2201      	movs	r2, #1
 8003222:	409a      	lsls	r2, r3
 8003224:	4b2d      	ldr	r3, [pc, #180]	; (80032dc <prvAddNewTaskToReadyList+0x120>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4313      	orrs	r3, r2
 800322a:	4a2c      	ldr	r2, [pc, #176]	; (80032dc <prvAddNewTaskToReadyList+0x120>)
 800322c:	6013      	str	r3, [r2, #0]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003232:	492b      	ldr	r1, [pc, #172]	; (80032e0 <prvAddNewTaskToReadyList+0x124>)
 8003234:	4613      	mov	r3, r2
 8003236:	009b      	lsls	r3, r3, #2
 8003238:	4413      	add	r3, r2
 800323a:	009b      	lsls	r3, r3, #2
 800323c:	440b      	add	r3, r1
 800323e:	3304      	adds	r3, #4
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	60fb      	str	r3, [r7, #12]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	68fa      	ldr	r2, [r7, #12]
 8003248:	609a      	str	r2, [r3, #8]
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	689a      	ldr	r2, [r3, #8]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	60da      	str	r2, [r3, #12]
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	689b      	ldr	r3, [r3, #8]
 8003256:	687a      	ldr	r2, [r7, #4]
 8003258:	3204      	adds	r2, #4
 800325a:	605a      	str	r2, [r3, #4]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	1d1a      	adds	r2, r3, #4
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	609a      	str	r2, [r3, #8]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003268:	4613      	mov	r3, r2
 800326a:	009b      	lsls	r3, r3, #2
 800326c:	4413      	add	r3, r2
 800326e:	009b      	lsls	r3, r3, #2
 8003270:	4a1b      	ldr	r2, [pc, #108]	; (80032e0 <prvAddNewTaskToReadyList+0x124>)
 8003272:	441a      	add	r2, r3
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	615a      	str	r2, [r3, #20]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800327c:	4918      	ldr	r1, [pc, #96]	; (80032e0 <prvAddNewTaskToReadyList+0x124>)
 800327e:	4613      	mov	r3, r2
 8003280:	009b      	lsls	r3, r3, #2
 8003282:	4413      	add	r3, r2
 8003284:	009b      	lsls	r3, r3, #2
 8003286:	440b      	add	r3, r1
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	1c59      	adds	r1, r3, #1
 800328c:	4814      	ldr	r0, [pc, #80]	; (80032e0 <prvAddNewTaskToReadyList+0x124>)
 800328e:	4613      	mov	r3, r2
 8003290:	009b      	lsls	r3, r3, #2
 8003292:	4413      	add	r3, r2
 8003294:	009b      	lsls	r3, r3, #2
 8003296:	4403      	add	r3, r0
 8003298:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800329a:	f001 f9fd 	bl	8004698 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800329e:	4b0d      	ldr	r3, [pc, #52]	; (80032d4 <prvAddNewTaskToReadyList+0x118>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d00e      	beq.n	80032c4 <prvAddNewTaskToReadyList+0x108>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80032a6:	4b0a      	ldr	r3, [pc, #40]	; (80032d0 <prvAddNewTaskToReadyList+0x114>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032b0:	429a      	cmp	r2, r3
 80032b2:	d207      	bcs.n	80032c4 <prvAddNewTaskToReadyList+0x108>
        {
            taskYIELD_IF_USING_PREEMPTION();
 80032b4:	4b0b      	ldr	r3, [pc, #44]	; (80032e4 <prvAddNewTaskToReadyList+0x128>)
 80032b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80032ba:	601a      	str	r2, [r3, #0]
 80032bc:	f3bf 8f4f 	dsb	sy
 80032c0:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80032c4:	bf00      	nop
 80032c6:	3710      	adds	r7, #16
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bd80      	pop	{r7, pc}
 80032cc:	200001c0 	.word	0x200001c0
 80032d0:	200000e8 	.word	0x200000e8
 80032d4:	200001cc 	.word	0x200001cc
 80032d8:	200001dc 	.word	0x200001dc
 80032dc:	200001c8 	.word	0x200001c8
 80032e0:	200000ec 	.word	0x200000ec
 80032e4:	e000ed04 	.word	0xe000ed04

080032e8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b086      	sub	sp, #24
 80032ec:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 80032ee:	4b20      	ldr	r3, [pc, #128]	; (8003370 <vTaskStartScheduler+0x88>)
 80032f0:	9301      	str	r3, [sp, #4]
 80032f2:	2300      	movs	r3, #0
 80032f4:	9300      	str	r3, [sp, #0]
 80032f6:	2300      	movs	r3, #0
 80032f8:	2282      	movs	r2, #130	; 0x82
 80032fa:	491e      	ldr	r1, [pc, #120]	; (8003374 <vTaskStartScheduler+0x8c>)
 80032fc:	481e      	ldr	r0, [pc, #120]	; (8003378 <vTaskStartScheduler+0x90>)
 80032fe:	f7ff fe77 	bl	8002ff0 <xTaskCreate>
 8003302:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	2b01      	cmp	r3, #1
 8003308:	d102      	bne.n	8003310 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 800330a:	f000 fde3 	bl	8003ed4 <xTimerCreateTimerTask>
 800330e:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	2b01      	cmp	r3, #1
 8003314:	d116      	bne.n	8003344 <vTaskStartScheduler+0x5c>
        __asm volatile
 8003316:	f04f 0350 	mov.w	r3, #80	; 0x50
 800331a:	f383 8811 	msr	BASEPRI, r3
 800331e:	f3bf 8f6f 	isb	sy
 8003322:	f3bf 8f4f 	dsb	sy
 8003326:	60bb      	str	r3, [r7, #8]
    }
 8003328:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 800332a:	4b14      	ldr	r3, [pc, #80]	; (800337c <vTaskStartScheduler+0x94>)
 800332c:	f04f 32ff 	mov.w	r2, #4294967295
 8003330:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8003332:	4b13      	ldr	r3, [pc, #76]	; (8003380 <vTaskStartScheduler+0x98>)
 8003334:	2201      	movs	r2, #1
 8003336:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003338:	4b12      	ldr	r3, [pc, #72]	; (8003384 <vTaskStartScheduler+0x9c>)
 800333a:	2200      	movs	r2, #0
 800333c:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 800333e:	f001 f8d9 	bl	80044f4 <xPortStartScheduler>
 8003342:	e00e      	b.n	8003362 <vTaskStartScheduler+0x7a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	f1b3 3fff 	cmp.w	r3, #4294967295
 800334a:	d10a      	bne.n	8003362 <vTaskStartScheduler+0x7a>
        __asm volatile
 800334c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003350:	f383 8811 	msr	BASEPRI, r3
 8003354:	f3bf 8f6f 	isb	sy
 8003358:	f3bf 8f4f 	dsb	sy
 800335c:	607b      	str	r3, [r7, #4]
    }
 800335e:	bf00      	nop
 8003360:	e7fe      	b.n	8003360 <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8003362:	4b09      	ldr	r3, [pc, #36]	; (8003388 <vTaskStartScheduler+0xa0>)
 8003364:	681b      	ldr	r3, [r3, #0]
}
 8003366:	bf00      	nop
 8003368:	3710      	adds	r7, #16
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}
 800336e:	bf00      	nop
 8003370:	200001e4 	.word	0x200001e4
 8003374:	080054b0 	.word	0x080054b0
 8003378:	08003c35 	.word	0x08003c35
 800337c:	200001e0 	.word	0x200001e0
 8003380:	200001cc 	.word	0x200001cc
 8003384:	200001c4 	.word	0x200001c4
 8003388:	2000000c 	.word	0x2000000c

0800338c <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800338c:	b480      	push	{r7}
 800338e:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8003390:	4b04      	ldr	r3, [pc, #16]	; (80033a4 <vTaskSuspendAll+0x18>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	3301      	adds	r3, #1
 8003396:	4a03      	ldr	r2, [pc, #12]	; (80033a4 <vTaskSuspendAll+0x18>)
 8003398:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800339a:	bf00      	nop
 800339c:	46bd      	mov	sp, r7
 800339e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a2:	4770      	bx	lr
 80033a4:	200001e8 	.word	0x200001e8

080033a8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b088      	sub	sp, #32
 80033ac:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80033ae:	2300      	movs	r3, #0
 80033b0:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 80033b2:	2300      	movs	r3, #0
 80033b4:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80033b6:	4b71      	ldr	r3, [pc, #452]	; (800357c <xTaskResumeAll+0x1d4>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d10a      	bne.n	80033d4 <xTaskResumeAll+0x2c>
        __asm volatile
 80033be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033c2:	f383 8811 	msr	BASEPRI, r3
 80033c6:	f3bf 8f6f 	isb	sy
 80033ca:	f3bf 8f4f 	dsb	sy
 80033ce:	607b      	str	r3, [r7, #4]
    }
 80033d0:	bf00      	nop
 80033d2:	e7fe      	b.n	80033d2 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80033d4:	f001 f930 	bl	8004638 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80033d8:	4b68      	ldr	r3, [pc, #416]	; (800357c <xTaskResumeAll+0x1d4>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	3b01      	subs	r3, #1
 80033de:	4a67      	ldr	r2, [pc, #412]	; (800357c <xTaskResumeAll+0x1d4>)
 80033e0:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80033e2:	4b66      	ldr	r3, [pc, #408]	; (800357c <xTaskResumeAll+0x1d4>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	f040 80c0 	bne.w	800356c <xTaskResumeAll+0x1c4>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80033ec:	4b64      	ldr	r3, [pc, #400]	; (8003580 <xTaskResumeAll+0x1d8>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	f000 80bb 	beq.w	800356c <xTaskResumeAll+0x1c4>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80033f6:	e08a      	b.n	800350e <xTaskResumeAll+0x166>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80033f8:	4b62      	ldr	r3, [pc, #392]	; (8003584 <xTaskResumeAll+0x1dc>)
 80033fa:	68db      	ldr	r3, [r3, #12]
 80033fc:	68db      	ldr	r3, [r3, #12]
 80033fe:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8003400:	69fb      	ldr	r3, [r7, #28]
 8003402:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003404:	613b      	str	r3, [r7, #16]
 8003406:	69fb      	ldr	r3, [r7, #28]
 8003408:	69db      	ldr	r3, [r3, #28]
 800340a:	69fa      	ldr	r2, [r7, #28]
 800340c:	6a12      	ldr	r2, [r2, #32]
 800340e:	609a      	str	r2, [r3, #8]
 8003410:	69fb      	ldr	r3, [r7, #28]
 8003412:	6a1b      	ldr	r3, [r3, #32]
 8003414:	69fa      	ldr	r2, [r7, #28]
 8003416:	69d2      	ldr	r2, [r2, #28]
 8003418:	605a      	str	r2, [r3, #4]
 800341a:	693b      	ldr	r3, [r7, #16]
 800341c:	685a      	ldr	r2, [r3, #4]
 800341e:	69fb      	ldr	r3, [r7, #28]
 8003420:	3318      	adds	r3, #24
 8003422:	429a      	cmp	r2, r3
 8003424:	d103      	bne.n	800342e <xTaskResumeAll+0x86>
 8003426:	69fb      	ldr	r3, [r7, #28]
 8003428:	6a1a      	ldr	r2, [r3, #32]
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	605a      	str	r2, [r3, #4]
 800342e:	69fb      	ldr	r3, [r7, #28]
 8003430:	2200      	movs	r2, #0
 8003432:	629a      	str	r2, [r3, #40]	; 0x28
 8003434:	693b      	ldr	r3, [r7, #16]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	1e5a      	subs	r2, r3, #1
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800343e:	69fb      	ldr	r3, [r7, #28]
 8003440:	695b      	ldr	r3, [r3, #20]
 8003442:	60fb      	str	r3, [r7, #12]
 8003444:	69fb      	ldr	r3, [r7, #28]
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	69fa      	ldr	r2, [r7, #28]
 800344a:	68d2      	ldr	r2, [r2, #12]
 800344c:	609a      	str	r2, [r3, #8]
 800344e:	69fb      	ldr	r3, [r7, #28]
 8003450:	68db      	ldr	r3, [r3, #12]
 8003452:	69fa      	ldr	r2, [r7, #28]
 8003454:	6892      	ldr	r2, [r2, #8]
 8003456:	605a      	str	r2, [r3, #4]
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	685a      	ldr	r2, [r3, #4]
 800345c:	69fb      	ldr	r3, [r7, #28]
 800345e:	3304      	adds	r3, #4
 8003460:	429a      	cmp	r2, r3
 8003462:	d103      	bne.n	800346c <xTaskResumeAll+0xc4>
 8003464:	69fb      	ldr	r3, [r7, #28]
 8003466:	68da      	ldr	r2, [r3, #12]
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	605a      	str	r2, [r3, #4]
 800346c:	69fb      	ldr	r3, [r7, #28]
 800346e:	2200      	movs	r2, #0
 8003470:	615a      	str	r2, [r3, #20]
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	1e5a      	subs	r2, r3, #1
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 800347c:	69fb      	ldr	r3, [r7, #28]
 800347e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003480:	2201      	movs	r2, #1
 8003482:	409a      	lsls	r2, r3
 8003484:	4b40      	ldr	r3, [pc, #256]	; (8003588 <xTaskResumeAll+0x1e0>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4313      	orrs	r3, r2
 800348a:	4a3f      	ldr	r2, [pc, #252]	; (8003588 <xTaskResumeAll+0x1e0>)
 800348c:	6013      	str	r3, [r2, #0]
 800348e:	69fb      	ldr	r3, [r7, #28]
 8003490:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003492:	493e      	ldr	r1, [pc, #248]	; (800358c <xTaskResumeAll+0x1e4>)
 8003494:	4613      	mov	r3, r2
 8003496:	009b      	lsls	r3, r3, #2
 8003498:	4413      	add	r3, r2
 800349a:	009b      	lsls	r3, r3, #2
 800349c:	440b      	add	r3, r1
 800349e:	3304      	adds	r3, #4
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	60bb      	str	r3, [r7, #8]
 80034a4:	69fb      	ldr	r3, [r7, #28]
 80034a6:	68ba      	ldr	r2, [r7, #8]
 80034a8:	609a      	str	r2, [r3, #8]
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	689a      	ldr	r2, [r3, #8]
 80034ae:	69fb      	ldr	r3, [r7, #28]
 80034b0:	60da      	str	r2, [r3, #12]
 80034b2:	68bb      	ldr	r3, [r7, #8]
 80034b4:	689b      	ldr	r3, [r3, #8]
 80034b6:	69fa      	ldr	r2, [r7, #28]
 80034b8:	3204      	adds	r2, #4
 80034ba:	605a      	str	r2, [r3, #4]
 80034bc:	69fb      	ldr	r3, [r7, #28]
 80034be:	1d1a      	adds	r2, r3, #4
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	609a      	str	r2, [r3, #8]
 80034c4:	69fb      	ldr	r3, [r7, #28]
 80034c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034c8:	4613      	mov	r3, r2
 80034ca:	009b      	lsls	r3, r3, #2
 80034cc:	4413      	add	r3, r2
 80034ce:	009b      	lsls	r3, r3, #2
 80034d0:	4a2e      	ldr	r2, [pc, #184]	; (800358c <xTaskResumeAll+0x1e4>)
 80034d2:	441a      	add	r2, r3
 80034d4:	69fb      	ldr	r3, [r7, #28]
 80034d6:	615a      	str	r2, [r3, #20]
 80034d8:	69fb      	ldr	r3, [r7, #28]
 80034da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034dc:	492b      	ldr	r1, [pc, #172]	; (800358c <xTaskResumeAll+0x1e4>)
 80034de:	4613      	mov	r3, r2
 80034e0:	009b      	lsls	r3, r3, #2
 80034e2:	4413      	add	r3, r2
 80034e4:	009b      	lsls	r3, r3, #2
 80034e6:	440b      	add	r3, r1
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	1c59      	adds	r1, r3, #1
 80034ec:	4827      	ldr	r0, [pc, #156]	; (800358c <xTaskResumeAll+0x1e4>)
 80034ee:	4613      	mov	r3, r2
 80034f0:	009b      	lsls	r3, r3, #2
 80034f2:	4413      	add	r3, r2
 80034f4:	009b      	lsls	r3, r3, #2
 80034f6:	4403      	add	r3, r0
 80034f8:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80034fa:	69fb      	ldr	r3, [r7, #28]
 80034fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034fe:	4b24      	ldr	r3, [pc, #144]	; (8003590 <xTaskResumeAll+0x1e8>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003504:	429a      	cmp	r2, r3
 8003506:	d302      	bcc.n	800350e <xTaskResumeAll+0x166>
                    {
                        xYieldPending = pdTRUE;
 8003508:	4b22      	ldr	r3, [pc, #136]	; (8003594 <xTaskResumeAll+0x1ec>)
 800350a:	2201      	movs	r2, #1
 800350c:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800350e:	4b1d      	ldr	r3, [pc, #116]	; (8003584 <xTaskResumeAll+0x1dc>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	2b00      	cmp	r3, #0
 8003514:	f47f af70 	bne.w	80033f8 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8003518:	69fb      	ldr	r3, [r7, #28]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d001      	beq.n	8003522 <xTaskResumeAll+0x17a>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 800351e:	f000 fc1f 	bl	8003d60 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003522:	4b1d      	ldr	r3, [pc, #116]	; (8003598 <xTaskResumeAll+0x1f0>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8003528:	697b      	ldr	r3, [r7, #20]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d010      	beq.n	8003550 <xTaskResumeAll+0x1a8>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 800352e:	f000 f847 	bl	80035c0 <xTaskIncrementTick>
 8003532:	4603      	mov	r3, r0
 8003534:	2b00      	cmp	r3, #0
 8003536:	d002      	beq.n	800353e <xTaskResumeAll+0x196>
                            {
                                xYieldPending = pdTRUE;
 8003538:	4b16      	ldr	r3, [pc, #88]	; (8003594 <xTaskResumeAll+0x1ec>)
 800353a:	2201      	movs	r2, #1
 800353c:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	3b01      	subs	r3, #1
 8003542:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8003544:	697b      	ldr	r3, [r7, #20]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d1f1      	bne.n	800352e <xTaskResumeAll+0x186>

                        xPendedTicks = 0;
 800354a:	4b13      	ldr	r3, [pc, #76]	; (8003598 <xTaskResumeAll+0x1f0>)
 800354c:	2200      	movs	r2, #0
 800354e:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8003550:	4b10      	ldr	r3, [pc, #64]	; (8003594 <xTaskResumeAll+0x1ec>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d009      	beq.n	800356c <xTaskResumeAll+0x1c4>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8003558:	2301      	movs	r3, #1
 800355a:	61bb      	str	r3, [r7, #24]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 800355c:	4b0f      	ldr	r3, [pc, #60]	; (800359c <xTaskResumeAll+0x1f4>)
 800355e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003562:	601a      	str	r2, [r3, #0]
 8003564:	f3bf 8f4f 	dsb	sy
 8003568:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 800356c:	f001 f894 	bl	8004698 <vPortExitCritical>

    return xAlreadyYielded;
 8003570:	69bb      	ldr	r3, [r7, #24]
}
 8003572:	4618      	mov	r0, r3
 8003574:	3720      	adds	r7, #32
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}
 800357a:	bf00      	nop
 800357c:	200001e8 	.word	0x200001e8
 8003580:	200001c0 	.word	0x200001c0
 8003584:	20000180 	.word	0x20000180
 8003588:	200001c8 	.word	0x200001c8
 800358c:	200000ec 	.word	0x200000ec
 8003590:	200000e8 	.word	0x200000e8
 8003594:	200001d4 	.word	0x200001d4
 8003598:	200001d0 	.word	0x200001d0
 800359c:	e000ed04 	.word	0xe000ed04

080035a0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80035a0:	b480      	push	{r7}
 80035a2:	b083      	sub	sp, #12
 80035a4:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80035a6:	4b05      	ldr	r3, [pc, #20]	; (80035bc <xTaskGetTickCount+0x1c>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 80035ac:	687b      	ldr	r3, [r7, #4]
}
 80035ae:	4618      	mov	r0, r3
 80035b0:	370c      	adds	r7, #12
 80035b2:	46bd      	mov	sp, r7
 80035b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b8:	4770      	bx	lr
 80035ba:	bf00      	nop
 80035bc:	200001c4 	.word	0x200001c4

080035c0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b08a      	sub	sp, #40	; 0x28
 80035c4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80035c6:	2300      	movs	r3, #0
 80035c8:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80035ca:	4b7d      	ldr	r3, [pc, #500]	; (80037c0 <xTaskIncrementTick+0x200>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	f040 80ec 	bne.w	80037ac <xTaskIncrementTick+0x1ec>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80035d4:	4b7b      	ldr	r3, [pc, #492]	; (80037c4 <xTaskIncrementTick+0x204>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	3301      	adds	r3, #1
 80035da:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80035dc:	4a79      	ldr	r2, [pc, #484]	; (80037c4 <xTaskIncrementTick+0x204>)
 80035de:	6a3b      	ldr	r3, [r7, #32]
 80035e0:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80035e2:	6a3b      	ldr	r3, [r7, #32]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d120      	bne.n	800362a <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 80035e8:	4b77      	ldr	r3, [pc, #476]	; (80037c8 <xTaskIncrementTick+0x208>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d00a      	beq.n	8003608 <xTaskIncrementTick+0x48>
        __asm volatile
 80035f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035f6:	f383 8811 	msr	BASEPRI, r3
 80035fa:	f3bf 8f6f 	isb	sy
 80035fe:	f3bf 8f4f 	dsb	sy
 8003602:	607b      	str	r3, [r7, #4]
    }
 8003604:	bf00      	nop
 8003606:	e7fe      	b.n	8003606 <xTaskIncrementTick+0x46>
 8003608:	4b6f      	ldr	r3, [pc, #444]	; (80037c8 <xTaskIncrementTick+0x208>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	61fb      	str	r3, [r7, #28]
 800360e:	4b6f      	ldr	r3, [pc, #444]	; (80037cc <xTaskIncrementTick+0x20c>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a6d      	ldr	r2, [pc, #436]	; (80037c8 <xTaskIncrementTick+0x208>)
 8003614:	6013      	str	r3, [r2, #0]
 8003616:	4a6d      	ldr	r2, [pc, #436]	; (80037cc <xTaskIncrementTick+0x20c>)
 8003618:	69fb      	ldr	r3, [r7, #28]
 800361a:	6013      	str	r3, [r2, #0]
 800361c:	4b6c      	ldr	r3, [pc, #432]	; (80037d0 <xTaskIncrementTick+0x210>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	3301      	adds	r3, #1
 8003622:	4a6b      	ldr	r2, [pc, #428]	; (80037d0 <xTaskIncrementTick+0x210>)
 8003624:	6013      	str	r3, [r2, #0]
 8003626:	f000 fb9b 	bl	8003d60 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800362a:	4b6a      	ldr	r3, [pc, #424]	; (80037d4 <xTaskIncrementTick+0x214>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	6a3a      	ldr	r2, [r7, #32]
 8003630:	429a      	cmp	r2, r3
 8003632:	f0c0 80a6 	bcc.w	8003782 <xTaskIncrementTick+0x1c2>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003636:	4b64      	ldr	r3, [pc, #400]	; (80037c8 <xTaskIncrementTick+0x208>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d104      	bne.n	800364a <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003640:	4b64      	ldr	r3, [pc, #400]	; (80037d4 <xTaskIncrementTick+0x214>)
 8003642:	f04f 32ff 	mov.w	r2, #4294967295
 8003646:	601a      	str	r2, [r3, #0]
                    break;
 8003648:	e09b      	b.n	8003782 <xTaskIncrementTick+0x1c2>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800364a:	4b5f      	ldr	r3, [pc, #380]	; (80037c8 <xTaskIncrementTick+0x208>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	68db      	ldr	r3, [r3, #12]
 8003650:	68db      	ldr	r3, [r3, #12]
 8003652:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003654:	69bb      	ldr	r3, [r7, #24]
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 800365a:	6a3a      	ldr	r2, [r7, #32]
 800365c:	697b      	ldr	r3, [r7, #20]
 800365e:	429a      	cmp	r2, r3
 8003660:	d203      	bcs.n	800366a <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8003662:	4a5c      	ldr	r2, [pc, #368]	; (80037d4 <xTaskIncrementTick+0x214>)
 8003664:	697b      	ldr	r3, [r7, #20]
 8003666:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8003668:	e08b      	b.n	8003782 <xTaskIncrementTick+0x1c2>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800366a:	69bb      	ldr	r3, [r7, #24]
 800366c:	695b      	ldr	r3, [r3, #20]
 800366e:	613b      	str	r3, [r7, #16]
 8003670:	69bb      	ldr	r3, [r7, #24]
 8003672:	689b      	ldr	r3, [r3, #8]
 8003674:	69ba      	ldr	r2, [r7, #24]
 8003676:	68d2      	ldr	r2, [r2, #12]
 8003678:	609a      	str	r2, [r3, #8]
 800367a:	69bb      	ldr	r3, [r7, #24]
 800367c:	68db      	ldr	r3, [r3, #12]
 800367e:	69ba      	ldr	r2, [r7, #24]
 8003680:	6892      	ldr	r2, [r2, #8]
 8003682:	605a      	str	r2, [r3, #4]
 8003684:	693b      	ldr	r3, [r7, #16]
 8003686:	685a      	ldr	r2, [r3, #4]
 8003688:	69bb      	ldr	r3, [r7, #24]
 800368a:	3304      	adds	r3, #4
 800368c:	429a      	cmp	r2, r3
 800368e:	d103      	bne.n	8003698 <xTaskIncrementTick+0xd8>
 8003690:	69bb      	ldr	r3, [r7, #24]
 8003692:	68da      	ldr	r2, [r3, #12]
 8003694:	693b      	ldr	r3, [r7, #16]
 8003696:	605a      	str	r2, [r3, #4]
 8003698:	69bb      	ldr	r3, [r7, #24]
 800369a:	2200      	movs	r2, #0
 800369c:	615a      	str	r2, [r3, #20]
 800369e:	693b      	ldr	r3, [r7, #16]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	1e5a      	subs	r2, r3, #1
 80036a4:	693b      	ldr	r3, [r7, #16]
 80036a6:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80036a8:	69bb      	ldr	r3, [r7, #24]
 80036aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d01e      	beq.n	80036ee <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80036b0:	69bb      	ldr	r3, [r7, #24]
 80036b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036b4:	60fb      	str	r3, [r7, #12]
 80036b6:	69bb      	ldr	r3, [r7, #24]
 80036b8:	69db      	ldr	r3, [r3, #28]
 80036ba:	69ba      	ldr	r2, [r7, #24]
 80036bc:	6a12      	ldr	r2, [r2, #32]
 80036be:	609a      	str	r2, [r3, #8]
 80036c0:	69bb      	ldr	r3, [r7, #24]
 80036c2:	6a1b      	ldr	r3, [r3, #32]
 80036c4:	69ba      	ldr	r2, [r7, #24]
 80036c6:	69d2      	ldr	r2, [r2, #28]
 80036c8:	605a      	str	r2, [r3, #4]
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	685a      	ldr	r2, [r3, #4]
 80036ce:	69bb      	ldr	r3, [r7, #24]
 80036d0:	3318      	adds	r3, #24
 80036d2:	429a      	cmp	r2, r3
 80036d4:	d103      	bne.n	80036de <xTaskIncrementTick+0x11e>
 80036d6:	69bb      	ldr	r3, [r7, #24]
 80036d8:	6a1a      	ldr	r2, [r3, #32]
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	605a      	str	r2, [r3, #4]
 80036de:	69bb      	ldr	r3, [r7, #24]
 80036e0:	2200      	movs	r2, #0
 80036e2:	629a      	str	r2, [r3, #40]	; 0x28
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	1e5a      	subs	r2, r3, #1
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80036ee:	69bb      	ldr	r3, [r7, #24]
 80036f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036f2:	2201      	movs	r2, #1
 80036f4:	409a      	lsls	r2, r3
 80036f6:	4b38      	ldr	r3, [pc, #224]	; (80037d8 <xTaskIncrementTick+0x218>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4313      	orrs	r3, r2
 80036fc:	4a36      	ldr	r2, [pc, #216]	; (80037d8 <xTaskIncrementTick+0x218>)
 80036fe:	6013      	str	r3, [r2, #0]
 8003700:	69bb      	ldr	r3, [r7, #24]
 8003702:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003704:	4935      	ldr	r1, [pc, #212]	; (80037dc <xTaskIncrementTick+0x21c>)
 8003706:	4613      	mov	r3, r2
 8003708:	009b      	lsls	r3, r3, #2
 800370a:	4413      	add	r3, r2
 800370c:	009b      	lsls	r3, r3, #2
 800370e:	440b      	add	r3, r1
 8003710:	3304      	adds	r3, #4
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	60bb      	str	r3, [r7, #8]
 8003716:	69bb      	ldr	r3, [r7, #24]
 8003718:	68ba      	ldr	r2, [r7, #8]
 800371a:	609a      	str	r2, [r3, #8]
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	689a      	ldr	r2, [r3, #8]
 8003720:	69bb      	ldr	r3, [r7, #24]
 8003722:	60da      	str	r2, [r3, #12]
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	689b      	ldr	r3, [r3, #8]
 8003728:	69ba      	ldr	r2, [r7, #24]
 800372a:	3204      	adds	r2, #4
 800372c:	605a      	str	r2, [r3, #4]
 800372e:	69bb      	ldr	r3, [r7, #24]
 8003730:	1d1a      	adds	r2, r3, #4
 8003732:	68bb      	ldr	r3, [r7, #8]
 8003734:	609a      	str	r2, [r3, #8]
 8003736:	69bb      	ldr	r3, [r7, #24]
 8003738:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800373a:	4613      	mov	r3, r2
 800373c:	009b      	lsls	r3, r3, #2
 800373e:	4413      	add	r3, r2
 8003740:	009b      	lsls	r3, r3, #2
 8003742:	4a26      	ldr	r2, [pc, #152]	; (80037dc <xTaskIncrementTick+0x21c>)
 8003744:	441a      	add	r2, r3
 8003746:	69bb      	ldr	r3, [r7, #24]
 8003748:	615a      	str	r2, [r3, #20]
 800374a:	69bb      	ldr	r3, [r7, #24]
 800374c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800374e:	4923      	ldr	r1, [pc, #140]	; (80037dc <xTaskIncrementTick+0x21c>)
 8003750:	4613      	mov	r3, r2
 8003752:	009b      	lsls	r3, r3, #2
 8003754:	4413      	add	r3, r2
 8003756:	009b      	lsls	r3, r3, #2
 8003758:	440b      	add	r3, r1
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	1c59      	adds	r1, r3, #1
 800375e:	481f      	ldr	r0, [pc, #124]	; (80037dc <xTaskIncrementTick+0x21c>)
 8003760:	4613      	mov	r3, r2
 8003762:	009b      	lsls	r3, r3, #2
 8003764:	4413      	add	r3, r2
 8003766:	009b      	lsls	r3, r3, #2
 8003768:	4403      	add	r3, r0
 800376a:	6019      	str	r1, [r3, #0]
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800376c:	69bb      	ldr	r3, [r7, #24]
 800376e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003770:	4b1b      	ldr	r3, [pc, #108]	; (80037e0 <xTaskIncrementTick+0x220>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003776:	429a      	cmp	r2, r3
 8003778:	f4ff af5d 	bcc.w	8003636 <xTaskIncrementTick+0x76>
                            {
                                xSwitchRequired = pdTRUE;
 800377c:	2301      	movs	r3, #1
 800377e:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003780:	e759      	b.n	8003636 <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003782:	4b17      	ldr	r3, [pc, #92]	; (80037e0 <xTaskIncrementTick+0x220>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003788:	4914      	ldr	r1, [pc, #80]	; (80037dc <xTaskIncrementTick+0x21c>)
 800378a:	4613      	mov	r3, r2
 800378c:	009b      	lsls	r3, r3, #2
 800378e:	4413      	add	r3, r2
 8003790:	009b      	lsls	r3, r3, #2
 8003792:	440b      	add	r3, r1
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	2b01      	cmp	r3, #1
 8003798:	d901      	bls.n	800379e <xTaskIncrementTick+0x1de>
                {
                    xSwitchRequired = pdTRUE;
 800379a:	2301      	movs	r3, #1
 800379c:	627b      	str	r3, [r7, #36]	; 0x24
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 800379e:	4b11      	ldr	r3, [pc, #68]	; (80037e4 <xTaskIncrementTick+0x224>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d007      	beq.n	80037b6 <xTaskIncrementTick+0x1f6>
                {
                    xSwitchRequired = pdTRUE;
 80037a6:	2301      	movs	r3, #1
 80037a8:	627b      	str	r3, [r7, #36]	; 0x24
 80037aa:	e004      	b.n	80037b6 <xTaskIncrementTick+0x1f6>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80037ac:	4b0e      	ldr	r3, [pc, #56]	; (80037e8 <xTaskIncrementTick+0x228>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	3301      	adds	r3, #1
 80037b2:	4a0d      	ldr	r2, [pc, #52]	; (80037e8 <xTaskIncrementTick+0x228>)
 80037b4:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 80037b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80037b8:	4618      	mov	r0, r3
 80037ba:	3728      	adds	r7, #40	; 0x28
 80037bc:	46bd      	mov	sp, r7
 80037be:	bd80      	pop	{r7, pc}
 80037c0:	200001e8 	.word	0x200001e8
 80037c4:	200001c4 	.word	0x200001c4
 80037c8:	20000178 	.word	0x20000178
 80037cc:	2000017c 	.word	0x2000017c
 80037d0:	200001d8 	.word	0x200001d8
 80037d4:	200001e0 	.word	0x200001e0
 80037d8:	200001c8 	.word	0x200001c8
 80037dc:	200000ec 	.word	0x200000ec
 80037e0:	200000e8 	.word	0x200000e8
 80037e4:	200001d4 	.word	0x200001d4
 80037e8:	200001d0 	.word	0x200001d0

080037ec <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80037ec:	b480      	push	{r7}
 80037ee:	b087      	sub	sp, #28
 80037f0:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80037f2:	4b27      	ldr	r3, [pc, #156]	; (8003890 <vTaskSwitchContext+0xa4>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d003      	beq.n	8003802 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80037fa:	4b26      	ldr	r3, [pc, #152]	; (8003894 <vTaskSwitchContext+0xa8>)
 80037fc:	2201      	movs	r2, #1
 80037fe:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8003800:	e03f      	b.n	8003882 <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 8003802:	4b24      	ldr	r3, [pc, #144]	; (8003894 <vTaskSwitchContext+0xa8>)
 8003804:	2200      	movs	r2, #0
 8003806:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003808:	4b23      	ldr	r3, [pc, #140]	; (8003898 <vTaskSwitchContext+0xac>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	fab3 f383 	clz	r3, r3
 8003814:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8003816:	7afb      	ldrb	r3, [r7, #11]
 8003818:	f1c3 031f 	rsb	r3, r3, #31
 800381c:	617b      	str	r3, [r7, #20]
 800381e:	491f      	ldr	r1, [pc, #124]	; (800389c <vTaskSwitchContext+0xb0>)
 8003820:	697a      	ldr	r2, [r7, #20]
 8003822:	4613      	mov	r3, r2
 8003824:	009b      	lsls	r3, r3, #2
 8003826:	4413      	add	r3, r2
 8003828:	009b      	lsls	r3, r3, #2
 800382a:	440b      	add	r3, r1
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d10a      	bne.n	8003848 <vTaskSwitchContext+0x5c>
        __asm volatile
 8003832:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003836:	f383 8811 	msr	BASEPRI, r3
 800383a:	f3bf 8f6f 	isb	sy
 800383e:	f3bf 8f4f 	dsb	sy
 8003842:	607b      	str	r3, [r7, #4]
    }
 8003844:	bf00      	nop
 8003846:	e7fe      	b.n	8003846 <vTaskSwitchContext+0x5a>
 8003848:	697a      	ldr	r2, [r7, #20]
 800384a:	4613      	mov	r3, r2
 800384c:	009b      	lsls	r3, r3, #2
 800384e:	4413      	add	r3, r2
 8003850:	009b      	lsls	r3, r3, #2
 8003852:	4a12      	ldr	r2, [pc, #72]	; (800389c <vTaskSwitchContext+0xb0>)
 8003854:	4413      	add	r3, r2
 8003856:	613b      	str	r3, [r7, #16]
 8003858:	693b      	ldr	r3, [r7, #16]
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	685a      	ldr	r2, [r3, #4]
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	605a      	str	r2, [r3, #4]
 8003862:	693b      	ldr	r3, [r7, #16]
 8003864:	685a      	ldr	r2, [r3, #4]
 8003866:	693b      	ldr	r3, [r7, #16]
 8003868:	3308      	adds	r3, #8
 800386a:	429a      	cmp	r2, r3
 800386c:	d104      	bne.n	8003878 <vTaskSwitchContext+0x8c>
 800386e:	693b      	ldr	r3, [r7, #16]
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	685a      	ldr	r2, [r3, #4]
 8003874:	693b      	ldr	r3, [r7, #16]
 8003876:	605a      	str	r2, [r3, #4]
 8003878:	693b      	ldr	r3, [r7, #16]
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	68db      	ldr	r3, [r3, #12]
 800387e:	4a08      	ldr	r2, [pc, #32]	; (80038a0 <vTaskSwitchContext+0xb4>)
 8003880:	6013      	str	r3, [r2, #0]
}
 8003882:	bf00      	nop
 8003884:	371c      	adds	r7, #28
 8003886:	46bd      	mov	sp, r7
 8003888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388c:	4770      	bx	lr
 800388e:	bf00      	nop
 8003890:	200001e8 	.word	0x200001e8
 8003894:	200001d4 	.word	0x200001d4
 8003898:	200001c8 	.word	0x200001c8
 800389c:	200000ec 	.word	0x200000ec
 80038a0:	200000e8 	.word	0x200000e8

080038a4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b084      	sub	sp, #16
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
 80038ac:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d10a      	bne.n	80038ca <vTaskPlaceOnEventList+0x26>
        __asm volatile
 80038b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038b8:	f383 8811 	msr	BASEPRI, r3
 80038bc:	f3bf 8f6f 	isb	sy
 80038c0:	f3bf 8f4f 	dsb	sy
 80038c4:	60fb      	str	r3, [r7, #12]
    }
 80038c6:	bf00      	nop
 80038c8:	e7fe      	b.n	80038c8 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80038ca:	4b07      	ldr	r3, [pc, #28]	; (80038e8 <vTaskPlaceOnEventList+0x44>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	3318      	adds	r3, #24
 80038d0:	4619      	mov	r1, r3
 80038d2:	6878      	ldr	r0, [r7, #4]
 80038d4:	f7ff f837 	bl	8002946 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80038d8:	2101      	movs	r1, #1
 80038da:	6838      	ldr	r0, [r7, #0]
 80038dc:	f000 fa7a 	bl	8003dd4 <prvAddCurrentTaskToDelayedList>
}
 80038e0:	bf00      	nop
 80038e2:	3710      	adds	r7, #16
 80038e4:	46bd      	mov	sp, r7
 80038e6:	bd80      	pop	{r7, pc}
 80038e8:	200000e8 	.word	0x200000e8

080038ec <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b086      	sub	sp, #24
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	60f8      	str	r0, [r7, #12]
 80038f4:	60b9      	str	r1, [r7, #8]
 80038f6:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d10a      	bne.n	8003914 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 80038fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003902:	f383 8811 	msr	BASEPRI, r3
 8003906:	f3bf 8f6f 	isb	sy
 800390a:	f3bf 8f4f 	dsb	sy
 800390e:	613b      	str	r3, [r7, #16]
    }
 8003910:	bf00      	nop
 8003912:	e7fe      	b.n	8003912 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	617b      	str	r3, [r7, #20]
 800391a:	4b16      	ldr	r3, [pc, #88]	; (8003974 <vTaskPlaceOnEventListRestricted+0x88>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	697a      	ldr	r2, [r7, #20]
 8003920:	61da      	str	r2, [r3, #28]
 8003922:	4b14      	ldr	r3, [pc, #80]	; (8003974 <vTaskPlaceOnEventListRestricted+0x88>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	697a      	ldr	r2, [r7, #20]
 8003928:	6892      	ldr	r2, [r2, #8]
 800392a:	621a      	str	r2, [r3, #32]
 800392c:	4b11      	ldr	r3, [pc, #68]	; (8003974 <vTaskPlaceOnEventListRestricted+0x88>)
 800392e:	681a      	ldr	r2, [r3, #0]
 8003930:	697b      	ldr	r3, [r7, #20]
 8003932:	689b      	ldr	r3, [r3, #8]
 8003934:	3218      	adds	r2, #24
 8003936:	605a      	str	r2, [r3, #4]
 8003938:	4b0e      	ldr	r3, [pc, #56]	; (8003974 <vTaskPlaceOnEventListRestricted+0x88>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f103 0218 	add.w	r2, r3, #24
 8003940:	697b      	ldr	r3, [r7, #20]
 8003942:	609a      	str	r2, [r3, #8]
 8003944:	4b0b      	ldr	r3, [pc, #44]	; (8003974 <vTaskPlaceOnEventListRestricted+0x88>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	68fa      	ldr	r2, [r7, #12]
 800394a:	629a      	str	r2, [r3, #40]	; 0x28
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	1c5a      	adds	r2, r3, #1
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d002      	beq.n	8003962 <vTaskPlaceOnEventListRestricted+0x76>
        {
            xTicksToWait = portMAX_DELAY;
 800395c:	f04f 33ff 	mov.w	r3, #4294967295
 8003960:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003962:	6879      	ldr	r1, [r7, #4]
 8003964:	68b8      	ldr	r0, [r7, #8]
 8003966:	f000 fa35 	bl	8003dd4 <prvAddCurrentTaskToDelayedList>
    }
 800396a:	bf00      	nop
 800396c:	3718      	adds	r7, #24
 800396e:	46bd      	mov	sp, r7
 8003970:	bd80      	pop	{r7, pc}
 8003972:	bf00      	nop
 8003974:	200000e8 	.word	0x200000e8

08003978 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003978:	b480      	push	{r7}
 800397a:	b08b      	sub	sp, #44	; 0x2c
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	68db      	ldr	r3, [r3, #12]
 8003984:	68db      	ldr	r3, [r3, #12]
 8003986:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8003988:	6a3b      	ldr	r3, [r7, #32]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d10a      	bne.n	80039a4 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 800398e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003992:	f383 8811 	msr	BASEPRI, r3
 8003996:	f3bf 8f6f 	isb	sy
 800399a:	f3bf 8f4f 	dsb	sy
 800399e:	60fb      	str	r3, [r7, #12]
    }
 80039a0:	bf00      	nop
 80039a2:	e7fe      	b.n	80039a2 <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 80039a4:	6a3b      	ldr	r3, [r7, #32]
 80039a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039a8:	61fb      	str	r3, [r7, #28]
 80039aa:	6a3b      	ldr	r3, [r7, #32]
 80039ac:	69db      	ldr	r3, [r3, #28]
 80039ae:	6a3a      	ldr	r2, [r7, #32]
 80039b0:	6a12      	ldr	r2, [r2, #32]
 80039b2:	609a      	str	r2, [r3, #8]
 80039b4:	6a3b      	ldr	r3, [r7, #32]
 80039b6:	6a1b      	ldr	r3, [r3, #32]
 80039b8:	6a3a      	ldr	r2, [r7, #32]
 80039ba:	69d2      	ldr	r2, [r2, #28]
 80039bc:	605a      	str	r2, [r3, #4]
 80039be:	69fb      	ldr	r3, [r7, #28]
 80039c0:	685a      	ldr	r2, [r3, #4]
 80039c2:	6a3b      	ldr	r3, [r7, #32]
 80039c4:	3318      	adds	r3, #24
 80039c6:	429a      	cmp	r2, r3
 80039c8:	d103      	bne.n	80039d2 <xTaskRemoveFromEventList+0x5a>
 80039ca:	6a3b      	ldr	r3, [r7, #32]
 80039cc:	6a1a      	ldr	r2, [r3, #32]
 80039ce:	69fb      	ldr	r3, [r7, #28]
 80039d0:	605a      	str	r2, [r3, #4]
 80039d2:	6a3b      	ldr	r3, [r7, #32]
 80039d4:	2200      	movs	r2, #0
 80039d6:	629a      	str	r2, [r3, #40]	; 0x28
 80039d8:	69fb      	ldr	r3, [r7, #28]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	1e5a      	subs	r2, r3, #1
 80039de:	69fb      	ldr	r3, [r7, #28]
 80039e0:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80039e2:	4b4a      	ldr	r3, [pc, #296]	; (8003b0c <xTaskRemoveFromEventList+0x194>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d15e      	bne.n	8003aa8 <xTaskRemoveFromEventList+0x130>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 80039ea:	6a3b      	ldr	r3, [r7, #32]
 80039ec:	695b      	ldr	r3, [r3, #20]
 80039ee:	617b      	str	r3, [r7, #20]
 80039f0:	6a3b      	ldr	r3, [r7, #32]
 80039f2:	689b      	ldr	r3, [r3, #8]
 80039f4:	6a3a      	ldr	r2, [r7, #32]
 80039f6:	68d2      	ldr	r2, [r2, #12]
 80039f8:	609a      	str	r2, [r3, #8]
 80039fa:	6a3b      	ldr	r3, [r7, #32]
 80039fc:	68db      	ldr	r3, [r3, #12]
 80039fe:	6a3a      	ldr	r2, [r7, #32]
 8003a00:	6892      	ldr	r2, [r2, #8]
 8003a02:	605a      	str	r2, [r3, #4]
 8003a04:	697b      	ldr	r3, [r7, #20]
 8003a06:	685a      	ldr	r2, [r3, #4]
 8003a08:	6a3b      	ldr	r3, [r7, #32]
 8003a0a:	3304      	adds	r3, #4
 8003a0c:	429a      	cmp	r2, r3
 8003a0e:	d103      	bne.n	8003a18 <xTaskRemoveFromEventList+0xa0>
 8003a10:	6a3b      	ldr	r3, [r7, #32]
 8003a12:	68da      	ldr	r2, [r3, #12]
 8003a14:	697b      	ldr	r3, [r7, #20]
 8003a16:	605a      	str	r2, [r3, #4]
 8003a18:	6a3b      	ldr	r3, [r7, #32]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	615a      	str	r2, [r3, #20]
 8003a1e:	697b      	ldr	r3, [r7, #20]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	1e5a      	subs	r2, r3, #1
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8003a28:	6a3b      	ldr	r3, [r7, #32]
 8003a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a2c:	2201      	movs	r2, #1
 8003a2e:	409a      	lsls	r2, r3
 8003a30:	4b37      	ldr	r3, [pc, #220]	; (8003b10 <xTaskRemoveFromEventList+0x198>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4313      	orrs	r3, r2
 8003a36:	4a36      	ldr	r2, [pc, #216]	; (8003b10 <xTaskRemoveFromEventList+0x198>)
 8003a38:	6013      	str	r3, [r2, #0]
 8003a3a:	6a3b      	ldr	r3, [r7, #32]
 8003a3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a3e:	4935      	ldr	r1, [pc, #212]	; (8003b14 <xTaskRemoveFromEventList+0x19c>)
 8003a40:	4613      	mov	r3, r2
 8003a42:	009b      	lsls	r3, r3, #2
 8003a44:	4413      	add	r3, r2
 8003a46:	009b      	lsls	r3, r3, #2
 8003a48:	440b      	add	r3, r1
 8003a4a:	3304      	adds	r3, #4
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	613b      	str	r3, [r7, #16]
 8003a50:	6a3b      	ldr	r3, [r7, #32]
 8003a52:	693a      	ldr	r2, [r7, #16]
 8003a54:	609a      	str	r2, [r3, #8]
 8003a56:	693b      	ldr	r3, [r7, #16]
 8003a58:	689a      	ldr	r2, [r3, #8]
 8003a5a:	6a3b      	ldr	r3, [r7, #32]
 8003a5c:	60da      	str	r2, [r3, #12]
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	689b      	ldr	r3, [r3, #8]
 8003a62:	6a3a      	ldr	r2, [r7, #32]
 8003a64:	3204      	adds	r2, #4
 8003a66:	605a      	str	r2, [r3, #4]
 8003a68:	6a3b      	ldr	r3, [r7, #32]
 8003a6a:	1d1a      	adds	r2, r3, #4
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	609a      	str	r2, [r3, #8]
 8003a70:	6a3b      	ldr	r3, [r7, #32]
 8003a72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a74:	4613      	mov	r3, r2
 8003a76:	009b      	lsls	r3, r3, #2
 8003a78:	4413      	add	r3, r2
 8003a7a:	009b      	lsls	r3, r3, #2
 8003a7c:	4a25      	ldr	r2, [pc, #148]	; (8003b14 <xTaskRemoveFromEventList+0x19c>)
 8003a7e:	441a      	add	r2, r3
 8003a80:	6a3b      	ldr	r3, [r7, #32]
 8003a82:	615a      	str	r2, [r3, #20]
 8003a84:	6a3b      	ldr	r3, [r7, #32]
 8003a86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a88:	4922      	ldr	r1, [pc, #136]	; (8003b14 <xTaskRemoveFromEventList+0x19c>)
 8003a8a:	4613      	mov	r3, r2
 8003a8c:	009b      	lsls	r3, r3, #2
 8003a8e:	4413      	add	r3, r2
 8003a90:	009b      	lsls	r3, r3, #2
 8003a92:	440b      	add	r3, r1
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	1c59      	adds	r1, r3, #1
 8003a98:	481e      	ldr	r0, [pc, #120]	; (8003b14 <xTaskRemoveFromEventList+0x19c>)
 8003a9a:	4613      	mov	r3, r2
 8003a9c:	009b      	lsls	r3, r3, #2
 8003a9e:	4413      	add	r3, r2
 8003aa0:	009b      	lsls	r3, r3, #2
 8003aa2:	4403      	add	r3, r0
 8003aa4:	6019      	str	r1, [r3, #0]
 8003aa6:	e01b      	b.n	8003ae0 <xTaskRemoveFromEventList+0x168>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003aa8:	4b1b      	ldr	r3, [pc, #108]	; (8003b18 <xTaskRemoveFromEventList+0x1a0>)
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	61bb      	str	r3, [r7, #24]
 8003aae:	6a3b      	ldr	r3, [r7, #32]
 8003ab0:	69ba      	ldr	r2, [r7, #24]
 8003ab2:	61da      	str	r2, [r3, #28]
 8003ab4:	69bb      	ldr	r3, [r7, #24]
 8003ab6:	689a      	ldr	r2, [r3, #8]
 8003ab8:	6a3b      	ldr	r3, [r7, #32]
 8003aba:	621a      	str	r2, [r3, #32]
 8003abc:	69bb      	ldr	r3, [r7, #24]
 8003abe:	689b      	ldr	r3, [r3, #8]
 8003ac0:	6a3a      	ldr	r2, [r7, #32]
 8003ac2:	3218      	adds	r2, #24
 8003ac4:	605a      	str	r2, [r3, #4]
 8003ac6:	6a3b      	ldr	r3, [r7, #32]
 8003ac8:	f103 0218 	add.w	r2, r3, #24
 8003acc:	69bb      	ldr	r3, [r7, #24]
 8003ace:	609a      	str	r2, [r3, #8]
 8003ad0:	6a3b      	ldr	r3, [r7, #32]
 8003ad2:	4a11      	ldr	r2, [pc, #68]	; (8003b18 <xTaskRemoveFromEventList+0x1a0>)
 8003ad4:	629a      	str	r2, [r3, #40]	; 0x28
 8003ad6:	4b10      	ldr	r3, [pc, #64]	; (8003b18 <xTaskRemoveFromEventList+0x1a0>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	3301      	adds	r3, #1
 8003adc:	4a0e      	ldr	r2, [pc, #56]	; (8003b18 <xTaskRemoveFromEventList+0x1a0>)
 8003ade:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003ae0:	6a3b      	ldr	r3, [r7, #32]
 8003ae2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ae4:	4b0d      	ldr	r3, [pc, #52]	; (8003b1c <xTaskRemoveFromEventList+0x1a4>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aea:	429a      	cmp	r2, r3
 8003aec:	d905      	bls.n	8003afa <xTaskRemoveFromEventList+0x182>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8003aee:	2301      	movs	r3, #1
 8003af0:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8003af2:	4b0b      	ldr	r3, [pc, #44]	; (8003b20 <xTaskRemoveFromEventList+0x1a8>)
 8003af4:	2201      	movs	r2, #1
 8003af6:	601a      	str	r2, [r3, #0]
 8003af8:	e001      	b.n	8003afe <xTaskRemoveFromEventList+0x186>
    }
    else
    {
        xReturn = pdFALSE;
 8003afa:	2300      	movs	r3, #0
 8003afc:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 8003afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003b00:	4618      	mov	r0, r3
 8003b02:	372c      	adds	r7, #44	; 0x2c
 8003b04:	46bd      	mov	sp, r7
 8003b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0a:	4770      	bx	lr
 8003b0c:	200001e8 	.word	0x200001e8
 8003b10:	200001c8 	.word	0x200001c8
 8003b14:	200000ec 	.word	0x200000ec
 8003b18:	20000180 	.word	0x20000180
 8003b1c:	200000e8 	.word	0x200000e8
 8003b20:	200001d4 	.word	0x200001d4

08003b24 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003b24:	b480      	push	{r7}
 8003b26:	b083      	sub	sp, #12
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003b2c:	4b06      	ldr	r3, [pc, #24]	; (8003b48 <vTaskInternalSetTimeOutState+0x24>)
 8003b2e:	681a      	ldr	r2, [r3, #0]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8003b34:	4b05      	ldr	r3, [pc, #20]	; (8003b4c <vTaskInternalSetTimeOutState+0x28>)
 8003b36:	681a      	ldr	r2, [r3, #0]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	605a      	str	r2, [r3, #4]
}
 8003b3c:	bf00      	nop
 8003b3e:	370c      	adds	r7, #12
 8003b40:	46bd      	mov	sp, r7
 8003b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b46:	4770      	bx	lr
 8003b48:	200001d8 	.word	0x200001d8
 8003b4c:	200001c4 	.word	0x200001c4

08003b50 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b088      	sub	sp, #32
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
 8003b58:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d10a      	bne.n	8003b76 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8003b60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b64:	f383 8811 	msr	BASEPRI, r3
 8003b68:	f3bf 8f6f 	isb	sy
 8003b6c:	f3bf 8f4f 	dsb	sy
 8003b70:	613b      	str	r3, [r7, #16]
    }
 8003b72:	bf00      	nop
 8003b74:	e7fe      	b.n	8003b74 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d10a      	bne.n	8003b92 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8003b7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b80:	f383 8811 	msr	BASEPRI, r3
 8003b84:	f3bf 8f6f 	isb	sy
 8003b88:	f3bf 8f4f 	dsb	sy
 8003b8c:	60fb      	str	r3, [r7, #12]
    }
 8003b8e:	bf00      	nop
 8003b90:	e7fe      	b.n	8003b90 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8003b92:	f000 fd51 	bl	8004638 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8003b96:	4b1f      	ldr	r3, [pc, #124]	; (8003c14 <xTaskCheckForTimeOut+0xc4>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	69ba      	ldr	r2, [r7, #24]
 8003ba2:	1ad3      	subs	r3, r2, r3
 8003ba4:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bae:	d102      	bne.n	8003bb6 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	61fb      	str	r3, [r7, #28]
 8003bb4:	e026      	b.n	8003c04 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681a      	ldr	r2, [r3, #0]
 8003bba:	4b17      	ldr	r3, [pc, #92]	; (8003c18 <xTaskCheckForTimeOut+0xc8>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	429a      	cmp	r2, r3
 8003bc0:	d00a      	beq.n	8003bd8 <xTaskCheckForTimeOut+0x88>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	69ba      	ldr	r2, [r7, #24]
 8003bc8:	429a      	cmp	r2, r3
 8003bca:	d305      	bcc.n	8003bd8 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8003bcc:	2301      	movs	r3, #1
 8003bce:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	601a      	str	r2, [r3, #0]
 8003bd6:	e015      	b.n	8003c04 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	697a      	ldr	r2, [r7, #20]
 8003bde:	429a      	cmp	r2, r3
 8003be0:	d20b      	bcs.n	8003bfa <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	681a      	ldr	r2, [r3, #0]
 8003be6:	697b      	ldr	r3, [r7, #20]
 8003be8:	1ad2      	subs	r2, r2, r3
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8003bee:	6878      	ldr	r0, [r7, #4]
 8003bf0:	f7ff ff98 	bl	8003b24 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	61fb      	str	r3, [r7, #28]
 8003bf8:	e004      	b.n	8003c04 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8003c00:	2301      	movs	r3, #1
 8003c02:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8003c04:	f000 fd48 	bl	8004698 <vPortExitCritical>

    return xReturn;
 8003c08:	69fb      	ldr	r3, [r7, #28]
}
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	3720      	adds	r7, #32
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bd80      	pop	{r7, pc}
 8003c12:	bf00      	nop
 8003c14:	200001c4 	.word	0x200001c4
 8003c18:	200001d8 	.word	0x200001d8

08003c1c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8003c20:	4b03      	ldr	r3, [pc, #12]	; (8003c30 <vTaskMissedYield+0x14>)
 8003c22:	2201      	movs	r2, #1
 8003c24:	601a      	str	r2, [r3, #0]
}
 8003c26:	bf00      	nop
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2e:	4770      	bx	lr
 8003c30:	200001d4 	.word	0x200001d4

08003c34 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b082      	sub	sp, #8
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003c3c:	f000 f852 	bl	8003ce4 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003c40:	4b06      	ldr	r3, [pc, #24]	; (8003c5c <prvIdleTask+0x28>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	2b01      	cmp	r3, #1
 8003c46:	d9f9      	bls.n	8003c3c <prvIdleTask+0x8>
                {
                    taskYIELD();
 8003c48:	4b05      	ldr	r3, [pc, #20]	; (8003c60 <prvIdleTask+0x2c>)
 8003c4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c4e:	601a      	str	r2, [r3, #0]
 8003c50:	f3bf 8f4f 	dsb	sy
 8003c54:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8003c58:	e7f0      	b.n	8003c3c <prvIdleTask+0x8>
 8003c5a:	bf00      	nop
 8003c5c:	200000ec 	.word	0x200000ec
 8003c60:	e000ed04 	.word	0xe000ed04

08003c64 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b082      	sub	sp, #8
 8003c68:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	607b      	str	r3, [r7, #4]
 8003c6e:	e00c      	b.n	8003c8a <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003c70:	687a      	ldr	r2, [r7, #4]
 8003c72:	4613      	mov	r3, r2
 8003c74:	009b      	lsls	r3, r3, #2
 8003c76:	4413      	add	r3, r2
 8003c78:	009b      	lsls	r3, r3, #2
 8003c7a:	4a12      	ldr	r2, [pc, #72]	; (8003cc4 <prvInitialiseTaskLists+0x60>)
 8003c7c:	4413      	add	r3, r2
 8003c7e:	4618      	mov	r0, r3
 8003c80:	f7fe fe34 	bl	80028ec <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	3301      	adds	r3, #1
 8003c88:	607b      	str	r3, [r7, #4]
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2b04      	cmp	r3, #4
 8003c8e:	d9ef      	bls.n	8003c70 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003c90:	480d      	ldr	r0, [pc, #52]	; (8003cc8 <prvInitialiseTaskLists+0x64>)
 8003c92:	f7fe fe2b 	bl	80028ec <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8003c96:	480d      	ldr	r0, [pc, #52]	; (8003ccc <prvInitialiseTaskLists+0x68>)
 8003c98:	f7fe fe28 	bl	80028ec <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003c9c:	480c      	ldr	r0, [pc, #48]	; (8003cd0 <prvInitialiseTaskLists+0x6c>)
 8003c9e:	f7fe fe25 	bl	80028ec <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8003ca2:	480c      	ldr	r0, [pc, #48]	; (8003cd4 <prvInitialiseTaskLists+0x70>)
 8003ca4:	f7fe fe22 	bl	80028ec <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8003ca8:	480b      	ldr	r0, [pc, #44]	; (8003cd8 <prvInitialiseTaskLists+0x74>)
 8003caa:	f7fe fe1f 	bl	80028ec <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8003cae:	4b0b      	ldr	r3, [pc, #44]	; (8003cdc <prvInitialiseTaskLists+0x78>)
 8003cb0:	4a05      	ldr	r2, [pc, #20]	; (8003cc8 <prvInitialiseTaskLists+0x64>)
 8003cb2:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003cb4:	4b0a      	ldr	r3, [pc, #40]	; (8003ce0 <prvInitialiseTaskLists+0x7c>)
 8003cb6:	4a05      	ldr	r2, [pc, #20]	; (8003ccc <prvInitialiseTaskLists+0x68>)
 8003cb8:	601a      	str	r2, [r3, #0]
}
 8003cba:	bf00      	nop
 8003cbc:	3708      	adds	r7, #8
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bd80      	pop	{r7, pc}
 8003cc2:	bf00      	nop
 8003cc4:	200000ec 	.word	0x200000ec
 8003cc8:	20000150 	.word	0x20000150
 8003ccc:	20000164 	.word	0x20000164
 8003cd0:	20000180 	.word	0x20000180
 8003cd4:	20000194 	.word	0x20000194
 8003cd8:	200001ac 	.word	0x200001ac
 8003cdc:	20000178 	.word	0x20000178
 8003ce0:	2000017c 	.word	0x2000017c

08003ce4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b082      	sub	sp, #8
 8003ce8:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003cea:	e019      	b.n	8003d20 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8003cec:	f000 fca4 	bl	8004638 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003cf0:	4b10      	ldr	r3, [pc, #64]	; (8003d34 <prvCheckTasksWaitingTermination+0x50>)
 8003cf2:	68db      	ldr	r3, [r3, #12]
 8003cf4:	68db      	ldr	r3, [r3, #12]
 8003cf6:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	3304      	adds	r3, #4
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	f7fe fe5b 	bl	80029b8 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8003d02:	4b0d      	ldr	r3, [pc, #52]	; (8003d38 <prvCheckTasksWaitingTermination+0x54>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	3b01      	subs	r3, #1
 8003d08:	4a0b      	ldr	r2, [pc, #44]	; (8003d38 <prvCheckTasksWaitingTermination+0x54>)
 8003d0a:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8003d0c:	4b0b      	ldr	r3, [pc, #44]	; (8003d3c <prvCheckTasksWaitingTermination+0x58>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	3b01      	subs	r3, #1
 8003d12:	4a0a      	ldr	r2, [pc, #40]	; (8003d3c <prvCheckTasksWaitingTermination+0x58>)
 8003d14:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8003d16:	f000 fcbf 	bl	8004698 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8003d1a:	6878      	ldr	r0, [r7, #4]
 8003d1c:	f000 f810 	bl	8003d40 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003d20:	4b06      	ldr	r3, [pc, #24]	; (8003d3c <prvCheckTasksWaitingTermination+0x58>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d1e1      	bne.n	8003cec <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8003d28:	bf00      	nop
 8003d2a:	bf00      	nop
 8003d2c:	3708      	adds	r7, #8
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bd80      	pop	{r7, pc}
 8003d32:	bf00      	nop
 8003d34:	20000194 	.word	0x20000194
 8003d38:	200001c0 	.word	0x200001c0
 8003d3c:	200001a8 	.word	0x200001a8

08003d40 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b082      	sub	sp, #8
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFreeStack( pxTCB->pxStack );
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	f000 fe35 	bl	80049bc <vPortFree>
                vPortFree( pxTCB );
 8003d52:	6878      	ldr	r0, [r7, #4]
 8003d54:	f000 fe32 	bl	80049bc <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003d58:	bf00      	nop
 8003d5a:	3708      	adds	r7, #8
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	bd80      	pop	{r7, pc}

08003d60 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003d60:	b480      	push	{r7}
 8003d62:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003d64:	4b0a      	ldr	r3, [pc, #40]	; (8003d90 <prvResetNextTaskUnblockTime+0x30>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d104      	bne.n	8003d78 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8003d6e:	4b09      	ldr	r3, [pc, #36]	; (8003d94 <prvResetNextTaskUnblockTime+0x34>)
 8003d70:	f04f 32ff 	mov.w	r2, #4294967295
 8003d74:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8003d76:	e005      	b.n	8003d84 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003d78:	4b05      	ldr	r3, [pc, #20]	; (8003d90 <prvResetNextTaskUnblockTime+0x30>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	68db      	ldr	r3, [r3, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a04      	ldr	r2, [pc, #16]	; (8003d94 <prvResetNextTaskUnblockTime+0x34>)
 8003d82:	6013      	str	r3, [r2, #0]
}
 8003d84:	bf00      	nop
 8003d86:	46bd      	mov	sp, r7
 8003d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8c:	4770      	bx	lr
 8003d8e:	bf00      	nop
 8003d90:	20000178 	.word	0x20000178
 8003d94:	200001e0 	.word	0x200001e0

08003d98 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8003d98:	b480      	push	{r7}
 8003d9a:	b083      	sub	sp, #12
 8003d9c:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8003d9e:	4b0b      	ldr	r3, [pc, #44]	; (8003dcc <xTaskGetSchedulerState+0x34>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d102      	bne.n	8003dac <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8003da6:	2301      	movs	r3, #1
 8003da8:	607b      	str	r3, [r7, #4]
 8003daa:	e008      	b.n	8003dbe <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003dac:	4b08      	ldr	r3, [pc, #32]	; (8003dd0 <xTaskGetSchedulerState+0x38>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d102      	bne.n	8003dba <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8003db4:	2302      	movs	r3, #2
 8003db6:	607b      	str	r3, [r7, #4]
 8003db8:	e001      	b.n	8003dbe <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8003dba:	2300      	movs	r3, #0
 8003dbc:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8003dbe:	687b      	ldr	r3, [r7, #4]
    }
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	370c      	adds	r7, #12
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dca:	4770      	bx	lr
 8003dcc:	200001cc 	.word	0x200001cc
 8003dd0:	200001e8 	.word	0x200001e8

08003dd4 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b086      	sub	sp, #24
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
 8003ddc:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8003dde:	4b36      	ldr	r3, [pc, #216]	; (8003eb8 <prvAddCurrentTaskToDelayedList+0xe4>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	617b      	str	r3, [r7, #20]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003de4:	4b35      	ldr	r3, [pc, #212]	; (8003ebc <prvAddCurrentTaskToDelayedList+0xe8>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	3304      	adds	r3, #4
 8003dea:	4618      	mov	r0, r3
 8003dec:	f7fe fde4 	bl	80029b8 <uxListRemove>
 8003df0:	4603      	mov	r3, r0
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d10b      	bne.n	8003e0e <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003df6:	4b31      	ldr	r3, [pc, #196]	; (8003ebc <prvAddCurrentTaskToDelayedList+0xe8>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dfc:	2201      	movs	r2, #1
 8003dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8003e02:	43da      	mvns	r2, r3
 8003e04:	4b2e      	ldr	r3, [pc, #184]	; (8003ec0 <prvAddCurrentTaskToDelayedList+0xec>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4013      	ands	r3, r2
 8003e0a:	4a2d      	ldr	r2, [pc, #180]	; (8003ec0 <prvAddCurrentTaskToDelayedList+0xec>)
 8003e0c:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e14:	d124      	bne.n	8003e60 <prvAddCurrentTaskToDelayedList+0x8c>
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d021      	beq.n	8003e60 <prvAddCurrentTaskToDelayedList+0x8c>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003e1c:	4b29      	ldr	r3, [pc, #164]	; (8003ec4 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	613b      	str	r3, [r7, #16]
 8003e22:	4b26      	ldr	r3, [pc, #152]	; (8003ebc <prvAddCurrentTaskToDelayedList+0xe8>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	693a      	ldr	r2, [r7, #16]
 8003e28:	609a      	str	r2, [r3, #8]
 8003e2a:	4b24      	ldr	r3, [pc, #144]	; (8003ebc <prvAddCurrentTaskToDelayedList+0xe8>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	693a      	ldr	r2, [r7, #16]
 8003e30:	6892      	ldr	r2, [r2, #8]
 8003e32:	60da      	str	r2, [r3, #12]
 8003e34:	4b21      	ldr	r3, [pc, #132]	; (8003ebc <prvAddCurrentTaskToDelayedList+0xe8>)
 8003e36:	681a      	ldr	r2, [r3, #0]
 8003e38:	693b      	ldr	r3, [r7, #16]
 8003e3a:	689b      	ldr	r3, [r3, #8]
 8003e3c:	3204      	adds	r2, #4
 8003e3e:	605a      	str	r2, [r3, #4]
 8003e40:	4b1e      	ldr	r3, [pc, #120]	; (8003ebc <prvAddCurrentTaskToDelayedList+0xe8>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	1d1a      	adds	r2, r3, #4
 8003e46:	693b      	ldr	r3, [r7, #16]
 8003e48:	609a      	str	r2, [r3, #8]
 8003e4a:	4b1c      	ldr	r3, [pc, #112]	; (8003ebc <prvAddCurrentTaskToDelayedList+0xe8>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4a1d      	ldr	r2, [pc, #116]	; (8003ec4 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003e50:	615a      	str	r2, [r3, #20]
 8003e52:	4b1c      	ldr	r3, [pc, #112]	; (8003ec4 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	3301      	adds	r3, #1
 8003e58:	4a1a      	ldr	r2, [pc, #104]	; (8003ec4 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003e5a:	6013      	str	r3, [r2, #0]
 8003e5c:	bf00      	nop

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8003e5e:	e026      	b.n	8003eae <prvAddCurrentTaskToDelayedList+0xda>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8003e60:	697a      	ldr	r2, [r7, #20]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	4413      	add	r3, r2
 8003e66:	60fb      	str	r3, [r7, #12]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003e68:	4b14      	ldr	r3, [pc, #80]	; (8003ebc <prvAddCurrentTaskToDelayedList+0xe8>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	68fa      	ldr	r2, [r7, #12]
 8003e6e:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8003e70:	68fa      	ldr	r2, [r7, #12]
 8003e72:	697b      	ldr	r3, [r7, #20]
 8003e74:	429a      	cmp	r2, r3
 8003e76:	d209      	bcs.n	8003e8c <prvAddCurrentTaskToDelayedList+0xb8>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003e78:	4b13      	ldr	r3, [pc, #76]	; (8003ec8 <prvAddCurrentTaskToDelayedList+0xf4>)
 8003e7a:	681a      	ldr	r2, [r3, #0]
 8003e7c:	4b0f      	ldr	r3, [pc, #60]	; (8003ebc <prvAddCurrentTaskToDelayedList+0xe8>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	3304      	adds	r3, #4
 8003e82:	4619      	mov	r1, r3
 8003e84:	4610      	mov	r0, r2
 8003e86:	f7fe fd5e 	bl	8002946 <vListInsert>
}
 8003e8a:	e010      	b.n	8003eae <prvAddCurrentTaskToDelayedList+0xda>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003e8c:	4b0f      	ldr	r3, [pc, #60]	; (8003ecc <prvAddCurrentTaskToDelayedList+0xf8>)
 8003e8e:	681a      	ldr	r2, [r3, #0]
 8003e90:	4b0a      	ldr	r3, [pc, #40]	; (8003ebc <prvAddCurrentTaskToDelayedList+0xe8>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	3304      	adds	r3, #4
 8003e96:	4619      	mov	r1, r3
 8003e98:	4610      	mov	r0, r2
 8003e9a:	f7fe fd54 	bl	8002946 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8003e9e:	4b0c      	ldr	r3, [pc, #48]	; (8003ed0 <prvAddCurrentTaskToDelayedList+0xfc>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	68fa      	ldr	r2, [r7, #12]
 8003ea4:	429a      	cmp	r2, r3
 8003ea6:	d202      	bcs.n	8003eae <prvAddCurrentTaskToDelayedList+0xda>
                        xNextTaskUnblockTime = xTimeToWake;
 8003ea8:	4a09      	ldr	r2, [pc, #36]	; (8003ed0 <prvAddCurrentTaskToDelayedList+0xfc>)
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	6013      	str	r3, [r2, #0]
}
 8003eae:	bf00      	nop
 8003eb0:	3718      	adds	r7, #24
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bd80      	pop	{r7, pc}
 8003eb6:	bf00      	nop
 8003eb8:	200001c4 	.word	0x200001c4
 8003ebc:	200000e8 	.word	0x200000e8
 8003ec0:	200001c8 	.word	0x200001c8
 8003ec4:	200001ac 	.word	0x200001ac
 8003ec8:	2000017c 	.word	0x2000017c
 8003ecc:	20000178 	.word	0x20000178
 8003ed0:	200001e0 	.word	0x200001e0

08003ed4 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b084      	sub	sp, #16
 8003ed8:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8003eda:	2300      	movs	r3, #0
 8003edc:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8003ede:	f000 fa47 	bl	8004370 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8003ee2:	4b11      	ldr	r3, [pc, #68]	; (8003f28 <xTimerCreateTimerTask+0x54>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d00b      	beq.n	8003f02 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8003eea:	4b10      	ldr	r3, [pc, #64]	; (8003f2c <xTimerCreateTimerTask+0x58>)
 8003eec:	9301      	str	r3, [sp, #4]
 8003eee:	2302      	movs	r3, #2
 8003ef0:	9300      	str	r3, [sp, #0]
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003ef8:	490d      	ldr	r1, [pc, #52]	; (8003f30 <xTimerCreateTimerTask+0x5c>)
 8003efa:	480e      	ldr	r0, [pc, #56]	; (8003f34 <xTimerCreateTimerTask+0x60>)
 8003efc:	f7ff f878 	bl	8002ff0 <xTaskCreate>
 8003f00:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d10a      	bne.n	8003f1e <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8003f08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f0c:	f383 8811 	msr	BASEPRI, r3
 8003f10:	f3bf 8f6f 	isb	sy
 8003f14:	f3bf 8f4f 	dsb	sy
 8003f18:	603b      	str	r3, [r7, #0]
    }
 8003f1a:	bf00      	nop
 8003f1c:	e7fe      	b.n	8003f1c <xTimerCreateTimerTask+0x48>
        return xReturn;
 8003f1e:	687b      	ldr	r3, [r7, #4]
    }
 8003f20:	4618      	mov	r0, r3
 8003f22:	3708      	adds	r7, #8
 8003f24:	46bd      	mov	sp, r7
 8003f26:	bd80      	pop	{r7, pc}
 8003f28:	2000021c 	.word	0x2000021c
 8003f2c:	20000220 	.word	0x20000220
 8003f30:	080054b8 	.word	0x080054b8
 8003f34:	08003fdd 	.word	0x08003fdd

08003f38 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b084      	sub	sp, #16
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	60f8      	str	r0, [r7, #12]
 8003f40:	60b9      	str	r1, [r7, #8]
 8003f42:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003f44:	e008      	b.n	8003f58 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	699b      	ldr	r3, [r3, #24]
 8003f4a:	68ba      	ldr	r2, [r7, #8]
 8003f4c:	4413      	add	r3, r2
 8003f4e:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	6a1b      	ldr	r3, [r3, #32]
 8003f54:	68f8      	ldr	r0, [r7, #12]
 8003f56:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	699a      	ldr	r2, [r3, #24]
 8003f5c:	68bb      	ldr	r3, [r7, #8]
 8003f5e:	18d1      	adds	r1, r2, r3
 8003f60:	68bb      	ldr	r3, [r7, #8]
 8003f62:	687a      	ldr	r2, [r7, #4]
 8003f64:	68f8      	ldr	r0, [r7, #12]
 8003f66:	f000 f8dd 	bl	8004124 <prvInsertTimerInActiveList>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d1ea      	bne.n	8003f46 <prvReloadTimer+0xe>
        }
    }
 8003f70:	bf00      	nop
 8003f72:	bf00      	nop
 8003f74:	3710      	adds	r7, #16
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bd80      	pop	{r7, pc}
	...

08003f7c <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b084      	sub	sp, #16
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
 8003f84:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f86:	4b14      	ldr	r3, [pc, #80]	; (8003fd8 <prvProcessExpiredTimer+0x5c>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	68db      	ldr	r3, [r3, #12]
 8003f8c:	68db      	ldr	r3, [r3, #12]
 8003f8e:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	3304      	adds	r3, #4
 8003f94:	4618      	mov	r0, r3
 8003f96:	f7fe fd0f 	bl	80029b8 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003fa0:	f003 0304 	and.w	r3, r3, #4
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d005      	beq.n	8003fb4 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8003fa8:	683a      	ldr	r2, [r7, #0]
 8003faa:	6879      	ldr	r1, [r7, #4]
 8003fac:	68f8      	ldr	r0, [r7, #12]
 8003fae:	f7ff ffc3 	bl	8003f38 <prvReloadTimer>
 8003fb2:	e008      	b.n	8003fc6 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003fba:	f023 0301 	bic.w	r3, r3, #1
 8003fbe:	b2da      	uxtb	r2, r3
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	6a1b      	ldr	r3, [r3, #32]
 8003fca:	68f8      	ldr	r0, [r7, #12]
 8003fcc:	4798      	blx	r3
    }
 8003fce:	bf00      	nop
 8003fd0:	3710      	adds	r7, #16
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bd80      	pop	{r7, pc}
 8003fd6:	bf00      	nop
 8003fd8:	20000214 	.word	0x20000214

08003fdc <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b084      	sub	sp, #16
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003fe4:	f107 0308 	add.w	r3, r7, #8
 8003fe8:	4618      	mov	r0, r3
 8003fea:	f000 f857 	bl	800409c <prvGetNextExpireTime>
 8003fee:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	4619      	mov	r1, r3
 8003ff4:	68f8      	ldr	r0, [r7, #12]
 8003ff6:	f000 f803 	bl	8004000 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8003ffa:	f000 f8d5 	bl	80041a8 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003ffe:	e7f1      	b.n	8003fe4 <prvTimerTask+0x8>

08004000 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8004000:	b580      	push	{r7, lr}
 8004002:	b084      	sub	sp, #16
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
 8004008:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800400a:	f7ff f9bf 	bl	800338c <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800400e:	f107 0308 	add.w	r3, r7, #8
 8004012:	4618      	mov	r0, r3
 8004014:	f000 f866 	bl	80040e4 <prvSampleTimeNow>
 8004018:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 800401a:	68bb      	ldr	r3, [r7, #8]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d130      	bne.n	8004082 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d10a      	bne.n	800403c <prvProcessTimerOrBlockTask+0x3c>
 8004026:	687a      	ldr	r2, [r7, #4]
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	429a      	cmp	r2, r3
 800402c:	d806      	bhi.n	800403c <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 800402e:	f7ff f9bb 	bl	80033a8 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004032:	68f9      	ldr	r1, [r7, #12]
 8004034:	6878      	ldr	r0, [r7, #4]
 8004036:	f7ff ffa1 	bl	8003f7c <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 800403a:	e024      	b.n	8004086 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d008      	beq.n	8004054 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004042:	4b13      	ldr	r3, [pc, #76]	; (8004090 <prvProcessTimerOrBlockTask+0x90>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d101      	bne.n	8004050 <prvProcessTimerOrBlockTask+0x50>
 800404c:	2301      	movs	r3, #1
 800404e:	e000      	b.n	8004052 <prvProcessTimerOrBlockTask+0x52>
 8004050:	2300      	movs	r3, #0
 8004052:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004054:	4b0f      	ldr	r3, [pc, #60]	; (8004094 <prvProcessTimerOrBlockTask+0x94>)
 8004056:	6818      	ldr	r0, [r3, #0]
 8004058:	687a      	ldr	r2, [r7, #4]
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	1ad3      	subs	r3, r2, r3
 800405e:	683a      	ldr	r2, [r7, #0]
 8004060:	4619      	mov	r1, r3
 8004062:	f7fe ff91 	bl	8002f88 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8004066:	f7ff f99f 	bl	80033a8 <xTaskResumeAll>
 800406a:	4603      	mov	r3, r0
 800406c:	2b00      	cmp	r3, #0
 800406e:	d10a      	bne.n	8004086 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8004070:	4b09      	ldr	r3, [pc, #36]	; (8004098 <prvProcessTimerOrBlockTask+0x98>)
 8004072:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004076:	601a      	str	r2, [r3, #0]
 8004078:	f3bf 8f4f 	dsb	sy
 800407c:	f3bf 8f6f 	isb	sy
    }
 8004080:	e001      	b.n	8004086 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8004082:	f7ff f991 	bl	80033a8 <xTaskResumeAll>
    }
 8004086:	bf00      	nop
 8004088:	3710      	adds	r7, #16
 800408a:	46bd      	mov	sp, r7
 800408c:	bd80      	pop	{r7, pc}
 800408e:	bf00      	nop
 8004090:	20000218 	.word	0x20000218
 8004094:	2000021c 	.word	0x2000021c
 8004098:	e000ed04 	.word	0xe000ed04

0800409c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 800409c:	b480      	push	{r7}
 800409e:	b085      	sub	sp, #20
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80040a4:	4b0e      	ldr	r3, [pc, #56]	; (80040e0 <prvGetNextExpireTime+0x44>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d101      	bne.n	80040b2 <prvGetNextExpireTime+0x16>
 80040ae:	2201      	movs	r2, #1
 80040b0:	e000      	b.n	80040b4 <prvGetNextExpireTime+0x18>
 80040b2:	2200      	movs	r2, #0
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d105      	bne.n	80040cc <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80040c0:	4b07      	ldr	r3, [pc, #28]	; (80040e0 <prvGetNextExpireTime+0x44>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	68db      	ldr	r3, [r3, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	60fb      	str	r3, [r7, #12]
 80040ca:	e001      	b.n	80040d0 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 80040cc:	2300      	movs	r3, #0
 80040ce:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 80040d0:	68fb      	ldr	r3, [r7, #12]
    }
 80040d2:	4618      	mov	r0, r3
 80040d4:	3714      	adds	r7, #20
 80040d6:	46bd      	mov	sp, r7
 80040d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040dc:	4770      	bx	lr
 80040de:	bf00      	nop
 80040e0:	20000214 	.word	0x20000214

080040e4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b084      	sub	sp, #16
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 80040ec:	f7ff fa58 	bl	80035a0 <xTaskGetTickCount>
 80040f0:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 80040f2:	4b0b      	ldr	r3, [pc, #44]	; (8004120 <prvSampleTimeNow+0x3c>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	68fa      	ldr	r2, [r7, #12]
 80040f8:	429a      	cmp	r2, r3
 80040fa:	d205      	bcs.n	8004108 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 80040fc:	f000 f912 	bl	8004324 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2201      	movs	r2, #1
 8004104:	601a      	str	r2, [r3, #0]
 8004106:	e002      	b.n	800410e <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2200      	movs	r2, #0
 800410c:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 800410e:	4a04      	ldr	r2, [pc, #16]	; (8004120 <prvSampleTimeNow+0x3c>)
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8004114:	68fb      	ldr	r3, [r7, #12]
    }
 8004116:	4618      	mov	r0, r3
 8004118:	3710      	adds	r7, #16
 800411a:	46bd      	mov	sp, r7
 800411c:	bd80      	pop	{r7, pc}
 800411e:	bf00      	nop
 8004120:	20000224 	.word	0x20000224

08004124 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8004124:	b580      	push	{r7, lr}
 8004126:	b086      	sub	sp, #24
 8004128:	af00      	add	r7, sp, #0
 800412a:	60f8      	str	r0, [r7, #12]
 800412c:	60b9      	str	r1, [r7, #8]
 800412e:	607a      	str	r2, [r7, #4]
 8004130:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8004132:	2300      	movs	r3, #0
 8004134:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	68ba      	ldr	r2, [r7, #8]
 800413a:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	68fa      	ldr	r2, [r7, #12]
 8004140:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8004142:	68ba      	ldr	r2, [r7, #8]
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	429a      	cmp	r2, r3
 8004148:	d812      	bhi.n	8004170 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800414a:	687a      	ldr	r2, [r7, #4]
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	1ad2      	subs	r2, r2, r3
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	699b      	ldr	r3, [r3, #24]
 8004154:	429a      	cmp	r2, r3
 8004156:	d302      	bcc.n	800415e <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8004158:	2301      	movs	r3, #1
 800415a:	617b      	str	r3, [r7, #20]
 800415c:	e01b      	b.n	8004196 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800415e:	4b10      	ldr	r3, [pc, #64]	; (80041a0 <prvInsertTimerInActiveList+0x7c>)
 8004160:	681a      	ldr	r2, [r3, #0]
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	3304      	adds	r3, #4
 8004166:	4619      	mov	r1, r3
 8004168:	4610      	mov	r0, r2
 800416a:	f7fe fbec 	bl	8002946 <vListInsert>
 800416e:	e012      	b.n	8004196 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004170:	687a      	ldr	r2, [r7, #4]
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	429a      	cmp	r2, r3
 8004176:	d206      	bcs.n	8004186 <prvInsertTimerInActiveList+0x62>
 8004178:	68ba      	ldr	r2, [r7, #8]
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	429a      	cmp	r2, r3
 800417e:	d302      	bcc.n	8004186 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8004180:	2301      	movs	r3, #1
 8004182:	617b      	str	r3, [r7, #20]
 8004184:	e007      	b.n	8004196 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004186:	4b07      	ldr	r3, [pc, #28]	; (80041a4 <prvInsertTimerInActiveList+0x80>)
 8004188:	681a      	ldr	r2, [r3, #0]
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	3304      	adds	r3, #4
 800418e:	4619      	mov	r1, r3
 8004190:	4610      	mov	r0, r2
 8004192:	f7fe fbd8 	bl	8002946 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8004196:	697b      	ldr	r3, [r7, #20]
    }
 8004198:	4618      	mov	r0, r3
 800419a:	3718      	adds	r7, #24
 800419c:	46bd      	mov	sp, r7
 800419e:	bd80      	pop	{r7, pc}
 80041a0:	20000218 	.word	0x20000218
 80041a4:	20000214 	.word	0x20000214

080041a8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b088      	sub	sp, #32
 80041ac:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80041ae:	e0a6      	b.n	80042fe <prvProcessReceivedCommands+0x156>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80041b0:	68bb      	ldr	r3, [r7, #8]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	f2c0 80a2 	blt.w	80042fc <prvProcessReceivedCommands+0x154>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80041b8:	693b      	ldr	r3, [r7, #16]
 80041ba:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80041bc:	69fb      	ldr	r3, [r7, #28]
 80041be:	695b      	ldr	r3, [r3, #20]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d004      	beq.n	80041ce <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80041c4:	69fb      	ldr	r3, [r7, #28]
 80041c6:	3304      	adds	r3, #4
 80041c8:	4618      	mov	r0, r3
 80041ca:	f7fe fbf5 	bl	80029b8 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80041ce:	1d3b      	adds	r3, r7, #4
 80041d0:	4618      	mov	r0, r3
 80041d2:	f7ff ff87 	bl	80040e4 <prvSampleTimeNow>
 80041d6:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 80041d8:	68bb      	ldr	r3, [r7, #8]
 80041da:	3b01      	subs	r3, #1
 80041dc:	2b08      	cmp	r3, #8
 80041de:	f200 808e 	bhi.w	80042fe <prvProcessReceivedCommands+0x156>
 80041e2:	a201      	add	r2, pc, #4	; (adr r2, 80041e8 <prvProcessReceivedCommands+0x40>)
 80041e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041e8:	0800420d 	.word	0x0800420d
 80041ec:	0800420d 	.word	0x0800420d
 80041f0:	08004275 	.word	0x08004275
 80041f4:	08004289 	.word	0x08004289
 80041f8:	080042d3 	.word	0x080042d3
 80041fc:	0800420d 	.word	0x0800420d
 8004200:	0800420d 	.word	0x0800420d
 8004204:	08004275 	.word	0x08004275
 8004208:	08004289 	.word	0x08004289
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800420c:	69fb      	ldr	r3, [r7, #28]
 800420e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004212:	f043 0301 	orr.w	r3, r3, #1
 8004216:	b2da      	uxtb	r2, r3
 8004218:	69fb      	ldr	r3, [r7, #28]
 800421a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800421e:	68fa      	ldr	r2, [r7, #12]
 8004220:	69fb      	ldr	r3, [r7, #28]
 8004222:	699b      	ldr	r3, [r3, #24]
 8004224:	18d1      	adds	r1, r2, r3
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	69ba      	ldr	r2, [r7, #24]
 800422a:	69f8      	ldr	r0, [r7, #28]
 800422c:	f7ff ff7a 	bl	8004124 <prvInsertTimerInActiveList>
 8004230:	4603      	mov	r3, r0
 8004232:	2b00      	cmp	r3, #0
 8004234:	d063      	beq.n	80042fe <prvProcessReceivedCommands+0x156>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004236:	69fb      	ldr	r3, [r7, #28]
 8004238:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800423c:	f003 0304 	and.w	r3, r3, #4
 8004240:	2b00      	cmp	r3, #0
 8004242:	d009      	beq.n	8004258 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8004244:	68fa      	ldr	r2, [r7, #12]
 8004246:	69fb      	ldr	r3, [r7, #28]
 8004248:	699b      	ldr	r3, [r3, #24]
 800424a:	4413      	add	r3, r2
 800424c:	69ba      	ldr	r2, [r7, #24]
 800424e:	4619      	mov	r1, r3
 8004250:	69f8      	ldr	r0, [r7, #28]
 8004252:	f7ff fe71 	bl	8003f38 <prvReloadTimer>
 8004256:	e008      	b.n	800426a <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004258:	69fb      	ldr	r3, [r7, #28]
 800425a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800425e:	f023 0301 	bic.w	r3, r3, #1
 8004262:	b2da      	uxtb	r2, r3
 8004264:	69fb      	ldr	r3, [r7, #28]
 8004266:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800426a:	69fb      	ldr	r3, [r7, #28]
 800426c:	6a1b      	ldr	r3, [r3, #32]
 800426e:	69f8      	ldr	r0, [r7, #28]
 8004270:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8004272:	e044      	b.n	80042fe <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004274:	69fb      	ldr	r3, [r7, #28]
 8004276:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800427a:	f023 0301 	bic.w	r3, r3, #1
 800427e:	b2da      	uxtb	r2, r3
 8004280:	69fb      	ldr	r3, [r7, #28]
 8004282:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8004286:	e03a      	b.n	80042fe <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004288:	69fb      	ldr	r3, [r7, #28]
 800428a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800428e:	f043 0301 	orr.w	r3, r3, #1
 8004292:	b2da      	uxtb	r2, r3
 8004294:	69fb      	ldr	r3, [r7, #28]
 8004296:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800429a:	68fa      	ldr	r2, [r7, #12]
 800429c:	69fb      	ldr	r3, [r7, #28]
 800429e:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80042a0:	69fb      	ldr	r3, [r7, #28]
 80042a2:	699b      	ldr	r3, [r3, #24]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d10a      	bne.n	80042be <prvProcessReceivedCommands+0x116>
        __asm volatile
 80042a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042ac:	f383 8811 	msr	BASEPRI, r3
 80042b0:	f3bf 8f6f 	isb	sy
 80042b4:	f3bf 8f4f 	dsb	sy
 80042b8:	617b      	str	r3, [r7, #20]
    }
 80042ba:	bf00      	nop
 80042bc:	e7fe      	b.n	80042bc <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80042be:	69fb      	ldr	r3, [r7, #28]
 80042c0:	699a      	ldr	r2, [r3, #24]
 80042c2:	69bb      	ldr	r3, [r7, #24]
 80042c4:	18d1      	adds	r1, r2, r3
 80042c6:	69bb      	ldr	r3, [r7, #24]
 80042c8:	69ba      	ldr	r2, [r7, #24]
 80042ca:	69f8      	ldr	r0, [r7, #28]
 80042cc:	f7ff ff2a 	bl	8004124 <prvInsertTimerInActiveList>
                        break;
 80042d0:	e015      	b.n	80042fe <prvProcessReceivedCommands+0x156>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80042d2:	69fb      	ldr	r3, [r7, #28]
 80042d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80042d8:	f003 0302 	and.w	r3, r3, #2
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d103      	bne.n	80042e8 <prvProcessReceivedCommands+0x140>
                                {
                                    vPortFree( pxTimer );
 80042e0:	69f8      	ldr	r0, [r7, #28]
 80042e2:	f000 fb6b 	bl	80049bc <vPortFree>
 80042e6:	e00a      	b.n	80042fe <prvProcessReceivedCommands+0x156>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80042e8:	69fb      	ldr	r3, [r7, #28]
 80042ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80042ee:	f023 0301 	bic.w	r3, r3, #1
 80042f2:	b2da      	uxtb	r2, r3
 80042f4:	69fb      	ldr	r3, [r7, #28]
 80042f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 80042fa:	e000      	b.n	80042fe <prvProcessReceivedCommands+0x156>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 80042fc:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80042fe:	4b08      	ldr	r3, [pc, #32]	; (8004320 <prvProcessReceivedCommands+0x178>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f107 0108 	add.w	r1, r7, #8
 8004306:	2200      	movs	r2, #0
 8004308:	4618      	mov	r0, r3
 800430a:	f7fe fc81 	bl	8002c10 <xQueueReceive>
 800430e:	4603      	mov	r3, r0
 8004310:	2b00      	cmp	r3, #0
 8004312:	f47f af4d 	bne.w	80041b0 <prvProcessReceivedCommands+0x8>
        }
    }
 8004316:	bf00      	nop
 8004318:	bf00      	nop
 800431a:	3720      	adds	r7, #32
 800431c:	46bd      	mov	sp, r7
 800431e:	bd80      	pop	{r7, pc}
 8004320:	2000021c 	.word	0x2000021c

08004324 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8004324:	b580      	push	{r7, lr}
 8004326:	b082      	sub	sp, #8
 8004328:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800432a:	e009      	b.n	8004340 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800432c:	4b0e      	ldr	r3, [pc, #56]	; (8004368 <prvSwitchTimerLists+0x44>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	68db      	ldr	r3, [r3, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8004336:	f04f 31ff 	mov.w	r1, #4294967295
 800433a:	6838      	ldr	r0, [r7, #0]
 800433c:	f7ff fe1e 	bl	8003f7c <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004340:	4b09      	ldr	r3, [pc, #36]	; (8004368 <prvSwitchTimerLists+0x44>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d1f0      	bne.n	800432c <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 800434a:	4b07      	ldr	r3, [pc, #28]	; (8004368 <prvSwitchTimerLists+0x44>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8004350:	4b06      	ldr	r3, [pc, #24]	; (800436c <prvSwitchTimerLists+0x48>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4a04      	ldr	r2, [pc, #16]	; (8004368 <prvSwitchTimerLists+0x44>)
 8004356:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8004358:	4a04      	ldr	r2, [pc, #16]	; (800436c <prvSwitchTimerLists+0x48>)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6013      	str	r3, [r2, #0]
    }
 800435e:	bf00      	nop
 8004360:	3708      	adds	r7, #8
 8004362:	46bd      	mov	sp, r7
 8004364:	bd80      	pop	{r7, pc}
 8004366:	bf00      	nop
 8004368:	20000214 	.word	0x20000214
 800436c:	20000218 	.word	0x20000218

08004370 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8004370:	b580      	push	{r7, lr}
 8004372:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8004374:	f000 f960 	bl	8004638 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8004378:	4b12      	ldr	r3, [pc, #72]	; (80043c4 <prvCheckForValidListAndQueue+0x54>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d11d      	bne.n	80043bc <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8004380:	4811      	ldr	r0, [pc, #68]	; (80043c8 <prvCheckForValidListAndQueue+0x58>)
 8004382:	f7fe fab3 	bl	80028ec <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8004386:	4811      	ldr	r0, [pc, #68]	; (80043cc <prvCheckForValidListAndQueue+0x5c>)
 8004388:	f7fe fab0 	bl	80028ec <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 800438c:	4b10      	ldr	r3, [pc, #64]	; (80043d0 <prvCheckForValidListAndQueue+0x60>)
 800438e:	4a0e      	ldr	r2, [pc, #56]	; (80043c8 <prvCheckForValidListAndQueue+0x58>)
 8004390:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8004392:	4b10      	ldr	r3, [pc, #64]	; (80043d4 <prvCheckForValidListAndQueue+0x64>)
 8004394:	4a0d      	ldr	r2, [pc, #52]	; (80043cc <prvCheckForValidListAndQueue+0x5c>)
 8004396:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8004398:	2200      	movs	r2, #0
 800439a:	210c      	movs	r1, #12
 800439c:	200a      	movs	r0, #10
 800439e:	f7fe fbc5 	bl	8002b2c <xQueueGenericCreate>
 80043a2:	4603      	mov	r3, r0
 80043a4:	4a07      	ldr	r2, [pc, #28]	; (80043c4 <prvCheckForValidListAndQueue+0x54>)
 80043a6:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 80043a8:	4b06      	ldr	r3, [pc, #24]	; (80043c4 <prvCheckForValidListAndQueue+0x54>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d005      	beq.n	80043bc <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80043b0:	4b04      	ldr	r3, [pc, #16]	; (80043c4 <prvCheckForValidListAndQueue+0x54>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4908      	ldr	r1, [pc, #32]	; (80043d8 <prvCheckForValidListAndQueue+0x68>)
 80043b6:	4618      	mov	r0, r3
 80043b8:	f7fe fd98 	bl	8002eec <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80043bc:	f000 f96c 	bl	8004698 <vPortExitCritical>
    }
 80043c0:	bf00      	nop
 80043c2:	bd80      	pop	{r7, pc}
 80043c4:	2000021c 	.word	0x2000021c
 80043c8:	200001ec 	.word	0x200001ec
 80043cc:	20000200 	.word	0x20000200
 80043d0:	20000214 	.word	0x20000214
 80043d4:	20000218 	.word	0x20000218
 80043d8:	080054c0 	.word	0x080054c0

080043dc <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80043dc:	b480      	push	{r7}
 80043de:	b085      	sub	sp, #20
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	60f8      	str	r0, [r7, #12]
 80043e4:	60b9      	str	r1, [r7, #8]
 80043e6:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	3b04      	subs	r3, #4
 80043ec:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80043f4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	3b04      	subs	r3, #4
 80043fa:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	f023 0201 	bic.w	r2, r3, #1
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	3b04      	subs	r3, #4
 800440a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 800440c:	4a0c      	ldr	r2, [pc, #48]	; (8004440 <pxPortInitialiseStack+0x64>)
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	3b14      	subs	r3, #20
 8004416:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8004418:	687a      	ldr	r2, [r7, #4]
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	3b04      	subs	r3, #4
 8004422:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	f06f 0202 	mvn.w	r2, #2
 800442a:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	3b20      	subs	r3, #32
 8004430:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8004432:	68fb      	ldr	r3, [r7, #12]
}
 8004434:	4618      	mov	r0, r3
 8004436:	3714      	adds	r7, #20
 8004438:	46bd      	mov	sp, r7
 800443a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443e:	4770      	bx	lr
 8004440:	08004445 	.word	0x08004445

08004444 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004444:	b480      	push	{r7}
 8004446:	b085      	sub	sp, #20
 8004448:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800444a:	2300      	movs	r3, #0
 800444c:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800444e:	4b12      	ldr	r3, [pc, #72]	; (8004498 <prvTaskExitError+0x54>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004456:	d00a      	beq.n	800446e <prvTaskExitError+0x2a>
        __asm volatile
 8004458:	f04f 0350 	mov.w	r3, #80	; 0x50
 800445c:	f383 8811 	msr	BASEPRI, r3
 8004460:	f3bf 8f6f 	isb	sy
 8004464:	f3bf 8f4f 	dsb	sy
 8004468:	60fb      	str	r3, [r7, #12]
    }
 800446a:	bf00      	nop
 800446c:	e7fe      	b.n	800446c <prvTaskExitError+0x28>
        __asm volatile
 800446e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004472:	f383 8811 	msr	BASEPRI, r3
 8004476:	f3bf 8f6f 	isb	sy
 800447a:	f3bf 8f4f 	dsb	sy
 800447e:	60bb      	str	r3, [r7, #8]
    }
 8004480:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8004482:	bf00      	nop
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d0fc      	beq.n	8004484 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 800448a:	bf00      	nop
 800448c:	bf00      	nop
 800448e:	3714      	adds	r7, #20
 8004490:	46bd      	mov	sp, r7
 8004492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004496:	4770      	bx	lr
 8004498:	20000010 	.word	0x20000010
 800449c:	00000000 	.word	0x00000000

080044a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80044a0:	4b07      	ldr	r3, [pc, #28]	; (80044c0 <pxCurrentTCBConst2>)
 80044a2:	6819      	ldr	r1, [r3, #0]
 80044a4:	6808      	ldr	r0, [r1, #0]
 80044a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044aa:	f380 8809 	msr	PSP, r0
 80044ae:	f3bf 8f6f 	isb	sy
 80044b2:	f04f 0000 	mov.w	r0, #0
 80044b6:	f380 8811 	msr	BASEPRI, r0
 80044ba:	4770      	bx	lr
 80044bc:	f3af 8000 	nop.w

080044c0 <pxCurrentTCBConst2>:
 80044c0:	200000e8 	.word	0x200000e8
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80044c4:	bf00      	nop
 80044c6:	bf00      	nop

080044c8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80044c8:	4808      	ldr	r0, [pc, #32]	; (80044ec <prvPortStartFirstTask+0x24>)
 80044ca:	6800      	ldr	r0, [r0, #0]
 80044cc:	6800      	ldr	r0, [r0, #0]
 80044ce:	f380 8808 	msr	MSP, r0
 80044d2:	f04f 0000 	mov.w	r0, #0
 80044d6:	f380 8814 	msr	CONTROL, r0
 80044da:	b662      	cpsie	i
 80044dc:	b661      	cpsie	f
 80044de:	f3bf 8f4f 	dsb	sy
 80044e2:	f3bf 8f6f 	isb	sy
 80044e6:	df00      	svc	0
 80044e8:	bf00      	nop
 80044ea:	0000      	.short	0x0000
 80044ec:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 80044f0:	bf00      	nop
 80044f2:	bf00      	nop

080044f4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b086      	sub	sp, #24
 80044f8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80044fa:	4b46      	ldr	r3, [pc, #280]	; (8004614 <xPortStartScheduler+0x120>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a46      	ldr	r2, [pc, #280]	; (8004618 <xPortStartScheduler+0x124>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d10a      	bne.n	800451a <xPortStartScheduler+0x26>
        __asm volatile
 8004504:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004508:	f383 8811 	msr	BASEPRI, r3
 800450c:	f3bf 8f6f 	isb	sy
 8004510:	f3bf 8f4f 	dsb	sy
 8004514:	613b      	str	r3, [r7, #16]
    }
 8004516:	bf00      	nop
 8004518:	e7fe      	b.n	8004518 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800451a:	4b3e      	ldr	r3, [pc, #248]	; (8004614 <xPortStartScheduler+0x120>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4a3f      	ldr	r2, [pc, #252]	; (800461c <xPortStartScheduler+0x128>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d10a      	bne.n	800453a <xPortStartScheduler+0x46>
        __asm volatile
 8004524:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004528:	f383 8811 	msr	BASEPRI, r3
 800452c:	f3bf 8f6f 	isb	sy
 8004530:	f3bf 8f4f 	dsb	sy
 8004534:	60fb      	str	r3, [r7, #12]
    }
 8004536:	bf00      	nop
 8004538:	e7fe      	b.n	8004538 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800453a:	4b39      	ldr	r3, [pc, #228]	; (8004620 <xPortStartScheduler+0x12c>)
 800453c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800453e:	697b      	ldr	r3, [r7, #20]
 8004540:	781b      	ldrb	r3, [r3, #0]
 8004542:	b2db      	uxtb	r3, r3
 8004544:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004546:	697b      	ldr	r3, [r7, #20]
 8004548:	22ff      	movs	r2, #255	; 0xff
 800454a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800454c:	697b      	ldr	r3, [r7, #20]
 800454e:	781b      	ldrb	r3, [r3, #0]
 8004550:	b2db      	uxtb	r3, r3
 8004552:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004554:	78fb      	ldrb	r3, [r7, #3]
 8004556:	b2db      	uxtb	r3, r3
 8004558:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800455c:	b2da      	uxtb	r2, r3
 800455e:	4b31      	ldr	r3, [pc, #196]	; (8004624 <xPortStartScheduler+0x130>)
 8004560:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004562:	4b31      	ldr	r3, [pc, #196]	; (8004628 <xPortStartScheduler+0x134>)
 8004564:	2207      	movs	r2, #7
 8004566:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004568:	e009      	b.n	800457e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800456a:	4b2f      	ldr	r3, [pc, #188]	; (8004628 <xPortStartScheduler+0x134>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	3b01      	subs	r3, #1
 8004570:	4a2d      	ldr	r2, [pc, #180]	; (8004628 <xPortStartScheduler+0x134>)
 8004572:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004574:	78fb      	ldrb	r3, [r7, #3]
 8004576:	b2db      	uxtb	r3, r3
 8004578:	005b      	lsls	r3, r3, #1
 800457a:	b2db      	uxtb	r3, r3
 800457c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800457e:	78fb      	ldrb	r3, [r7, #3]
 8004580:	b2db      	uxtb	r3, r3
 8004582:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004586:	2b80      	cmp	r3, #128	; 0x80
 8004588:	d0ef      	beq.n	800456a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800458a:	4b27      	ldr	r3, [pc, #156]	; (8004628 <xPortStartScheduler+0x134>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f1c3 0307 	rsb	r3, r3, #7
 8004592:	2b04      	cmp	r3, #4
 8004594:	d00a      	beq.n	80045ac <xPortStartScheduler+0xb8>
        __asm volatile
 8004596:	f04f 0350 	mov.w	r3, #80	; 0x50
 800459a:	f383 8811 	msr	BASEPRI, r3
 800459e:	f3bf 8f6f 	isb	sy
 80045a2:	f3bf 8f4f 	dsb	sy
 80045a6:	60bb      	str	r3, [r7, #8]
    }
 80045a8:	bf00      	nop
 80045aa:	e7fe      	b.n	80045aa <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80045ac:	4b1e      	ldr	r3, [pc, #120]	; (8004628 <xPortStartScheduler+0x134>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	021b      	lsls	r3, r3, #8
 80045b2:	4a1d      	ldr	r2, [pc, #116]	; (8004628 <xPortStartScheduler+0x134>)
 80045b4:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80045b6:	4b1c      	ldr	r3, [pc, #112]	; (8004628 <xPortStartScheduler+0x134>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80045be:	4a1a      	ldr	r2, [pc, #104]	; (8004628 <xPortStartScheduler+0x134>)
 80045c0:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	b2da      	uxtb	r2, r3
 80045c6:	697b      	ldr	r3, [r7, #20]
 80045c8:	701a      	strb	r2, [r3, #0]
        }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80045ca:	4b18      	ldr	r3, [pc, #96]	; (800462c <xPortStartScheduler+0x138>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4a17      	ldr	r2, [pc, #92]	; (800462c <xPortStartScheduler+0x138>)
 80045d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80045d4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80045d6:	4b15      	ldr	r3, [pc, #84]	; (800462c <xPortStartScheduler+0x138>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4a14      	ldr	r2, [pc, #80]	; (800462c <xPortStartScheduler+0x138>)
 80045dc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80045e0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80045e2:	f000 f8db 	bl	800479c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80045e6:	4b12      	ldr	r3, [pc, #72]	; (8004630 <xPortStartScheduler+0x13c>)
 80045e8:	2200      	movs	r2, #0
 80045ea:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80045ec:	f000 f8fa 	bl	80047e4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80045f0:	4b10      	ldr	r3, [pc, #64]	; (8004634 <xPortStartScheduler+0x140>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a0f      	ldr	r2, [pc, #60]	; (8004634 <xPortStartScheduler+0x140>)
 80045f6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80045fa:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80045fc:	f7ff ff64 	bl	80044c8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8004600:	f7ff f8f4 	bl	80037ec <vTaskSwitchContext>
    prvTaskExitError();
 8004604:	f7ff ff1e 	bl	8004444 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8004608:	2300      	movs	r3, #0
}
 800460a:	4618      	mov	r0, r3
 800460c:	3718      	adds	r7, #24
 800460e:	46bd      	mov	sp, r7
 8004610:	bd80      	pop	{r7, pc}
 8004612:	bf00      	nop
 8004614:	e000ed00 	.word	0xe000ed00
 8004618:	410fc271 	.word	0x410fc271
 800461c:	410fc270 	.word	0x410fc270
 8004620:	e000e400 	.word	0xe000e400
 8004624:	20000228 	.word	0x20000228
 8004628:	2000022c 	.word	0x2000022c
 800462c:	e000ed20 	.word	0xe000ed20
 8004630:	20000010 	.word	0x20000010
 8004634:	e000ef34 	.word	0xe000ef34

08004638 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004638:	b480      	push	{r7}
 800463a:	b083      	sub	sp, #12
 800463c:	af00      	add	r7, sp, #0
        __asm volatile
 800463e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004642:	f383 8811 	msr	BASEPRI, r3
 8004646:	f3bf 8f6f 	isb	sy
 800464a:	f3bf 8f4f 	dsb	sy
 800464e:	607b      	str	r3, [r7, #4]
    }
 8004650:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8004652:	4b0f      	ldr	r3, [pc, #60]	; (8004690 <vPortEnterCritical+0x58>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	3301      	adds	r3, #1
 8004658:	4a0d      	ldr	r2, [pc, #52]	; (8004690 <vPortEnterCritical+0x58>)
 800465a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 800465c:	4b0c      	ldr	r3, [pc, #48]	; (8004690 <vPortEnterCritical+0x58>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	2b01      	cmp	r3, #1
 8004662:	d10f      	bne.n	8004684 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004664:	4b0b      	ldr	r3, [pc, #44]	; (8004694 <vPortEnterCritical+0x5c>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	b2db      	uxtb	r3, r3
 800466a:	2b00      	cmp	r3, #0
 800466c:	d00a      	beq.n	8004684 <vPortEnterCritical+0x4c>
        __asm volatile
 800466e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004672:	f383 8811 	msr	BASEPRI, r3
 8004676:	f3bf 8f6f 	isb	sy
 800467a:	f3bf 8f4f 	dsb	sy
 800467e:	603b      	str	r3, [r7, #0]
    }
 8004680:	bf00      	nop
 8004682:	e7fe      	b.n	8004682 <vPortEnterCritical+0x4a>
    }
}
 8004684:	bf00      	nop
 8004686:	370c      	adds	r7, #12
 8004688:	46bd      	mov	sp, r7
 800468a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468e:	4770      	bx	lr
 8004690:	20000010 	.word	0x20000010
 8004694:	e000ed04 	.word	0xe000ed04

08004698 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004698:	b480      	push	{r7}
 800469a:	b083      	sub	sp, #12
 800469c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800469e:	4b12      	ldr	r3, [pc, #72]	; (80046e8 <vPortExitCritical+0x50>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d10a      	bne.n	80046bc <vPortExitCritical+0x24>
        __asm volatile
 80046a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046aa:	f383 8811 	msr	BASEPRI, r3
 80046ae:	f3bf 8f6f 	isb	sy
 80046b2:	f3bf 8f4f 	dsb	sy
 80046b6:	607b      	str	r3, [r7, #4]
    }
 80046b8:	bf00      	nop
 80046ba:	e7fe      	b.n	80046ba <vPortExitCritical+0x22>
    uxCriticalNesting--;
 80046bc:	4b0a      	ldr	r3, [pc, #40]	; (80046e8 <vPortExitCritical+0x50>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	3b01      	subs	r3, #1
 80046c2:	4a09      	ldr	r2, [pc, #36]	; (80046e8 <vPortExitCritical+0x50>)
 80046c4:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80046c6:	4b08      	ldr	r3, [pc, #32]	; (80046e8 <vPortExitCritical+0x50>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d105      	bne.n	80046da <vPortExitCritical+0x42>
 80046ce:	2300      	movs	r3, #0
 80046d0:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 80046d8:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80046da:	bf00      	nop
 80046dc:	370c      	adds	r7, #12
 80046de:	46bd      	mov	sp, r7
 80046e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e4:	4770      	bx	lr
 80046e6:	bf00      	nop
 80046e8:	20000010 	.word	0x20000010
 80046ec:	00000000 	.word	0x00000000

080046f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80046f0:	f3ef 8009 	mrs	r0, PSP
 80046f4:	f3bf 8f6f 	isb	sy
 80046f8:	4b15      	ldr	r3, [pc, #84]	; (8004750 <pxCurrentTCBConst>)
 80046fa:	681a      	ldr	r2, [r3, #0]
 80046fc:	f01e 0f10 	tst.w	lr, #16
 8004700:	bf08      	it	eq
 8004702:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004706:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800470a:	6010      	str	r0, [r2, #0]
 800470c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004710:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004714:	f380 8811 	msr	BASEPRI, r0
 8004718:	f3bf 8f4f 	dsb	sy
 800471c:	f3bf 8f6f 	isb	sy
 8004720:	f7ff f864 	bl	80037ec <vTaskSwitchContext>
 8004724:	f04f 0000 	mov.w	r0, #0
 8004728:	f380 8811 	msr	BASEPRI, r0
 800472c:	bc09      	pop	{r0, r3}
 800472e:	6819      	ldr	r1, [r3, #0]
 8004730:	6808      	ldr	r0, [r1, #0]
 8004732:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004736:	f01e 0f10 	tst.w	lr, #16
 800473a:	bf08      	it	eq
 800473c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004740:	f380 8809 	msr	PSP, r0
 8004744:	f3bf 8f6f 	isb	sy
 8004748:	4770      	bx	lr
 800474a:	bf00      	nop
 800474c:	f3af 8000 	nop.w

08004750 <pxCurrentTCBConst>:
 8004750:	200000e8 	.word	0x200000e8
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8004754:	bf00      	nop
 8004756:	bf00      	nop

08004758 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b082      	sub	sp, #8
 800475c:	af00      	add	r7, sp, #0
        __asm volatile
 800475e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004762:	f383 8811 	msr	BASEPRI, r3
 8004766:	f3bf 8f6f 	isb	sy
 800476a:	f3bf 8f4f 	dsb	sy
 800476e:	607b      	str	r3, [r7, #4]
    }
 8004770:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004772:	f7fe ff25 	bl	80035c0 <xTaskIncrementTick>
 8004776:	4603      	mov	r3, r0
 8004778:	2b00      	cmp	r3, #0
 800477a:	d003      	beq.n	8004784 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800477c:	4b06      	ldr	r3, [pc, #24]	; (8004798 <SysTick_Handler+0x40>)
 800477e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004782:	601a      	str	r2, [r3, #0]
 8004784:	2300      	movs	r3, #0
 8004786:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	f383 8811 	msr	BASEPRI, r3
    }
 800478e:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8004790:	bf00      	nop
 8004792:	3708      	adds	r7, #8
 8004794:	46bd      	mov	sp, r7
 8004796:	bd80      	pop	{r7, pc}
 8004798:	e000ed04 	.word	0xe000ed04

0800479c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800479c:	b480      	push	{r7}
 800479e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80047a0:	4b0b      	ldr	r3, [pc, #44]	; (80047d0 <vPortSetupTimerInterrupt+0x34>)
 80047a2:	2200      	movs	r2, #0
 80047a4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80047a6:	4b0b      	ldr	r3, [pc, #44]	; (80047d4 <vPortSetupTimerInterrupt+0x38>)
 80047a8:	2200      	movs	r2, #0
 80047aa:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80047ac:	4b0a      	ldr	r3, [pc, #40]	; (80047d8 <vPortSetupTimerInterrupt+0x3c>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a0a      	ldr	r2, [pc, #40]	; (80047dc <vPortSetupTimerInterrupt+0x40>)
 80047b2:	fba2 2303 	umull	r2, r3, r2, r3
 80047b6:	099b      	lsrs	r3, r3, #6
 80047b8:	4a09      	ldr	r2, [pc, #36]	; (80047e0 <vPortSetupTimerInterrupt+0x44>)
 80047ba:	3b01      	subs	r3, #1
 80047bc:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80047be:	4b04      	ldr	r3, [pc, #16]	; (80047d0 <vPortSetupTimerInterrupt+0x34>)
 80047c0:	2207      	movs	r2, #7
 80047c2:	601a      	str	r2, [r3, #0]
}
 80047c4:	bf00      	nop
 80047c6:	46bd      	mov	sp, r7
 80047c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047cc:	4770      	bx	lr
 80047ce:	bf00      	nop
 80047d0:	e000e010 	.word	0xe000e010
 80047d4:	e000e018 	.word	0xe000e018
 80047d8:	20000000 	.word	0x20000000
 80047dc:	10624dd3 	.word	0x10624dd3
 80047e0:	e000e014 	.word	0xe000e014

080047e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80047e4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80047f4 <vPortEnableVFP+0x10>
 80047e8:	6801      	ldr	r1, [r0, #0]
 80047ea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80047ee:	6001      	str	r1, [r0, #0]
 80047f0:	4770      	bx	lr
 80047f2:	0000      	.short	0x0000
 80047f4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 80047f8:	bf00      	nop
 80047fa:	bf00      	nop

080047fc <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b08a      	sub	sp, #40	; 0x28
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8004804:	2300      	movs	r3, #0
 8004806:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8004808:	f7fe fdc0 	bl	800338c <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800480c:	4b65      	ldr	r3, [pc, #404]	; (80049a4 <pvPortMalloc+0x1a8>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d101      	bne.n	8004818 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8004814:	f000 f934 	bl	8004a80 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004818:	4b63      	ldr	r3, [pc, #396]	; (80049a8 <pvPortMalloc+0x1ac>)
 800481a:	681a      	ldr	r2, [r3, #0]
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	4013      	ands	r3, r2
 8004820:	2b00      	cmp	r3, #0
 8004822:	f040 80a7 	bne.w	8004974 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) &&
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d02d      	beq.n	8004888 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 800482c:	2208      	movs	r2, #8
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) &&
 8004832:	687a      	ldr	r2, [r7, #4]
 8004834:	429a      	cmp	r2, r3
 8004836:	d227      	bcs.n	8004888 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8004838:	2208      	movs	r2, #8
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	4413      	add	r3, r2
 800483e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	f003 0307 	and.w	r3, r3, #7
 8004846:	2b00      	cmp	r3, #0
 8004848:	d021      	beq.n	800488e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) )
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	f023 0307 	bic.w	r3, r3, #7
 8004850:	3308      	adds	r3, #8
 8004852:	687a      	ldr	r2, [r7, #4]
 8004854:	429a      	cmp	r2, r3
 8004856:	d214      	bcs.n	8004882 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	f023 0307 	bic.w	r3, r3, #7
 800485e:	3308      	adds	r3, #8
 8004860:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	f003 0307 	and.w	r3, r3, #7
 8004868:	2b00      	cmp	r3, #0
 800486a:	d010      	beq.n	800488e <pvPortMalloc+0x92>
        __asm volatile
 800486c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004870:	f383 8811 	msr	BASEPRI, r3
 8004874:	f3bf 8f6f 	isb	sy
 8004878:	f3bf 8f4f 	dsb	sy
 800487c:	617b      	str	r3, [r7, #20]
    }
 800487e:	bf00      	nop
 8004880:	e7fe      	b.n	8004880 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8004882:	2300      	movs	r3, #0
 8004884:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004886:	e002      	b.n	800488e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else
            {
                xWantedSize = 0;
 8004888:	2300      	movs	r3, #0
 800488a:	607b      	str	r3, [r7, #4]
 800488c:	e000      	b.n	8004890 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800488e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d06e      	beq.n	8004974 <pvPortMalloc+0x178>
 8004896:	4b45      	ldr	r3, [pc, #276]	; (80049ac <pvPortMalloc+0x1b0>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	687a      	ldr	r2, [r7, #4]
 800489c:	429a      	cmp	r2, r3
 800489e:	d869      	bhi.n	8004974 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80048a0:	4b43      	ldr	r3, [pc, #268]	; (80049b0 <pvPortMalloc+0x1b4>)
 80048a2:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80048a4:	4b42      	ldr	r3, [pc, #264]	; (80049b0 <pvPortMalloc+0x1b4>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80048aa:	e004      	b.n	80048b6 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 80048ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ae:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80048b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80048b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048b8:	685b      	ldr	r3, [r3, #4]
 80048ba:	687a      	ldr	r2, [r7, #4]
 80048bc:	429a      	cmp	r2, r3
 80048be:	d903      	bls.n	80048c8 <pvPortMalloc+0xcc>
 80048c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d1f1      	bne.n	80048ac <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80048c8:	4b36      	ldr	r3, [pc, #216]	; (80049a4 <pvPortMalloc+0x1a8>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048ce:	429a      	cmp	r2, r3
 80048d0:	d050      	beq.n	8004974 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80048d2:	6a3b      	ldr	r3, [r7, #32]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	2208      	movs	r2, #8
 80048d8:	4413      	add	r3, r2
 80048da:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80048dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048de:	681a      	ldr	r2, [r3, #0]
 80048e0:	6a3b      	ldr	r3, [r7, #32]
 80048e2:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80048e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048e6:	685a      	ldr	r2, [r3, #4]
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	1ad2      	subs	r2, r2, r3
 80048ec:	2308      	movs	r3, #8
 80048ee:	005b      	lsls	r3, r3, #1
 80048f0:	429a      	cmp	r2, r3
 80048f2:	d91f      	bls.n	8004934 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80048f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	4413      	add	r3, r2
 80048fa:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80048fc:	69bb      	ldr	r3, [r7, #24]
 80048fe:	f003 0307 	and.w	r3, r3, #7
 8004902:	2b00      	cmp	r3, #0
 8004904:	d00a      	beq.n	800491c <pvPortMalloc+0x120>
        __asm volatile
 8004906:	f04f 0350 	mov.w	r3, #80	; 0x50
 800490a:	f383 8811 	msr	BASEPRI, r3
 800490e:	f3bf 8f6f 	isb	sy
 8004912:	f3bf 8f4f 	dsb	sy
 8004916:	613b      	str	r3, [r7, #16]
    }
 8004918:	bf00      	nop
 800491a:	e7fe      	b.n	800491a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800491c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800491e:	685a      	ldr	r2, [r3, #4]
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	1ad2      	subs	r2, r2, r3
 8004924:	69bb      	ldr	r3, [r7, #24]
 8004926:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8004928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800492a:	687a      	ldr	r2, [r7, #4]
 800492c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800492e:	69b8      	ldr	r0, [r7, #24]
 8004930:	f000 f908 	bl	8004b44 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004934:	4b1d      	ldr	r3, [pc, #116]	; (80049ac <pvPortMalloc+0x1b0>)
 8004936:	681a      	ldr	r2, [r3, #0]
 8004938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	1ad3      	subs	r3, r2, r3
 800493e:	4a1b      	ldr	r2, [pc, #108]	; (80049ac <pvPortMalloc+0x1b0>)
 8004940:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004942:	4b1a      	ldr	r3, [pc, #104]	; (80049ac <pvPortMalloc+0x1b0>)
 8004944:	681a      	ldr	r2, [r3, #0]
 8004946:	4b1b      	ldr	r3, [pc, #108]	; (80049b4 <pvPortMalloc+0x1b8>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	429a      	cmp	r2, r3
 800494c:	d203      	bcs.n	8004956 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800494e:	4b17      	ldr	r3, [pc, #92]	; (80049ac <pvPortMalloc+0x1b0>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4a18      	ldr	r2, [pc, #96]	; (80049b4 <pvPortMalloc+0x1b8>)
 8004954:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004958:	685a      	ldr	r2, [r3, #4]
 800495a:	4b13      	ldr	r3, [pc, #76]	; (80049a8 <pvPortMalloc+0x1ac>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	431a      	orrs	r2, r3
 8004960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004962:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8004964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004966:	2200      	movs	r2, #0
 8004968:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800496a:	4b13      	ldr	r3, [pc, #76]	; (80049b8 <pvPortMalloc+0x1bc>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	3301      	adds	r3, #1
 8004970:	4a11      	ldr	r2, [pc, #68]	; (80049b8 <pvPortMalloc+0x1bc>)
 8004972:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8004974:	f7fe fd18 	bl	80033a8 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004978:	69fb      	ldr	r3, [r7, #28]
 800497a:	f003 0307 	and.w	r3, r3, #7
 800497e:	2b00      	cmp	r3, #0
 8004980:	d00a      	beq.n	8004998 <pvPortMalloc+0x19c>
        __asm volatile
 8004982:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004986:	f383 8811 	msr	BASEPRI, r3
 800498a:	f3bf 8f6f 	isb	sy
 800498e:	f3bf 8f4f 	dsb	sy
 8004992:	60fb      	str	r3, [r7, #12]
    }
 8004994:	bf00      	nop
 8004996:	e7fe      	b.n	8004996 <pvPortMalloc+0x19a>
    return pvReturn;
 8004998:	69fb      	ldr	r3, [r7, #28]
}
 800499a:	4618      	mov	r0, r3
 800499c:	3728      	adds	r7, #40	; 0x28
 800499e:	46bd      	mov	sp, r7
 80049a0:	bd80      	pop	{r7, pc}
 80049a2:	bf00      	nop
 80049a4:	20012e38 	.word	0x20012e38
 80049a8:	20012e4c 	.word	0x20012e4c
 80049ac:	20012e3c 	.word	0x20012e3c
 80049b0:	20012e30 	.word	0x20012e30
 80049b4:	20012e40 	.word	0x20012e40
 80049b8:	20012e44 	.word	0x20012e44

080049bc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b086      	sub	sp, #24
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d04d      	beq.n	8004a6a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80049ce:	2308      	movs	r3, #8
 80049d0:	425b      	negs	r3, r3
 80049d2:	697a      	ldr	r2, [r7, #20]
 80049d4:	4413      	add	r3, r2
 80049d6:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80049d8:	697b      	ldr	r3, [r7, #20]
 80049da:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80049dc:	693b      	ldr	r3, [r7, #16]
 80049de:	685a      	ldr	r2, [r3, #4]
 80049e0:	4b24      	ldr	r3, [pc, #144]	; (8004a74 <vPortFree+0xb8>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4013      	ands	r3, r2
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d10a      	bne.n	8004a00 <vPortFree+0x44>
        __asm volatile
 80049ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049ee:	f383 8811 	msr	BASEPRI, r3
 80049f2:	f3bf 8f6f 	isb	sy
 80049f6:	f3bf 8f4f 	dsb	sy
 80049fa:	60fb      	str	r3, [r7, #12]
    }
 80049fc:	bf00      	nop
 80049fe:	e7fe      	b.n	80049fe <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004a00:	693b      	ldr	r3, [r7, #16]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d00a      	beq.n	8004a1e <vPortFree+0x62>
        __asm volatile
 8004a08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a0c:	f383 8811 	msr	BASEPRI, r3
 8004a10:	f3bf 8f6f 	isb	sy
 8004a14:	f3bf 8f4f 	dsb	sy
 8004a18:	60bb      	str	r3, [r7, #8]
    }
 8004a1a:	bf00      	nop
 8004a1c:	e7fe      	b.n	8004a1c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004a1e:	693b      	ldr	r3, [r7, #16]
 8004a20:	685a      	ldr	r2, [r3, #4]
 8004a22:	4b14      	ldr	r3, [pc, #80]	; (8004a74 <vPortFree+0xb8>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4013      	ands	r3, r2
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d01e      	beq.n	8004a6a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8004a2c:	693b      	ldr	r3, [r7, #16]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d11a      	bne.n	8004a6a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004a34:	693b      	ldr	r3, [r7, #16]
 8004a36:	685a      	ldr	r2, [r3, #4]
 8004a38:	4b0e      	ldr	r3, [pc, #56]	; (8004a74 <vPortFree+0xb8>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	43db      	mvns	r3, r3
 8004a3e:	401a      	ands	r2, r3
 8004a40:	693b      	ldr	r3, [r7, #16]
 8004a42:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8004a44:	f7fe fca2 	bl	800338c <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8004a48:	693b      	ldr	r3, [r7, #16]
 8004a4a:	685a      	ldr	r2, [r3, #4]
 8004a4c:	4b0a      	ldr	r3, [pc, #40]	; (8004a78 <vPortFree+0xbc>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4413      	add	r3, r2
 8004a52:	4a09      	ldr	r2, [pc, #36]	; (8004a78 <vPortFree+0xbc>)
 8004a54:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004a56:	6938      	ldr	r0, [r7, #16]
 8004a58:	f000 f874 	bl	8004b44 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8004a5c:	4b07      	ldr	r3, [pc, #28]	; (8004a7c <vPortFree+0xc0>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	3301      	adds	r3, #1
 8004a62:	4a06      	ldr	r2, [pc, #24]	; (8004a7c <vPortFree+0xc0>)
 8004a64:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8004a66:	f7fe fc9f 	bl	80033a8 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8004a6a:	bf00      	nop
 8004a6c:	3718      	adds	r7, #24
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	bd80      	pop	{r7, pc}
 8004a72:	bf00      	nop
 8004a74:	20012e4c 	.word	0x20012e4c
 8004a78:	20012e3c 	.word	0x20012e3c
 8004a7c:	20012e48 	.word	0x20012e48

08004a80 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8004a80:	b480      	push	{r7}
 8004a82:	b085      	sub	sp, #20
 8004a84:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004a86:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8004a8a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8004a8c:	4b27      	ldr	r3, [pc, #156]	; (8004b2c <prvHeapInit+0xac>)
 8004a8e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	f003 0307 	and.w	r3, r3, #7
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d00c      	beq.n	8004ab4 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	3307      	adds	r3, #7
 8004a9e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	f023 0307 	bic.w	r3, r3, #7
 8004aa6:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004aa8:	68ba      	ldr	r2, [r7, #8]
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	1ad3      	subs	r3, r2, r3
 8004aae:	4a1f      	ldr	r2, [pc, #124]	; (8004b2c <prvHeapInit+0xac>)
 8004ab0:	4413      	add	r3, r2
 8004ab2:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004ab8:	4a1d      	ldr	r2, [pc, #116]	; (8004b30 <prvHeapInit+0xb0>)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8004abe:	4b1c      	ldr	r3, [pc, #112]	; (8004b30 <prvHeapInit+0xb0>)
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	68ba      	ldr	r2, [r7, #8]
 8004ac8:	4413      	add	r3, r2
 8004aca:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8004acc:	2208      	movs	r2, #8
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	1a9b      	subs	r3, r3, r2
 8004ad2:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	f023 0307 	bic.w	r3, r3, #7
 8004ada:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	4a15      	ldr	r2, [pc, #84]	; (8004b34 <prvHeapInit+0xb4>)
 8004ae0:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8004ae2:	4b14      	ldr	r3, [pc, #80]	; (8004b34 <prvHeapInit+0xb4>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8004aea:	4b12      	ldr	r3, [pc, #72]	; (8004b34 <prvHeapInit+0xb4>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	2200      	movs	r2, #0
 8004af0:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	68fa      	ldr	r2, [r7, #12]
 8004afa:	1ad2      	subs	r2, r2, r3
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004b00:	4b0c      	ldr	r3, [pc, #48]	; (8004b34 <prvHeapInit+0xb4>)
 8004b02:	681a      	ldr	r2, [r3, #0]
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	685b      	ldr	r3, [r3, #4]
 8004b0c:	4a0a      	ldr	r2, [pc, #40]	; (8004b38 <prvHeapInit+0xb8>)
 8004b0e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	4a09      	ldr	r2, [pc, #36]	; (8004b3c <prvHeapInit+0xbc>)
 8004b16:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004b18:	4b09      	ldr	r3, [pc, #36]	; (8004b40 <prvHeapInit+0xc0>)
 8004b1a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004b1e:	601a      	str	r2, [r3, #0]
}
 8004b20:	bf00      	nop
 8004b22:	3714      	adds	r7, #20
 8004b24:	46bd      	mov	sp, r7
 8004b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2a:	4770      	bx	lr
 8004b2c:	20000230 	.word	0x20000230
 8004b30:	20012e30 	.word	0x20012e30
 8004b34:	20012e38 	.word	0x20012e38
 8004b38:	20012e40 	.word	0x20012e40
 8004b3c:	20012e3c 	.word	0x20012e3c
 8004b40:	20012e4c 	.word	0x20012e4c

08004b44 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8004b44:	b480      	push	{r7}
 8004b46:	b085      	sub	sp, #20
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004b4c:	4b28      	ldr	r3, [pc, #160]	; (8004bf0 <prvInsertBlockIntoFreeList+0xac>)
 8004b4e:	60fb      	str	r3, [r7, #12]
 8004b50:	e002      	b.n	8004b58 <prvInsertBlockIntoFreeList+0x14>
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	60fb      	str	r3, [r7, #12]
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	687a      	ldr	r2, [r7, #4]
 8004b5e:	429a      	cmp	r2, r3
 8004b60:	d8f7      	bhi.n	8004b52 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	685b      	ldr	r3, [r3, #4]
 8004b6a:	68ba      	ldr	r2, [r7, #8]
 8004b6c:	4413      	add	r3, r2
 8004b6e:	687a      	ldr	r2, [r7, #4]
 8004b70:	429a      	cmp	r2, r3
 8004b72:	d108      	bne.n	8004b86 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	685a      	ldr	r2, [r3, #4]
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	685b      	ldr	r3, [r3, #4]
 8004b7c:	441a      	add	r2, r3
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	685b      	ldr	r3, [r3, #4]
 8004b8e:	68ba      	ldr	r2, [r7, #8]
 8004b90:	441a      	add	r2, r3
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	429a      	cmp	r2, r3
 8004b98:	d118      	bne.n	8004bcc <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681a      	ldr	r2, [r3, #0]
 8004b9e:	4b15      	ldr	r3, [pc, #84]	; (8004bf4 <prvInsertBlockIntoFreeList+0xb0>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	429a      	cmp	r2, r3
 8004ba4:	d00d      	beq.n	8004bc2 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	685a      	ldr	r2, [r3, #4]
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	685b      	ldr	r3, [r3, #4]
 8004bb0:	441a      	add	r2, r3
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	681a      	ldr	r2, [r3, #0]
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	601a      	str	r2, [r3, #0]
 8004bc0:	e008      	b.n	8004bd4 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004bc2:	4b0c      	ldr	r3, [pc, #48]	; (8004bf4 <prvInsertBlockIntoFreeList+0xb0>)
 8004bc4:	681a      	ldr	r2, [r3, #0]
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	601a      	str	r2, [r3, #0]
 8004bca:	e003      	b.n	8004bd4 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681a      	ldr	r2, [r3, #0]
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8004bd4:	68fa      	ldr	r2, [r7, #12]
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	429a      	cmp	r2, r3
 8004bda:	d002      	beq.n	8004be2 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	687a      	ldr	r2, [r7, #4]
 8004be0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004be2:	bf00      	nop
 8004be4:	3714      	adds	r7, #20
 8004be6:	46bd      	mov	sp, r7
 8004be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bec:	4770      	bx	lr
 8004bee:	bf00      	nop
 8004bf0:	20012e30 	.word	0x20012e30
 8004bf4:	20012e38 	.word	0x20012e38

08004bf8 <Lamp_pushSwitch>:
#endif
/*.$endskip${QP_VERSION} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^*/
/*.$define${LampSM} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv*/
/*.${LampSM::Lamp} .........................................................*/
/*.${LampSM::Lamp::pushSwitch} .............................................*/
void Lamp_pushSwitch(Lamp * const me) {
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b084      	sub	sp, #16
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
    QEvt e;
    e.sig = (QSignal)SOFT_CLICK_SIG;
 8004c00:	2304      	movs	r3, #4
 8004c02:	81bb      	strh	r3, [r7, #12]
    QHSM_DISPATCH(&me->super, &e, 0 );
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	685b      	ldr	r3, [r3, #4]
 8004c0a:	6878      	ldr	r0, [r7, #4]
 8004c0c:	f107 010c 	add.w	r1, r7, #12
 8004c10:	2200      	movs	r2, #0
 8004c12:	4798      	blx	r3
}
 8004c14:	bf00      	nop
 8004c16:	3710      	adds	r7, #16
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	bd80      	pop	{r7, pc}

08004c1c <Lamp_ctor>:

/*.${LampSM::Lamp::ctor} ...................................................*/
void Lamp_ctor(Lamp * const me) {
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b082      	sub	sp, #8
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
    QHsm_ctor(&me->super, Q_STATE_CAST(&Lamp_initial));
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	4904      	ldr	r1, [pc, #16]	; (8004c38 <Lamp_ctor+0x1c>)
 8004c28:	4618      	mov	r0, r3
 8004c2a:	f000 f93b 	bl	8004ea4 <QHsm_ctor>
}
 8004c2e:	bf00      	nop
 8004c30:	3708      	adds	r7, #8
 8004c32:	46bd      	mov	sp, r7
 8004c34:	bd80      	pop	{r7, pc}
 8004c36:	bf00      	nop
 8004c38:	08004c85 	.word	0x08004c85

08004c3c <Lamp_holdSwitch>:

/*.${LampSM::Lamp::holdSwitch} .............................................*/
void Lamp_holdSwitch(Lamp * const me) {
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b084      	sub	sp, #16
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
    QEvt e;
    e.sig = (QSignal)HARD_CLICK_SIG;
 8004c44:	2305      	movs	r3, #5
 8004c46:	81bb      	strh	r3, [r7, #12]
    QHSM_DISPATCH(&me->super, &e, 0 );
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	685b      	ldr	r3, [r3, #4]
 8004c4e:	6878      	ldr	r0, [r7, #4]
 8004c50:	f107 010c 	add.w	r1, r7, #12
 8004c54:	2200      	movs	r2, #0
 8004c56:	4798      	blx	r3
}
 8004c58:	bf00      	nop
 8004c5a:	3710      	adds	r7, #16
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	bd80      	pop	{r7, pc}

08004c60 <Lamp_blink>:

/*.${LampSM::Lamp::blink} ..................................................*/
void Lamp_blink(Lamp * const me) {
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b084      	sub	sp, #16
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
        QEvt e;
        e.sig = (QSignal)BLINK_SIG;
 8004c68:	2306      	movs	r3, #6
 8004c6a:	81bb      	strh	r3, [r7, #12]
        QHSM_DISPATCH(&me->super, &e, 0 );
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	685b      	ldr	r3, [r3, #4]
 8004c72:	6878      	ldr	r0, [r7, #4]
 8004c74:	f107 010c 	add.w	r1, r7, #12
 8004c78:	2200      	movs	r2, #0
 8004c7a:	4798      	blx	r3
}
 8004c7c:	bf00      	nop
 8004c7e:	3710      	adds	r7, #16
 8004c80:	46bd      	mov	sp, r7
 8004c82:	bd80      	pop	{r7, pc}

08004c84 <Lamp_initial>:

/*.${LampSM::Lamp::SM} .....................................................*/
QState Lamp_initial(Lamp * const me, void const * const par) {
 8004c84:	b480      	push	{r7}
 8004c86:	b083      	sub	sp, #12
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
 8004c8c:	6039      	str	r1, [r7, #0]
    /*.${LampSM::Lamp::SM::initial} */
    /* state history attributes */
    me->hist_LED_RED = Q_STATE_CAST(&Lamp_RED_BLINK);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	4a07      	ldr	r2, [pc, #28]	; (8004cb0 <Lamp_initial+0x2c>)
 8004c92:	611a      	str	r2, [r3, #16]
    me->hist_LED_GREEN = Q_STATE_CAST(&Lamp_GREEN_BLINK);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	4a07      	ldr	r2, [pc, #28]	; (8004cb4 <Lamp_initial+0x30>)
 8004c98:	615a      	str	r2, [r3, #20]
    return Q_TRAN(&Lamp_LED_RED);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	4a06      	ldr	r2, [pc, #24]	; (8004cb8 <Lamp_initial+0x34>)
 8004c9e:	609a      	str	r2, [r3, #8]
 8004ca0:	2308      	movs	r3, #8
}
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	370c      	adds	r7, #12
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cac:	4770      	bx	lr
 8004cae:	bf00      	nop
 8004cb0:	08004d45 	.word	0x08004d45
 8004cb4:	08004e2d 	.word	0x08004e2d
 8004cb8:	08004cbd 	.word	0x08004cbd

08004cbc <Lamp_LED_RED>:
/*.${LampSM::Lamp::SM::LED_RED} ............................................*/
QState Lamp_LED_RED(Lamp * const me, QEvt const * const e) {
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b084      	sub	sp, #16
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
 8004cc4:	6039      	str	r1, [r7, #0]
    QState status_;
    switch (e->sig) {
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	881b      	ldrh	r3, [r3, #0]
 8004cca:	3b01      	subs	r3, #1
 8004ccc:	2b04      	cmp	r3, #4
 8004cce:	d82a      	bhi.n	8004d26 <Lamp_LED_RED+0x6a>
 8004cd0:	a201      	add	r2, pc, #4	; (adr r2, 8004cd8 <Lamp_LED_RED+0x1c>)
 8004cd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cd6:	bf00      	nop
 8004cd8:	08004ced 	.word	0x08004ced
 8004cdc:	08004cf7 	.word	0x08004cf7
 8004ce0:	08004d27 	.word	0x08004d27
 8004ce4:	08004d0d 	.word	0x08004d0d
 8004ce8:	08004d1b 	.word	0x08004d1b
        /*.${LampSM::Lamp::SM::LED_RED} */
        case Q_ENTRY_SIG: {
            APP_RED_LED_ON();
 8004cec:	f7fb fc64 	bl	80005b8 <APP_RED_LED_ON>
            status_ = Q_HANDLED();
 8004cf0:	2303      	movs	r3, #3
 8004cf2:	73fb      	strb	r3, [r7, #15]
            break;
 8004cf4:	e01d      	b.n	8004d32 <Lamp_LED_RED+0x76>
        }
        /*.${LampSM::Lamp::SM::LED_RED} */
        case Q_EXIT_SIG: {
            APP_RED_LED_OFF();
 8004cf6:	f7fb fc7b 	bl	80005f0 <APP_RED_LED_OFF>
            /* save deep history */
            me->hist_LED_RED = QHsm_state(Q_HSM_UPCAST(me));
 8004cfa:	6878      	ldr	r0, [r7, #4]
 8004cfc:	f000 f8c6 	bl	8004e8c <QHsm_state>
 8004d00:	4602      	mov	r2, r0
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	611a      	str	r2, [r3, #16]
            status_ = Q_HANDLED();
 8004d06:	2303      	movs	r3, #3
 8004d08:	73fb      	strb	r3, [r7, #15]
            break;
 8004d0a:	e012      	b.n	8004d32 <Lamp_LED_RED+0x76>
        }
        /*.${LampSM::Lamp::SM::LED_RED::SOFT_CLICK} */
        case SOFT_CLICK_SIG: {
            status_ = Q_TRAN_HIST(me->hist_LED_GREEN);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	695a      	ldr	r2, [r3, #20]
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	609a      	str	r2, [r3, #8]
 8004d14:	230b      	movs	r3, #11
 8004d16:	73fb      	strb	r3, [r7, #15]
            break;
 8004d18:	e00b      	b.n	8004d32 <Lamp_LED_RED+0x76>
        }
        /*.${LampSM::Lamp::SM::LED_RED::HARD_CLICK} */
        case HARD_CLICK_SIG: {
            status_ = Q_TRAN(&Lamp_RED_BLINK);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	4a07      	ldr	r2, [pc, #28]	; (8004d3c <Lamp_LED_RED+0x80>)
 8004d1e:	609a      	str	r2, [r3, #8]
 8004d20:	2308      	movs	r3, #8
 8004d22:	73fb      	strb	r3, [r7, #15]
            break;
 8004d24:	e005      	b.n	8004d32 <Lamp_LED_RED+0x76>
        }
        default: {
            status_ = Q_SUPER(&QHsm_top);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	4a05      	ldr	r2, [pc, #20]	; (8004d40 <Lamp_LED_RED+0x84>)
 8004d2a:	609a      	str	r2, [r3, #8]
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	73fb      	strb	r3, [r7, #15]
            break;
 8004d30:	bf00      	nop
        }
    }
    return status_;
 8004d32:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d34:	4618      	mov	r0, r3
 8004d36:	3710      	adds	r7, #16
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	bd80      	pop	{r7, pc}
 8004d3c:	08004d45 	.word	0x08004d45
 8004d40:	08004ed5 	.word	0x08004ed5

08004d44 <Lamp_RED_BLINK>:
/*.${LampSM::Lamp::SM::LED_RED::RED_BLINK} .................................*/
QState Lamp_RED_BLINK(Lamp * const me, QEvt const * const e) {
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b084      	sub	sp, #16
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
 8004d4c:	6039      	str	r1, [r7, #0]
    QState status_;
    switch (e->sig) {
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	881b      	ldrh	r3, [r3, #0]
 8004d52:	2b06      	cmp	r3, #6
 8004d54:	d013      	beq.n	8004d7e <Lamp_RED_BLINK+0x3a>
 8004d56:	2b06      	cmp	r3, #6
 8004d58:	dc16      	bgt.n	8004d88 <Lamp_RED_BLINK+0x44>
 8004d5a:	2b04      	cmp	r3, #4
 8004d5c:	d002      	beq.n	8004d64 <Lamp_RED_BLINK+0x20>
 8004d5e:	2b05      	cmp	r3, #5
 8004d60:	d007      	beq.n	8004d72 <Lamp_RED_BLINK+0x2e>
 8004d62:	e011      	b.n	8004d88 <Lamp_RED_BLINK+0x44>
        /*.${LampSM::Lamp::SM::LED_RED::RED_BLINK::SOFT_CLICK} */
        case SOFT_CLICK_SIG: {
            status_ = Q_TRAN_HIST(me->hist_LED_GREEN);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	695a      	ldr	r2, [r3, #20]
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	609a      	str	r2, [r3, #8]
 8004d6c:	230b      	movs	r3, #11
 8004d6e:	73fb      	strb	r3, [r7, #15]
            break;
 8004d70:	e010      	b.n	8004d94 <Lamp_RED_BLINK+0x50>
        }
        /*.${LampSM::Lamp::SM::LED_RED::RED_BLINK::HARD_CLICK} */
        case HARD_CLICK_SIG: {
            status_ = Q_TRAN(&Lamp_LED_RED);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	4a0a      	ldr	r2, [pc, #40]	; (8004da0 <Lamp_RED_BLINK+0x5c>)
 8004d76:	609a      	str	r2, [r3, #8]
 8004d78:	2308      	movs	r3, #8
 8004d7a:	73fb      	strb	r3, [r7, #15]
            break;
 8004d7c:	e00a      	b.n	8004d94 <Lamp_RED_BLINK+0x50>
        }
        /*.${LampSM::Lamp::SM::LED_RED::RED_BLINK::BLINK} */
        case BLINK_SIG: {
            APP_RED_LED_BLINK();
 8004d7e:	f7fb fc53 	bl	8000628 <APP_RED_LED_BLINK>
            status_ = Q_HANDLED();
 8004d82:	2303      	movs	r3, #3
 8004d84:	73fb      	strb	r3, [r7, #15]
            break;
 8004d86:	e005      	b.n	8004d94 <Lamp_RED_BLINK+0x50>
        }
        default: {
            status_ = Q_SUPER(&Lamp_LED_RED);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	4a05      	ldr	r2, [pc, #20]	; (8004da0 <Lamp_RED_BLINK+0x5c>)
 8004d8c:	609a      	str	r2, [r3, #8]
 8004d8e:	2300      	movs	r3, #0
 8004d90:	73fb      	strb	r3, [r7, #15]
            break;
 8004d92:	bf00      	nop
        }
    }
    return status_;
 8004d94:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d96:	4618      	mov	r0, r3
 8004d98:	3710      	adds	r7, #16
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	bd80      	pop	{r7, pc}
 8004d9e:	bf00      	nop
 8004da0:	08004cbd 	.word	0x08004cbd

08004da4 <Lamp_LED_GREEN>:
/*.${LampSM::Lamp::SM::LED_GREEN} ..........................................*/
QState Lamp_LED_GREEN(Lamp * const me, QEvt const * const e) {
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b084      	sub	sp, #16
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
 8004dac:	6039      	str	r1, [r7, #0]
    QState status_;
    switch (e->sig) {
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	881b      	ldrh	r3, [r3, #0]
 8004db2:	3b01      	subs	r3, #1
 8004db4:	2b04      	cmp	r3, #4
 8004db6:	d82a      	bhi.n	8004e0e <Lamp_LED_GREEN+0x6a>
 8004db8:	a201      	add	r2, pc, #4	; (adr r2, 8004dc0 <Lamp_LED_GREEN+0x1c>)
 8004dba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dbe:	bf00      	nop
 8004dc0:	08004dd5 	.word	0x08004dd5
 8004dc4:	08004ddf 	.word	0x08004ddf
 8004dc8:	08004e0f 	.word	0x08004e0f
 8004dcc:	08004df5 	.word	0x08004df5
 8004dd0:	08004e03 	.word	0x08004e03
        /*.${LampSM::Lamp::SM::LED_GREEN} */
        case Q_ENTRY_SIG: {
            APP_GREEN_LED_ON();
 8004dd4:	f7fb fb96 	bl	8000504 <APP_GREEN_LED_ON>
            status_ = Q_HANDLED();
 8004dd8:	2303      	movs	r3, #3
 8004dda:	73fb      	strb	r3, [r7, #15]
            break;
 8004ddc:	e01d      	b.n	8004e1a <Lamp_LED_GREEN+0x76>
        }
        /*.${LampSM::Lamp::SM::LED_GREEN} */
        case Q_EXIT_SIG: {
            APP_GREEN_LED_OFF();
 8004dde:	f7fb fbb1 	bl	8000544 <APP_GREEN_LED_OFF>
            /* save deep history */
            me->hist_LED_GREEN = QHsm_state(Q_HSM_UPCAST(me));
 8004de2:	6878      	ldr	r0, [r7, #4]
 8004de4:	f000 f852 	bl	8004e8c <QHsm_state>
 8004de8:	4602      	mov	r2, r0
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	615a      	str	r2, [r3, #20]
            status_ = Q_HANDLED();
 8004dee:	2303      	movs	r3, #3
 8004df0:	73fb      	strb	r3, [r7, #15]
            break;
 8004df2:	e012      	b.n	8004e1a <Lamp_LED_GREEN+0x76>
        }
        /*.${LampSM::Lamp::SM::LED_GREEN::SOFT_CLICK} */
        case SOFT_CLICK_SIG: {
            status_ = Q_TRAN_HIST(me->hist_LED_RED);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	691a      	ldr	r2, [r3, #16]
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	609a      	str	r2, [r3, #8]
 8004dfc:	230b      	movs	r3, #11
 8004dfe:	73fb      	strb	r3, [r7, #15]
            break;
 8004e00:	e00b      	b.n	8004e1a <Lamp_LED_GREEN+0x76>
        }
        /*.${LampSM::Lamp::SM::LED_GREEN::HARD_CLICK} */
        case HARD_CLICK_SIG: {
            status_ = Q_TRAN(&Lamp_GREEN_BLINK);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	4a07      	ldr	r2, [pc, #28]	; (8004e24 <Lamp_LED_GREEN+0x80>)
 8004e06:	609a      	str	r2, [r3, #8]
 8004e08:	2308      	movs	r3, #8
 8004e0a:	73fb      	strb	r3, [r7, #15]
            break;
 8004e0c:	e005      	b.n	8004e1a <Lamp_LED_GREEN+0x76>
        }
        default: {
            status_ = Q_SUPER(&QHsm_top);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	4a05      	ldr	r2, [pc, #20]	; (8004e28 <Lamp_LED_GREEN+0x84>)
 8004e12:	609a      	str	r2, [r3, #8]
 8004e14:	2300      	movs	r3, #0
 8004e16:	73fb      	strb	r3, [r7, #15]
            break;
 8004e18:	bf00      	nop
        }
    }
    return status_;
 8004e1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	3710      	adds	r7, #16
 8004e20:	46bd      	mov	sp, r7
 8004e22:	bd80      	pop	{r7, pc}
 8004e24:	08004e2d 	.word	0x08004e2d
 8004e28:	08004ed5 	.word	0x08004ed5

08004e2c <Lamp_GREEN_BLINK>:
/*.${LampSM::Lamp::SM::LED_GREEN::GREEN_BLINK} .............................*/
QState Lamp_GREEN_BLINK(Lamp * const me, QEvt const * const e) {
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b084      	sub	sp, #16
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
 8004e34:	6039      	str	r1, [r7, #0]
    QState status_;
    switch (e->sig) {
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	881b      	ldrh	r3, [r3, #0]
 8004e3a:	2b06      	cmp	r3, #6
 8004e3c:	d006      	beq.n	8004e4c <Lamp_GREEN_BLINK+0x20>
 8004e3e:	2b06      	cmp	r3, #6
 8004e40:	dc16      	bgt.n	8004e70 <Lamp_GREEN_BLINK+0x44>
 8004e42:	2b04      	cmp	r3, #4
 8004e44:	d00d      	beq.n	8004e62 <Lamp_GREEN_BLINK+0x36>
 8004e46:	2b05      	cmp	r3, #5
 8004e48:	d005      	beq.n	8004e56 <Lamp_GREEN_BLINK+0x2a>
 8004e4a:	e011      	b.n	8004e70 <Lamp_GREEN_BLINK+0x44>
        /*.${LampSM::Lamp::SM::LED_GREEN::GREEN_BLINK::BLINK} */
        case BLINK_SIG: {
            APP_GREEN_LED_BLINK();
 8004e4c:	f7fb fb96 	bl	800057c <APP_GREEN_LED_BLINK>
            status_ = Q_HANDLED();
 8004e50:	2303      	movs	r3, #3
 8004e52:	73fb      	strb	r3, [r7, #15]
            break;
 8004e54:	e012      	b.n	8004e7c <Lamp_GREEN_BLINK+0x50>
        }
        /*.${LampSM::Lamp::SM::LED_GREEN::GREEN_BLINK::HARD_CLICK} */
        case HARD_CLICK_SIG: {
            status_ = Q_TRAN(&Lamp_LED_GREEN);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	4a0b      	ldr	r2, [pc, #44]	; (8004e88 <Lamp_GREEN_BLINK+0x5c>)
 8004e5a:	609a      	str	r2, [r3, #8]
 8004e5c:	2308      	movs	r3, #8
 8004e5e:	73fb      	strb	r3, [r7, #15]
            break;
 8004e60:	e00c      	b.n	8004e7c <Lamp_GREEN_BLINK+0x50>
        }
        /*.${LampSM::Lamp::SM::LED_GREEN::GREEN_BLINK::SOFT_CLICK} */
        case SOFT_CLICK_SIG: {
            status_ = Q_TRAN_HIST(me->hist_LED_RED);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	691a      	ldr	r2, [r3, #16]
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	609a      	str	r2, [r3, #8]
 8004e6a:	230b      	movs	r3, #11
 8004e6c:	73fb      	strb	r3, [r7, #15]
            break;
 8004e6e:	e005      	b.n	8004e7c <Lamp_GREEN_BLINK+0x50>
        }
        default: {
            status_ = Q_SUPER(&Lamp_LED_GREEN);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	4a05      	ldr	r2, [pc, #20]	; (8004e88 <Lamp_GREEN_BLINK+0x5c>)
 8004e74:	609a      	str	r2, [r3, #8]
 8004e76:	2300      	movs	r3, #0
 8004e78:	73fb      	strb	r3, [r7, #15]
            break;
 8004e7a:	bf00      	nop
        }
    }
    return status_;
 8004e7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e7e:	4618      	mov	r0, r3
 8004e80:	3710      	adds	r7, #16
 8004e82:	46bd      	mov	sp, r7
 8004e84:	bd80      	pop	{r7, pc}
 8004e86:	bf00      	nop
 8004e88:	08004da5 	.word	0x08004da5

08004e8c <QHsm_state>:

    return inState; /* return the status */
}

/*${QEP::QHsm::state} ......................................................*/
QStateHandler QHsm_state(QHsm * const me) {
 8004e8c:	b480      	push	{r7}
 8004e8e:	b083      	sub	sp, #12
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
    return Q_STATE_CAST(me->state.fun);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	685b      	ldr	r3, [r3, #4]
}
 8004e98:	4618      	mov	r0, r3
 8004e9a:	370c      	adds	r7, #12
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea2:	4770      	bx	lr

08004ea4 <QHsm_ctor>:
}

/*${QEP::QHsm::ctor} .......................................................*/
void QHsm_ctor(QHsm * const me,
    QStateHandler initial)
{
 8004ea4:	b480      	push	{r7}
 8004ea6:	b083      	sub	sp, #12
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
 8004eac:	6039      	str	r1, [r7, #0]
        &QHsm_dispatch_
    #ifdef Q_SPY
        ,&QHsm_getStateHandler_
    #endif
    };
    me->vptr      = &vtable;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	4a06      	ldr	r2, [pc, #24]	; (8004ecc <QHsm_ctor+0x28>)
 8004eb2:	601a      	str	r2, [r3, #0]
    me->state.fun = Q_STATE_CAST(&QHsm_top);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	4a06      	ldr	r2, [pc, #24]	; (8004ed0 <QHsm_ctor+0x2c>)
 8004eb8:	605a      	str	r2, [r3, #4]
    me->temp.fun  = initial;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	683a      	ldr	r2, [r7, #0]
 8004ebe:	609a      	str	r2, [r3, #8]
}
 8004ec0:	bf00      	nop
 8004ec2:	370c      	adds	r7, #12
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eca:	4770      	bx	lr
 8004ecc:	0800550c 	.word	0x0800550c
 8004ed0:	08004ed5 	.word	0x08004ed5

08004ed4 <QHsm_top>:

/*${QEP::QHsm::top} ........................................................*/
QState QHsm_top(QHsm const * const me,
    QEvt const * const e)
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	b083      	sub	sp, #12
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
 8004edc:	6039      	str	r1, [r7, #0]
    Q_UNUSED_PAR(me);
    Q_UNUSED_PAR(e);
    return Q_RET_IGNORED; /* the top state ignores all events */
 8004ede:	2304      	movs	r3, #4
}
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	370c      	adds	r7, #12
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eea:	4770      	bx	lr

08004eec <QHsm_init_>:

/*${QEP::QHsm::init_} ......................................................*/
void QHsm_init_(QHsm * const me,
    void const * const e,
    uint_fast8_t const qs_id)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b08e      	sub	sp, #56	; 0x38
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	60f8      	str	r0, [r7, #12]
 8004ef4:	60b9      	str	r1, [r7, #8]
 8004ef6:	607a      	str	r2, [r7, #4]
    #ifndef Q_SPY
    (void)qs_id; /* unused parameter */
    #endif

    QStateHandler t = me->state.fun;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	685b      	ldr	r3, [r3, #4]
 8004efc:	637b      	str	r3, [r7, #52]	; 0x34

    /*! @pre the virtual pointer must be initialized, the top-most initial
    * transition must be initialized, and the initial transition must not
    * be taken yet.
    */
    Q_REQUIRE_ID(200, (me->vptr != (struct QHsmVtable *)0)
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d007      	beq.n	8004f16 <QHsm_init_+0x2a>
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	689b      	ldr	r3, [r3, #8]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d003      	beq.n	8004f16 <QHsm_init_+0x2a>
 8004f0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f10:	4a33      	ldr	r2, [pc, #204]	; (8004fe0 <QHsm_init_+0xf4>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d003      	beq.n	8004f1e <QHsm_init_+0x32>
 8004f16:	21c8      	movs	r1, #200	; 0xc8
 8004f18:	4832      	ldr	r0, [pc, #200]	; (8004fe4 <QHsm_init_+0xf8>)
 8004f1a:	f7fc f801 	bl	8000f20 <Q_onAssert>
                      && (me->temp.fun != Q_STATE_CAST(0))
                      && (t == Q_STATE_CAST(&QHsm_top)));

    /* execute the top-most initial tran. */
    QState r = (*me->temp.fun)(me, Q_EVT_CAST(QEvt));
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	689b      	ldr	r3, [r3, #8]
 8004f22:	68b9      	ldr	r1, [r7, #8]
 8004f24:	68f8      	ldr	r0, [r7, #12]
 8004f26:	4798      	blx	r3
 8004f28:	4603      	mov	r3, r0
 8004f2a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* the top-most initial transition must be taken */
    Q_ASSERT_ID(210, r == Q_RET_TRAN);
 8004f2e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004f32:	2b08      	cmp	r3, #8
 8004f34:	d003      	beq.n	8004f3e <QHsm_init_+0x52>
 8004f36:	21d2      	movs	r1, #210	; 0xd2
 8004f38:	482a      	ldr	r0, [pc, #168]	; (8004fe4 <QHsm_init_+0xf8>)
 8004f3a:	f7fb fff1 	bl	8000f20 <Q_onAssert>
    QS_END_PRE_()

    /* drill down into the state hierarchy with initial transitions... */
    do {
        QStateHandler path[QHSM_MAX_NEST_DEPTH_]; /* tran entry path array */
        int_fast8_t ip = 0; /* tran entry path index */
 8004f3e:	2300      	movs	r3, #0
 8004f40:	633b      	str	r3, [r7, #48]	; 0x30

        path[0] = me->temp.fun;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	689b      	ldr	r3, [r3, #8]
 8004f46:	617b      	str	r3, [r7, #20]
        (void)QEP_TRIG_(me->temp.fun, QEP_EMPTY_SIG_);
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	689b      	ldr	r3, [r3, #8]
 8004f4c:	4926      	ldr	r1, [pc, #152]	; (8004fe8 <QHsm_init_+0xfc>)
 8004f4e:	68f8      	ldr	r0, [r7, #12]
 8004f50:	4798      	blx	r3
        while (me->temp.fun != t) {
 8004f52:	e016      	b.n	8004f82 <QHsm_init_+0x96>
            ++ip;
 8004f54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f56:	3301      	adds	r3, #1
 8004f58:	633b      	str	r3, [r7, #48]	; 0x30
            Q_ASSERT_ID(220, ip < QHSM_MAX_NEST_DEPTH_);
 8004f5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f5c:	2b05      	cmp	r3, #5
 8004f5e:	dd03      	ble.n	8004f68 <QHsm_init_+0x7c>
 8004f60:	21dc      	movs	r1, #220	; 0xdc
 8004f62:	4820      	ldr	r0, [pc, #128]	; (8004fe4 <QHsm_init_+0xf8>)
 8004f64:	f7fb ffdc 	bl	8000f20 <Q_onAssert>
            path[ip] = me->temp.fun;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	689a      	ldr	r2, [r3, #8]
 8004f6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f6e:	009b      	lsls	r3, r3, #2
 8004f70:	3338      	adds	r3, #56	; 0x38
 8004f72:	443b      	add	r3, r7
 8004f74:	f843 2c24 	str.w	r2, [r3, #-36]
            (void)QEP_TRIG_(me->temp.fun, QEP_EMPTY_SIG_);
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	689b      	ldr	r3, [r3, #8]
 8004f7c:	491a      	ldr	r1, [pc, #104]	; (8004fe8 <QHsm_init_+0xfc>)
 8004f7e:	68f8      	ldr	r0, [r7, #12]
 8004f80:	4798      	blx	r3
        while (me->temp.fun != t) {
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	689b      	ldr	r3, [r3, #8]
 8004f86:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004f88:	429a      	cmp	r2, r3
 8004f8a:	d1e3      	bne.n	8004f54 <QHsm_init_+0x68>
        }
        me->temp.fun = path[0];
 8004f8c:	697a      	ldr	r2, [r7, #20]
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	609a      	str	r2, [r3, #8]

        /* nested initial transition, drill into the target hierarchy... */
        do {
            QEP_ENTER_(path[ip], qs_id); /* enter path[ip] */
 8004f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f94:	009b      	lsls	r3, r3, #2
 8004f96:	3338      	adds	r3, #56	; 0x38
 8004f98:	443b      	add	r3, r7
 8004f9a:	f853 3c24 	ldr.w	r3, [r3, #-36]
 8004f9e:	4913      	ldr	r1, [pc, #76]	; (8004fec <QHsm_init_+0x100>)
 8004fa0:	68f8      	ldr	r0, [r7, #12]
 8004fa2:	4798      	blx	r3
            --ip;
 8004fa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fa6:	3b01      	subs	r3, #1
 8004fa8:	633b      	str	r3, [r7, #48]	; 0x30
        } while (ip >= 0);
 8004faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	daf0      	bge.n	8004f92 <QHsm_init_+0xa6>

        t = path[0]; /* current state becomes the new source */
 8004fb0:	697b      	ldr	r3, [r7, #20]
 8004fb2:	637b      	str	r3, [r7, #52]	; 0x34

        r = QEP_TRIG_(t, Q_INIT_SIG); /* execute initial transition */
 8004fb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fb6:	490e      	ldr	r1, [pc, #56]	; (8004ff0 <QHsm_init_+0x104>)
 8004fb8:	68f8      	ldr	r0, [r7, #12]
 8004fba:	4798      	blx	r3
 8004fbc:	4603      	mov	r3, r0
 8004fbe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                QS_FUN_PRE_(me->temp.fun); /* target of the initial tran. */
            QS_END_PRE_()
        }
    #endif /* Q_SPY */

    } while (r == Q_RET_TRAN);
 8004fc2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004fc6:	2b08      	cmp	r3, #8
 8004fc8:	d0b9      	beq.n	8004f3e <QHsm_init_+0x52>
        QS_TIME_PRE_();    /* time stamp */
        QS_OBJ_PRE_(me);   /* this state machine object */
        QS_FUN_PRE_(t);    /* the new active state */
    QS_END_PRE_()

    me->state.fun = t; /* change the current active state */
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004fce:	605a      	str	r2, [r3, #4]
    me->temp.fun  = t; /* mark the configuration as stable */
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004fd4:	609a      	str	r2, [r3, #8]
}
 8004fd6:	bf00      	nop
 8004fd8:	3738      	adds	r7, #56	; 0x38
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bd80      	pop	{r7, pc}
 8004fde:	bf00      	nop
 8004fe0:	08004ed5 	.word	0x08004ed5
 8004fe4:	080054f4 	.word	0x080054f4
 8004fe8:	080054fc 	.word	0x080054fc
 8004fec:	08005500 	.word	0x08005500
 8004ff0:	08005508 	.word	0x08005508

08004ff4 <QHsm_dispatch_>:

/*${QEP::QHsm::dispatch_} ..................................................*/
void QHsm_dispatch_(QHsm * const me,
    QEvt const * const e,
    uint_fast8_t const qs_id)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b08e      	sub	sp, #56	; 0x38
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	60f8      	str	r0, [r7, #12]
 8004ffc:	60b9      	str	r1, [r7, #8]
 8004ffe:	607a      	str	r2, [r7, #4]
    Q_UNUSED_PAR(qs_id); /* unused when Q_SPY undefined */

    QStateHandler t = me->state.fun;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	685b      	ldr	r3, [r3, #4]
 8005004:	637b      	str	r3, [r7, #52]	; 0x34
    QS_CRIT_STAT_

    /*! @pre the current state must be initialized and
    * the state configuration must be stable
    */
    Q_REQUIRE_ID(400, (t != Q_STATE_CAST(0))
 8005006:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005008:	2b00      	cmp	r3, #0
 800500a:	d004      	beq.n	8005016 <QHsm_dispatch_+0x22>
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	689b      	ldr	r3, [r3, #8]
 8005010:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005012:	429a      	cmp	r2, r3
 8005014:	d004      	beq.n	8005020 <QHsm_dispatch_+0x2c>
 8005016:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800501a:	4852      	ldr	r0, [pc, #328]	; (8005164 <QHsm_dispatch_+0x170>)
 800501c:	f7fb ff80 	bl	8000f20 <Q_onAssert>

    QStateHandler s;
    QState r;
    /* process the event hierarchically... */
    do {
        s = me->temp.fun;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	689b      	ldr	r3, [r3, #8]
 8005024:	62bb      	str	r3, [r7, #40]	; 0x28
        r = (*s)(me, e); /* invoke state handler s */
 8005026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005028:	68b9      	ldr	r1, [r7, #8]
 800502a:	68f8      	ldr	r0, [r7, #12]
 800502c:	4798      	blx	r3
 800502e:	4603      	mov	r3, r0
 8005030:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

        if (r == Q_RET_UNHANDLED) { /* unhandled due to a guard? */
 8005034:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005038:	2b02      	cmp	r3, #2
 800503a:	d106      	bne.n	800504a <QHsm_dispatch_+0x56>
                QS_SIG_PRE_(e->sig); /* the signal of the event */
                QS_OBJ_PRE_(me);     /* this state machine object */
                QS_FUN_PRE_(s);      /* the current state */
            QS_END_PRE_()

            r = QEP_TRIG_(s, QEP_EMPTY_SIG_); /* find superstate of s */
 800503c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800503e:	494a      	ldr	r1, [pc, #296]	; (8005168 <QHsm_dispatch_+0x174>)
 8005040:	68f8      	ldr	r0, [r7, #12]
 8005042:	4798      	blx	r3
 8005044:	4603      	mov	r3, r0
 8005046:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        }
    } while (r == Q_RET_SUPER);
 800504a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800504e:	2b00      	cmp	r3, #0
 8005050:	d0e6      	beq.n	8005020 <QHsm_dispatch_+0x2c>

    /* regular transition taken? */
    /*! @tr{RQP120E} */
    if (r >= Q_RET_TRAN) {
 8005052:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005056:	2b07      	cmp	r3, #7
 8005058:	d97a      	bls.n	8005150 <QHsm_dispatch_+0x15c>
        QStateHandler path[QHSM_MAX_NEST_DEPTH_];

        path[0] = me->temp.fun; /* save the target of the transition */
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	689b      	ldr	r3, [r3, #8]
 800505e:	613b      	str	r3, [r7, #16]
        path[1] = t;
 8005060:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005062:	617b      	str	r3, [r7, #20]
        path[2] = s;
 8005064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005066:	61bb      	str	r3, [r7, #24]

        /* exit current state to transition source s... */
        /*! @tr{RQP120C} */
        for (; t != s; t = me->temp.fun) {
 8005068:	e00d      	b.n	8005086 <QHsm_dispatch_+0x92>
            if (QEP_TRIG_(t, Q_EXIT_SIG) == Q_RET_HANDLED) {
 800506a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800506c:	493f      	ldr	r1, [pc, #252]	; (800516c <QHsm_dispatch_+0x178>)
 800506e:	68f8      	ldr	r0, [r7, #12]
 8005070:	4798      	blx	r3
 8005072:	4603      	mov	r3, r0
 8005074:	2b03      	cmp	r3, #3
 8005076:	d103      	bne.n	8005080 <QHsm_dispatch_+0x8c>
                    QS_OBJ_PRE_(me);  /* this state machine object */
                    QS_FUN_PRE_(t);   /* the exited state */
                QS_END_PRE_()

                /* find superstate of t */
                (void)QEP_TRIG_(t, QEP_EMPTY_SIG_);
 8005078:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800507a:	493b      	ldr	r1, [pc, #236]	; (8005168 <QHsm_dispatch_+0x174>)
 800507c:	68f8      	ldr	r0, [r7, #12]
 800507e:	4798      	blx	r3
        for (; t != s; t = me->temp.fun) {
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	689b      	ldr	r3, [r3, #8]
 8005084:	637b      	str	r3, [r7, #52]	; 0x34
 8005086:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800508a:	429a      	cmp	r2, r3
 800508c:	d1ed      	bne.n	800506a <QHsm_dispatch_+0x76>
            }
        }

        int_fast8_t ip = QHsm_tran_(me, path, qs_id); /* the HSM transition */
 800508e:	f107 0310 	add.w	r3, r7, #16
 8005092:	687a      	ldr	r2, [r7, #4]
 8005094:	4619      	mov	r1, r3
 8005096:	68f8      	ldr	r0, [r7, #12]
 8005098:	f000 f86e 	bl	8005178 <QHsm_tran_>
 800509c:	62f8      	str	r0, [r7, #44]	; 0x2c
        }
    #endif /* Q_SPY */

        /* execute state entry actions in the desired order... */
        /*! @tr{RQP120B} */
        for (; ip >= 0; --ip) {
 800509e:	e00b      	b.n	80050b8 <QHsm_dispatch_+0xc4>
            QEP_ENTER_(path[ip], qs_id);  /* enter path[ip] */
 80050a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050a2:	009b      	lsls	r3, r3, #2
 80050a4:	3338      	adds	r3, #56	; 0x38
 80050a6:	443b      	add	r3, r7
 80050a8:	f853 3c28 	ldr.w	r3, [r3, #-40]
 80050ac:	4930      	ldr	r1, [pc, #192]	; (8005170 <QHsm_dispatch_+0x17c>)
 80050ae:	68f8      	ldr	r0, [r7, #12]
 80050b0:	4798      	blx	r3
        for (; ip >= 0; --ip) {
 80050b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050b4:	3b01      	subs	r3, #1
 80050b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80050b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	daf0      	bge.n	80050a0 <QHsm_dispatch_+0xac>
        }

        t = path[0];      /* stick the target into register */
 80050be:	693b      	ldr	r3, [r7, #16]
 80050c0:	637b      	str	r3, [r7, #52]	; 0x34
        me->temp.fun = t; /* update the next state */
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80050c6:	609a      	str	r2, [r3, #8]

        /* while nested initial transition... */
        /*! @tr{RQP120I} */
        while (QEP_TRIG_(t, Q_INIT_SIG) == Q_RET_TRAN) {
 80050c8:	e03b      	b.n	8005142 <QHsm_dispatch_+0x14e>
                QS_OBJ_PRE_(me);           /* this state machine object */
                QS_FUN_PRE_(t);            /* the source (pseudo)state */
                QS_FUN_PRE_(me->temp.fun); /* the target of the transition */
            QS_END_PRE_()

            ip = 0;
 80050ca:	2300      	movs	r3, #0
 80050cc:	62fb      	str	r3, [r7, #44]	; 0x2c
            path[0] = me->temp.fun;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	689b      	ldr	r3, [r3, #8]
 80050d2:	613b      	str	r3, [r7, #16]

            /* find superstate */
            (void)QEP_TRIG_(me->temp.fun, QEP_EMPTY_SIG_);
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	689b      	ldr	r3, [r3, #8]
 80050d8:	4923      	ldr	r1, [pc, #140]	; (8005168 <QHsm_dispatch_+0x174>)
 80050da:	68f8      	ldr	r0, [r7, #12]
 80050dc:	4798      	blx	r3

            while (me->temp.fun != t) {
 80050de:	e00f      	b.n	8005100 <QHsm_dispatch_+0x10c>
                ++ip;
 80050e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050e2:	3301      	adds	r3, #1
 80050e4:	62fb      	str	r3, [r7, #44]	; 0x2c
                path[ip] = me->temp.fun;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	689a      	ldr	r2, [r3, #8]
 80050ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050ec:	009b      	lsls	r3, r3, #2
 80050ee:	3338      	adds	r3, #56	; 0x38
 80050f0:	443b      	add	r3, r7
 80050f2:	f843 2c28 	str.w	r2, [r3, #-40]
                /* find superstate */
                (void)QEP_TRIG_(me->temp.fun, QEP_EMPTY_SIG_);
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	689b      	ldr	r3, [r3, #8]
 80050fa:	491b      	ldr	r1, [pc, #108]	; (8005168 <QHsm_dispatch_+0x174>)
 80050fc:	68f8      	ldr	r0, [r7, #12]
 80050fe:	4798      	blx	r3
            while (me->temp.fun != t) {
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	689b      	ldr	r3, [r3, #8]
 8005104:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005106:	429a      	cmp	r2, r3
 8005108:	d1ea      	bne.n	80050e0 <QHsm_dispatch_+0xec>
            }
            me->temp.fun = path[0];
 800510a:	693a      	ldr	r2, [r7, #16]
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	609a      	str	r2, [r3, #8]

            /* entry path must not overflow */
            Q_ASSERT_ID(410, ip < QHSM_MAX_NEST_DEPTH_);
 8005110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005112:	2b05      	cmp	r3, #5
 8005114:	dd04      	ble.n	8005120 <QHsm_dispatch_+0x12c>
 8005116:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 800511a:	4812      	ldr	r0, [pc, #72]	; (8005164 <QHsm_dispatch_+0x170>)
 800511c:	f7fb ff00 	bl	8000f20 <Q_onAssert>

            /* retrace the entry path in reverse (correct) order... */
            do {
                QEP_ENTER_(path[ip], qs_id); /* enter path[ip] */
 8005120:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005122:	009b      	lsls	r3, r3, #2
 8005124:	3338      	adds	r3, #56	; 0x38
 8005126:	443b      	add	r3, r7
 8005128:	f853 3c28 	ldr.w	r3, [r3, #-40]
 800512c:	4910      	ldr	r1, [pc, #64]	; (8005170 <QHsm_dispatch_+0x17c>)
 800512e:	68f8      	ldr	r0, [r7, #12]
 8005130:	4798      	blx	r3
                --ip;
 8005132:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005134:	3b01      	subs	r3, #1
 8005136:	62fb      	str	r3, [r7, #44]	; 0x2c
            } while (ip >= 0);
 8005138:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800513a:	2b00      	cmp	r3, #0
 800513c:	daf0      	bge.n	8005120 <QHsm_dispatch_+0x12c>

            t = path[0]; /* current state becomes the new source */
 800513e:	693b      	ldr	r3, [r7, #16]
 8005140:	637b      	str	r3, [r7, #52]	; 0x34
        while (QEP_TRIG_(t, Q_INIT_SIG) == Q_RET_TRAN) {
 8005142:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005144:	490b      	ldr	r1, [pc, #44]	; (8005174 <QHsm_dispatch_+0x180>)
 8005146:	68f8      	ldr	r0, [r7, #12]
 8005148:	4798      	blx	r3
 800514a:	4603      	mov	r3, r0
 800514c:	2b08      	cmp	r3, #8
 800514e:	d0bc      	beq.n	80050ca <QHsm_dispatch_+0xd6>
        QS_END_PRE_()

    }
    #endif /* Q_SPY */

    me->state.fun = t; /* change the current active state */
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005154:	605a      	str	r2, [r3, #4]
    me->temp.fun  = t; /* mark the configuration as stable */
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800515a:	609a      	str	r2, [r3, #8]
}
 800515c:	bf00      	nop
 800515e:	3738      	adds	r7, #56	; 0x38
 8005160:	46bd      	mov	sp, r7
 8005162:	bd80      	pop	{r7, pc}
 8005164:	080054f4 	.word	0x080054f4
 8005168:	080054fc 	.word	0x080054fc
 800516c:	08005504 	.word	0x08005504
 8005170:	08005500 	.word	0x08005500
 8005174:	08005508 	.word	0x08005508

08005178 <QHsm_tran_>:

/*${QEP::QHsm::tran_} ......................................................*/
int_fast8_t QHsm_tran_(QHsm * const me,
    QStateHandler path[QHSM_MAX_NEST_DEPTH_],
    uint_fast8_t const qs_id)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b08a      	sub	sp, #40	; 0x28
 800517c:	af00      	add	r7, sp, #0
 800517e:	60f8      	str	r0, [r7, #12]
 8005180:	60b9      	str	r1, [r7, #8]
 8005182:	607a      	str	r2, [r7, #4]
    Q_UNUSED_PAR(qs_id); // unused when Q_SPY undefined

    int_fast8_t ip = -1; /* transition entry path index */
 8005184:	f04f 33ff 	mov.w	r3, #4294967295
 8005188:	627b      	str	r3, [r7, #36]	; 0x24
    QStateHandler t = path[0];
 800518a:	68bb      	ldr	r3, [r7, #8]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	623b      	str	r3, [r7, #32]
    QStateHandler const s = path[2];
 8005190:	68bb      	ldr	r3, [r7, #8]
 8005192:	689b      	ldr	r3, [r3, #8]
 8005194:	617b      	str	r3, [r7, #20]
    QS_CRIT_STAT_

    /* (a) check source==target (transition to self)... */
    if (s == t) {
 8005196:	697a      	ldr	r2, [r7, #20]
 8005198:	6a3b      	ldr	r3, [r7, #32]
 800519a:	429a      	cmp	r2, r3
 800519c:	d106      	bne.n	80051ac <QHsm_tran_+0x34>
        QEP_EXIT_(s, qs_id); /* exit the source */
 800519e:	697b      	ldr	r3, [r7, #20]
 80051a0:	4964      	ldr	r1, [pc, #400]	; (8005334 <QHsm_tran_+0x1bc>)
 80051a2:	68f8      	ldr	r0, [r7, #12]
 80051a4:	4798      	blx	r3
        ip = 0; /* enter the target */
 80051a6:	2300      	movs	r3, #0
 80051a8:	627b      	str	r3, [r7, #36]	; 0x24
 80051aa:	e0be      	b.n	800532a <QHsm_tran_+0x1b2>
    }
    else {
        /* find superstate of target */
        (void)QEP_TRIG_(t, QEP_EMPTY_SIG_);
 80051ac:	6a3b      	ldr	r3, [r7, #32]
 80051ae:	4962      	ldr	r1, [pc, #392]	; (8005338 <QHsm_tran_+0x1c0>)
 80051b0:	68f8      	ldr	r0, [r7, #12]
 80051b2:	4798      	blx	r3

        t = me->temp.fun;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	689b      	ldr	r3, [r3, #8]
 80051b8:	623b      	str	r3, [r7, #32]

        /* (b) check source==target->super... */
        if (s == t) {
 80051ba:	697a      	ldr	r2, [r7, #20]
 80051bc:	6a3b      	ldr	r3, [r7, #32]
 80051be:	429a      	cmp	r2, r3
 80051c0:	d102      	bne.n	80051c8 <QHsm_tran_+0x50>
            ip = 0; /* enter the target */
 80051c2:	2300      	movs	r3, #0
 80051c4:	627b      	str	r3, [r7, #36]	; 0x24
 80051c6:	e0b0      	b.n	800532a <QHsm_tran_+0x1b2>
        }
        else {
            /* find superstate of src */
            (void)QEP_TRIG_(s, QEP_EMPTY_SIG_);
 80051c8:	697b      	ldr	r3, [r7, #20]
 80051ca:	495b      	ldr	r1, [pc, #364]	; (8005338 <QHsm_tran_+0x1c0>)
 80051cc:	68f8      	ldr	r0, [r7, #12]
 80051ce:	4798      	blx	r3

            /* (c) check source->super==target->super... */
            if (me->temp.fun == t) {
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	689b      	ldr	r3, [r3, #8]
 80051d4:	6a3a      	ldr	r2, [r7, #32]
 80051d6:	429a      	cmp	r2, r3
 80051d8:	d106      	bne.n	80051e8 <QHsm_tran_+0x70>
                QEP_EXIT_(s, qs_id); /* exit the source */
 80051da:	697b      	ldr	r3, [r7, #20]
 80051dc:	4955      	ldr	r1, [pc, #340]	; (8005334 <QHsm_tran_+0x1bc>)
 80051de:	68f8      	ldr	r0, [r7, #12]
 80051e0:	4798      	blx	r3
                ip = 0; /* enter the target */
 80051e2:	2300      	movs	r3, #0
 80051e4:	627b      	str	r3, [r7, #36]	; 0x24
 80051e6:	e0a0      	b.n	800532a <QHsm_tran_+0x1b2>
            }
            else {
                /* (d) check source->super==target... */
                if (me->temp.fun == path[0]) {
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	689a      	ldr	r2, [r3, #8]
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	429a      	cmp	r2, r3
 80051f2:	d104      	bne.n	80051fe <QHsm_tran_+0x86>
                    QEP_EXIT_(s, qs_id); /* exit the source */
 80051f4:	697b      	ldr	r3, [r7, #20]
 80051f6:	494f      	ldr	r1, [pc, #316]	; (8005334 <QHsm_tran_+0x1bc>)
 80051f8:	68f8      	ldr	r0, [r7, #12]
 80051fa:	4798      	blx	r3
 80051fc:	e095      	b.n	800532a <QHsm_tran_+0x1b2>
                }
                else {
                    /* (e) check rest of source==target->super->super..
                    * and store the entry path along the way
                    */
                    int_fast8_t iq = 0; /* indicate that LCA not found */
 80051fe:	2300      	movs	r3, #0
 8005200:	61fb      	str	r3, [r7, #28]
                    ip = 1; /* enter target and its superstate */
 8005202:	2301      	movs	r3, #1
 8005204:	627b      	str	r3, [r7, #36]	; 0x24
                    path[1] = t;      /* save the superstate of target */
 8005206:	68bb      	ldr	r3, [r7, #8]
 8005208:	3304      	adds	r3, #4
 800520a:	6a3a      	ldr	r2, [r7, #32]
 800520c:	601a      	str	r2, [r3, #0]
                    t = me->temp.fun; /* save source->super */
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	689b      	ldr	r3, [r3, #8]
 8005212:	623b      	str	r3, [r7, #32]

                    /* find target->super->super... */
                    QState r = QEP_TRIG_(path[1], QEP_EMPTY_SIG_);
 8005214:	68bb      	ldr	r3, [r7, #8]
 8005216:	3304      	adds	r3, #4
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	4947      	ldr	r1, [pc, #284]	; (8005338 <QHsm_tran_+0x1c0>)
 800521c:	68f8      	ldr	r0, [r7, #12]
 800521e:	4798      	blx	r3
 8005220:	4603      	mov	r3, r0
 8005222:	76fb      	strb	r3, [r7, #27]
                    while (r == Q_RET_SUPER) {
 8005224:	e025      	b.n	8005272 <QHsm_tran_+0xfa>
                        ++ip;
 8005226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005228:	3301      	adds	r3, #1
 800522a:	627b      	str	r3, [r7, #36]	; 0x24
                        path[ip] = me->temp.fun; /* store the entry path */
 800522c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800522e:	009b      	lsls	r3, r3, #2
 8005230:	68ba      	ldr	r2, [r7, #8]
 8005232:	4413      	add	r3, r2
 8005234:	68fa      	ldr	r2, [r7, #12]
 8005236:	6892      	ldr	r2, [r2, #8]
 8005238:	601a      	str	r2, [r3, #0]
                        if (me->temp.fun == s) { /* is it the source? */
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	689b      	ldr	r3, [r3, #8]
 800523e:	697a      	ldr	r2, [r7, #20]
 8005240:	429a      	cmp	r2, r3
 8005242:	d10f      	bne.n	8005264 <QHsm_tran_+0xec>
                            iq = 1; /* indicate that LCA found */
 8005244:	2301      	movs	r3, #1
 8005246:	61fb      	str	r3, [r7, #28]

                            /* entry path must not overflow */
                            Q_ASSERT_ID(510,
 8005248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800524a:	2b05      	cmp	r3, #5
 800524c:	dd04      	ble.n	8005258 <QHsm_tran_+0xe0>
 800524e:	f44f 71ff 	mov.w	r1, #510	; 0x1fe
 8005252:	483a      	ldr	r0, [pc, #232]	; (800533c <QHsm_tran_+0x1c4>)
 8005254:	f7fb fe64 	bl	8000f20 <Q_onAssert>
                                ip < QHSM_MAX_NEST_DEPTH_);
                            --ip; /* do not enter the source */
 8005258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800525a:	3b01      	subs	r3, #1
 800525c:	627b      	str	r3, [r7, #36]	; 0x24
                            r = Q_RET_HANDLED; /* terminate loop */
 800525e:	2303      	movs	r3, #3
 8005260:	76fb      	strb	r3, [r7, #27]
 8005262:	e006      	b.n	8005272 <QHsm_tran_+0xfa>
                        }
                         /* it is not the source, keep going up */
                        else {
                            r = QEP_TRIG_(me->temp.fun, QEP_EMPTY_SIG_);
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	689b      	ldr	r3, [r3, #8]
 8005268:	4933      	ldr	r1, [pc, #204]	; (8005338 <QHsm_tran_+0x1c0>)
 800526a:	68f8      	ldr	r0, [r7, #12]
 800526c:	4798      	blx	r3
 800526e:	4603      	mov	r3, r0
 8005270:	76fb      	strb	r3, [r7, #27]
                    while (r == Q_RET_SUPER) {
 8005272:	7efb      	ldrb	r3, [r7, #27]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d0d6      	beq.n	8005226 <QHsm_tran_+0xae>
                        }
                    }

                    /* the LCA not found yet? */
                    if (iq == 0) {
 8005278:	69fb      	ldr	r3, [r7, #28]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d155      	bne.n	800532a <QHsm_tran_+0x1b2>

                        /* entry path must not overflow */
                        Q_ASSERT_ID(520, ip < QHSM_MAX_NEST_DEPTH_);
 800527e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005280:	2b05      	cmp	r3, #5
 8005282:	dd04      	ble.n	800528e <QHsm_tran_+0x116>
 8005284:	f44f 7102 	mov.w	r1, #520	; 0x208
 8005288:	482c      	ldr	r0, [pc, #176]	; (800533c <QHsm_tran_+0x1c4>)
 800528a:	f7fb fe49 	bl	8000f20 <Q_onAssert>

                        QEP_EXIT_(s, qs_id); /* exit the source */
 800528e:	697b      	ldr	r3, [r7, #20]
 8005290:	4928      	ldr	r1, [pc, #160]	; (8005334 <QHsm_tran_+0x1bc>)
 8005292:	68f8      	ldr	r0, [r7, #12]
 8005294:	4798      	blx	r3

                        /* (f) check the rest of source->super
                        *                  == target->super->super...
                        */
                        iq = ip;
 8005296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005298:	61fb      	str	r3, [r7, #28]
                        r = Q_RET_IGNORED; /* LCA NOT found */
 800529a:	2304      	movs	r3, #4
 800529c:	76fb      	strb	r3, [r7, #27]
                        do {
                            if (t == path[iq]) { /* is this the LCA? */
 800529e:	69fb      	ldr	r3, [r7, #28]
 80052a0:	009b      	lsls	r3, r3, #2
 80052a2:	68ba      	ldr	r2, [r7, #8]
 80052a4:	4413      	add	r3, r2
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	6a3a      	ldr	r2, [r7, #32]
 80052aa:	429a      	cmp	r2, r3
 80052ac:	d108      	bne.n	80052c0 <QHsm_tran_+0x148>
                                r = Q_RET_HANDLED; /* LCA found */
 80052ae:	2303      	movs	r3, #3
 80052b0:	76fb      	strb	r3, [r7, #27]
                                ip = iq - 1; /* do not enter LCA */
 80052b2:	69fb      	ldr	r3, [r7, #28]
 80052b4:	3b01      	subs	r3, #1
 80052b6:	627b      	str	r3, [r7, #36]	; 0x24
                                iq = -1; /* cause termintion of the loop */
 80052b8:	f04f 33ff 	mov.w	r3, #4294967295
 80052bc:	61fb      	str	r3, [r7, #28]
 80052be:	e002      	b.n	80052c6 <QHsm_tran_+0x14e>
                            }
                            else {
                                --iq; /* try lower superstate of target */
 80052c0:	69fb      	ldr	r3, [r7, #28]
 80052c2:	3b01      	subs	r3, #1
 80052c4:	61fb      	str	r3, [r7, #28]
                            }
                        } while (iq >= 0);
 80052c6:	69fb      	ldr	r3, [r7, #28]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	dae8      	bge.n	800529e <QHsm_tran_+0x126>

                        /* LCA not found? */
                        if (r != Q_RET_HANDLED) {
 80052cc:	7efb      	ldrb	r3, [r7, #27]
 80052ce:	2b03      	cmp	r3, #3
 80052d0:	d02b      	beq.n	800532a <QHsm_tran_+0x1b2>
                            /* (g) check each source->super->...
                            * for each target->super...
                            */
                            r = Q_RET_IGNORED; /* keep looping */
 80052d2:	2304      	movs	r3, #4
 80052d4:	76fb      	strb	r3, [r7, #27]
                            do {
                                /* exit t unhandled? */
                                if (QEP_TRIG_(t, Q_EXIT_SIG)
 80052d6:	6a3b      	ldr	r3, [r7, #32]
 80052d8:	4916      	ldr	r1, [pc, #88]	; (8005334 <QHsm_tran_+0x1bc>)
 80052da:	68f8      	ldr	r0, [r7, #12]
 80052dc:	4798      	blx	r3
 80052de:	4603      	mov	r3, r0
 80052e0:	2b03      	cmp	r3, #3
 80052e2:	d103      	bne.n	80052ec <QHsm_tran_+0x174>
                                    QS_BEGIN_PRE_(QS_QEP_STATE_EXIT, qs_id)
                                        QS_OBJ_PRE_(me);
                                        QS_FUN_PRE_(t);
                                    QS_END_PRE_()

                                    (void)QEP_TRIG_(t, QEP_EMPTY_SIG_);
 80052e4:	6a3b      	ldr	r3, [r7, #32]
 80052e6:	4914      	ldr	r1, [pc, #80]	; (8005338 <QHsm_tran_+0x1c0>)
 80052e8:	68f8      	ldr	r0, [r7, #12]
 80052ea:	4798      	blx	r3
                                }
                                t = me->temp.fun; /* set to super of t */
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	689b      	ldr	r3, [r3, #8]
 80052f0:	623b      	str	r3, [r7, #32]
                                iq = ip;
 80052f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052f4:	61fb      	str	r3, [r7, #28]
                                do {
                                    /* is this LCA? */
                                    if (t == path[iq]) {
 80052f6:	69fb      	ldr	r3, [r7, #28]
 80052f8:	009b      	lsls	r3, r3, #2
 80052fa:	68ba      	ldr	r2, [r7, #8]
 80052fc:	4413      	add	r3, r2
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	6a3a      	ldr	r2, [r7, #32]
 8005302:	429a      	cmp	r2, r3
 8005304:	d108      	bne.n	8005318 <QHsm_tran_+0x1a0>
                                        /* do not enter LCA */
                                        ip = (int_fast8_t)(iq - 1);
 8005306:	69fb      	ldr	r3, [r7, #28]
 8005308:	3b01      	subs	r3, #1
 800530a:	627b      	str	r3, [r7, #36]	; 0x24
                                        iq = -1; /* break out of inner loop */
 800530c:	f04f 33ff 	mov.w	r3, #4294967295
 8005310:	61fb      	str	r3, [r7, #28]
                                        /* break out of outer loop */
                                        r = Q_RET_HANDLED;
 8005312:	2303      	movs	r3, #3
 8005314:	76fb      	strb	r3, [r7, #27]
 8005316:	e002      	b.n	800531e <QHsm_tran_+0x1a6>
                                    }
                                    else {
                                        --iq;
 8005318:	69fb      	ldr	r3, [r7, #28]
 800531a:	3b01      	subs	r3, #1
 800531c:	61fb      	str	r3, [r7, #28]
                                    }
                                } while (iq >= 0);
 800531e:	69fb      	ldr	r3, [r7, #28]
 8005320:	2b00      	cmp	r3, #0
 8005322:	dae8      	bge.n	80052f6 <QHsm_tran_+0x17e>
                            } while (r != Q_RET_HANDLED);
 8005324:	7efb      	ldrb	r3, [r7, #27]
 8005326:	2b03      	cmp	r3, #3
 8005328:	d1d5      	bne.n	80052d6 <QHsm_tran_+0x15e>
                    }
                }
            }
        }
    }
    return ip;
 800532a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800532c:	4618      	mov	r0, r3
 800532e:	3728      	adds	r7, #40	; 0x28
 8005330:	46bd      	mov	sp, r7
 8005332:	bd80      	pop	{r7, pc}
 8005334:	08005504 	.word	0x08005504
 8005338:	080054fc 	.word	0x080054fc
 800533c:	080054f4 	.word	0x080054f4

08005340 <__libc_init_array>:
 8005340:	b570      	push	{r4, r5, r6, lr}
 8005342:	4d0d      	ldr	r5, [pc, #52]	; (8005378 <__libc_init_array+0x38>)
 8005344:	4c0d      	ldr	r4, [pc, #52]	; (800537c <__libc_init_array+0x3c>)
 8005346:	1b64      	subs	r4, r4, r5
 8005348:	10a4      	asrs	r4, r4, #2
 800534a:	2600      	movs	r6, #0
 800534c:	42a6      	cmp	r6, r4
 800534e:	d109      	bne.n	8005364 <__libc_init_array+0x24>
 8005350:	4d0b      	ldr	r5, [pc, #44]	; (8005380 <__libc_init_array+0x40>)
 8005352:	4c0c      	ldr	r4, [pc, #48]	; (8005384 <__libc_init_array+0x44>)
 8005354:	f000 f82e 	bl	80053b4 <_init>
 8005358:	1b64      	subs	r4, r4, r5
 800535a:	10a4      	asrs	r4, r4, #2
 800535c:	2600      	movs	r6, #0
 800535e:	42a6      	cmp	r6, r4
 8005360:	d105      	bne.n	800536e <__libc_init_array+0x2e>
 8005362:	bd70      	pop	{r4, r5, r6, pc}
 8005364:	f855 3b04 	ldr.w	r3, [r5], #4
 8005368:	4798      	blx	r3
 800536a:	3601      	adds	r6, #1
 800536c:	e7ee      	b.n	800534c <__libc_init_array+0xc>
 800536e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005372:	4798      	blx	r3
 8005374:	3601      	adds	r6, #1
 8005376:	e7f2      	b.n	800535e <__libc_init_array+0x1e>
 8005378:	0800551c 	.word	0x0800551c
 800537c:	0800551c 	.word	0x0800551c
 8005380:	0800551c 	.word	0x0800551c
 8005384:	08005520 	.word	0x08005520

08005388 <memcpy>:
 8005388:	440a      	add	r2, r1
 800538a:	4291      	cmp	r1, r2
 800538c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005390:	d100      	bne.n	8005394 <memcpy+0xc>
 8005392:	4770      	bx	lr
 8005394:	b510      	push	{r4, lr}
 8005396:	f811 4b01 	ldrb.w	r4, [r1], #1
 800539a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800539e:	4291      	cmp	r1, r2
 80053a0:	d1f9      	bne.n	8005396 <memcpy+0xe>
 80053a2:	bd10      	pop	{r4, pc}

080053a4 <memset>:
 80053a4:	4402      	add	r2, r0
 80053a6:	4603      	mov	r3, r0
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d100      	bne.n	80053ae <memset+0xa>
 80053ac:	4770      	bx	lr
 80053ae:	f803 1b01 	strb.w	r1, [r3], #1
 80053b2:	e7f9      	b.n	80053a8 <memset+0x4>

080053b4 <_init>:
 80053b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053b6:	bf00      	nop
 80053b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053ba:	bc08      	pop	{r3}
 80053bc:	469e      	mov	lr, r3
 80053be:	4770      	bx	lr

080053c0 <_fini>:
 80053c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053c2:	bf00      	nop
 80053c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053c6:	bc08      	pop	{r3}
 80053c8:	469e      	mov	lr, r3
 80053ca:	4770      	bx	lr
