
102-STATE-MACHINE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002db0  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000011c  08002f5c  08002f5c  00012f5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003078  08003078  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003078  08003078  00013078  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003080  08003080  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003080  08003080  00013080  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003084  08003084  00013084  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003088  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          0000007c  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000088  20000088  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000098a5  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001aa5  00000000  00000000  000298e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000740  00000000  00000000  0002b388  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000006a8  00000000  00000000  0002bac8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002314e  00000000  00000000  0002c170  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000921b  00000000  00000000  0004f2be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d3758  00000000  00000000  000584d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012bc31  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001c20  00000000  00000000  0012bc84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000000c 	.word	0x2000000c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08002f44 	.word	0x08002f44

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000010 	.word	0x20000010
 80001e8:	08002f44 	.word	0x08002f44

080001ec <strlen>:
 80001ec:	4603      	mov	r3, r0
 80001ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f2:	2a00      	cmp	r2, #0
 80001f4:	d1fb      	bne.n	80001ee <strlen+0x2>
 80001f6:	1a18      	subs	r0, r3, r0
 80001f8:	3801      	subs	r0, #1
 80001fa:	4770      	bx	lr

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295
 800020c:	f04f 30ff 	movne.w	r0, #4294967295
 8000210:	f000 b974 	b.w	80004fc <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9d08      	ldr	r5, [sp, #32]
 8000232:	4604      	mov	r4, r0
 8000234:	468e      	mov	lr, r1
 8000236:	2b00      	cmp	r3, #0
 8000238:	d14d      	bne.n	80002d6 <__udivmoddi4+0xaa>
 800023a:	428a      	cmp	r2, r1
 800023c:	4694      	mov	ip, r2
 800023e:	d969      	bls.n	8000314 <__udivmoddi4+0xe8>
 8000240:	fab2 f282 	clz	r2, r2
 8000244:	b152      	cbz	r2, 800025c <__udivmoddi4+0x30>
 8000246:	fa01 f302 	lsl.w	r3, r1, r2
 800024a:	f1c2 0120 	rsb	r1, r2, #32
 800024e:	fa20 f101 	lsr.w	r1, r0, r1
 8000252:	fa0c fc02 	lsl.w	ip, ip, r2
 8000256:	ea41 0e03 	orr.w	lr, r1, r3
 800025a:	4094      	lsls	r4, r2
 800025c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000260:	0c21      	lsrs	r1, r4, #16
 8000262:	fbbe f6f8 	udiv	r6, lr, r8
 8000266:	fa1f f78c 	uxth.w	r7, ip
 800026a:	fb08 e316 	mls	r3, r8, r6, lr
 800026e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000272:	fb06 f107 	mul.w	r1, r6, r7
 8000276:	4299      	cmp	r1, r3
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x64>
 800027a:	eb1c 0303 	adds.w	r3, ip, r3
 800027e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000282:	f080 811f 	bcs.w	80004c4 <__udivmoddi4+0x298>
 8000286:	4299      	cmp	r1, r3
 8000288:	f240 811c 	bls.w	80004c4 <__udivmoddi4+0x298>
 800028c:	3e02      	subs	r6, #2
 800028e:	4463      	add	r3, ip
 8000290:	1a5b      	subs	r3, r3, r1
 8000292:	b2a4      	uxth	r4, r4
 8000294:	fbb3 f0f8 	udiv	r0, r3, r8
 8000298:	fb08 3310 	mls	r3, r8, r0, r3
 800029c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a0:	fb00 f707 	mul.w	r7, r0, r7
 80002a4:	42a7      	cmp	r7, r4
 80002a6:	d90a      	bls.n	80002be <__udivmoddi4+0x92>
 80002a8:	eb1c 0404 	adds.w	r4, ip, r4
 80002ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b0:	f080 810a 	bcs.w	80004c8 <__udivmoddi4+0x29c>
 80002b4:	42a7      	cmp	r7, r4
 80002b6:	f240 8107 	bls.w	80004c8 <__udivmoddi4+0x29c>
 80002ba:	4464      	add	r4, ip
 80002bc:	3802      	subs	r0, #2
 80002be:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c2:	1be4      	subs	r4, r4, r7
 80002c4:	2600      	movs	r6, #0
 80002c6:	b11d      	cbz	r5, 80002d0 <__udivmoddi4+0xa4>
 80002c8:	40d4      	lsrs	r4, r2
 80002ca:	2300      	movs	r3, #0
 80002cc:	e9c5 4300 	strd	r4, r3, [r5]
 80002d0:	4631      	mov	r1, r6
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d909      	bls.n	80002ee <__udivmoddi4+0xc2>
 80002da:	2d00      	cmp	r5, #0
 80002dc:	f000 80ef 	beq.w	80004be <__udivmoddi4+0x292>
 80002e0:	2600      	movs	r6, #0
 80002e2:	e9c5 0100 	strd	r0, r1, [r5]
 80002e6:	4630      	mov	r0, r6
 80002e8:	4631      	mov	r1, r6
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	fab3 f683 	clz	r6, r3
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	d14a      	bne.n	800038c <__udivmoddi4+0x160>
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xd4>
 80002fa:	4282      	cmp	r2, r0
 80002fc:	f200 80f9 	bhi.w	80004f2 <__udivmoddi4+0x2c6>
 8000300:	1a84      	subs	r4, r0, r2
 8000302:	eb61 0303 	sbc.w	r3, r1, r3
 8000306:	2001      	movs	r0, #1
 8000308:	469e      	mov	lr, r3
 800030a:	2d00      	cmp	r5, #0
 800030c:	d0e0      	beq.n	80002d0 <__udivmoddi4+0xa4>
 800030e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000312:	e7dd      	b.n	80002d0 <__udivmoddi4+0xa4>
 8000314:	b902      	cbnz	r2, 8000318 <__udivmoddi4+0xec>
 8000316:	deff      	udf	#255	; 0xff
 8000318:	fab2 f282 	clz	r2, r2
 800031c:	2a00      	cmp	r2, #0
 800031e:	f040 8092 	bne.w	8000446 <__udivmoddi4+0x21a>
 8000322:	eba1 010c 	sub.w	r1, r1, ip
 8000326:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032a:	fa1f fe8c 	uxth.w	lr, ip
 800032e:	2601      	movs	r6, #1
 8000330:	0c20      	lsrs	r0, r4, #16
 8000332:	fbb1 f3f7 	udiv	r3, r1, r7
 8000336:	fb07 1113 	mls	r1, r7, r3, r1
 800033a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800033e:	fb0e f003 	mul.w	r0, lr, r3
 8000342:	4288      	cmp	r0, r1
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x12c>
 8000346:	eb1c 0101 	adds.w	r1, ip, r1
 800034a:	f103 38ff 	add.w	r8, r3, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x12a>
 8000350:	4288      	cmp	r0, r1
 8000352:	f200 80cb 	bhi.w	80004ec <__udivmoddi4+0x2c0>
 8000356:	4643      	mov	r3, r8
 8000358:	1a09      	subs	r1, r1, r0
 800035a:	b2a4      	uxth	r4, r4
 800035c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000360:	fb07 1110 	mls	r1, r7, r0, r1
 8000364:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000368:	fb0e fe00 	mul.w	lr, lr, r0
 800036c:	45a6      	cmp	lr, r4
 800036e:	d908      	bls.n	8000382 <__udivmoddi4+0x156>
 8000370:	eb1c 0404 	adds.w	r4, ip, r4
 8000374:	f100 31ff 	add.w	r1, r0, #4294967295
 8000378:	d202      	bcs.n	8000380 <__udivmoddi4+0x154>
 800037a:	45a6      	cmp	lr, r4
 800037c:	f200 80bb 	bhi.w	80004f6 <__udivmoddi4+0x2ca>
 8000380:	4608      	mov	r0, r1
 8000382:	eba4 040e 	sub.w	r4, r4, lr
 8000386:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800038a:	e79c      	b.n	80002c6 <__udivmoddi4+0x9a>
 800038c:	f1c6 0720 	rsb	r7, r6, #32
 8000390:	40b3      	lsls	r3, r6
 8000392:	fa22 fc07 	lsr.w	ip, r2, r7
 8000396:	ea4c 0c03 	orr.w	ip, ip, r3
 800039a:	fa20 f407 	lsr.w	r4, r0, r7
 800039e:	fa01 f306 	lsl.w	r3, r1, r6
 80003a2:	431c      	orrs	r4, r3
 80003a4:	40f9      	lsrs	r1, r7
 80003a6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003aa:	fa00 f306 	lsl.w	r3, r0, r6
 80003ae:	fbb1 f8f9 	udiv	r8, r1, r9
 80003b2:	0c20      	lsrs	r0, r4, #16
 80003b4:	fa1f fe8c 	uxth.w	lr, ip
 80003b8:	fb09 1118 	mls	r1, r9, r8, r1
 80003bc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c0:	fb08 f00e 	mul.w	r0, r8, lr
 80003c4:	4288      	cmp	r0, r1
 80003c6:	fa02 f206 	lsl.w	r2, r2, r6
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b8>
 80003cc:	eb1c 0101 	adds.w	r1, ip, r1
 80003d0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003d4:	f080 8088 	bcs.w	80004e8 <__udivmoddi4+0x2bc>
 80003d8:	4288      	cmp	r0, r1
 80003da:	f240 8085 	bls.w	80004e8 <__udivmoddi4+0x2bc>
 80003de:	f1a8 0802 	sub.w	r8, r8, #2
 80003e2:	4461      	add	r1, ip
 80003e4:	1a09      	subs	r1, r1, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003ec:	fb09 1110 	mls	r1, r9, r0, r1
 80003f0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003f4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003f8:	458e      	cmp	lr, r1
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1e2>
 80003fc:	eb1c 0101 	adds.w	r1, ip, r1
 8000400:	f100 34ff 	add.w	r4, r0, #4294967295
 8000404:	d26c      	bcs.n	80004e0 <__udivmoddi4+0x2b4>
 8000406:	458e      	cmp	lr, r1
 8000408:	d96a      	bls.n	80004e0 <__udivmoddi4+0x2b4>
 800040a:	3802      	subs	r0, #2
 800040c:	4461      	add	r1, ip
 800040e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000412:	fba0 9402 	umull	r9, r4, r0, r2
 8000416:	eba1 010e 	sub.w	r1, r1, lr
 800041a:	42a1      	cmp	r1, r4
 800041c:	46c8      	mov	r8, r9
 800041e:	46a6      	mov	lr, r4
 8000420:	d356      	bcc.n	80004d0 <__udivmoddi4+0x2a4>
 8000422:	d053      	beq.n	80004cc <__udivmoddi4+0x2a0>
 8000424:	b15d      	cbz	r5, 800043e <__udivmoddi4+0x212>
 8000426:	ebb3 0208 	subs.w	r2, r3, r8
 800042a:	eb61 010e 	sbc.w	r1, r1, lr
 800042e:	fa01 f707 	lsl.w	r7, r1, r7
 8000432:	fa22 f306 	lsr.w	r3, r2, r6
 8000436:	40f1      	lsrs	r1, r6
 8000438:	431f      	orrs	r7, r3
 800043a:	e9c5 7100 	strd	r7, r1, [r5]
 800043e:	2600      	movs	r6, #0
 8000440:	4631      	mov	r1, r6
 8000442:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000446:	f1c2 0320 	rsb	r3, r2, #32
 800044a:	40d8      	lsrs	r0, r3
 800044c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000450:	fa21 f303 	lsr.w	r3, r1, r3
 8000454:	4091      	lsls	r1, r2
 8000456:	4301      	orrs	r1, r0
 8000458:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800045c:	fa1f fe8c 	uxth.w	lr, ip
 8000460:	fbb3 f0f7 	udiv	r0, r3, r7
 8000464:	fb07 3610 	mls	r6, r7, r0, r3
 8000468:	0c0b      	lsrs	r3, r1, #16
 800046a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800046e:	fb00 f60e 	mul.w	r6, r0, lr
 8000472:	429e      	cmp	r6, r3
 8000474:	fa04 f402 	lsl.w	r4, r4, r2
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x260>
 800047a:	eb1c 0303 	adds.w	r3, ip, r3
 800047e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000482:	d22f      	bcs.n	80004e4 <__udivmoddi4+0x2b8>
 8000484:	429e      	cmp	r6, r3
 8000486:	d92d      	bls.n	80004e4 <__udivmoddi4+0x2b8>
 8000488:	3802      	subs	r0, #2
 800048a:	4463      	add	r3, ip
 800048c:	1b9b      	subs	r3, r3, r6
 800048e:	b289      	uxth	r1, r1
 8000490:	fbb3 f6f7 	udiv	r6, r3, r7
 8000494:	fb07 3316 	mls	r3, r7, r6, r3
 8000498:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049c:	fb06 f30e 	mul.w	r3, r6, lr
 80004a0:	428b      	cmp	r3, r1
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x28a>
 80004a4:	eb1c 0101 	adds.w	r1, ip, r1
 80004a8:	f106 38ff 	add.w	r8, r6, #4294967295
 80004ac:	d216      	bcs.n	80004dc <__udivmoddi4+0x2b0>
 80004ae:	428b      	cmp	r3, r1
 80004b0:	d914      	bls.n	80004dc <__udivmoddi4+0x2b0>
 80004b2:	3e02      	subs	r6, #2
 80004b4:	4461      	add	r1, ip
 80004b6:	1ac9      	subs	r1, r1, r3
 80004b8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004bc:	e738      	b.n	8000330 <__udivmoddi4+0x104>
 80004be:	462e      	mov	r6, r5
 80004c0:	4628      	mov	r0, r5
 80004c2:	e705      	b.n	80002d0 <__udivmoddi4+0xa4>
 80004c4:	4606      	mov	r6, r0
 80004c6:	e6e3      	b.n	8000290 <__udivmoddi4+0x64>
 80004c8:	4618      	mov	r0, r3
 80004ca:	e6f8      	b.n	80002be <__udivmoddi4+0x92>
 80004cc:	454b      	cmp	r3, r9
 80004ce:	d2a9      	bcs.n	8000424 <__udivmoddi4+0x1f8>
 80004d0:	ebb9 0802 	subs.w	r8, r9, r2
 80004d4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004d8:	3801      	subs	r0, #1
 80004da:	e7a3      	b.n	8000424 <__udivmoddi4+0x1f8>
 80004dc:	4646      	mov	r6, r8
 80004de:	e7ea      	b.n	80004b6 <__udivmoddi4+0x28a>
 80004e0:	4620      	mov	r0, r4
 80004e2:	e794      	b.n	800040e <__udivmoddi4+0x1e2>
 80004e4:	4640      	mov	r0, r8
 80004e6:	e7d1      	b.n	800048c <__udivmoddi4+0x260>
 80004e8:	46d0      	mov	r8, sl
 80004ea:	e77b      	b.n	80003e4 <__udivmoddi4+0x1b8>
 80004ec:	3b02      	subs	r3, #2
 80004ee:	4461      	add	r1, ip
 80004f0:	e732      	b.n	8000358 <__udivmoddi4+0x12c>
 80004f2:	4630      	mov	r0, r6
 80004f4:	e709      	b.n	800030a <__udivmoddi4+0xde>
 80004f6:	4464      	add	r4, ip
 80004f8:	3802      	subs	r0, #2
 80004fa:	e742      	b.n	8000382 <__udivmoddi4+0x156>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <APP_GREEN_LED_ON>:
#include "app.h"
#include <string.h>

extern UART_HandleTypeDef huart1;

void APP_GREEN_LED_ON(){
 8000500:	b5b0      	push	{r4, r5, r7, lr}
 8000502:	b086      	sub	sp, #24
 8000504:	af00      	add	r7, sp, #0
	uint8_t log[] = "APP_GREEN_LED_ON\r\n";
 8000506:	4b0c      	ldr	r3, [pc, #48]	; (8000538 <APP_GREEN_LED_ON+0x38>)
 8000508:	1d3c      	adds	r4, r7, #4
 800050a:	461d      	mov	r5, r3
 800050c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800050e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000510:	682b      	ldr	r3, [r5, #0]
 8000512:	461a      	mov	r2, r3
 8000514:	8022      	strh	r2, [r4, #0]
 8000516:	3402      	adds	r4, #2
 8000518:	0c1b      	lsrs	r3, r3, #16
 800051a:	7023      	strb	r3, [r4, #0]
	uart_log(log);
 800051c:	1d3b      	adds	r3, r7, #4
 800051e:	4618      	mov	r0, r3
 8000520:	f000 f89c 	bl	800065c <uart_log>
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, SET);
 8000524:	2201      	movs	r2, #1
 8000526:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800052a:	4804      	ldr	r0, [pc, #16]	; (800053c <APP_GREEN_LED_ON+0x3c>)
 800052c:	f001 f894 	bl	8001658 <HAL_GPIO_WritePin>
}
 8000530:	bf00      	nop
 8000532:	3718      	adds	r7, #24
 8000534:	46bd      	mov	sp, r7
 8000536:	bdb0      	pop	{r4, r5, r7, pc}
 8000538:	08002f5c 	.word	0x08002f5c
 800053c:	40021800 	.word	0x40021800

08000540 <APP_GREEN_LED_OFF>:

void APP_GREEN_LED_OFF(){
 8000540:	b5b0      	push	{r4, r5, r7, lr}
 8000542:	b086      	sub	sp, #24
 8000544:	af00      	add	r7, sp, #0
	uint8_t log[] = "APP_GREEN_LED_OFF\r\n";
 8000546:	4b0a      	ldr	r3, [pc, #40]	; (8000570 <APP_GREEN_LED_OFF+0x30>)
 8000548:	1d3c      	adds	r4, r7, #4
 800054a:	461d      	mov	r5, r3
 800054c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800054e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000550:	682b      	ldr	r3, [r5, #0]
 8000552:	6023      	str	r3, [r4, #0]
	uart_log(log);
 8000554:	1d3b      	adds	r3, r7, #4
 8000556:	4618      	mov	r0, r3
 8000558:	f000 f880 	bl	800065c <uart_log>
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, RESET);
 800055c:	2200      	movs	r2, #0
 800055e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000562:	4804      	ldr	r0, [pc, #16]	; (8000574 <APP_GREEN_LED_OFF+0x34>)
 8000564:	f001 f878 	bl	8001658 <HAL_GPIO_WritePin>
}
 8000568:	bf00      	nop
 800056a:	3718      	adds	r7, #24
 800056c:	46bd      	mov	sp, r7
 800056e:	bdb0      	pop	{r4, r5, r7, pc}
 8000570:	08002f70 	.word	0x08002f70
 8000574:	40021800 	.word	0x40021800

08000578 <APP_GREEN_LED_BLINK>:

void APP_GREEN_LED_BLINK(){
 8000578:	b5b0      	push	{r4, r5, r7, lr}
 800057a:	b086      	sub	sp, #24
 800057c:	af00      	add	r7, sp, #0
	uint8_t log[] = "APP_GREEN_LED_BLINK\r\n";
 800057e:	4b0b      	ldr	r3, [pc, #44]	; (80005ac <APP_GREEN_LED_BLINK+0x34>)
 8000580:	463c      	mov	r4, r7
 8000582:	461d      	mov	r5, r3
 8000584:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000586:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000588:	e895 0003 	ldmia.w	r5, {r0, r1}
 800058c:	6020      	str	r0, [r4, #0]
 800058e:	3404      	adds	r4, #4
 8000590:	8021      	strh	r1, [r4, #0]
	uart_log(log);
 8000592:	463b      	mov	r3, r7
 8000594:	4618      	mov	r0, r3
 8000596:	f000 f861 	bl	800065c <uart_log>
	HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 800059a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800059e:	4804      	ldr	r0, [pc, #16]	; (80005b0 <APP_GREEN_LED_BLINK+0x38>)
 80005a0:	f001 f873 	bl	800168a <HAL_GPIO_TogglePin>
}
 80005a4:	bf00      	nop
 80005a6:	3718      	adds	r7, #24
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bdb0      	pop	{r4, r5, r7, pc}
 80005ac:	08002f84 	.word	0x08002f84
 80005b0:	40021800 	.word	0x40021800

080005b4 <APP_RED_LED_ON>:

void APP_RED_LED_ON(){
 80005b4:	b5b0      	push	{r4, r5, r7, lr}
 80005b6:	b086      	sub	sp, #24
 80005b8:	af00      	add	r7, sp, #0
	uint8_t log[] = "APP_RED_LED_ON\r\n";
 80005ba:	4b0a      	ldr	r3, [pc, #40]	; (80005e4 <APP_RED_LED_ON+0x30>)
 80005bc:	1d3c      	adds	r4, r7, #4
 80005be:	461d      	mov	r5, r3
 80005c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005c4:	682b      	ldr	r3, [r5, #0]
 80005c6:	7023      	strb	r3, [r4, #0]
	uart_log(log);
 80005c8:	1d3b      	adds	r3, r7, #4
 80005ca:	4618      	mov	r0, r3
 80005cc:	f000 f846 	bl	800065c <uart_log>
	HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, SET);
 80005d0:	2201      	movs	r2, #1
 80005d2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005d6:	4804      	ldr	r0, [pc, #16]	; (80005e8 <APP_RED_LED_ON+0x34>)
 80005d8:	f001 f83e 	bl	8001658 <HAL_GPIO_WritePin>
}
 80005dc:	bf00      	nop
 80005de:	3718      	adds	r7, #24
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bdb0      	pop	{r4, r5, r7, pc}
 80005e4:	08002f9c 	.word	0x08002f9c
 80005e8:	40021800 	.word	0x40021800

080005ec <APP_RED_LED_OFF>:

void APP_RED_LED_OFF(){
 80005ec:	b5b0      	push	{r4, r5, r7, lr}
 80005ee:	b086      	sub	sp, #24
 80005f0:	af00      	add	r7, sp, #0
	uint8_t log[] = "APP_RED_LED_OFF\r\n";
 80005f2:	4b0a      	ldr	r3, [pc, #40]	; (800061c <APP_RED_LED_OFF+0x30>)
 80005f4:	1d3c      	adds	r4, r7, #4
 80005f6:	461d      	mov	r5, r3
 80005f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005fc:	682b      	ldr	r3, [r5, #0]
 80005fe:	8023      	strh	r3, [r4, #0]
	uart_log(log);
 8000600:	1d3b      	adds	r3, r7, #4
 8000602:	4618      	mov	r0, r3
 8000604:	f000 f82a 	bl	800065c <uart_log>
	HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, RESET);
 8000608:	2200      	movs	r2, #0
 800060a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800060e:	4804      	ldr	r0, [pc, #16]	; (8000620 <APP_RED_LED_OFF+0x34>)
 8000610:	f001 f822 	bl	8001658 <HAL_GPIO_WritePin>
}
 8000614:	bf00      	nop
 8000616:	3718      	adds	r7, #24
 8000618:	46bd      	mov	sp, r7
 800061a:	bdb0      	pop	{r4, r5, r7, pc}
 800061c:	08002fb0 	.word	0x08002fb0
 8000620:	40021800 	.word	0x40021800

08000624 <APP_RED_LED_BLINK>:

void APP_RED_LED_BLINK(){
 8000624:	b5b0      	push	{r4, r5, r7, lr}
 8000626:	b086      	sub	sp, #24
 8000628:	af00      	add	r7, sp, #0
	uint8_t log[] = "APP_RED_LED_BLINK\r\n";
 800062a:	4b0a      	ldr	r3, [pc, #40]	; (8000654 <APP_RED_LED_BLINK+0x30>)
 800062c:	1d3c      	adds	r4, r7, #4
 800062e:	461d      	mov	r5, r3
 8000630:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000632:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000634:	682b      	ldr	r3, [r5, #0]
 8000636:	6023      	str	r3, [r4, #0]
	uart_log(log);
 8000638:	1d3b      	adds	r3, r7, #4
 800063a:	4618      	mov	r0, r3
 800063c:	f000 f80e 	bl	800065c <uart_log>
	HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
 8000640:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000644:	4804      	ldr	r0, [pc, #16]	; (8000658 <APP_RED_LED_BLINK+0x34>)
 8000646:	f001 f820 	bl	800168a <HAL_GPIO_TogglePin>
}
 800064a:	bf00      	nop
 800064c:	3718      	adds	r7, #24
 800064e:	46bd      	mov	sp, r7
 8000650:	bdb0      	pop	{r4, r5, r7, pc}
 8000652:	bf00      	nop
 8000654:	08002fc4 	.word	0x08002fc4
 8000658:	40021800 	.word	0x40021800

0800065c <uart_log>:

void uart_log(uint8_t * str){
 800065c:	b580      	push	{r7, lr}
 800065e:	b082      	sub	sp, #8
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, str, strlen((char *)str), HAL_MAX_DELAY);
 8000664:	6878      	ldr	r0, [r7, #4]
 8000666:	f7ff fdc1 	bl	80001ec <strlen>
 800066a:	4603      	mov	r3, r0
 800066c:	b29a      	uxth	r2, r3
 800066e:	f04f 33ff 	mov.w	r3, #4294967295
 8000672:	6879      	ldr	r1, [r7, #4]
 8000674:	4803      	ldr	r0, [pc, #12]	; (8000684 <uart_log+0x28>)
 8000676:	f001 fd20 	bl	80020ba <HAL_UART_Transmit>
}
 800067a:	bf00      	nop
 800067c:	3708      	adds	r7, #8
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	20000028 	.word	0x20000028

08000688 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800068c:	f000 fc90 	bl	8000fb0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000690:	f000 f822 	bl	80006d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000694:	f000 f8b6 	bl	8000804 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000698:	f000 f88a 	bl	80007b0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  Lamp_ctor(&lamp);
 800069c:	480c      	ldr	r0, [pc, #48]	; (80006d0 <main+0x48>)
 800069e:	f002 f893 	bl	80027c8 <Lamp_ctor>
  QHSM_INIT( &lamp.super, (QEvt *)0, 0 );
 80006a2:	4b0b      	ldr	r3, [pc, #44]	; (80006d0 <main+0x48>)
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d103      	bne.n	80006b2 <main+0x2a>
 80006aa:	215e      	movs	r1, #94	; 0x5e
 80006ac:	4809      	ldr	r0, [pc, #36]	; (80006d4 <main+0x4c>)
 80006ae:	f000 fb39 	bl	8000d24 <Q_onAssert>
 80006b2:	4b07      	ldr	r3, [pc, #28]	; (80006d0 <main+0x48>)
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	2200      	movs	r2, #0
 80006ba:	2100      	movs	r1, #0
 80006bc:	4804      	ldr	r0, [pc, #16]	; (80006d0 <main+0x48>)
 80006be:	4798      	blx	r3
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	 HAL_Delay(1000);
 80006c0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006c4:	f000 fce6 	bl	8001094 <HAL_Delay>
	 Lamp_blink(&lamp);
 80006c8:	4801      	ldr	r0, [pc, #4]	; (80006d0 <main+0x48>)
 80006ca:	f002 f89f 	bl	800280c <Lamp_blink>
	 HAL_Delay(1000);
 80006ce:	e7f7      	b.n	80006c0 <main+0x38>
 80006d0:	2000006c 	.word	0x2000006c
 80006d4:	0800302c 	.word	0x0800302c

080006d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b094      	sub	sp, #80	; 0x50
 80006dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006de:	f107 0320 	add.w	r3, r7, #32
 80006e2:	2230      	movs	r2, #48	; 0x30
 80006e4:	2100      	movs	r1, #0
 80006e6:	4618      	mov	r0, r3
 80006e8:	f002 fc24 	bl	8002f34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006ec:	f107 030c 	add.w	r3, r7, #12
 80006f0:	2200      	movs	r2, #0
 80006f2:	601a      	str	r2, [r3, #0]
 80006f4:	605a      	str	r2, [r3, #4]
 80006f6:	609a      	str	r2, [r3, #8]
 80006f8:	60da      	str	r2, [r3, #12]
 80006fa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006fc:	2300      	movs	r3, #0
 80006fe:	60bb      	str	r3, [r7, #8]
 8000700:	4b29      	ldr	r3, [pc, #164]	; (80007a8 <SystemClock_Config+0xd0>)
 8000702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000704:	4a28      	ldr	r2, [pc, #160]	; (80007a8 <SystemClock_Config+0xd0>)
 8000706:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800070a:	6413      	str	r3, [r2, #64]	; 0x40
 800070c:	4b26      	ldr	r3, [pc, #152]	; (80007a8 <SystemClock_Config+0xd0>)
 800070e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000710:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000714:	60bb      	str	r3, [r7, #8]
 8000716:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000718:	2300      	movs	r3, #0
 800071a:	607b      	str	r3, [r7, #4]
 800071c:	4b23      	ldr	r3, [pc, #140]	; (80007ac <SystemClock_Config+0xd4>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000724:	4a21      	ldr	r2, [pc, #132]	; (80007ac <SystemClock_Config+0xd4>)
 8000726:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800072a:	6013      	str	r3, [r2, #0]
 800072c:	4b1f      	ldr	r3, [pc, #124]	; (80007ac <SystemClock_Config+0xd4>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000734:	607b      	str	r3, [r7, #4]
 8000736:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000738:	2302      	movs	r3, #2
 800073a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800073c:	2301      	movs	r3, #1
 800073e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000740:	2310      	movs	r3, #16
 8000742:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000744:	2302      	movs	r3, #2
 8000746:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000748:	2300      	movs	r3, #0
 800074a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800074c:	2308      	movs	r3, #8
 800074e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000750:	2332      	movs	r3, #50	; 0x32
 8000752:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000754:	2304      	movs	r3, #4
 8000756:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000758:	2307      	movs	r3, #7
 800075a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800075c:	f107 0320 	add.w	r3, r7, #32
 8000760:	4618      	mov	r0, r3
 8000762:	f000 ffc5 	bl	80016f0 <HAL_RCC_OscConfig>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800076c:	f000 fb36 	bl	8000ddc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000770:	230f      	movs	r3, #15
 8000772:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000774:	2302      	movs	r3, #2
 8000776:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000778:	2300      	movs	r3, #0
 800077a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 800077c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000780:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8000782:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000786:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000788:	f107 030c 	add.w	r3, r7, #12
 800078c:	2100      	movs	r1, #0
 800078e:	4618      	mov	r0, r3
 8000790:	f001 fa26 	bl	8001be0 <HAL_RCC_ClockConfig>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800079a:	f000 fb1f 	bl	8000ddc <Error_Handler>
  }
}
 800079e:	bf00      	nop
 80007a0:	3750      	adds	r7, #80	; 0x50
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	40023800 	.word	0x40023800
 80007ac:	40007000 	.word	0x40007000

080007b0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007b4:	4b11      	ldr	r3, [pc, #68]	; (80007fc <MX_USART1_UART_Init+0x4c>)
 80007b6:	4a12      	ldr	r2, [pc, #72]	; (8000800 <MX_USART1_UART_Init+0x50>)
 80007b8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80007ba:	4b10      	ldr	r3, [pc, #64]	; (80007fc <MX_USART1_UART_Init+0x4c>)
 80007bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007c0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007c2:	4b0e      	ldr	r3, [pc, #56]	; (80007fc <MX_USART1_UART_Init+0x4c>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007c8:	4b0c      	ldr	r3, [pc, #48]	; (80007fc <MX_USART1_UART_Init+0x4c>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007ce:	4b0b      	ldr	r3, [pc, #44]	; (80007fc <MX_USART1_UART_Init+0x4c>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007d4:	4b09      	ldr	r3, [pc, #36]	; (80007fc <MX_USART1_UART_Init+0x4c>)
 80007d6:	220c      	movs	r2, #12
 80007d8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007da:	4b08      	ldr	r3, [pc, #32]	; (80007fc <MX_USART1_UART_Init+0x4c>)
 80007dc:	2200      	movs	r2, #0
 80007de:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007e0:	4b06      	ldr	r3, [pc, #24]	; (80007fc <MX_USART1_UART_Init+0x4c>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007e6:	4805      	ldr	r0, [pc, #20]	; (80007fc <MX_USART1_UART_Init+0x4c>)
 80007e8:	f001 fc1a 	bl	8002020 <HAL_UART_Init>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80007f2:	f000 faf3 	bl	8000ddc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80007f6:	bf00      	nop
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	20000028 	.word	0x20000028
 8000800:	40011000 	.word	0x40011000

08000804 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b08e      	sub	sp, #56	; 0x38
 8000808:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800080a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800080e:	2200      	movs	r2, #0
 8000810:	601a      	str	r2, [r3, #0]
 8000812:	605a      	str	r2, [r3, #4]
 8000814:	609a      	str	r2, [r3, #8]
 8000816:	60da      	str	r2, [r3, #12]
 8000818:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800081a:	2300      	movs	r3, #0
 800081c:	623b      	str	r3, [r7, #32]
 800081e:	4bb1      	ldr	r3, [pc, #708]	; (8000ae4 <MX_GPIO_Init+0x2e0>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	4ab0      	ldr	r2, [pc, #704]	; (8000ae4 <MX_GPIO_Init+0x2e0>)
 8000824:	f043 0304 	orr.w	r3, r3, #4
 8000828:	6313      	str	r3, [r2, #48]	; 0x30
 800082a:	4bae      	ldr	r3, [pc, #696]	; (8000ae4 <MX_GPIO_Init+0x2e0>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	f003 0304 	and.w	r3, r3, #4
 8000832:	623b      	str	r3, [r7, #32]
 8000834:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000836:	2300      	movs	r3, #0
 8000838:	61fb      	str	r3, [r7, #28]
 800083a:	4baa      	ldr	r3, [pc, #680]	; (8000ae4 <MX_GPIO_Init+0x2e0>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083e:	4aa9      	ldr	r2, [pc, #676]	; (8000ae4 <MX_GPIO_Init+0x2e0>)
 8000840:	f043 0320 	orr.w	r3, r3, #32
 8000844:	6313      	str	r3, [r2, #48]	; 0x30
 8000846:	4ba7      	ldr	r3, [pc, #668]	; (8000ae4 <MX_GPIO_Init+0x2e0>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	f003 0320 	and.w	r3, r3, #32
 800084e:	61fb      	str	r3, [r7, #28]
 8000850:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000852:	2300      	movs	r3, #0
 8000854:	61bb      	str	r3, [r7, #24]
 8000856:	4ba3      	ldr	r3, [pc, #652]	; (8000ae4 <MX_GPIO_Init+0x2e0>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	4aa2      	ldr	r2, [pc, #648]	; (8000ae4 <MX_GPIO_Init+0x2e0>)
 800085c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000860:	6313      	str	r3, [r2, #48]	; 0x30
 8000862:	4ba0      	ldr	r3, [pc, #640]	; (8000ae4 <MX_GPIO_Init+0x2e0>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800086a:	61bb      	str	r3, [r7, #24]
 800086c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800086e:	2300      	movs	r3, #0
 8000870:	617b      	str	r3, [r7, #20]
 8000872:	4b9c      	ldr	r3, [pc, #624]	; (8000ae4 <MX_GPIO_Init+0x2e0>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	4a9b      	ldr	r2, [pc, #620]	; (8000ae4 <MX_GPIO_Init+0x2e0>)
 8000878:	f043 0301 	orr.w	r3, r3, #1
 800087c:	6313      	str	r3, [r2, #48]	; 0x30
 800087e:	4b99      	ldr	r3, [pc, #612]	; (8000ae4 <MX_GPIO_Init+0x2e0>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000882:	f003 0301 	and.w	r3, r3, #1
 8000886:	617b      	str	r3, [r7, #20]
 8000888:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800088a:	2300      	movs	r3, #0
 800088c:	613b      	str	r3, [r7, #16]
 800088e:	4b95      	ldr	r3, [pc, #596]	; (8000ae4 <MX_GPIO_Init+0x2e0>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000892:	4a94      	ldr	r2, [pc, #592]	; (8000ae4 <MX_GPIO_Init+0x2e0>)
 8000894:	f043 0302 	orr.w	r3, r3, #2
 8000898:	6313      	str	r3, [r2, #48]	; 0x30
 800089a:	4b92      	ldr	r3, [pc, #584]	; (8000ae4 <MX_GPIO_Init+0x2e0>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089e:	f003 0302 	and.w	r3, r3, #2
 80008a2:	613b      	str	r3, [r7, #16]
 80008a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008a6:	2300      	movs	r3, #0
 80008a8:	60fb      	str	r3, [r7, #12]
 80008aa:	4b8e      	ldr	r3, [pc, #568]	; (8000ae4 <MX_GPIO_Init+0x2e0>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ae:	4a8d      	ldr	r2, [pc, #564]	; (8000ae4 <MX_GPIO_Init+0x2e0>)
 80008b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008b4:	6313      	str	r3, [r2, #48]	; 0x30
 80008b6:	4b8b      	ldr	r3, [pc, #556]	; (8000ae4 <MX_GPIO_Init+0x2e0>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008be:	60fb      	str	r3, [r7, #12]
 80008c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008c2:	2300      	movs	r3, #0
 80008c4:	60bb      	str	r3, [r7, #8]
 80008c6:	4b87      	ldr	r3, [pc, #540]	; (8000ae4 <MX_GPIO_Init+0x2e0>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ca:	4a86      	ldr	r2, [pc, #536]	; (8000ae4 <MX_GPIO_Init+0x2e0>)
 80008cc:	f043 0310 	orr.w	r3, r3, #16
 80008d0:	6313      	str	r3, [r2, #48]	; 0x30
 80008d2:	4b84      	ldr	r3, [pc, #528]	; (8000ae4 <MX_GPIO_Init+0x2e0>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d6:	f003 0310 	and.w	r3, r3, #16
 80008da:	60bb      	str	r3, [r7, #8]
 80008dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008de:	2300      	movs	r3, #0
 80008e0:	607b      	str	r3, [r7, #4]
 80008e2:	4b80      	ldr	r3, [pc, #512]	; (8000ae4 <MX_GPIO_Init+0x2e0>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e6:	4a7f      	ldr	r2, [pc, #508]	; (8000ae4 <MX_GPIO_Init+0x2e0>)
 80008e8:	f043 0308 	orr.w	r3, r3, #8
 80008ec:	6313      	str	r3, [r2, #48]	; 0x30
 80008ee:	4b7d      	ldr	r3, [pc, #500]	; (8000ae4 <MX_GPIO_Init+0x2e0>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f2:	f003 0308 	and.w	r3, r3, #8
 80008f6:	607b      	str	r3, [r7, #4]
 80008f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|BOTTON_YELLOW_Pin, GPIO_PIN_RESET);
 80008fa:	2200      	movs	r2, #0
 80008fc:	2116      	movs	r1, #22
 80008fe:	487a      	ldr	r0, [pc, #488]	; (8000ae8 <MX_GPIO_Init+0x2e4>)
 8000900:	f000 feaa 	bl	8001658 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8000904:	2200      	movs	r2, #0
 8000906:	2180      	movs	r1, #128	; 0x80
 8000908:	4878      	ldr	r0, [pc, #480]	; (8000aec <MX_GPIO_Init+0x2e8>)
 800090a:	f000 fea5 	bl	8001658 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 800090e:	2200      	movs	r2, #0
 8000910:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8000914:	4876      	ldr	r0, [pc, #472]	; (8000af0 <MX_GPIO_Init+0x2ec>)
 8000916:	f000 fe9f 	bl	8001658 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 800091a:	2200      	movs	r2, #0
 800091c:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000920:	4874      	ldr	r0, [pc, #464]	; (8000af4 <MX_GPIO_Init+0x2f0>)
 8000922:	f000 fe99 	bl	8001658 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A0_Pin A1_Pin A2_Pin A3_Pin
                           A4_Pin A5_Pin SDNRAS_Pin A6_Pin
                           A7_Pin A8_Pin A9_Pin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8000926:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800092a:	627b      	str	r3, [r7, #36]	; 0x24
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800092c:	2302      	movs	r3, #2
 800092e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000930:	2300      	movs	r3, #0
 8000932:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000934:	2303      	movs	r3, #3
 8000936:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000938:	230c      	movs	r3, #12
 800093a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800093c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000940:	4619      	mov	r1, r3
 8000942:	486d      	ldr	r0, [pc, #436]	; (8000af8 <MX_GPIO_Init+0x2f4>)
 8000944:	f000 fcdc 	bl	8001300 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI5_SCK_Pin SPI5_MISO_Pin SPI5_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8000948:	f44f 7360 	mov.w	r3, #896	; 0x380
 800094c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800094e:	2302      	movs	r3, #2
 8000950:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000952:	2300      	movs	r3, #0
 8000954:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000956:	2300      	movs	r3, #0
 8000958:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 800095a:	2305      	movs	r3, #5
 800095c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800095e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000962:	4619      	mov	r1, r3
 8000964:	4864      	ldr	r0, [pc, #400]	; (8000af8 <MX_GPIO_Init+0x2f4>)
 8000966:	f000 fccb 	bl	8001300 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENABLE_Pin */
  GPIO_InitStruct.Pin = ENABLE_Pin;
 800096a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800096e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000970:	2302      	movs	r3, #2
 8000972:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000974:	2300      	movs	r3, #0
 8000976:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000978:	2300      	movs	r3, #0
 800097a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800097c:	230e      	movs	r3, #14
 800097e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8000980:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000984:	4619      	mov	r1, r3
 8000986:	485c      	ldr	r0, [pc, #368]	; (8000af8 <MX_GPIO_Init+0x2f4>)
 8000988:	f000 fcba 	bl	8001300 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDNWE_Pin */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 800098c:	2301      	movs	r3, #1
 800098e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000990:	2302      	movs	r3, #2
 8000992:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000994:	2300      	movs	r3, #0
 8000996:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000998:	2303      	movs	r3, #3
 800099a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800099c:	230c      	movs	r3, #12
 800099e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 80009a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009a4:	4619      	mov	r1, r3
 80009a6:	4850      	ldr	r0, [pc, #320]	; (8000ae8 <MX_GPIO_Init+0x2e4>)
 80009a8:	f000 fcaa 	bl	8001300 <HAL_GPIO_Init>

  /*Configure GPIO pin : NCS_MEMS_SPI_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin;
 80009ac:	2302      	movs	r3, #2
 80009ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b0:	2301      	movs	r3, #1
 80009b2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b4:	2300      	movs	r3, #0
 80009b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b8:	2300      	movs	r3, #0
 80009ba:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(NCS_MEMS_SPI_GPIO_Port, &GPIO_InitStruct);
 80009bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009c0:	4619      	mov	r1, r3
 80009c2:	4849      	ldr	r0, [pc, #292]	; (8000ae8 <MX_GPIO_Init+0x2e4>)
 80009c4:	f000 fc9c 	bl	8001300 <HAL_GPIO_Init>

  /*Configure GPIO pins : CSX_Pin BOTTON_YELLOW_Pin */
  GPIO_InitStruct.Pin = CSX_Pin|BOTTON_YELLOW_Pin;
 80009c8:	2314      	movs	r3, #20
 80009ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009cc:	2301      	movs	r3, #1
 80009ce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80009d0:	2302      	movs	r3, #2
 80009d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d4:	2300      	movs	r3, #0
 80009d6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009dc:	4619      	mov	r1, r3
 80009de:	4842      	ldr	r0, [pc, #264]	; (8000ae8 <MX_GPIO_Init+0x2e4>)
 80009e0:	f000 fc8e 	bl	8001300 <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|TP_INT1_Pin;
 80009e4:	f248 0301 	movw	r3, #32769	; 0x8001
 80009e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009ea:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80009ee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f0:	2300      	movs	r3, #0
 80009f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009f8:	4619      	mov	r1, r3
 80009fa:	483c      	ldr	r0, [pc, #240]	; (8000aec <MX_GPIO_Init+0x2e8>)
 80009fc:	f000 fc80 	bl	8001300 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_1_Pin BUTTON_2_Pin */
  GPIO_InitStruct.Pin = BUTTON_1_Pin|BUTTON_2_Pin;
 8000a00:	2306      	movs	r3, #6
 8000a02:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a04:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a08:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000a0a:	2302      	movs	r3, #2
 8000a0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a12:	4619      	mov	r1, r3
 8000a14:	4835      	ldr	r0, [pc, #212]	; (8000aec <MX_GPIO_Init+0x2e8>)
 8000a16:	f000 fc73 	bl	8001300 <HAL_GPIO_Init>

  /*Configure GPIO pins : B5_Pin VSYNC_Pin G2_Pin R4_Pin
                           R5_Pin */
  GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8000a1a:	f641 0358 	movw	r3, #6232	; 0x1858
 8000a1e:	627b      	str	r3, [r7, #36]	; 0x24
                          |R5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a20:	2302      	movs	r3, #2
 8000a22:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a24:	2300      	movs	r3, #0
 8000a26:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000a2c:	230e      	movs	r3, #14
 8000a2e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a34:	4619      	mov	r1, r3
 8000a36:	482d      	ldr	r0, [pc, #180]	; (8000aec <MX_GPIO_Init+0x2e8>)
 8000a38:	f000 fc62 	bl	8001300 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8000a3c:	2380      	movs	r3, #128	; 0x80
 8000a3e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a40:	2301      	movs	r3, #1
 8000a42:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a44:	2300      	movs	r3, #0
 8000a46:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8000a4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a50:	4619      	mov	r1, r3
 8000a52:	4826      	ldr	r0, [pc, #152]	; (8000aec <MX_GPIO_Init+0x2e8>)
 8000a54:	f000 fc54 	bl	8001300 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8000a58:	2320      	movs	r3, #32
 8000a5a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a5c:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000a60:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a62:	2300      	movs	r3, #0
 8000a64:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8000a66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	481e      	ldr	r0, [pc, #120]	; (8000ae8 <MX_GPIO_Init+0x2e4>)
 8000a6e:	f000 fc47 	bl	8001300 <HAL_GPIO_Init>

  /*Configure GPIO pins : R3_Pin R6_Pin */
  GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8000a72:	2303      	movs	r3, #3
 8000a74:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a76:	2302      	movs	r3, #2
 8000a78:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000a82:	2309      	movs	r3, #9
 8000a84:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	481b      	ldr	r0, [pc, #108]	; (8000afc <MX_GPIO_Init+0x2f8>)
 8000a8e:	f000 fc37 	bl	8001300 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000a92:	2304      	movs	r3, #4
 8000a94:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a96:	2300      	movs	r3, #0
 8000a98:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000a9a:	2302      	movs	r3, #2
 8000a9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000a9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	4815      	ldr	r0, [pc, #84]	; (8000afc <MX_GPIO_Init+0x2f8>)
 8000aa6:	f000 fc2b 	bl	8001300 <HAL_GPIO_Init>

  /*Configure GPIO pins : A10_Pin A11_Pin BA0_Pin BA1_Pin
                           SDCLK_Pin SDNCAS_Pin */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8000aaa:	f248 1333 	movw	r3, #33075	; 0x8133
 8000aae:	627b      	str	r3, [r7, #36]	; 0x24
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab0:	2302      	movs	r3, #2
 8000ab2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ab8:	2303      	movs	r3, #3
 8000aba:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000abc:	230c      	movs	r3, #12
 8000abe:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ac0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	480b      	ldr	r0, [pc, #44]	; (8000af4 <MX_GPIO_Init+0x2f0>)
 8000ac8:	f000 fc1a 	bl	8001300 <HAL_GPIO_Init>

  /*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D7_Pin
                           D8_Pin D9_Pin D10_Pin D11_Pin
                           D12_Pin NBL0_Pin NBL1_Pin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8000acc:	f64f 7383 	movw	r3, #65411	; 0xff83
 8000ad0:	627b      	str	r3, [r7, #36]	; 0x24
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad2:	2302      	movs	r3, #2
 8000ad4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ada:	2303      	movs	r3, #3
 8000adc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000ade:	230c      	movs	r3, #12
 8000ae0:	637b      	str	r3, [r7, #52]	; 0x34
 8000ae2:	e00d      	b.n	8000b00 <MX_GPIO_Init+0x2fc>
 8000ae4:	40023800 	.word	0x40023800
 8000ae8:	40020800 	.word	0x40020800
 8000aec:	40020000 	.word	0x40020000
 8000af0:	40020c00 	.word	0x40020c00
 8000af4:	40021800 	.word	0x40021800
 8000af8:	40021400 	.word	0x40021400
 8000afc:	40020400 	.word	0x40020400
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b04:	4619      	mov	r1, r3
 8000b06:	4881      	ldr	r0, [pc, #516]	; (8000d0c <MX_GPIO_Init+0x508>)
 8000b08:	f000 fbfa 	bl	8001300 <HAL_GPIO_Init>

  /*Configure GPIO pins : G4_Pin G5_Pin B6_Pin B7_Pin */
  GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8000b0c:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8000b10:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b12:	2302      	movs	r3, #2
 8000b14:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b16:	2300      	movs	r3, #0
 8000b18:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000b1e:	230e      	movs	r3, #14
 8000b20:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b26:	4619      	mov	r1, r3
 8000b28:	4879      	ldr	r0, [pc, #484]	; (8000d10 <MX_GPIO_Init+0x50c>)
 8000b2a:	f000 fbe9 	bl	8001300 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_HS_ID_Pin OTG_HS_DM_Pin OTG_HS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 8000b2e:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 8000b32:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b34:	2302      	movs	r3, #2
 8000b36:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8000b40:	230c      	movs	r3, #12
 8000b42:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b48:	4619      	mov	r1, r3
 8000b4a:	4871      	ldr	r0, [pc, #452]	; (8000d10 <MX_GPIO_Init+0x50c>)
 8000b4c:	f000 fbd8 	bl	8001300 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_HS_Pin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 8000b50:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b54:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b56:	2300      	movs	r3, #0
 8000b58:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 8000b5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b62:	4619      	mov	r1, r3
 8000b64:	486a      	ldr	r0, [pc, #424]	; (8000d10 <MX_GPIO_Init+0x50c>)
 8000b66:	f000 fbcb 	bl	8001300 <HAL_GPIO_Init>

  /*Configure GPIO pins : D13_Pin D14_Pin D15_Pin D0_Pin
                           D1_Pin D2_Pin D3_Pin */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8000b6a:	f24c 7303 	movw	r3, #50947	; 0xc703
 8000b6e:	627b      	str	r3, [r7, #36]	; 0x24
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b70:	2302      	movs	r3, #2
 8000b72:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b74:	2300      	movs	r3, #0
 8000b76:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b78:	2303      	movs	r3, #3
 8000b7a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000b7c:	230c      	movs	r3, #12
 8000b7e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b84:	4619      	mov	r1, r3
 8000b86:	4863      	ldr	r0, [pc, #396]	; (8000d14 <MX_GPIO_Init+0x510>)
 8000b88:	f000 fbba 	bl	8001300 <HAL_GPIO_Init>

  /*Configure GPIO pins : TE_Pin PD4 */
  GPIO_InitStruct.Pin = TE_Pin|GPIO_PIN_4;
 8000b8c:	f44f 6301 	mov.w	r3, #2064	; 0x810
 8000b90:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b92:	2300      	movs	r3, #0
 8000b94:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b96:	2300      	movs	r3, #0
 8000b98:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	485c      	ldr	r0, [pc, #368]	; (8000d14 <MX_GPIO_Init+0x510>)
 8000ba2:	f000 fbad 	bl	8001300 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8000ba6:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000baa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bac:	2301      	movs	r3, #1
 8000bae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bb8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	4855      	ldr	r0, [pc, #340]	; (8000d14 <MX_GPIO_Init+0x510>)
 8000bc0:	f000 fb9e 	bl	8001300 <HAL_GPIO_Init>

  /*Configure GPIO pins : R7_Pin DOTCLK_Pin B3_Pin */
  GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8000bc4:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8000bc8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bca:	2302      	movs	r3, #2
 8000bcc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000bd6:	230e      	movs	r3, #14
 8000bd8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000bda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bde:	4619      	mov	r1, r3
 8000be0:	484d      	ldr	r0, [pc, #308]	; (8000d18 <MX_GPIO_Init+0x514>)
 8000be2:	f000 fb8d 	bl	8001300 <HAL_GPIO_Init>

  /*Configure GPIO pins : HSYNC_Pin G6_Pin R2_Pin */
  GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8000be6:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8000bea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bec:	2302      	movs	r3, #2
 8000bee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000bf8:	230e      	movs	r3, #14
 8000bfa:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bfc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c00:	4619      	mov	r1, r3
 8000c02:	4846      	ldr	r0, [pc, #280]	; (8000d1c <MX_GPIO_Init+0x518>)
 8000c04:	f000 fb7c 	bl	8001300 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C3_SDA_Pin */
  GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8000c08:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c0c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c0e:	2312      	movs	r3, #18
 8000c10:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c12:	2300      	movs	r3, #0
 8000c14:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c16:	2300      	movs	r3, #0
 8000c18:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000c1a:	2304      	movs	r3, #4
 8000c1c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8000c1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c22:	4619      	mov	r1, r3
 8000c24:	483d      	ldr	r0, [pc, #244]	; (8000d1c <MX_GPIO_Init+0x518>)
 8000c26:	f000 fb6b 	bl	8001300 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C3_SCL_Pin */
  GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8000c2a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c2e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c30:	2312      	movs	r3, #18
 8000c32:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c34:	2300      	movs	r3, #0
 8000c36:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000c3c:	2304      	movs	r3, #4
 8000c3e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8000c40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c44:	4619      	mov	r1, r3
 8000c46:	4836      	ldr	r0, [pc, #216]	; (8000d20 <MX_GPIO_Init+0x51c>)
 8000c48:	f000 fb5a 	bl	8001300 <HAL_GPIO_Init>

  /*Configure GPIO pins : G7_Pin B2_Pin */
  GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8000c4c:	2348      	movs	r3, #72	; 0x48
 8000c4e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c50:	2302      	movs	r3, #2
 8000c52:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c54:	2300      	movs	r3, #0
 8000c56:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000c5c:	230e      	movs	r3, #14
 8000c5e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c64:	4619      	mov	r1, r3
 8000c66:	482b      	ldr	r0, [pc, #172]	; (8000d14 <MX_GPIO_Init+0x510>)
 8000c68:	f000 fb4a 	bl	8001300 <HAL_GPIO_Init>

  /*Configure GPIO pins : G3_Pin B4_Pin */
  GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8000c6c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000c70:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c72:	2302      	movs	r3, #2
 8000c74:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c76:	2300      	movs	r3, #0
 8000c78:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000c7e:	2309      	movs	r3, #9
 8000c80:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c86:	4619      	mov	r1, r3
 8000c88:	4823      	ldr	r0, [pc, #140]	; (8000d18 <MX_GPIO_Init+0x514>)
 8000c8a:	f000 fb39 	bl	8001300 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8000c8e:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000c92:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c94:	2301      	movs	r3, #1
 8000c96:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ca0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	481c      	ldr	r0, [pc, #112]	; (8000d18 <MX_GPIO_Init+0x514>)
 8000ca8:	f000 fb2a 	bl	8001300 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000cac:	2310      	movs	r3, #16
 8000cae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cb8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	4814      	ldr	r0, [pc, #80]	; (8000d10 <MX_GPIO_Init+0x50c>)
 8000cc0:	f000 fb1e 	bl	8001300 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDCKE1_Pin SDNE1_Pin */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8000cc4:	2360      	movs	r3, #96	; 0x60
 8000cc6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc8:	2302      	movs	r3, #2
 8000cca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cd0:	2303      	movs	r3, #3
 8000cd2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000cd4:	230c      	movs	r3, #12
 8000cd6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cdc:	4619      	mov	r1, r3
 8000cde:	480c      	ldr	r0, [pc, #48]	; (8000d10 <MX_GPIO_Init+0x50c>)
 8000ce0:	f000 fb0e 	bl	8001300 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	2100      	movs	r1, #0
 8000ce8:	2007      	movs	r0, #7
 8000cea:	f000 fad2 	bl	8001292 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000cee:	2007      	movs	r0, #7
 8000cf0:	f000 faeb 	bl	80012ca <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	2100      	movs	r1, #0
 8000cf8:	2008      	movs	r0, #8
 8000cfa:	f000 faca 	bl	8001292 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000cfe:	2008      	movs	r0, #8
 8000d00:	f000 fae3 	bl	80012ca <HAL_NVIC_EnableIRQ>

}
 8000d04:	bf00      	nop
 8000d06:	3738      	adds	r7, #56	; 0x38
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	40021000 	.word	0x40021000
 8000d10:	40020400 	.word	0x40020400
 8000d14:	40020c00 	.word	0x40020c00
 8000d18:	40021800 	.word	0x40021800
 8000d1c:	40020800 	.word	0x40020800
 8000d20:	40020000 	.word	0x40020000

08000d24 <Q_onAssert>:

/* USER CODE BEGIN 4 */
void Q_onAssert( char const * 	module, int_t 	location ){
 8000d24:	b590      	push	{r4, r7, lr}
 8000d26:	b087      	sub	sp, #28
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
 8000d2c:	6039      	str	r1, [r7, #0]
	uint8_t log[] = "Q_onAssert\r\n";
 8000d2e:	4b06      	ldr	r3, [pc, #24]	; (8000d48 <Q_onAssert+0x24>)
 8000d30:	f107 0408 	add.w	r4, r7, #8
 8000d34:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000d36:	c407      	stmia	r4!, {r0, r1, r2}
 8000d38:	7023      	strb	r3, [r4, #0]
	uart_log(log);
 8000d3a:	f107 0308 	add.w	r3, r7, #8
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f7ff fc8c 	bl	800065c <uart_log>
	while(1);
 8000d44:	e7fe      	b.n	8000d44 <Q_onAssert+0x20>
 8000d46:	bf00      	nop
 8000d48:	08002fd8 	.word	0x08002fd8

08000d4c <HAL_GPIO_EXTI_Callback>:
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000d4c:	b5b0      	push	{r4, r5, r7, lr}
 8000d4e:	b094      	sub	sp, #80	; 0x50
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	4603      	mov	r3, r0
 8000d54:	80fb      	strh	r3, [r7, #6]
	uint8_t log[] = "GPIO_EXTI_Callback\r\n";
 8000d56:	4b1d      	ldr	r3, [pc, #116]	; (8000dcc <HAL_GPIO_EXTI_Callback+0x80>)
 8000d58:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8000d5c:	461d      	mov	r5, r3
 8000d5e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d60:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d62:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000d66:	6020      	str	r0, [r4, #0]
 8000d68:	3404      	adds	r4, #4
 8000d6a:	7021      	strb	r1, [r4, #0]
	uart_log(log);
 8000d6c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000d70:	4618      	mov	r0, r3
 8000d72:	f7ff fc73 	bl	800065c <uart_log>

	if(GPIO_Pin == BUTTON_2_Pin){
 8000d76:	88fb      	ldrh	r3, [r7, #6]
 8000d78:	2b04      	cmp	r3, #4
 8000d7a:	d110      	bne.n	8000d9e <HAL_GPIO_EXTI_Callback+0x52>
		uint8_t log[] = "BLUE_BUTTON_CLICK\r\n";
 8000d7c:	4b14      	ldr	r3, [pc, #80]	; (8000dd0 <HAL_GPIO_EXTI_Callback+0x84>)
 8000d7e:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8000d82:	461d      	mov	r5, r3
 8000d84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d88:	682b      	ldr	r3, [r5, #0]
 8000d8a:	6023      	str	r3, [r4, #0]
		uart_log(log);
 8000d8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d90:	4618      	mov	r0, r3
 8000d92:	f7ff fc63 	bl	800065c <uart_log>
		Lamp_pushSwitch(&lamp);
 8000d96:	480f      	ldr	r0, [pc, #60]	; (8000dd4 <HAL_GPIO_EXTI_Callback+0x88>)
 8000d98:	f001 fd04 	bl	80027a4 <Lamp_pushSwitch>
	}else{
		uint8_t log[] = "YELLOW_BUTTON_CLICK\r\n";
		uart_log(log);
		Lamp_holdSwitch(&lamp);
	}
}
 8000d9c:	e012      	b.n	8000dc4 <HAL_GPIO_EXTI_Callback+0x78>
		uint8_t log[] = "YELLOW_BUTTON_CLICK\r\n";
 8000d9e:	4b0e      	ldr	r3, [pc, #56]	; (8000dd8 <HAL_GPIO_EXTI_Callback+0x8c>)
 8000da0:	f107 040c 	add.w	r4, r7, #12
 8000da4:	461d      	mov	r5, r3
 8000da6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000da8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000daa:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000dae:	6020      	str	r0, [r4, #0]
 8000db0:	3404      	adds	r4, #4
 8000db2:	8021      	strh	r1, [r4, #0]
		uart_log(log);
 8000db4:	f107 030c 	add.w	r3, r7, #12
 8000db8:	4618      	mov	r0, r3
 8000dba:	f7ff fc4f 	bl	800065c <uart_log>
		Lamp_holdSwitch(&lamp);
 8000dbe:	4805      	ldr	r0, [pc, #20]	; (8000dd4 <HAL_GPIO_EXTI_Callback+0x88>)
 8000dc0:	f001 fd12 	bl	80027e8 <Lamp_holdSwitch>
}
 8000dc4:	bf00      	nop
 8000dc6:	3750      	adds	r7, #80	; 0x50
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bdb0      	pop	{r4, r5, r7, pc}
 8000dcc:	08002fe8 	.word	0x08002fe8
 8000dd0:	08003000 	.word	0x08003000
 8000dd4:	2000006c 	.word	0x2000006c
 8000dd8:	08003014 	.word	0x08003014

08000ddc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000de0:	b672      	cpsid	i
}
 8000de2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000de4:	e7fe      	b.n	8000de4 <Error_Handler+0x8>
	...

08000de8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b082      	sub	sp, #8
 8000dec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dee:	2300      	movs	r3, #0
 8000df0:	607b      	str	r3, [r7, #4]
 8000df2:	4b10      	ldr	r3, [pc, #64]	; (8000e34 <HAL_MspInit+0x4c>)
 8000df4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000df6:	4a0f      	ldr	r2, [pc, #60]	; (8000e34 <HAL_MspInit+0x4c>)
 8000df8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dfc:	6453      	str	r3, [r2, #68]	; 0x44
 8000dfe:	4b0d      	ldr	r3, [pc, #52]	; (8000e34 <HAL_MspInit+0x4c>)
 8000e00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e06:	607b      	str	r3, [r7, #4]
 8000e08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	603b      	str	r3, [r7, #0]
 8000e0e:	4b09      	ldr	r3, [pc, #36]	; (8000e34 <HAL_MspInit+0x4c>)
 8000e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e12:	4a08      	ldr	r2, [pc, #32]	; (8000e34 <HAL_MspInit+0x4c>)
 8000e14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e18:	6413      	str	r3, [r2, #64]	; 0x40
 8000e1a:	4b06      	ldr	r3, [pc, #24]	; (8000e34 <HAL_MspInit+0x4c>)
 8000e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e22:	603b      	str	r3, [r7, #0]
 8000e24:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000e26:	2007      	movs	r0, #7
 8000e28:	f000 fa28 	bl	800127c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e2c:	bf00      	nop
 8000e2e:	3708      	adds	r7, #8
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	40023800 	.word	0x40023800

08000e38 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b08a      	sub	sp, #40	; 0x28
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e40:	f107 0314 	add.w	r3, r7, #20
 8000e44:	2200      	movs	r2, #0
 8000e46:	601a      	str	r2, [r3, #0]
 8000e48:	605a      	str	r2, [r3, #4]
 8000e4a:	609a      	str	r2, [r3, #8]
 8000e4c:	60da      	str	r2, [r3, #12]
 8000e4e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	4a19      	ldr	r2, [pc, #100]	; (8000ebc <HAL_UART_MspInit+0x84>)
 8000e56:	4293      	cmp	r3, r2
 8000e58:	d12c      	bne.n	8000eb4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	613b      	str	r3, [r7, #16]
 8000e5e:	4b18      	ldr	r3, [pc, #96]	; (8000ec0 <HAL_UART_MspInit+0x88>)
 8000e60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e62:	4a17      	ldr	r2, [pc, #92]	; (8000ec0 <HAL_UART_MspInit+0x88>)
 8000e64:	f043 0310 	orr.w	r3, r3, #16
 8000e68:	6453      	str	r3, [r2, #68]	; 0x44
 8000e6a:	4b15      	ldr	r3, [pc, #84]	; (8000ec0 <HAL_UART_MspInit+0x88>)
 8000e6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e6e:	f003 0310 	and.w	r3, r3, #16
 8000e72:	613b      	str	r3, [r7, #16]
 8000e74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e76:	2300      	movs	r3, #0
 8000e78:	60fb      	str	r3, [r7, #12]
 8000e7a:	4b11      	ldr	r3, [pc, #68]	; (8000ec0 <HAL_UART_MspInit+0x88>)
 8000e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7e:	4a10      	ldr	r2, [pc, #64]	; (8000ec0 <HAL_UART_MspInit+0x88>)
 8000e80:	f043 0301 	orr.w	r3, r3, #1
 8000e84:	6313      	str	r3, [r2, #48]	; 0x30
 8000e86:	4b0e      	ldr	r3, [pc, #56]	; (8000ec0 <HAL_UART_MspInit+0x88>)
 8000e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8a:	f003 0301 	and.w	r3, r3, #1
 8000e8e:	60fb      	str	r3, [r7, #12]
 8000e90:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000e92:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000e96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e98:	2302      	movs	r3, #2
 8000e9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ea0:	2303      	movs	r3, #3
 8000ea2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000ea4:	2307      	movs	r3, #7
 8000ea6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ea8:	f107 0314 	add.w	r3, r7, #20
 8000eac:	4619      	mov	r1, r3
 8000eae:	4805      	ldr	r0, [pc, #20]	; (8000ec4 <HAL_UART_MspInit+0x8c>)
 8000eb0:	f000 fa26 	bl	8001300 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000eb4:	bf00      	nop
 8000eb6:	3728      	adds	r7, #40	; 0x28
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	40011000 	.word	0x40011000
 8000ec0:	40023800 	.word	0x40023800
 8000ec4:	40020000 	.word	0x40020000

08000ec8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ecc:	e7fe      	b.n	8000ecc <NMI_Handler+0x4>

08000ece <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ece:	b480      	push	{r7}
 8000ed0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ed2:	e7fe      	b.n	8000ed2 <HardFault_Handler+0x4>

08000ed4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ed8:	e7fe      	b.n	8000ed8 <MemManage_Handler+0x4>

08000eda <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000eda:	b480      	push	{r7}
 8000edc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ede:	e7fe      	b.n	8000ede <BusFault_Handler+0x4>

08000ee0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ee4:	e7fe      	b.n	8000ee4 <UsageFault_Handler+0x4>

08000ee6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ee6:	b480      	push	{r7}
 8000ee8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000eea:	bf00      	nop
 8000eec:	46bd      	mov	sp, r7
 8000eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef2:	4770      	bx	lr

08000ef4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ef8:	bf00      	nop
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr

08000f02 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f02:	b480      	push	{r7}
 8000f04:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f06:	bf00      	nop
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0e:	4770      	bx	lr

08000f10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f14:	f000 f89e 	bl	8001054 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f18:	bf00      	nop
 8000f1a:	bd80      	pop	{r7, pc}

08000f1c <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_1_Pin);
 8000f20:	2002      	movs	r0, #2
 8000f22:	f000 fbcd 	bl	80016c0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000f26:	bf00      	nop
 8000f28:	bd80      	pop	{r7, pc}

08000f2a <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8000f2a:	b580      	push	{r7, lr}
 8000f2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_2_Pin);
 8000f2e:	2004      	movs	r0, #4
 8000f30:	f000 fbc6 	bl	80016c0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8000f34:	bf00      	nop
 8000f36:	bd80      	pop	{r7, pc}

08000f38 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f3c:	4b06      	ldr	r3, [pc, #24]	; (8000f58 <SystemInit+0x20>)
 8000f3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f42:	4a05      	ldr	r2, [pc, #20]	; (8000f58 <SystemInit+0x20>)
 8000f44:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f48:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f4c:	bf00      	nop
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop
 8000f58:	e000ed00 	.word	0xe000ed00

08000f5c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000f5c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f94 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f60:	480d      	ldr	r0, [pc, #52]	; (8000f98 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f62:	490e      	ldr	r1, [pc, #56]	; (8000f9c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f64:	4a0e      	ldr	r2, [pc, #56]	; (8000fa0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f68:	e002      	b.n	8000f70 <LoopCopyDataInit>

08000f6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f6e:	3304      	adds	r3, #4

08000f70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f74:	d3f9      	bcc.n	8000f6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f76:	4a0b      	ldr	r2, [pc, #44]	; (8000fa4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f78:	4c0b      	ldr	r4, [pc, #44]	; (8000fa8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f7c:	e001      	b.n	8000f82 <LoopFillZerobss>

08000f7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f80:	3204      	adds	r2, #4

08000f82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f84:	d3fb      	bcc.n	8000f7e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f86:	f7ff ffd7 	bl	8000f38 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f8a:	f001 ffaf 	bl	8002eec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f8e:	f7ff fb7b 	bl	8000688 <main>
  bx  lr    
 8000f92:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000f94:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000f98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f9c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000fa0:	08003088 	.word	0x08003088
  ldr r2, =_sbss
 8000fa4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000fa8:	20000088 	.word	0x20000088

08000fac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fac:	e7fe      	b.n	8000fac <ADC_IRQHandler>
	...

08000fb0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000fb4:	4b0e      	ldr	r3, [pc, #56]	; (8000ff0 <HAL_Init+0x40>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a0d      	ldr	r2, [pc, #52]	; (8000ff0 <HAL_Init+0x40>)
 8000fba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fbe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fc0:	4b0b      	ldr	r3, [pc, #44]	; (8000ff0 <HAL_Init+0x40>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4a0a      	ldr	r2, [pc, #40]	; (8000ff0 <HAL_Init+0x40>)
 8000fc6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fcc:	4b08      	ldr	r3, [pc, #32]	; (8000ff0 <HAL_Init+0x40>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4a07      	ldr	r2, [pc, #28]	; (8000ff0 <HAL_Init+0x40>)
 8000fd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fd6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fd8:	2003      	movs	r0, #3
 8000fda:	f000 f94f 	bl	800127c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fde:	2000      	movs	r0, #0
 8000fe0:	f000 f808 	bl	8000ff4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fe4:	f7ff ff00 	bl	8000de8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fe8:	2300      	movs	r3, #0
}
 8000fea:	4618      	mov	r0, r3
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	40023c00 	.word	0x40023c00

08000ff4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ffc:	4b12      	ldr	r3, [pc, #72]	; (8001048 <HAL_InitTick+0x54>)
 8000ffe:	681a      	ldr	r2, [r3, #0]
 8001000:	4b12      	ldr	r3, [pc, #72]	; (800104c <HAL_InitTick+0x58>)
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	4619      	mov	r1, r3
 8001006:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800100a:	fbb3 f3f1 	udiv	r3, r3, r1
 800100e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001012:	4618      	mov	r0, r3
 8001014:	f000 f967 	bl	80012e6 <HAL_SYSTICK_Config>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d001      	beq.n	8001022 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800101e:	2301      	movs	r3, #1
 8001020:	e00e      	b.n	8001040 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	2b0f      	cmp	r3, #15
 8001026:	d80a      	bhi.n	800103e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001028:	2200      	movs	r2, #0
 800102a:	6879      	ldr	r1, [r7, #4]
 800102c:	f04f 30ff 	mov.w	r0, #4294967295
 8001030:	f000 f92f 	bl	8001292 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001034:	4a06      	ldr	r2, [pc, #24]	; (8001050 <HAL_InitTick+0x5c>)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800103a:	2300      	movs	r3, #0
 800103c:	e000      	b.n	8001040 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800103e:	2301      	movs	r3, #1
}
 8001040:	4618      	mov	r0, r3
 8001042:	3708      	adds	r7, #8
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	20000000 	.word	0x20000000
 800104c:	20000008 	.word	0x20000008
 8001050:	20000004 	.word	0x20000004

08001054 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001058:	4b06      	ldr	r3, [pc, #24]	; (8001074 <HAL_IncTick+0x20>)
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	461a      	mov	r2, r3
 800105e:	4b06      	ldr	r3, [pc, #24]	; (8001078 <HAL_IncTick+0x24>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	4413      	add	r3, r2
 8001064:	4a04      	ldr	r2, [pc, #16]	; (8001078 <HAL_IncTick+0x24>)
 8001066:	6013      	str	r3, [r2, #0]
}
 8001068:	bf00      	nop
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop
 8001074:	20000008 	.word	0x20000008
 8001078:	20000084 	.word	0x20000084

0800107c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
  return uwTick;
 8001080:	4b03      	ldr	r3, [pc, #12]	; (8001090 <HAL_GetTick+0x14>)
 8001082:	681b      	ldr	r3, [r3, #0]
}
 8001084:	4618      	mov	r0, r3
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr
 800108e:	bf00      	nop
 8001090:	20000084 	.word	0x20000084

08001094 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b084      	sub	sp, #16
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800109c:	f7ff ffee 	bl	800107c <HAL_GetTick>
 80010a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010ac:	d005      	beq.n	80010ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010ae:	4b0a      	ldr	r3, [pc, #40]	; (80010d8 <HAL_Delay+0x44>)
 80010b0:	781b      	ldrb	r3, [r3, #0]
 80010b2:	461a      	mov	r2, r3
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	4413      	add	r3, r2
 80010b8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80010ba:	bf00      	nop
 80010bc:	f7ff ffde 	bl	800107c <HAL_GetTick>
 80010c0:	4602      	mov	r2, r0
 80010c2:	68bb      	ldr	r3, [r7, #8]
 80010c4:	1ad3      	subs	r3, r2, r3
 80010c6:	68fa      	ldr	r2, [r7, #12]
 80010c8:	429a      	cmp	r2, r3
 80010ca:	d8f7      	bhi.n	80010bc <HAL_Delay+0x28>
  {
  }
}
 80010cc:	bf00      	nop
 80010ce:	bf00      	nop
 80010d0:	3710      	adds	r7, #16
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	20000008 	.word	0x20000008

080010dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010dc:	b480      	push	{r7}
 80010de:	b085      	sub	sp, #20
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	f003 0307 	and.w	r3, r3, #7
 80010ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010ec:	4b0c      	ldr	r3, [pc, #48]	; (8001120 <__NVIC_SetPriorityGrouping+0x44>)
 80010ee:	68db      	ldr	r3, [r3, #12]
 80010f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010f2:	68ba      	ldr	r2, [r7, #8]
 80010f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010f8:	4013      	ands	r3, r2
 80010fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001100:	68bb      	ldr	r3, [r7, #8]
 8001102:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001104:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001108:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800110c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800110e:	4a04      	ldr	r2, [pc, #16]	; (8001120 <__NVIC_SetPriorityGrouping+0x44>)
 8001110:	68bb      	ldr	r3, [r7, #8]
 8001112:	60d3      	str	r3, [r2, #12]
}
 8001114:	bf00      	nop
 8001116:	3714      	adds	r7, #20
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr
 8001120:	e000ed00 	.word	0xe000ed00

08001124 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001128:	4b04      	ldr	r3, [pc, #16]	; (800113c <__NVIC_GetPriorityGrouping+0x18>)
 800112a:	68db      	ldr	r3, [r3, #12]
 800112c:	0a1b      	lsrs	r3, r3, #8
 800112e:	f003 0307 	and.w	r3, r3, #7
}
 8001132:	4618      	mov	r0, r3
 8001134:	46bd      	mov	sp, r7
 8001136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113a:	4770      	bx	lr
 800113c:	e000ed00 	.word	0xe000ed00

08001140 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001140:	b480      	push	{r7}
 8001142:	b083      	sub	sp, #12
 8001144:	af00      	add	r7, sp, #0
 8001146:	4603      	mov	r3, r0
 8001148:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800114a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800114e:	2b00      	cmp	r3, #0
 8001150:	db0b      	blt.n	800116a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001152:	79fb      	ldrb	r3, [r7, #7]
 8001154:	f003 021f 	and.w	r2, r3, #31
 8001158:	4907      	ldr	r1, [pc, #28]	; (8001178 <__NVIC_EnableIRQ+0x38>)
 800115a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800115e:	095b      	lsrs	r3, r3, #5
 8001160:	2001      	movs	r0, #1
 8001162:	fa00 f202 	lsl.w	r2, r0, r2
 8001166:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800116a:	bf00      	nop
 800116c:	370c      	adds	r7, #12
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop
 8001178:	e000e100 	.word	0xe000e100

0800117c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800117c:	b480      	push	{r7}
 800117e:	b083      	sub	sp, #12
 8001180:	af00      	add	r7, sp, #0
 8001182:	4603      	mov	r3, r0
 8001184:	6039      	str	r1, [r7, #0]
 8001186:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001188:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800118c:	2b00      	cmp	r3, #0
 800118e:	db0a      	blt.n	80011a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	b2da      	uxtb	r2, r3
 8001194:	490c      	ldr	r1, [pc, #48]	; (80011c8 <__NVIC_SetPriority+0x4c>)
 8001196:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800119a:	0112      	lsls	r2, r2, #4
 800119c:	b2d2      	uxtb	r2, r2
 800119e:	440b      	add	r3, r1
 80011a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011a4:	e00a      	b.n	80011bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	b2da      	uxtb	r2, r3
 80011aa:	4908      	ldr	r1, [pc, #32]	; (80011cc <__NVIC_SetPriority+0x50>)
 80011ac:	79fb      	ldrb	r3, [r7, #7]
 80011ae:	f003 030f 	and.w	r3, r3, #15
 80011b2:	3b04      	subs	r3, #4
 80011b4:	0112      	lsls	r2, r2, #4
 80011b6:	b2d2      	uxtb	r2, r2
 80011b8:	440b      	add	r3, r1
 80011ba:	761a      	strb	r2, [r3, #24]
}
 80011bc:	bf00      	nop
 80011be:	370c      	adds	r7, #12
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr
 80011c8:	e000e100 	.word	0xe000e100
 80011cc:	e000ed00 	.word	0xe000ed00

080011d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b089      	sub	sp, #36	; 0x24
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	60f8      	str	r0, [r7, #12]
 80011d8:	60b9      	str	r1, [r7, #8]
 80011da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	f003 0307 	and.w	r3, r3, #7
 80011e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011e4:	69fb      	ldr	r3, [r7, #28]
 80011e6:	f1c3 0307 	rsb	r3, r3, #7
 80011ea:	2b04      	cmp	r3, #4
 80011ec:	bf28      	it	cs
 80011ee:	2304      	movcs	r3, #4
 80011f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011f2:	69fb      	ldr	r3, [r7, #28]
 80011f4:	3304      	adds	r3, #4
 80011f6:	2b06      	cmp	r3, #6
 80011f8:	d902      	bls.n	8001200 <NVIC_EncodePriority+0x30>
 80011fa:	69fb      	ldr	r3, [r7, #28]
 80011fc:	3b03      	subs	r3, #3
 80011fe:	e000      	b.n	8001202 <NVIC_EncodePriority+0x32>
 8001200:	2300      	movs	r3, #0
 8001202:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001204:	f04f 32ff 	mov.w	r2, #4294967295
 8001208:	69bb      	ldr	r3, [r7, #24]
 800120a:	fa02 f303 	lsl.w	r3, r2, r3
 800120e:	43da      	mvns	r2, r3
 8001210:	68bb      	ldr	r3, [r7, #8]
 8001212:	401a      	ands	r2, r3
 8001214:	697b      	ldr	r3, [r7, #20]
 8001216:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001218:	f04f 31ff 	mov.w	r1, #4294967295
 800121c:	697b      	ldr	r3, [r7, #20]
 800121e:	fa01 f303 	lsl.w	r3, r1, r3
 8001222:	43d9      	mvns	r1, r3
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001228:	4313      	orrs	r3, r2
         );
}
 800122a:	4618      	mov	r0, r3
 800122c:	3724      	adds	r7, #36	; 0x24
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr
	...

08001238 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	3b01      	subs	r3, #1
 8001244:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001248:	d301      	bcc.n	800124e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800124a:	2301      	movs	r3, #1
 800124c:	e00f      	b.n	800126e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800124e:	4a0a      	ldr	r2, [pc, #40]	; (8001278 <SysTick_Config+0x40>)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	3b01      	subs	r3, #1
 8001254:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001256:	210f      	movs	r1, #15
 8001258:	f04f 30ff 	mov.w	r0, #4294967295
 800125c:	f7ff ff8e 	bl	800117c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001260:	4b05      	ldr	r3, [pc, #20]	; (8001278 <SysTick_Config+0x40>)
 8001262:	2200      	movs	r2, #0
 8001264:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001266:	4b04      	ldr	r3, [pc, #16]	; (8001278 <SysTick_Config+0x40>)
 8001268:	2207      	movs	r2, #7
 800126a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800126c:	2300      	movs	r3, #0
}
 800126e:	4618      	mov	r0, r3
 8001270:	3708      	adds	r7, #8
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	e000e010 	.word	0xe000e010

0800127c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001284:	6878      	ldr	r0, [r7, #4]
 8001286:	f7ff ff29 	bl	80010dc <__NVIC_SetPriorityGrouping>
}
 800128a:	bf00      	nop
 800128c:	3708      	adds	r7, #8
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}

08001292 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001292:	b580      	push	{r7, lr}
 8001294:	b086      	sub	sp, #24
 8001296:	af00      	add	r7, sp, #0
 8001298:	4603      	mov	r3, r0
 800129a:	60b9      	str	r1, [r7, #8]
 800129c:	607a      	str	r2, [r7, #4]
 800129e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012a0:	2300      	movs	r3, #0
 80012a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012a4:	f7ff ff3e 	bl	8001124 <__NVIC_GetPriorityGrouping>
 80012a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012aa:	687a      	ldr	r2, [r7, #4]
 80012ac:	68b9      	ldr	r1, [r7, #8]
 80012ae:	6978      	ldr	r0, [r7, #20]
 80012b0:	f7ff ff8e 	bl	80011d0 <NVIC_EncodePriority>
 80012b4:	4602      	mov	r2, r0
 80012b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012ba:	4611      	mov	r1, r2
 80012bc:	4618      	mov	r0, r3
 80012be:	f7ff ff5d 	bl	800117c <__NVIC_SetPriority>
}
 80012c2:	bf00      	nop
 80012c4:	3718      	adds	r7, #24
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}

080012ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012ca:	b580      	push	{r7, lr}
 80012cc:	b082      	sub	sp, #8
 80012ce:	af00      	add	r7, sp, #0
 80012d0:	4603      	mov	r3, r0
 80012d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012d8:	4618      	mov	r0, r3
 80012da:	f7ff ff31 	bl	8001140 <__NVIC_EnableIRQ>
}
 80012de:	bf00      	nop
 80012e0:	3708      	adds	r7, #8
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}

080012e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012e6:	b580      	push	{r7, lr}
 80012e8:	b082      	sub	sp, #8
 80012ea:	af00      	add	r7, sp, #0
 80012ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012ee:	6878      	ldr	r0, [r7, #4]
 80012f0:	f7ff ffa2 	bl	8001238 <SysTick_Config>
 80012f4:	4603      	mov	r3, r0
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	3708      	adds	r7, #8
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
	...

08001300 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001300:	b480      	push	{r7}
 8001302:	b089      	sub	sp, #36	; 0x24
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
 8001308:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800130a:	2300      	movs	r3, #0
 800130c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800130e:	2300      	movs	r3, #0
 8001310:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001312:	2300      	movs	r3, #0
 8001314:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001316:	2300      	movs	r3, #0
 8001318:	61fb      	str	r3, [r7, #28]
 800131a:	e177      	b.n	800160c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800131c:	2201      	movs	r2, #1
 800131e:	69fb      	ldr	r3, [r7, #28]
 8001320:	fa02 f303 	lsl.w	r3, r2, r3
 8001324:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	697a      	ldr	r2, [r7, #20]
 800132c:	4013      	ands	r3, r2
 800132e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001330:	693a      	ldr	r2, [r7, #16]
 8001332:	697b      	ldr	r3, [r7, #20]
 8001334:	429a      	cmp	r2, r3
 8001336:	f040 8166 	bne.w	8001606 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	f003 0303 	and.w	r3, r3, #3
 8001342:	2b01      	cmp	r3, #1
 8001344:	d005      	beq.n	8001352 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800134e:	2b02      	cmp	r3, #2
 8001350:	d130      	bne.n	80013b4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	689b      	ldr	r3, [r3, #8]
 8001356:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001358:	69fb      	ldr	r3, [r7, #28]
 800135a:	005b      	lsls	r3, r3, #1
 800135c:	2203      	movs	r2, #3
 800135e:	fa02 f303 	lsl.w	r3, r2, r3
 8001362:	43db      	mvns	r3, r3
 8001364:	69ba      	ldr	r2, [r7, #24]
 8001366:	4013      	ands	r3, r2
 8001368:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	68da      	ldr	r2, [r3, #12]
 800136e:	69fb      	ldr	r3, [r7, #28]
 8001370:	005b      	lsls	r3, r3, #1
 8001372:	fa02 f303 	lsl.w	r3, r2, r3
 8001376:	69ba      	ldr	r2, [r7, #24]
 8001378:	4313      	orrs	r3, r2
 800137a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	69ba      	ldr	r2, [r7, #24]
 8001380:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001388:	2201      	movs	r2, #1
 800138a:	69fb      	ldr	r3, [r7, #28]
 800138c:	fa02 f303 	lsl.w	r3, r2, r3
 8001390:	43db      	mvns	r3, r3
 8001392:	69ba      	ldr	r2, [r7, #24]
 8001394:	4013      	ands	r3, r2
 8001396:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	091b      	lsrs	r3, r3, #4
 800139e:	f003 0201 	and.w	r2, r3, #1
 80013a2:	69fb      	ldr	r3, [r7, #28]
 80013a4:	fa02 f303 	lsl.w	r3, r2, r3
 80013a8:	69ba      	ldr	r2, [r7, #24]
 80013aa:	4313      	orrs	r3, r2
 80013ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	69ba      	ldr	r2, [r7, #24]
 80013b2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	f003 0303 	and.w	r3, r3, #3
 80013bc:	2b03      	cmp	r3, #3
 80013be:	d017      	beq.n	80013f0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	68db      	ldr	r3, [r3, #12]
 80013c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80013c6:	69fb      	ldr	r3, [r7, #28]
 80013c8:	005b      	lsls	r3, r3, #1
 80013ca:	2203      	movs	r2, #3
 80013cc:	fa02 f303 	lsl.w	r3, r2, r3
 80013d0:	43db      	mvns	r3, r3
 80013d2:	69ba      	ldr	r2, [r7, #24]
 80013d4:	4013      	ands	r3, r2
 80013d6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	689a      	ldr	r2, [r3, #8]
 80013dc:	69fb      	ldr	r3, [r7, #28]
 80013de:	005b      	lsls	r3, r3, #1
 80013e0:	fa02 f303 	lsl.w	r3, r2, r3
 80013e4:	69ba      	ldr	r2, [r7, #24]
 80013e6:	4313      	orrs	r3, r2
 80013e8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	69ba      	ldr	r2, [r7, #24]
 80013ee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	f003 0303 	and.w	r3, r3, #3
 80013f8:	2b02      	cmp	r3, #2
 80013fa:	d123      	bne.n	8001444 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80013fc:	69fb      	ldr	r3, [r7, #28]
 80013fe:	08da      	lsrs	r2, r3, #3
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	3208      	adds	r2, #8
 8001404:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001408:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800140a:	69fb      	ldr	r3, [r7, #28]
 800140c:	f003 0307 	and.w	r3, r3, #7
 8001410:	009b      	lsls	r3, r3, #2
 8001412:	220f      	movs	r2, #15
 8001414:	fa02 f303 	lsl.w	r3, r2, r3
 8001418:	43db      	mvns	r3, r3
 800141a:	69ba      	ldr	r2, [r7, #24]
 800141c:	4013      	ands	r3, r2
 800141e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	691a      	ldr	r2, [r3, #16]
 8001424:	69fb      	ldr	r3, [r7, #28]
 8001426:	f003 0307 	and.w	r3, r3, #7
 800142a:	009b      	lsls	r3, r3, #2
 800142c:	fa02 f303 	lsl.w	r3, r2, r3
 8001430:	69ba      	ldr	r2, [r7, #24]
 8001432:	4313      	orrs	r3, r2
 8001434:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001436:	69fb      	ldr	r3, [r7, #28]
 8001438:	08da      	lsrs	r2, r3, #3
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	3208      	adds	r2, #8
 800143e:	69b9      	ldr	r1, [r7, #24]
 8001440:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800144a:	69fb      	ldr	r3, [r7, #28]
 800144c:	005b      	lsls	r3, r3, #1
 800144e:	2203      	movs	r2, #3
 8001450:	fa02 f303 	lsl.w	r3, r2, r3
 8001454:	43db      	mvns	r3, r3
 8001456:	69ba      	ldr	r2, [r7, #24]
 8001458:	4013      	ands	r3, r2
 800145a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	f003 0203 	and.w	r2, r3, #3
 8001464:	69fb      	ldr	r3, [r7, #28]
 8001466:	005b      	lsls	r3, r3, #1
 8001468:	fa02 f303 	lsl.w	r3, r2, r3
 800146c:	69ba      	ldr	r2, [r7, #24]
 800146e:	4313      	orrs	r3, r2
 8001470:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	69ba      	ldr	r2, [r7, #24]
 8001476:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001480:	2b00      	cmp	r3, #0
 8001482:	f000 80c0 	beq.w	8001606 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001486:	2300      	movs	r3, #0
 8001488:	60fb      	str	r3, [r7, #12]
 800148a:	4b66      	ldr	r3, [pc, #408]	; (8001624 <HAL_GPIO_Init+0x324>)
 800148c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800148e:	4a65      	ldr	r2, [pc, #404]	; (8001624 <HAL_GPIO_Init+0x324>)
 8001490:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001494:	6453      	str	r3, [r2, #68]	; 0x44
 8001496:	4b63      	ldr	r3, [pc, #396]	; (8001624 <HAL_GPIO_Init+0x324>)
 8001498:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800149a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800149e:	60fb      	str	r3, [r7, #12]
 80014a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80014a2:	4a61      	ldr	r2, [pc, #388]	; (8001628 <HAL_GPIO_Init+0x328>)
 80014a4:	69fb      	ldr	r3, [r7, #28]
 80014a6:	089b      	lsrs	r3, r3, #2
 80014a8:	3302      	adds	r3, #2
 80014aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80014b0:	69fb      	ldr	r3, [r7, #28]
 80014b2:	f003 0303 	and.w	r3, r3, #3
 80014b6:	009b      	lsls	r3, r3, #2
 80014b8:	220f      	movs	r2, #15
 80014ba:	fa02 f303 	lsl.w	r3, r2, r3
 80014be:	43db      	mvns	r3, r3
 80014c0:	69ba      	ldr	r2, [r7, #24]
 80014c2:	4013      	ands	r3, r2
 80014c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	4a58      	ldr	r2, [pc, #352]	; (800162c <HAL_GPIO_Init+0x32c>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d037      	beq.n	800153e <HAL_GPIO_Init+0x23e>
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	4a57      	ldr	r2, [pc, #348]	; (8001630 <HAL_GPIO_Init+0x330>)
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d031      	beq.n	800153a <HAL_GPIO_Init+0x23a>
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	4a56      	ldr	r2, [pc, #344]	; (8001634 <HAL_GPIO_Init+0x334>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	d02b      	beq.n	8001536 <HAL_GPIO_Init+0x236>
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	4a55      	ldr	r2, [pc, #340]	; (8001638 <HAL_GPIO_Init+0x338>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d025      	beq.n	8001532 <HAL_GPIO_Init+0x232>
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	4a54      	ldr	r2, [pc, #336]	; (800163c <HAL_GPIO_Init+0x33c>)
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d01f      	beq.n	800152e <HAL_GPIO_Init+0x22e>
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	4a53      	ldr	r2, [pc, #332]	; (8001640 <HAL_GPIO_Init+0x340>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d019      	beq.n	800152a <HAL_GPIO_Init+0x22a>
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	4a52      	ldr	r2, [pc, #328]	; (8001644 <HAL_GPIO_Init+0x344>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d013      	beq.n	8001526 <HAL_GPIO_Init+0x226>
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	4a51      	ldr	r2, [pc, #324]	; (8001648 <HAL_GPIO_Init+0x348>)
 8001502:	4293      	cmp	r3, r2
 8001504:	d00d      	beq.n	8001522 <HAL_GPIO_Init+0x222>
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	4a50      	ldr	r2, [pc, #320]	; (800164c <HAL_GPIO_Init+0x34c>)
 800150a:	4293      	cmp	r3, r2
 800150c:	d007      	beq.n	800151e <HAL_GPIO_Init+0x21e>
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	4a4f      	ldr	r2, [pc, #316]	; (8001650 <HAL_GPIO_Init+0x350>)
 8001512:	4293      	cmp	r3, r2
 8001514:	d101      	bne.n	800151a <HAL_GPIO_Init+0x21a>
 8001516:	2309      	movs	r3, #9
 8001518:	e012      	b.n	8001540 <HAL_GPIO_Init+0x240>
 800151a:	230a      	movs	r3, #10
 800151c:	e010      	b.n	8001540 <HAL_GPIO_Init+0x240>
 800151e:	2308      	movs	r3, #8
 8001520:	e00e      	b.n	8001540 <HAL_GPIO_Init+0x240>
 8001522:	2307      	movs	r3, #7
 8001524:	e00c      	b.n	8001540 <HAL_GPIO_Init+0x240>
 8001526:	2306      	movs	r3, #6
 8001528:	e00a      	b.n	8001540 <HAL_GPIO_Init+0x240>
 800152a:	2305      	movs	r3, #5
 800152c:	e008      	b.n	8001540 <HAL_GPIO_Init+0x240>
 800152e:	2304      	movs	r3, #4
 8001530:	e006      	b.n	8001540 <HAL_GPIO_Init+0x240>
 8001532:	2303      	movs	r3, #3
 8001534:	e004      	b.n	8001540 <HAL_GPIO_Init+0x240>
 8001536:	2302      	movs	r3, #2
 8001538:	e002      	b.n	8001540 <HAL_GPIO_Init+0x240>
 800153a:	2301      	movs	r3, #1
 800153c:	e000      	b.n	8001540 <HAL_GPIO_Init+0x240>
 800153e:	2300      	movs	r3, #0
 8001540:	69fa      	ldr	r2, [r7, #28]
 8001542:	f002 0203 	and.w	r2, r2, #3
 8001546:	0092      	lsls	r2, r2, #2
 8001548:	4093      	lsls	r3, r2
 800154a:	69ba      	ldr	r2, [r7, #24]
 800154c:	4313      	orrs	r3, r2
 800154e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001550:	4935      	ldr	r1, [pc, #212]	; (8001628 <HAL_GPIO_Init+0x328>)
 8001552:	69fb      	ldr	r3, [r7, #28]
 8001554:	089b      	lsrs	r3, r3, #2
 8001556:	3302      	adds	r3, #2
 8001558:	69ba      	ldr	r2, [r7, #24]
 800155a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800155e:	4b3d      	ldr	r3, [pc, #244]	; (8001654 <HAL_GPIO_Init+0x354>)
 8001560:	689b      	ldr	r3, [r3, #8]
 8001562:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001564:	693b      	ldr	r3, [r7, #16]
 8001566:	43db      	mvns	r3, r3
 8001568:	69ba      	ldr	r2, [r7, #24]
 800156a:	4013      	ands	r3, r2
 800156c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001576:	2b00      	cmp	r3, #0
 8001578:	d003      	beq.n	8001582 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800157a:	69ba      	ldr	r2, [r7, #24]
 800157c:	693b      	ldr	r3, [r7, #16]
 800157e:	4313      	orrs	r3, r2
 8001580:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001582:	4a34      	ldr	r2, [pc, #208]	; (8001654 <HAL_GPIO_Init+0x354>)
 8001584:	69bb      	ldr	r3, [r7, #24]
 8001586:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001588:	4b32      	ldr	r3, [pc, #200]	; (8001654 <HAL_GPIO_Init+0x354>)
 800158a:	68db      	ldr	r3, [r3, #12]
 800158c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	43db      	mvns	r3, r3
 8001592:	69ba      	ldr	r2, [r7, #24]
 8001594:	4013      	ands	r3, r2
 8001596:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d003      	beq.n	80015ac <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80015a4:	69ba      	ldr	r2, [r7, #24]
 80015a6:	693b      	ldr	r3, [r7, #16]
 80015a8:	4313      	orrs	r3, r2
 80015aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80015ac:	4a29      	ldr	r2, [pc, #164]	; (8001654 <HAL_GPIO_Init+0x354>)
 80015ae:	69bb      	ldr	r3, [r7, #24]
 80015b0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80015b2:	4b28      	ldr	r3, [pc, #160]	; (8001654 <HAL_GPIO_Init+0x354>)
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015b8:	693b      	ldr	r3, [r7, #16]
 80015ba:	43db      	mvns	r3, r3
 80015bc:	69ba      	ldr	r2, [r7, #24]
 80015be:	4013      	ands	r3, r2
 80015c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d003      	beq.n	80015d6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80015ce:	69ba      	ldr	r2, [r7, #24]
 80015d0:	693b      	ldr	r3, [r7, #16]
 80015d2:	4313      	orrs	r3, r2
 80015d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80015d6:	4a1f      	ldr	r2, [pc, #124]	; (8001654 <HAL_GPIO_Init+0x354>)
 80015d8:	69bb      	ldr	r3, [r7, #24]
 80015da:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80015dc:	4b1d      	ldr	r3, [pc, #116]	; (8001654 <HAL_GPIO_Init+0x354>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015e2:	693b      	ldr	r3, [r7, #16]
 80015e4:	43db      	mvns	r3, r3
 80015e6:	69ba      	ldr	r2, [r7, #24]
 80015e8:	4013      	ands	r3, r2
 80015ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d003      	beq.n	8001600 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80015f8:	69ba      	ldr	r2, [r7, #24]
 80015fa:	693b      	ldr	r3, [r7, #16]
 80015fc:	4313      	orrs	r3, r2
 80015fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001600:	4a14      	ldr	r2, [pc, #80]	; (8001654 <HAL_GPIO_Init+0x354>)
 8001602:	69bb      	ldr	r3, [r7, #24]
 8001604:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001606:	69fb      	ldr	r3, [r7, #28]
 8001608:	3301      	adds	r3, #1
 800160a:	61fb      	str	r3, [r7, #28]
 800160c:	69fb      	ldr	r3, [r7, #28]
 800160e:	2b0f      	cmp	r3, #15
 8001610:	f67f ae84 	bls.w	800131c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001614:	bf00      	nop
 8001616:	bf00      	nop
 8001618:	3724      	adds	r7, #36	; 0x24
 800161a:	46bd      	mov	sp, r7
 800161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001620:	4770      	bx	lr
 8001622:	bf00      	nop
 8001624:	40023800 	.word	0x40023800
 8001628:	40013800 	.word	0x40013800
 800162c:	40020000 	.word	0x40020000
 8001630:	40020400 	.word	0x40020400
 8001634:	40020800 	.word	0x40020800
 8001638:	40020c00 	.word	0x40020c00
 800163c:	40021000 	.word	0x40021000
 8001640:	40021400 	.word	0x40021400
 8001644:	40021800 	.word	0x40021800
 8001648:	40021c00 	.word	0x40021c00
 800164c:	40022000 	.word	0x40022000
 8001650:	40022400 	.word	0x40022400
 8001654:	40013c00 	.word	0x40013c00

08001658 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001658:	b480      	push	{r7}
 800165a:	b083      	sub	sp, #12
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
 8001660:	460b      	mov	r3, r1
 8001662:	807b      	strh	r3, [r7, #2]
 8001664:	4613      	mov	r3, r2
 8001666:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001668:	787b      	ldrb	r3, [r7, #1]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d003      	beq.n	8001676 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800166e:	887a      	ldrh	r2, [r7, #2]
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001674:	e003      	b.n	800167e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001676:	887b      	ldrh	r3, [r7, #2]
 8001678:	041a      	lsls	r2, r3, #16
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	619a      	str	r2, [r3, #24]
}
 800167e:	bf00      	nop
 8001680:	370c      	adds	r7, #12
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr

0800168a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800168a:	b480      	push	{r7}
 800168c:	b085      	sub	sp, #20
 800168e:	af00      	add	r7, sp, #0
 8001690:	6078      	str	r0, [r7, #4]
 8001692:	460b      	mov	r3, r1
 8001694:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	695b      	ldr	r3, [r3, #20]
 800169a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800169c:	887a      	ldrh	r2, [r7, #2]
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	4013      	ands	r3, r2
 80016a2:	041a      	lsls	r2, r3, #16
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	43d9      	mvns	r1, r3
 80016a8:	887b      	ldrh	r3, [r7, #2]
 80016aa:	400b      	ands	r3, r1
 80016ac:	431a      	orrs	r2, r3
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	619a      	str	r2, [r3, #24]
}
 80016b2:	bf00      	nop
 80016b4:	3714      	adds	r7, #20
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr
	...

080016c0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b082      	sub	sp, #8
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	4603      	mov	r3, r0
 80016c8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80016ca:	4b08      	ldr	r3, [pc, #32]	; (80016ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80016cc:	695a      	ldr	r2, [r3, #20]
 80016ce:	88fb      	ldrh	r3, [r7, #6]
 80016d0:	4013      	ands	r3, r2
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d006      	beq.n	80016e4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80016d6:	4a05      	ldr	r2, [pc, #20]	; (80016ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80016d8:	88fb      	ldrh	r3, [r7, #6]
 80016da:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80016dc:	88fb      	ldrh	r3, [r7, #6]
 80016de:	4618      	mov	r0, r3
 80016e0:	f7ff fb34 	bl	8000d4c <HAL_GPIO_EXTI_Callback>
  }
}
 80016e4:	bf00      	nop
 80016e6:	3708      	adds	r7, #8
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	40013c00 	.word	0x40013c00

080016f0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b086      	sub	sp, #24
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d101      	bne.n	8001702 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016fe:	2301      	movs	r3, #1
 8001700:	e267      	b.n	8001bd2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f003 0301 	and.w	r3, r3, #1
 800170a:	2b00      	cmp	r3, #0
 800170c:	d075      	beq.n	80017fa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800170e:	4b88      	ldr	r3, [pc, #544]	; (8001930 <HAL_RCC_OscConfig+0x240>)
 8001710:	689b      	ldr	r3, [r3, #8]
 8001712:	f003 030c 	and.w	r3, r3, #12
 8001716:	2b04      	cmp	r3, #4
 8001718:	d00c      	beq.n	8001734 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800171a:	4b85      	ldr	r3, [pc, #532]	; (8001930 <HAL_RCC_OscConfig+0x240>)
 800171c:	689b      	ldr	r3, [r3, #8]
 800171e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001722:	2b08      	cmp	r3, #8
 8001724:	d112      	bne.n	800174c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001726:	4b82      	ldr	r3, [pc, #520]	; (8001930 <HAL_RCC_OscConfig+0x240>)
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800172e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001732:	d10b      	bne.n	800174c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001734:	4b7e      	ldr	r3, [pc, #504]	; (8001930 <HAL_RCC_OscConfig+0x240>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800173c:	2b00      	cmp	r3, #0
 800173e:	d05b      	beq.n	80017f8 <HAL_RCC_OscConfig+0x108>
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d157      	bne.n	80017f8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001748:	2301      	movs	r3, #1
 800174a:	e242      	b.n	8001bd2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001754:	d106      	bne.n	8001764 <HAL_RCC_OscConfig+0x74>
 8001756:	4b76      	ldr	r3, [pc, #472]	; (8001930 <HAL_RCC_OscConfig+0x240>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4a75      	ldr	r2, [pc, #468]	; (8001930 <HAL_RCC_OscConfig+0x240>)
 800175c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001760:	6013      	str	r3, [r2, #0]
 8001762:	e01d      	b.n	80017a0 <HAL_RCC_OscConfig+0xb0>
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800176c:	d10c      	bne.n	8001788 <HAL_RCC_OscConfig+0x98>
 800176e:	4b70      	ldr	r3, [pc, #448]	; (8001930 <HAL_RCC_OscConfig+0x240>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4a6f      	ldr	r2, [pc, #444]	; (8001930 <HAL_RCC_OscConfig+0x240>)
 8001774:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001778:	6013      	str	r3, [r2, #0]
 800177a:	4b6d      	ldr	r3, [pc, #436]	; (8001930 <HAL_RCC_OscConfig+0x240>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4a6c      	ldr	r2, [pc, #432]	; (8001930 <HAL_RCC_OscConfig+0x240>)
 8001780:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001784:	6013      	str	r3, [r2, #0]
 8001786:	e00b      	b.n	80017a0 <HAL_RCC_OscConfig+0xb0>
 8001788:	4b69      	ldr	r3, [pc, #420]	; (8001930 <HAL_RCC_OscConfig+0x240>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a68      	ldr	r2, [pc, #416]	; (8001930 <HAL_RCC_OscConfig+0x240>)
 800178e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001792:	6013      	str	r3, [r2, #0]
 8001794:	4b66      	ldr	r3, [pc, #408]	; (8001930 <HAL_RCC_OscConfig+0x240>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a65      	ldr	r2, [pc, #404]	; (8001930 <HAL_RCC_OscConfig+0x240>)
 800179a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800179e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d013      	beq.n	80017d0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017a8:	f7ff fc68 	bl	800107c <HAL_GetTick>
 80017ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017ae:	e008      	b.n	80017c2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017b0:	f7ff fc64 	bl	800107c <HAL_GetTick>
 80017b4:	4602      	mov	r2, r0
 80017b6:	693b      	ldr	r3, [r7, #16]
 80017b8:	1ad3      	subs	r3, r2, r3
 80017ba:	2b64      	cmp	r3, #100	; 0x64
 80017bc:	d901      	bls.n	80017c2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80017be:	2303      	movs	r3, #3
 80017c0:	e207      	b.n	8001bd2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017c2:	4b5b      	ldr	r3, [pc, #364]	; (8001930 <HAL_RCC_OscConfig+0x240>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d0f0      	beq.n	80017b0 <HAL_RCC_OscConfig+0xc0>
 80017ce:	e014      	b.n	80017fa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017d0:	f7ff fc54 	bl	800107c <HAL_GetTick>
 80017d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017d6:	e008      	b.n	80017ea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017d8:	f7ff fc50 	bl	800107c <HAL_GetTick>
 80017dc:	4602      	mov	r2, r0
 80017de:	693b      	ldr	r3, [r7, #16]
 80017e0:	1ad3      	subs	r3, r2, r3
 80017e2:	2b64      	cmp	r3, #100	; 0x64
 80017e4:	d901      	bls.n	80017ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80017e6:	2303      	movs	r3, #3
 80017e8:	e1f3      	b.n	8001bd2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017ea:	4b51      	ldr	r3, [pc, #324]	; (8001930 <HAL_RCC_OscConfig+0x240>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d1f0      	bne.n	80017d8 <HAL_RCC_OscConfig+0xe8>
 80017f6:	e000      	b.n	80017fa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f003 0302 	and.w	r3, r3, #2
 8001802:	2b00      	cmp	r3, #0
 8001804:	d063      	beq.n	80018ce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001806:	4b4a      	ldr	r3, [pc, #296]	; (8001930 <HAL_RCC_OscConfig+0x240>)
 8001808:	689b      	ldr	r3, [r3, #8]
 800180a:	f003 030c 	and.w	r3, r3, #12
 800180e:	2b00      	cmp	r3, #0
 8001810:	d00b      	beq.n	800182a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001812:	4b47      	ldr	r3, [pc, #284]	; (8001930 <HAL_RCC_OscConfig+0x240>)
 8001814:	689b      	ldr	r3, [r3, #8]
 8001816:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800181a:	2b08      	cmp	r3, #8
 800181c:	d11c      	bne.n	8001858 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800181e:	4b44      	ldr	r3, [pc, #272]	; (8001930 <HAL_RCC_OscConfig+0x240>)
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001826:	2b00      	cmp	r3, #0
 8001828:	d116      	bne.n	8001858 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800182a:	4b41      	ldr	r3, [pc, #260]	; (8001930 <HAL_RCC_OscConfig+0x240>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f003 0302 	and.w	r3, r3, #2
 8001832:	2b00      	cmp	r3, #0
 8001834:	d005      	beq.n	8001842 <HAL_RCC_OscConfig+0x152>
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	68db      	ldr	r3, [r3, #12]
 800183a:	2b01      	cmp	r3, #1
 800183c:	d001      	beq.n	8001842 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800183e:	2301      	movs	r3, #1
 8001840:	e1c7      	b.n	8001bd2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001842:	4b3b      	ldr	r3, [pc, #236]	; (8001930 <HAL_RCC_OscConfig+0x240>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	691b      	ldr	r3, [r3, #16]
 800184e:	00db      	lsls	r3, r3, #3
 8001850:	4937      	ldr	r1, [pc, #220]	; (8001930 <HAL_RCC_OscConfig+0x240>)
 8001852:	4313      	orrs	r3, r2
 8001854:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001856:	e03a      	b.n	80018ce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	68db      	ldr	r3, [r3, #12]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d020      	beq.n	80018a2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001860:	4b34      	ldr	r3, [pc, #208]	; (8001934 <HAL_RCC_OscConfig+0x244>)
 8001862:	2201      	movs	r2, #1
 8001864:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001866:	f7ff fc09 	bl	800107c <HAL_GetTick>
 800186a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800186c:	e008      	b.n	8001880 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800186e:	f7ff fc05 	bl	800107c <HAL_GetTick>
 8001872:	4602      	mov	r2, r0
 8001874:	693b      	ldr	r3, [r7, #16]
 8001876:	1ad3      	subs	r3, r2, r3
 8001878:	2b02      	cmp	r3, #2
 800187a:	d901      	bls.n	8001880 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800187c:	2303      	movs	r3, #3
 800187e:	e1a8      	b.n	8001bd2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001880:	4b2b      	ldr	r3, [pc, #172]	; (8001930 <HAL_RCC_OscConfig+0x240>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f003 0302 	and.w	r3, r3, #2
 8001888:	2b00      	cmp	r3, #0
 800188a:	d0f0      	beq.n	800186e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800188c:	4b28      	ldr	r3, [pc, #160]	; (8001930 <HAL_RCC_OscConfig+0x240>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	691b      	ldr	r3, [r3, #16]
 8001898:	00db      	lsls	r3, r3, #3
 800189a:	4925      	ldr	r1, [pc, #148]	; (8001930 <HAL_RCC_OscConfig+0x240>)
 800189c:	4313      	orrs	r3, r2
 800189e:	600b      	str	r3, [r1, #0]
 80018a0:	e015      	b.n	80018ce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018a2:	4b24      	ldr	r3, [pc, #144]	; (8001934 <HAL_RCC_OscConfig+0x244>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018a8:	f7ff fbe8 	bl	800107c <HAL_GetTick>
 80018ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018ae:	e008      	b.n	80018c2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018b0:	f7ff fbe4 	bl	800107c <HAL_GetTick>
 80018b4:	4602      	mov	r2, r0
 80018b6:	693b      	ldr	r3, [r7, #16]
 80018b8:	1ad3      	subs	r3, r2, r3
 80018ba:	2b02      	cmp	r3, #2
 80018bc:	d901      	bls.n	80018c2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80018be:	2303      	movs	r3, #3
 80018c0:	e187      	b.n	8001bd2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018c2:	4b1b      	ldr	r3, [pc, #108]	; (8001930 <HAL_RCC_OscConfig+0x240>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f003 0302 	and.w	r3, r3, #2
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d1f0      	bne.n	80018b0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f003 0308 	and.w	r3, r3, #8
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d036      	beq.n	8001948 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	695b      	ldr	r3, [r3, #20]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d016      	beq.n	8001910 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018e2:	4b15      	ldr	r3, [pc, #84]	; (8001938 <HAL_RCC_OscConfig+0x248>)
 80018e4:	2201      	movs	r2, #1
 80018e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018e8:	f7ff fbc8 	bl	800107c <HAL_GetTick>
 80018ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018ee:	e008      	b.n	8001902 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018f0:	f7ff fbc4 	bl	800107c <HAL_GetTick>
 80018f4:	4602      	mov	r2, r0
 80018f6:	693b      	ldr	r3, [r7, #16]
 80018f8:	1ad3      	subs	r3, r2, r3
 80018fa:	2b02      	cmp	r3, #2
 80018fc:	d901      	bls.n	8001902 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80018fe:	2303      	movs	r3, #3
 8001900:	e167      	b.n	8001bd2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001902:	4b0b      	ldr	r3, [pc, #44]	; (8001930 <HAL_RCC_OscConfig+0x240>)
 8001904:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001906:	f003 0302 	and.w	r3, r3, #2
 800190a:	2b00      	cmp	r3, #0
 800190c:	d0f0      	beq.n	80018f0 <HAL_RCC_OscConfig+0x200>
 800190e:	e01b      	b.n	8001948 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001910:	4b09      	ldr	r3, [pc, #36]	; (8001938 <HAL_RCC_OscConfig+0x248>)
 8001912:	2200      	movs	r2, #0
 8001914:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001916:	f7ff fbb1 	bl	800107c <HAL_GetTick>
 800191a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800191c:	e00e      	b.n	800193c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800191e:	f7ff fbad 	bl	800107c <HAL_GetTick>
 8001922:	4602      	mov	r2, r0
 8001924:	693b      	ldr	r3, [r7, #16]
 8001926:	1ad3      	subs	r3, r2, r3
 8001928:	2b02      	cmp	r3, #2
 800192a:	d907      	bls.n	800193c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800192c:	2303      	movs	r3, #3
 800192e:	e150      	b.n	8001bd2 <HAL_RCC_OscConfig+0x4e2>
 8001930:	40023800 	.word	0x40023800
 8001934:	42470000 	.word	0x42470000
 8001938:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800193c:	4b88      	ldr	r3, [pc, #544]	; (8001b60 <HAL_RCC_OscConfig+0x470>)
 800193e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001940:	f003 0302 	and.w	r3, r3, #2
 8001944:	2b00      	cmp	r3, #0
 8001946:	d1ea      	bne.n	800191e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f003 0304 	and.w	r3, r3, #4
 8001950:	2b00      	cmp	r3, #0
 8001952:	f000 8097 	beq.w	8001a84 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001956:	2300      	movs	r3, #0
 8001958:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800195a:	4b81      	ldr	r3, [pc, #516]	; (8001b60 <HAL_RCC_OscConfig+0x470>)
 800195c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800195e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001962:	2b00      	cmp	r3, #0
 8001964:	d10f      	bne.n	8001986 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001966:	2300      	movs	r3, #0
 8001968:	60bb      	str	r3, [r7, #8]
 800196a:	4b7d      	ldr	r3, [pc, #500]	; (8001b60 <HAL_RCC_OscConfig+0x470>)
 800196c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800196e:	4a7c      	ldr	r2, [pc, #496]	; (8001b60 <HAL_RCC_OscConfig+0x470>)
 8001970:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001974:	6413      	str	r3, [r2, #64]	; 0x40
 8001976:	4b7a      	ldr	r3, [pc, #488]	; (8001b60 <HAL_RCC_OscConfig+0x470>)
 8001978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800197a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800197e:	60bb      	str	r3, [r7, #8]
 8001980:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001982:	2301      	movs	r3, #1
 8001984:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001986:	4b77      	ldr	r3, [pc, #476]	; (8001b64 <HAL_RCC_OscConfig+0x474>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800198e:	2b00      	cmp	r3, #0
 8001990:	d118      	bne.n	80019c4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001992:	4b74      	ldr	r3, [pc, #464]	; (8001b64 <HAL_RCC_OscConfig+0x474>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4a73      	ldr	r2, [pc, #460]	; (8001b64 <HAL_RCC_OscConfig+0x474>)
 8001998:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800199c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800199e:	f7ff fb6d 	bl	800107c <HAL_GetTick>
 80019a2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019a4:	e008      	b.n	80019b8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019a6:	f7ff fb69 	bl	800107c <HAL_GetTick>
 80019aa:	4602      	mov	r2, r0
 80019ac:	693b      	ldr	r3, [r7, #16]
 80019ae:	1ad3      	subs	r3, r2, r3
 80019b0:	2b02      	cmp	r3, #2
 80019b2:	d901      	bls.n	80019b8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80019b4:	2303      	movs	r3, #3
 80019b6:	e10c      	b.n	8001bd2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019b8:	4b6a      	ldr	r3, [pc, #424]	; (8001b64 <HAL_RCC_OscConfig+0x474>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d0f0      	beq.n	80019a6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	689b      	ldr	r3, [r3, #8]
 80019c8:	2b01      	cmp	r3, #1
 80019ca:	d106      	bne.n	80019da <HAL_RCC_OscConfig+0x2ea>
 80019cc:	4b64      	ldr	r3, [pc, #400]	; (8001b60 <HAL_RCC_OscConfig+0x470>)
 80019ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019d0:	4a63      	ldr	r2, [pc, #396]	; (8001b60 <HAL_RCC_OscConfig+0x470>)
 80019d2:	f043 0301 	orr.w	r3, r3, #1
 80019d6:	6713      	str	r3, [r2, #112]	; 0x70
 80019d8:	e01c      	b.n	8001a14 <HAL_RCC_OscConfig+0x324>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	689b      	ldr	r3, [r3, #8]
 80019de:	2b05      	cmp	r3, #5
 80019e0:	d10c      	bne.n	80019fc <HAL_RCC_OscConfig+0x30c>
 80019e2:	4b5f      	ldr	r3, [pc, #380]	; (8001b60 <HAL_RCC_OscConfig+0x470>)
 80019e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019e6:	4a5e      	ldr	r2, [pc, #376]	; (8001b60 <HAL_RCC_OscConfig+0x470>)
 80019e8:	f043 0304 	orr.w	r3, r3, #4
 80019ec:	6713      	str	r3, [r2, #112]	; 0x70
 80019ee:	4b5c      	ldr	r3, [pc, #368]	; (8001b60 <HAL_RCC_OscConfig+0x470>)
 80019f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019f2:	4a5b      	ldr	r2, [pc, #364]	; (8001b60 <HAL_RCC_OscConfig+0x470>)
 80019f4:	f043 0301 	orr.w	r3, r3, #1
 80019f8:	6713      	str	r3, [r2, #112]	; 0x70
 80019fa:	e00b      	b.n	8001a14 <HAL_RCC_OscConfig+0x324>
 80019fc:	4b58      	ldr	r3, [pc, #352]	; (8001b60 <HAL_RCC_OscConfig+0x470>)
 80019fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a00:	4a57      	ldr	r2, [pc, #348]	; (8001b60 <HAL_RCC_OscConfig+0x470>)
 8001a02:	f023 0301 	bic.w	r3, r3, #1
 8001a06:	6713      	str	r3, [r2, #112]	; 0x70
 8001a08:	4b55      	ldr	r3, [pc, #340]	; (8001b60 <HAL_RCC_OscConfig+0x470>)
 8001a0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a0c:	4a54      	ldr	r2, [pc, #336]	; (8001b60 <HAL_RCC_OscConfig+0x470>)
 8001a0e:	f023 0304 	bic.w	r3, r3, #4
 8001a12:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	689b      	ldr	r3, [r3, #8]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d015      	beq.n	8001a48 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a1c:	f7ff fb2e 	bl	800107c <HAL_GetTick>
 8001a20:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a22:	e00a      	b.n	8001a3a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a24:	f7ff fb2a 	bl	800107c <HAL_GetTick>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	693b      	ldr	r3, [r7, #16]
 8001a2c:	1ad3      	subs	r3, r2, r3
 8001a2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d901      	bls.n	8001a3a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001a36:	2303      	movs	r3, #3
 8001a38:	e0cb      	b.n	8001bd2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a3a:	4b49      	ldr	r3, [pc, #292]	; (8001b60 <HAL_RCC_OscConfig+0x470>)
 8001a3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a3e:	f003 0302 	and.w	r3, r3, #2
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d0ee      	beq.n	8001a24 <HAL_RCC_OscConfig+0x334>
 8001a46:	e014      	b.n	8001a72 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a48:	f7ff fb18 	bl	800107c <HAL_GetTick>
 8001a4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a4e:	e00a      	b.n	8001a66 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a50:	f7ff fb14 	bl	800107c <HAL_GetTick>
 8001a54:	4602      	mov	r2, r0
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	1ad3      	subs	r3, r2, r3
 8001a5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d901      	bls.n	8001a66 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001a62:	2303      	movs	r3, #3
 8001a64:	e0b5      	b.n	8001bd2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a66:	4b3e      	ldr	r3, [pc, #248]	; (8001b60 <HAL_RCC_OscConfig+0x470>)
 8001a68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a6a:	f003 0302 	and.w	r3, r3, #2
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d1ee      	bne.n	8001a50 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001a72:	7dfb      	ldrb	r3, [r7, #23]
 8001a74:	2b01      	cmp	r3, #1
 8001a76:	d105      	bne.n	8001a84 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a78:	4b39      	ldr	r3, [pc, #228]	; (8001b60 <HAL_RCC_OscConfig+0x470>)
 8001a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a7c:	4a38      	ldr	r2, [pc, #224]	; (8001b60 <HAL_RCC_OscConfig+0x470>)
 8001a7e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a82:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	699b      	ldr	r3, [r3, #24]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	f000 80a1 	beq.w	8001bd0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001a8e:	4b34      	ldr	r3, [pc, #208]	; (8001b60 <HAL_RCC_OscConfig+0x470>)
 8001a90:	689b      	ldr	r3, [r3, #8]
 8001a92:	f003 030c 	and.w	r3, r3, #12
 8001a96:	2b08      	cmp	r3, #8
 8001a98:	d05c      	beq.n	8001b54 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	699b      	ldr	r3, [r3, #24]
 8001a9e:	2b02      	cmp	r3, #2
 8001aa0:	d141      	bne.n	8001b26 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001aa2:	4b31      	ldr	r3, [pc, #196]	; (8001b68 <HAL_RCC_OscConfig+0x478>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aa8:	f7ff fae8 	bl	800107c <HAL_GetTick>
 8001aac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001aae:	e008      	b.n	8001ac2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ab0:	f7ff fae4 	bl	800107c <HAL_GetTick>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	693b      	ldr	r3, [r7, #16]
 8001ab8:	1ad3      	subs	r3, r2, r3
 8001aba:	2b02      	cmp	r3, #2
 8001abc:	d901      	bls.n	8001ac2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001abe:	2303      	movs	r3, #3
 8001ac0:	e087      	b.n	8001bd2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ac2:	4b27      	ldr	r3, [pc, #156]	; (8001b60 <HAL_RCC_OscConfig+0x470>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d1f0      	bne.n	8001ab0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	69da      	ldr	r2, [r3, #28]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6a1b      	ldr	r3, [r3, #32]
 8001ad6:	431a      	orrs	r2, r3
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001adc:	019b      	lsls	r3, r3, #6
 8001ade:	431a      	orrs	r2, r3
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ae4:	085b      	lsrs	r3, r3, #1
 8001ae6:	3b01      	subs	r3, #1
 8001ae8:	041b      	lsls	r3, r3, #16
 8001aea:	431a      	orrs	r2, r3
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001af0:	061b      	lsls	r3, r3, #24
 8001af2:	491b      	ldr	r1, [pc, #108]	; (8001b60 <HAL_RCC_OscConfig+0x470>)
 8001af4:	4313      	orrs	r3, r2
 8001af6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001af8:	4b1b      	ldr	r3, [pc, #108]	; (8001b68 <HAL_RCC_OscConfig+0x478>)
 8001afa:	2201      	movs	r2, #1
 8001afc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001afe:	f7ff fabd 	bl	800107c <HAL_GetTick>
 8001b02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b04:	e008      	b.n	8001b18 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b06:	f7ff fab9 	bl	800107c <HAL_GetTick>
 8001b0a:	4602      	mov	r2, r0
 8001b0c:	693b      	ldr	r3, [r7, #16]
 8001b0e:	1ad3      	subs	r3, r2, r3
 8001b10:	2b02      	cmp	r3, #2
 8001b12:	d901      	bls.n	8001b18 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001b14:	2303      	movs	r3, #3
 8001b16:	e05c      	b.n	8001bd2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b18:	4b11      	ldr	r3, [pc, #68]	; (8001b60 <HAL_RCC_OscConfig+0x470>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d0f0      	beq.n	8001b06 <HAL_RCC_OscConfig+0x416>
 8001b24:	e054      	b.n	8001bd0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b26:	4b10      	ldr	r3, [pc, #64]	; (8001b68 <HAL_RCC_OscConfig+0x478>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b2c:	f7ff faa6 	bl	800107c <HAL_GetTick>
 8001b30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b32:	e008      	b.n	8001b46 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b34:	f7ff faa2 	bl	800107c <HAL_GetTick>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	693b      	ldr	r3, [r7, #16]
 8001b3c:	1ad3      	subs	r3, r2, r3
 8001b3e:	2b02      	cmp	r3, #2
 8001b40:	d901      	bls.n	8001b46 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001b42:	2303      	movs	r3, #3
 8001b44:	e045      	b.n	8001bd2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b46:	4b06      	ldr	r3, [pc, #24]	; (8001b60 <HAL_RCC_OscConfig+0x470>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d1f0      	bne.n	8001b34 <HAL_RCC_OscConfig+0x444>
 8001b52:	e03d      	b.n	8001bd0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	699b      	ldr	r3, [r3, #24]
 8001b58:	2b01      	cmp	r3, #1
 8001b5a:	d107      	bne.n	8001b6c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	e038      	b.n	8001bd2 <HAL_RCC_OscConfig+0x4e2>
 8001b60:	40023800 	.word	0x40023800
 8001b64:	40007000 	.word	0x40007000
 8001b68:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001b6c:	4b1b      	ldr	r3, [pc, #108]	; (8001bdc <HAL_RCC_OscConfig+0x4ec>)
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	699b      	ldr	r3, [r3, #24]
 8001b76:	2b01      	cmp	r3, #1
 8001b78:	d028      	beq.n	8001bcc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b84:	429a      	cmp	r2, r3
 8001b86:	d121      	bne.n	8001bcc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b92:	429a      	cmp	r2, r3
 8001b94:	d11a      	bne.n	8001bcc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b96:	68fa      	ldr	r2, [r7, #12]
 8001b98:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	687a      	ldr	r2, [r7, #4]
 8001ba0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001ba2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ba4:	4293      	cmp	r3, r2
 8001ba6:	d111      	bne.n	8001bcc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bb2:	085b      	lsrs	r3, r3, #1
 8001bb4:	3b01      	subs	r3, #1
 8001bb6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001bb8:	429a      	cmp	r2, r3
 8001bba:	d107      	bne.n	8001bcc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bc6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001bc8:	429a      	cmp	r2, r3
 8001bca:	d001      	beq.n	8001bd0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	e000      	b.n	8001bd2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001bd0:	2300      	movs	r3, #0
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	3718      	adds	r7, #24
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	40023800 	.word	0x40023800

08001be0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b084      	sub	sp, #16
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
 8001be8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d101      	bne.n	8001bf4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	e0cc      	b.n	8001d8e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001bf4:	4b68      	ldr	r3, [pc, #416]	; (8001d98 <HAL_RCC_ClockConfig+0x1b8>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f003 030f 	and.w	r3, r3, #15
 8001bfc:	683a      	ldr	r2, [r7, #0]
 8001bfe:	429a      	cmp	r2, r3
 8001c00:	d90c      	bls.n	8001c1c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c02:	4b65      	ldr	r3, [pc, #404]	; (8001d98 <HAL_RCC_ClockConfig+0x1b8>)
 8001c04:	683a      	ldr	r2, [r7, #0]
 8001c06:	b2d2      	uxtb	r2, r2
 8001c08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c0a:	4b63      	ldr	r3, [pc, #396]	; (8001d98 <HAL_RCC_ClockConfig+0x1b8>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f003 030f 	and.w	r3, r3, #15
 8001c12:	683a      	ldr	r2, [r7, #0]
 8001c14:	429a      	cmp	r2, r3
 8001c16:	d001      	beq.n	8001c1c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	e0b8      	b.n	8001d8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f003 0302 	and.w	r3, r3, #2
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d020      	beq.n	8001c6a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f003 0304 	and.w	r3, r3, #4
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d005      	beq.n	8001c40 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c34:	4b59      	ldr	r3, [pc, #356]	; (8001d9c <HAL_RCC_ClockConfig+0x1bc>)
 8001c36:	689b      	ldr	r3, [r3, #8]
 8001c38:	4a58      	ldr	r2, [pc, #352]	; (8001d9c <HAL_RCC_ClockConfig+0x1bc>)
 8001c3a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001c3e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f003 0308 	and.w	r3, r3, #8
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d005      	beq.n	8001c58 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c4c:	4b53      	ldr	r3, [pc, #332]	; (8001d9c <HAL_RCC_ClockConfig+0x1bc>)
 8001c4e:	689b      	ldr	r3, [r3, #8]
 8001c50:	4a52      	ldr	r2, [pc, #328]	; (8001d9c <HAL_RCC_ClockConfig+0x1bc>)
 8001c52:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001c56:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c58:	4b50      	ldr	r3, [pc, #320]	; (8001d9c <HAL_RCC_ClockConfig+0x1bc>)
 8001c5a:	689b      	ldr	r3, [r3, #8]
 8001c5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	689b      	ldr	r3, [r3, #8]
 8001c64:	494d      	ldr	r1, [pc, #308]	; (8001d9c <HAL_RCC_ClockConfig+0x1bc>)
 8001c66:	4313      	orrs	r3, r2
 8001c68:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f003 0301 	and.w	r3, r3, #1
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d044      	beq.n	8001d00 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	2b01      	cmp	r3, #1
 8001c7c:	d107      	bne.n	8001c8e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c7e:	4b47      	ldr	r3, [pc, #284]	; (8001d9c <HAL_RCC_ClockConfig+0x1bc>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d119      	bne.n	8001cbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e07f      	b.n	8001d8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	2b02      	cmp	r3, #2
 8001c94:	d003      	beq.n	8001c9e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c9a:	2b03      	cmp	r3, #3
 8001c9c:	d107      	bne.n	8001cae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c9e:	4b3f      	ldr	r3, [pc, #252]	; (8001d9c <HAL_RCC_ClockConfig+0x1bc>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d109      	bne.n	8001cbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001caa:	2301      	movs	r3, #1
 8001cac:	e06f      	b.n	8001d8e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cae:	4b3b      	ldr	r3, [pc, #236]	; (8001d9c <HAL_RCC_ClockConfig+0x1bc>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f003 0302 	and.w	r3, r3, #2
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d101      	bne.n	8001cbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	e067      	b.n	8001d8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001cbe:	4b37      	ldr	r3, [pc, #220]	; (8001d9c <HAL_RCC_ClockConfig+0x1bc>)
 8001cc0:	689b      	ldr	r3, [r3, #8]
 8001cc2:	f023 0203 	bic.w	r2, r3, #3
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	4934      	ldr	r1, [pc, #208]	; (8001d9c <HAL_RCC_ClockConfig+0x1bc>)
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001cd0:	f7ff f9d4 	bl	800107c <HAL_GetTick>
 8001cd4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cd6:	e00a      	b.n	8001cee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cd8:	f7ff f9d0 	bl	800107c <HAL_GetTick>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	1ad3      	subs	r3, r2, r3
 8001ce2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d901      	bls.n	8001cee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001cea:	2303      	movs	r3, #3
 8001cec:	e04f      	b.n	8001d8e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cee:	4b2b      	ldr	r3, [pc, #172]	; (8001d9c <HAL_RCC_ClockConfig+0x1bc>)
 8001cf0:	689b      	ldr	r3, [r3, #8]
 8001cf2:	f003 020c 	and.w	r2, r3, #12
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	009b      	lsls	r3, r3, #2
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	d1eb      	bne.n	8001cd8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d00:	4b25      	ldr	r3, [pc, #148]	; (8001d98 <HAL_RCC_ClockConfig+0x1b8>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f003 030f 	and.w	r3, r3, #15
 8001d08:	683a      	ldr	r2, [r7, #0]
 8001d0a:	429a      	cmp	r2, r3
 8001d0c:	d20c      	bcs.n	8001d28 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d0e:	4b22      	ldr	r3, [pc, #136]	; (8001d98 <HAL_RCC_ClockConfig+0x1b8>)
 8001d10:	683a      	ldr	r2, [r7, #0]
 8001d12:	b2d2      	uxtb	r2, r2
 8001d14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d16:	4b20      	ldr	r3, [pc, #128]	; (8001d98 <HAL_RCC_ClockConfig+0x1b8>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f003 030f 	and.w	r3, r3, #15
 8001d1e:	683a      	ldr	r2, [r7, #0]
 8001d20:	429a      	cmp	r2, r3
 8001d22:	d001      	beq.n	8001d28 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001d24:	2301      	movs	r3, #1
 8001d26:	e032      	b.n	8001d8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f003 0304 	and.w	r3, r3, #4
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d008      	beq.n	8001d46 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d34:	4b19      	ldr	r3, [pc, #100]	; (8001d9c <HAL_RCC_ClockConfig+0x1bc>)
 8001d36:	689b      	ldr	r3, [r3, #8]
 8001d38:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	68db      	ldr	r3, [r3, #12]
 8001d40:	4916      	ldr	r1, [pc, #88]	; (8001d9c <HAL_RCC_ClockConfig+0x1bc>)
 8001d42:	4313      	orrs	r3, r2
 8001d44:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f003 0308 	and.w	r3, r3, #8
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d009      	beq.n	8001d66 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d52:	4b12      	ldr	r3, [pc, #72]	; (8001d9c <HAL_RCC_ClockConfig+0x1bc>)
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	691b      	ldr	r3, [r3, #16]
 8001d5e:	00db      	lsls	r3, r3, #3
 8001d60:	490e      	ldr	r1, [pc, #56]	; (8001d9c <HAL_RCC_ClockConfig+0x1bc>)
 8001d62:	4313      	orrs	r3, r2
 8001d64:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001d66:	f000 f821 	bl	8001dac <HAL_RCC_GetSysClockFreq>
 8001d6a:	4602      	mov	r2, r0
 8001d6c:	4b0b      	ldr	r3, [pc, #44]	; (8001d9c <HAL_RCC_ClockConfig+0x1bc>)
 8001d6e:	689b      	ldr	r3, [r3, #8]
 8001d70:	091b      	lsrs	r3, r3, #4
 8001d72:	f003 030f 	and.w	r3, r3, #15
 8001d76:	490a      	ldr	r1, [pc, #40]	; (8001da0 <HAL_RCC_ClockConfig+0x1c0>)
 8001d78:	5ccb      	ldrb	r3, [r1, r3]
 8001d7a:	fa22 f303 	lsr.w	r3, r2, r3
 8001d7e:	4a09      	ldr	r2, [pc, #36]	; (8001da4 <HAL_RCC_ClockConfig+0x1c4>)
 8001d80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001d82:	4b09      	ldr	r3, [pc, #36]	; (8001da8 <HAL_RCC_ClockConfig+0x1c8>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4618      	mov	r0, r3
 8001d88:	f7ff f934 	bl	8000ff4 <HAL_InitTick>

  return HAL_OK;
 8001d8c:	2300      	movs	r3, #0
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	3710      	adds	r7, #16
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	40023c00 	.word	0x40023c00
 8001d9c:	40023800 	.word	0x40023800
 8001da0:	08003040 	.word	0x08003040
 8001da4:	20000000 	.word	0x20000000
 8001da8:	20000004 	.word	0x20000004

08001dac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001dac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001db0:	b094      	sub	sp, #80	; 0x50
 8001db2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001db4:	2300      	movs	r3, #0
 8001db6:	647b      	str	r3, [r7, #68]	; 0x44
 8001db8:	2300      	movs	r3, #0
 8001dba:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001dc4:	4b79      	ldr	r3, [pc, #484]	; (8001fac <HAL_RCC_GetSysClockFreq+0x200>)
 8001dc6:	689b      	ldr	r3, [r3, #8]
 8001dc8:	f003 030c 	and.w	r3, r3, #12
 8001dcc:	2b08      	cmp	r3, #8
 8001dce:	d00d      	beq.n	8001dec <HAL_RCC_GetSysClockFreq+0x40>
 8001dd0:	2b08      	cmp	r3, #8
 8001dd2:	f200 80e1 	bhi.w	8001f98 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d002      	beq.n	8001de0 <HAL_RCC_GetSysClockFreq+0x34>
 8001dda:	2b04      	cmp	r3, #4
 8001ddc:	d003      	beq.n	8001de6 <HAL_RCC_GetSysClockFreq+0x3a>
 8001dde:	e0db      	b.n	8001f98 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001de0:	4b73      	ldr	r3, [pc, #460]	; (8001fb0 <HAL_RCC_GetSysClockFreq+0x204>)
 8001de2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001de4:	e0db      	b.n	8001f9e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001de6:	4b73      	ldr	r3, [pc, #460]	; (8001fb4 <HAL_RCC_GetSysClockFreq+0x208>)
 8001de8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001dea:	e0d8      	b.n	8001f9e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001dec:	4b6f      	ldr	r3, [pc, #444]	; (8001fac <HAL_RCC_GetSysClockFreq+0x200>)
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001df4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001df6:	4b6d      	ldr	r3, [pc, #436]	; (8001fac <HAL_RCC_GetSysClockFreq+0x200>)
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d063      	beq.n	8001eca <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e02:	4b6a      	ldr	r3, [pc, #424]	; (8001fac <HAL_RCC_GetSysClockFreq+0x200>)
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	099b      	lsrs	r3, r3, #6
 8001e08:	2200      	movs	r2, #0
 8001e0a:	63bb      	str	r3, [r7, #56]	; 0x38
 8001e0c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001e0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e14:	633b      	str	r3, [r7, #48]	; 0x30
 8001e16:	2300      	movs	r3, #0
 8001e18:	637b      	str	r3, [r7, #52]	; 0x34
 8001e1a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001e1e:	4622      	mov	r2, r4
 8001e20:	462b      	mov	r3, r5
 8001e22:	f04f 0000 	mov.w	r0, #0
 8001e26:	f04f 0100 	mov.w	r1, #0
 8001e2a:	0159      	lsls	r1, r3, #5
 8001e2c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e30:	0150      	lsls	r0, r2, #5
 8001e32:	4602      	mov	r2, r0
 8001e34:	460b      	mov	r3, r1
 8001e36:	4621      	mov	r1, r4
 8001e38:	1a51      	subs	r1, r2, r1
 8001e3a:	6139      	str	r1, [r7, #16]
 8001e3c:	4629      	mov	r1, r5
 8001e3e:	eb63 0301 	sbc.w	r3, r3, r1
 8001e42:	617b      	str	r3, [r7, #20]
 8001e44:	f04f 0200 	mov.w	r2, #0
 8001e48:	f04f 0300 	mov.w	r3, #0
 8001e4c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001e50:	4659      	mov	r1, fp
 8001e52:	018b      	lsls	r3, r1, #6
 8001e54:	4651      	mov	r1, sl
 8001e56:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001e5a:	4651      	mov	r1, sl
 8001e5c:	018a      	lsls	r2, r1, #6
 8001e5e:	4651      	mov	r1, sl
 8001e60:	ebb2 0801 	subs.w	r8, r2, r1
 8001e64:	4659      	mov	r1, fp
 8001e66:	eb63 0901 	sbc.w	r9, r3, r1
 8001e6a:	f04f 0200 	mov.w	r2, #0
 8001e6e:	f04f 0300 	mov.w	r3, #0
 8001e72:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001e76:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001e7a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001e7e:	4690      	mov	r8, r2
 8001e80:	4699      	mov	r9, r3
 8001e82:	4623      	mov	r3, r4
 8001e84:	eb18 0303 	adds.w	r3, r8, r3
 8001e88:	60bb      	str	r3, [r7, #8]
 8001e8a:	462b      	mov	r3, r5
 8001e8c:	eb49 0303 	adc.w	r3, r9, r3
 8001e90:	60fb      	str	r3, [r7, #12]
 8001e92:	f04f 0200 	mov.w	r2, #0
 8001e96:	f04f 0300 	mov.w	r3, #0
 8001e9a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001e9e:	4629      	mov	r1, r5
 8001ea0:	024b      	lsls	r3, r1, #9
 8001ea2:	4621      	mov	r1, r4
 8001ea4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001ea8:	4621      	mov	r1, r4
 8001eaa:	024a      	lsls	r2, r1, #9
 8001eac:	4610      	mov	r0, r2
 8001eae:	4619      	mov	r1, r3
 8001eb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	62bb      	str	r3, [r7, #40]	; 0x28
 8001eb6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001eb8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001ebc:	f7fe f99e 	bl	80001fc <__aeabi_uldivmod>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	460b      	mov	r3, r1
 8001ec4:	4613      	mov	r3, r2
 8001ec6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001ec8:	e058      	b.n	8001f7c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001eca:	4b38      	ldr	r3, [pc, #224]	; (8001fac <HAL_RCC_GetSysClockFreq+0x200>)
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	099b      	lsrs	r3, r3, #6
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	4611      	mov	r1, r2
 8001ed6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001eda:	623b      	str	r3, [r7, #32]
 8001edc:	2300      	movs	r3, #0
 8001ede:	627b      	str	r3, [r7, #36]	; 0x24
 8001ee0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001ee4:	4642      	mov	r2, r8
 8001ee6:	464b      	mov	r3, r9
 8001ee8:	f04f 0000 	mov.w	r0, #0
 8001eec:	f04f 0100 	mov.w	r1, #0
 8001ef0:	0159      	lsls	r1, r3, #5
 8001ef2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ef6:	0150      	lsls	r0, r2, #5
 8001ef8:	4602      	mov	r2, r0
 8001efa:	460b      	mov	r3, r1
 8001efc:	4641      	mov	r1, r8
 8001efe:	ebb2 0a01 	subs.w	sl, r2, r1
 8001f02:	4649      	mov	r1, r9
 8001f04:	eb63 0b01 	sbc.w	fp, r3, r1
 8001f08:	f04f 0200 	mov.w	r2, #0
 8001f0c:	f04f 0300 	mov.w	r3, #0
 8001f10:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001f14:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001f18:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001f1c:	ebb2 040a 	subs.w	r4, r2, sl
 8001f20:	eb63 050b 	sbc.w	r5, r3, fp
 8001f24:	f04f 0200 	mov.w	r2, #0
 8001f28:	f04f 0300 	mov.w	r3, #0
 8001f2c:	00eb      	lsls	r3, r5, #3
 8001f2e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001f32:	00e2      	lsls	r2, r4, #3
 8001f34:	4614      	mov	r4, r2
 8001f36:	461d      	mov	r5, r3
 8001f38:	4643      	mov	r3, r8
 8001f3a:	18e3      	adds	r3, r4, r3
 8001f3c:	603b      	str	r3, [r7, #0]
 8001f3e:	464b      	mov	r3, r9
 8001f40:	eb45 0303 	adc.w	r3, r5, r3
 8001f44:	607b      	str	r3, [r7, #4]
 8001f46:	f04f 0200 	mov.w	r2, #0
 8001f4a:	f04f 0300 	mov.w	r3, #0
 8001f4e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001f52:	4629      	mov	r1, r5
 8001f54:	028b      	lsls	r3, r1, #10
 8001f56:	4621      	mov	r1, r4
 8001f58:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001f5c:	4621      	mov	r1, r4
 8001f5e:	028a      	lsls	r2, r1, #10
 8001f60:	4610      	mov	r0, r2
 8001f62:	4619      	mov	r1, r3
 8001f64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f66:	2200      	movs	r2, #0
 8001f68:	61bb      	str	r3, [r7, #24]
 8001f6a:	61fa      	str	r2, [r7, #28]
 8001f6c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001f70:	f7fe f944 	bl	80001fc <__aeabi_uldivmod>
 8001f74:	4602      	mov	r2, r0
 8001f76:	460b      	mov	r3, r1
 8001f78:	4613      	mov	r3, r2
 8001f7a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001f7c:	4b0b      	ldr	r3, [pc, #44]	; (8001fac <HAL_RCC_GetSysClockFreq+0x200>)
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	0c1b      	lsrs	r3, r3, #16
 8001f82:	f003 0303 	and.w	r3, r3, #3
 8001f86:	3301      	adds	r3, #1
 8001f88:	005b      	lsls	r3, r3, #1
 8001f8a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001f8c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001f8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f90:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f94:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001f96:	e002      	b.n	8001f9e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001f98:	4b05      	ldr	r3, [pc, #20]	; (8001fb0 <HAL_RCC_GetSysClockFreq+0x204>)
 8001f9a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001f9c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	3750      	adds	r7, #80	; 0x50
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001faa:	bf00      	nop
 8001fac:	40023800 	.word	0x40023800
 8001fb0:	00f42400 	.word	0x00f42400
 8001fb4:	007a1200 	.word	0x007a1200

08001fb8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001fbc:	4b03      	ldr	r3, [pc, #12]	; (8001fcc <HAL_RCC_GetHCLKFreq+0x14>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc8:	4770      	bx	lr
 8001fca:	bf00      	nop
 8001fcc:	20000000 	.word	0x20000000

08001fd0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001fd4:	f7ff fff0 	bl	8001fb8 <HAL_RCC_GetHCLKFreq>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	4b05      	ldr	r3, [pc, #20]	; (8001ff0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001fdc:	689b      	ldr	r3, [r3, #8]
 8001fde:	0a9b      	lsrs	r3, r3, #10
 8001fe0:	f003 0307 	and.w	r3, r3, #7
 8001fe4:	4903      	ldr	r1, [pc, #12]	; (8001ff4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001fe6:	5ccb      	ldrb	r3, [r1, r3]
 8001fe8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	bd80      	pop	{r7, pc}
 8001ff0:	40023800 	.word	0x40023800
 8001ff4:	08003050 	.word	0x08003050

08001ff8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001ffc:	f7ff ffdc 	bl	8001fb8 <HAL_RCC_GetHCLKFreq>
 8002000:	4602      	mov	r2, r0
 8002002:	4b05      	ldr	r3, [pc, #20]	; (8002018 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002004:	689b      	ldr	r3, [r3, #8]
 8002006:	0b5b      	lsrs	r3, r3, #13
 8002008:	f003 0307 	and.w	r3, r3, #7
 800200c:	4903      	ldr	r1, [pc, #12]	; (800201c <HAL_RCC_GetPCLK2Freq+0x24>)
 800200e:	5ccb      	ldrb	r3, [r1, r3]
 8002010:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002014:	4618      	mov	r0, r3
 8002016:	bd80      	pop	{r7, pc}
 8002018:	40023800 	.word	0x40023800
 800201c:	08003050 	.word	0x08003050

08002020 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b082      	sub	sp, #8
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d101      	bne.n	8002032 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800202e:	2301      	movs	r3, #1
 8002030:	e03f      	b.n	80020b2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002038:	b2db      	uxtb	r3, r3
 800203a:	2b00      	cmp	r3, #0
 800203c:	d106      	bne.n	800204c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2200      	movs	r2, #0
 8002042:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002046:	6878      	ldr	r0, [r7, #4]
 8002048:	f7fe fef6 	bl	8000e38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2224      	movs	r2, #36	; 0x24
 8002050:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	68da      	ldr	r2, [r3, #12]
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002062:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002064:	6878      	ldr	r0, [r7, #4]
 8002066:	f000 f929 	bl	80022bc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	691a      	ldr	r2, [r3, #16]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002078:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	695a      	ldr	r2, [r3, #20]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002088:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	68da      	ldr	r2, [r3, #12]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002098:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2200      	movs	r2, #0
 800209e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2220      	movs	r2, #32
 80020a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2220      	movs	r2, #32
 80020ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80020b0:	2300      	movs	r3, #0
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	3708      	adds	r7, #8
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}

080020ba <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80020ba:	b580      	push	{r7, lr}
 80020bc:	b08a      	sub	sp, #40	; 0x28
 80020be:	af02      	add	r7, sp, #8
 80020c0:	60f8      	str	r0, [r7, #12]
 80020c2:	60b9      	str	r1, [r7, #8]
 80020c4:	603b      	str	r3, [r7, #0]
 80020c6:	4613      	mov	r3, r2
 80020c8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80020ca:	2300      	movs	r3, #0
 80020cc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020d4:	b2db      	uxtb	r3, r3
 80020d6:	2b20      	cmp	r3, #32
 80020d8:	d17c      	bne.n	80021d4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80020da:	68bb      	ldr	r3, [r7, #8]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d002      	beq.n	80020e6 <HAL_UART_Transmit+0x2c>
 80020e0:	88fb      	ldrh	r3, [r7, #6]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d101      	bne.n	80020ea <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80020e6:	2301      	movs	r3, #1
 80020e8:	e075      	b.n	80021d6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020f0:	2b01      	cmp	r3, #1
 80020f2:	d101      	bne.n	80020f8 <HAL_UART_Transmit+0x3e>
 80020f4:	2302      	movs	r3, #2
 80020f6:	e06e      	b.n	80021d6 <HAL_UART_Transmit+0x11c>
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	2201      	movs	r2, #1
 80020fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	2200      	movs	r2, #0
 8002104:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	2221      	movs	r2, #33	; 0x21
 800210a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800210e:	f7fe ffb5 	bl	800107c <HAL_GetTick>
 8002112:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	88fa      	ldrh	r2, [r7, #6]
 8002118:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	88fa      	ldrh	r2, [r7, #6]
 800211e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	689b      	ldr	r3, [r3, #8]
 8002124:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002128:	d108      	bne.n	800213c <HAL_UART_Transmit+0x82>
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	691b      	ldr	r3, [r3, #16]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d104      	bne.n	800213c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002132:	2300      	movs	r3, #0
 8002134:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002136:	68bb      	ldr	r3, [r7, #8]
 8002138:	61bb      	str	r3, [r7, #24]
 800213a:	e003      	b.n	8002144 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002140:	2300      	movs	r3, #0
 8002142:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	2200      	movs	r2, #0
 8002148:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800214c:	e02a      	b.n	80021a4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	9300      	str	r3, [sp, #0]
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	2200      	movs	r2, #0
 8002156:	2180      	movs	r1, #128	; 0x80
 8002158:	68f8      	ldr	r0, [r7, #12]
 800215a:	f000 f840 	bl	80021de <UART_WaitOnFlagUntilTimeout>
 800215e:	4603      	mov	r3, r0
 8002160:	2b00      	cmp	r3, #0
 8002162:	d001      	beq.n	8002168 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002164:	2303      	movs	r3, #3
 8002166:	e036      	b.n	80021d6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002168:	69fb      	ldr	r3, [r7, #28]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d10b      	bne.n	8002186 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800216e:	69bb      	ldr	r3, [r7, #24]
 8002170:	881b      	ldrh	r3, [r3, #0]
 8002172:	461a      	mov	r2, r3
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800217c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800217e:	69bb      	ldr	r3, [r7, #24]
 8002180:	3302      	adds	r3, #2
 8002182:	61bb      	str	r3, [r7, #24]
 8002184:	e007      	b.n	8002196 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002186:	69fb      	ldr	r3, [r7, #28]
 8002188:	781a      	ldrb	r2, [r3, #0]
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002190:	69fb      	ldr	r3, [r7, #28]
 8002192:	3301      	adds	r3, #1
 8002194:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800219a:	b29b      	uxth	r3, r3
 800219c:	3b01      	subs	r3, #1
 800219e:	b29a      	uxth	r2, r3
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80021a8:	b29b      	uxth	r3, r3
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d1cf      	bne.n	800214e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	9300      	str	r3, [sp, #0]
 80021b2:	697b      	ldr	r3, [r7, #20]
 80021b4:	2200      	movs	r2, #0
 80021b6:	2140      	movs	r1, #64	; 0x40
 80021b8:	68f8      	ldr	r0, [r7, #12]
 80021ba:	f000 f810 	bl	80021de <UART_WaitOnFlagUntilTimeout>
 80021be:	4603      	mov	r3, r0
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d001      	beq.n	80021c8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80021c4:	2303      	movs	r3, #3
 80021c6:	e006      	b.n	80021d6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	2220      	movs	r2, #32
 80021cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80021d0:	2300      	movs	r3, #0
 80021d2:	e000      	b.n	80021d6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80021d4:	2302      	movs	r3, #2
  }
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	3720      	adds	r7, #32
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}

080021de <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80021de:	b580      	push	{r7, lr}
 80021e0:	b090      	sub	sp, #64	; 0x40
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	60f8      	str	r0, [r7, #12]
 80021e6:	60b9      	str	r1, [r7, #8]
 80021e8:	603b      	str	r3, [r7, #0]
 80021ea:	4613      	mov	r3, r2
 80021ec:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80021ee:	e050      	b.n	8002292 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80021f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021f6:	d04c      	beq.n	8002292 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80021f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d007      	beq.n	800220e <UART_WaitOnFlagUntilTimeout+0x30>
 80021fe:	f7fe ff3d 	bl	800107c <HAL_GetTick>
 8002202:	4602      	mov	r2, r0
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	1ad3      	subs	r3, r2, r3
 8002208:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800220a:	429a      	cmp	r2, r3
 800220c:	d241      	bcs.n	8002292 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	330c      	adds	r3, #12
 8002214:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002218:	e853 3f00 	ldrex	r3, [r3]
 800221c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800221e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002220:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002224:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	330c      	adds	r3, #12
 800222c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800222e:	637a      	str	r2, [r7, #52]	; 0x34
 8002230:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002232:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002234:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002236:	e841 2300 	strex	r3, r2, [r1]
 800223a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800223c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800223e:	2b00      	cmp	r3, #0
 8002240:	d1e5      	bne.n	800220e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	3314      	adds	r3, #20
 8002248:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	e853 3f00 	ldrex	r3, [r3]
 8002250:	613b      	str	r3, [r7, #16]
   return(result);
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	f023 0301 	bic.w	r3, r3, #1
 8002258:	63bb      	str	r3, [r7, #56]	; 0x38
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	3314      	adds	r3, #20
 8002260:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002262:	623a      	str	r2, [r7, #32]
 8002264:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002266:	69f9      	ldr	r1, [r7, #28]
 8002268:	6a3a      	ldr	r2, [r7, #32]
 800226a:	e841 2300 	strex	r3, r2, [r1]
 800226e:	61bb      	str	r3, [r7, #24]
   return(result);
 8002270:	69bb      	ldr	r3, [r7, #24]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d1e5      	bne.n	8002242 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	2220      	movs	r2, #32
 800227a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	2220      	movs	r2, #32
 8002282:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	2200      	movs	r2, #0
 800228a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800228e:	2303      	movs	r3, #3
 8002290:	e00f      	b.n	80022b2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	681a      	ldr	r2, [r3, #0]
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	4013      	ands	r3, r2
 800229c:	68ba      	ldr	r2, [r7, #8]
 800229e:	429a      	cmp	r2, r3
 80022a0:	bf0c      	ite	eq
 80022a2:	2301      	moveq	r3, #1
 80022a4:	2300      	movne	r3, #0
 80022a6:	b2db      	uxtb	r3, r3
 80022a8:	461a      	mov	r2, r3
 80022aa:	79fb      	ldrb	r3, [r7, #7]
 80022ac:	429a      	cmp	r2, r3
 80022ae:	d09f      	beq.n	80021f0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80022b0:	2300      	movs	r3, #0
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	3740      	adds	r7, #64	; 0x40
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}
	...

080022bc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80022bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80022c0:	b0c0      	sub	sp, #256	; 0x100
 80022c2:	af00      	add	r7, sp, #0
 80022c4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80022c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	691b      	ldr	r3, [r3, #16]
 80022d0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80022d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022d8:	68d9      	ldr	r1, [r3, #12]
 80022da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022de:	681a      	ldr	r2, [r3, #0]
 80022e0:	ea40 0301 	orr.w	r3, r0, r1
 80022e4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80022e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022ea:	689a      	ldr	r2, [r3, #8]
 80022ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022f0:	691b      	ldr	r3, [r3, #16]
 80022f2:	431a      	orrs	r2, r3
 80022f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022f8:	695b      	ldr	r3, [r3, #20]
 80022fa:	431a      	orrs	r2, r3
 80022fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002300:	69db      	ldr	r3, [r3, #28]
 8002302:	4313      	orrs	r3, r2
 8002304:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002308:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	68db      	ldr	r3, [r3, #12]
 8002310:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002314:	f021 010c 	bic.w	r1, r1, #12
 8002318:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800231c:	681a      	ldr	r2, [r3, #0]
 800231e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002322:	430b      	orrs	r3, r1
 8002324:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002326:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	695b      	ldr	r3, [r3, #20]
 800232e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002332:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002336:	6999      	ldr	r1, [r3, #24]
 8002338:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800233c:	681a      	ldr	r2, [r3, #0]
 800233e:	ea40 0301 	orr.w	r3, r0, r1
 8002342:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002344:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002348:	681a      	ldr	r2, [r3, #0]
 800234a:	4b8f      	ldr	r3, [pc, #572]	; (8002588 <UART_SetConfig+0x2cc>)
 800234c:	429a      	cmp	r2, r3
 800234e:	d005      	beq.n	800235c <UART_SetConfig+0xa0>
 8002350:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002354:	681a      	ldr	r2, [r3, #0]
 8002356:	4b8d      	ldr	r3, [pc, #564]	; (800258c <UART_SetConfig+0x2d0>)
 8002358:	429a      	cmp	r2, r3
 800235a:	d104      	bne.n	8002366 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800235c:	f7ff fe4c 	bl	8001ff8 <HAL_RCC_GetPCLK2Freq>
 8002360:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002364:	e003      	b.n	800236e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002366:	f7ff fe33 	bl	8001fd0 <HAL_RCC_GetPCLK1Freq>
 800236a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800236e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002372:	69db      	ldr	r3, [r3, #28]
 8002374:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002378:	f040 810c 	bne.w	8002594 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800237c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002380:	2200      	movs	r2, #0
 8002382:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002386:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800238a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800238e:	4622      	mov	r2, r4
 8002390:	462b      	mov	r3, r5
 8002392:	1891      	adds	r1, r2, r2
 8002394:	65b9      	str	r1, [r7, #88]	; 0x58
 8002396:	415b      	adcs	r3, r3
 8002398:	65fb      	str	r3, [r7, #92]	; 0x5c
 800239a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800239e:	4621      	mov	r1, r4
 80023a0:	eb12 0801 	adds.w	r8, r2, r1
 80023a4:	4629      	mov	r1, r5
 80023a6:	eb43 0901 	adc.w	r9, r3, r1
 80023aa:	f04f 0200 	mov.w	r2, #0
 80023ae:	f04f 0300 	mov.w	r3, #0
 80023b2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80023b6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80023ba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80023be:	4690      	mov	r8, r2
 80023c0:	4699      	mov	r9, r3
 80023c2:	4623      	mov	r3, r4
 80023c4:	eb18 0303 	adds.w	r3, r8, r3
 80023c8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80023cc:	462b      	mov	r3, r5
 80023ce:	eb49 0303 	adc.w	r3, r9, r3
 80023d2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80023d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	2200      	movs	r2, #0
 80023de:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80023e2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80023e6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80023ea:	460b      	mov	r3, r1
 80023ec:	18db      	adds	r3, r3, r3
 80023ee:	653b      	str	r3, [r7, #80]	; 0x50
 80023f0:	4613      	mov	r3, r2
 80023f2:	eb42 0303 	adc.w	r3, r2, r3
 80023f6:	657b      	str	r3, [r7, #84]	; 0x54
 80023f8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80023fc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002400:	f7fd fefc 	bl	80001fc <__aeabi_uldivmod>
 8002404:	4602      	mov	r2, r0
 8002406:	460b      	mov	r3, r1
 8002408:	4b61      	ldr	r3, [pc, #388]	; (8002590 <UART_SetConfig+0x2d4>)
 800240a:	fba3 2302 	umull	r2, r3, r3, r2
 800240e:	095b      	lsrs	r3, r3, #5
 8002410:	011c      	lsls	r4, r3, #4
 8002412:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002416:	2200      	movs	r2, #0
 8002418:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800241c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002420:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002424:	4642      	mov	r2, r8
 8002426:	464b      	mov	r3, r9
 8002428:	1891      	adds	r1, r2, r2
 800242a:	64b9      	str	r1, [r7, #72]	; 0x48
 800242c:	415b      	adcs	r3, r3
 800242e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002430:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002434:	4641      	mov	r1, r8
 8002436:	eb12 0a01 	adds.w	sl, r2, r1
 800243a:	4649      	mov	r1, r9
 800243c:	eb43 0b01 	adc.w	fp, r3, r1
 8002440:	f04f 0200 	mov.w	r2, #0
 8002444:	f04f 0300 	mov.w	r3, #0
 8002448:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800244c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002450:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002454:	4692      	mov	sl, r2
 8002456:	469b      	mov	fp, r3
 8002458:	4643      	mov	r3, r8
 800245a:	eb1a 0303 	adds.w	r3, sl, r3
 800245e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002462:	464b      	mov	r3, r9
 8002464:	eb4b 0303 	adc.w	r3, fp, r3
 8002468:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800246c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	2200      	movs	r2, #0
 8002474:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002478:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800247c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002480:	460b      	mov	r3, r1
 8002482:	18db      	adds	r3, r3, r3
 8002484:	643b      	str	r3, [r7, #64]	; 0x40
 8002486:	4613      	mov	r3, r2
 8002488:	eb42 0303 	adc.w	r3, r2, r3
 800248c:	647b      	str	r3, [r7, #68]	; 0x44
 800248e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002492:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002496:	f7fd feb1 	bl	80001fc <__aeabi_uldivmod>
 800249a:	4602      	mov	r2, r0
 800249c:	460b      	mov	r3, r1
 800249e:	4611      	mov	r1, r2
 80024a0:	4b3b      	ldr	r3, [pc, #236]	; (8002590 <UART_SetConfig+0x2d4>)
 80024a2:	fba3 2301 	umull	r2, r3, r3, r1
 80024a6:	095b      	lsrs	r3, r3, #5
 80024a8:	2264      	movs	r2, #100	; 0x64
 80024aa:	fb02 f303 	mul.w	r3, r2, r3
 80024ae:	1acb      	subs	r3, r1, r3
 80024b0:	00db      	lsls	r3, r3, #3
 80024b2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80024b6:	4b36      	ldr	r3, [pc, #216]	; (8002590 <UART_SetConfig+0x2d4>)
 80024b8:	fba3 2302 	umull	r2, r3, r3, r2
 80024bc:	095b      	lsrs	r3, r3, #5
 80024be:	005b      	lsls	r3, r3, #1
 80024c0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80024c4:	441c      	add	r4, r3
 80024c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80024ca:	2200      	movs	r2, #0
 80024cc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80024d0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80024d4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80024d8:	4642      	mov	r2, r8
 80024da:	464b      	mov	r3, r9
 80024dc:	1891      	adds	r1, r2, r2
 80024de:	63b9      	str	r1, [r7, #56]	; 0x38
 80024e0:	415b      	adcs	r3, r3
 80024e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80024e4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80024e8:	4641      	mov	r1, r8
 80024ea:	1851      	adds	r1, r2, r1
 80024ec:	6339      	str	r1, [r7, #48]	; 0x30
 80024ee:	4649      	mov	r1, r9
 80024f0:	414b      	adcs	r3, r1
 80024f2:	637b      	str	r3, [r7, #52]	; 0x34
 80024f4:	f04f 0200 	mov.w	r2, #0
 80024f8:	f04f 0300 	mov.w	r3, #0
 80024fc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002500:	4659      	mov	r1, fp
 8002502:	00cb      	lsls	r3, r1, #3
 8002504:	4651      	mov	r1, sl
 8002506:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800250a:	4651      	mov	r1, sl
 800250c:	00ca      	lsls	r2, r1, #3
 800250e:	4610      	mov	r0, r2
 8002510:	4619      	mov	r1, r3
 8002512:	4603      	mov	r3, r0
 8002514:	4642      	mov	r2, r8
 8002516:	189b      	adds	r3, r3, r2
 8002518:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800251c:	464b      	mov	r3, r9
 800251e:	460a      	mov	r2, r1
 8002520:	eb42 0303 	adc.w	r3, r2, r3
 8002524:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002528:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	2200      	movs	r2, #0
 8002530:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002534:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002538:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800253c:	460b      	mov	r3, r1
 800253e:	18db      	adds	r3, r3, r3
 8002540:	62bb      	str	r3, [r7, #40]	; 0x28
 8002542:	4613      	mov	r3, r2
 8002544:	eb42 0303 	adc.w	r3, r2, r3
 8002548:	62fb      	str	r3, [r7, #44]	; 0x2c
 800254a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800254e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002552:	f7fd fe53 	bl	80001fc <__aeabi_uldivmod>
 8002556:	4602      	mov	r2, r0
 8002558:	460b      	mov	r3, r1
 800255a:	4b0d      	ldr	r3, [pc, #52]	; (8002590 <UART_SetConfig+0x2d4>)
 800255c:	fba3 1302 	umull	r1, r3, r3, r2
 8002560:	095b      	lsrs	r3, r3, #5
 8002562:	2164      	movs	r1, #100	; 0x64
 8002564:	fb01 f303 	mul.w	r3, r1, r3
 8002568:	1ad3      	subs	r3, r2, r3
 800256a:	00db      	lsls	r3, r3, #3
 800256c:	3332      	adds	r3, #50	; 0x32
 800256e:	4a08      	ldr	r2, [pc, #32]	; (8002590 <UART_SetConfig+0x2d4>)
 8002570:	fba2 2303 	umull	r2, r3, r2, r3
 8002574:	095b      	lsrs	r3, r3, #5
 8002576:	f003 0207 	and.w	r2, r3, #7
 800257a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4422      	add	r2, r4
 8002582:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002584:	e105      	b.n	8002792 <UART_SetConfig+0x4d6>
 8002586:	bf00      	nop
 8002588:	40011000 	.word	0x40011000
 800258c:	40011400 	.word	0x40011400
 8002590:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002594:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002598:	2200      	movs	r2, #0
 800259a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800259e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80025a2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80025a6:	4642      	mov	r2, r8
 80025a8:	464b      	mov	r3, r9
 80025aa:	1891      	adds	r1, r2, r2
 80025ac:	6239      	str	r1, [r7, #32]
 80025ae:	415b      	adcs	r3, r3
 80025b0:	627b      	str	r3, [r7, #36]	; 0x24
 80025b2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80025b6:	4641      	mov	r1, r8
 80025b8:	1854      	adds	r4, r2, r1
 80025ba:	4649      	mov	r1, r9
 80025bc:	eb43 0501 	adc.w	r5, r3, r1
 80025c0:	f04f 0200 	mov.w	r2, #0
 80025c4:	f04f 0300 	mov.w	r3, #0
 80025c8:	00eb      	lsls	r3, r5, #3
 80025ca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80025ce:	00e2      	lsls	r2, r4, #3
 80025d0:	4614      	mov	r4, r2
 80025d2:	461d      	mov	r5, r3
 80025d4:	4643      	mov	r3, r8
 80025d6:	18e3      	adds	r3, r4, r3
 80025d8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80025dc:	464b      	mov	r3, r9
 80025de:	eb45 0303 	adc.w	r3, r5, r3
 80025e2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80025e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	2200      	movs	r2, #0
 80025ee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80025f2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80025f6:	f04f 0200 	mov.w	r2, #0
 80025fa:	f04f 0300 	mov.w	r3, #0
 80025fe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002602:	4629      	mov	r1, r5
 8002604:	008b      	lsls	r3, r1, #2
 8002606:	4621      	mov	r1, r4
 8002608:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800260c:	4621      	mov	r1, r4
 800260e:	008a      	lsls	r2, r1, #2
 8002610:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002614:	f7fd fdf2 	bl	80001fc <__aeabi_uldivmod>
 8002618:	4602      	mov	r2, r0
 800261a:	460b      	mov	r3, r1
 800261c:	4b60      	ldr	r3, [pc, #384]	; (80027a0 <UART_SetConfig+0x4e4>)
 800261e:	fba3 2302 	umull	r2, r3, r3, r2
 8002622:	095b      	lsrs	r3, r3, #5
 8002624:	011c      	lsls	r4, r3, #4
 8002626:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800262a:	2200      	movs	r2, #0
 800262c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002630:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002634:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002638:	4642      	mov	r2, r8
 800263a:	464b      	mov	r3, r9
 800263c:	1891      	adds	r1, r2, r2
 800263e:	61b9      	str	r1, [r7, #24]
 8002640:	415b      	adcs	r3, r3
 8002642:	61fb      	str	r3, [r7, #28]
 8002644:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002648:	4641      	mov	r1, r8
 800264a:	1851      	adds	r1, r2, r1
 800264c:	6139      	str	r1, [r7, #16]
 800264e:	4649      	mov	r1, r9
 8002650:	414b      	adcs	r3, r1
 8002652:	617b      	str	r3, [r7, #20]
 8002654:	f04f 0200 	mov.w	r2, #0
 8002658:	f04f 0300 	mov.w	r3, #0
 800265c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002660:	4659      	mov	r1, fp
 8002662:	00cb      	lsls	r3, r1, #3
 8002664:	4651      	mov	r1, sl
 8002666:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800266a:	4651      	mov	r1, sl
 800266c:	00ca      	lsls	r2, r1, #3
 800266e:	4610      	mov	r0, r2
 8002670:	4619      	mov	r1, r3
 8002672:	4603      	mov	r3, r0
 8002674:	4642      	mov	r2, r8
 8002676:	189b      	adds	r3, r3, r2
 8002678:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800267c:	464b      	mov	r3, r9
 800267e:	460a      	mov	r2, r1
 8002680:	eb42 0303 	adc.w	r3, r2, r3
 8002684:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002688:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	2200      	movs	r2, #0
 8002690:	67bb      	str	r3, [r7, #120]	; 0x78
 8002692:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002694:	f04f 0200 	mov.w	r2, #0
 8002698:	f04f 0300 	mov.w	r3, #0
 800269c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80026a0:	4649      	mov	r1, r9
 80026a2:	008b      	lsls	r3, r1, #2
 80026a4:	4641      	mov	r1, r8
 80026a6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80026aa:	4641      	mov	r1, r8
 80026ac:	008a      	lsls	r2, r1, #2
 80026ae:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80026b2:	f7fd fda3 	bl	80001fc <__aeabi_uldivmod>
 80026b6:	4602      	mov	r2, r0
 80026b8:	460b      	mov	r3, r1
 80026ba:	4b39      	ldr	r3, [pc, #228]	; (80027a0 <UART_SetConfig+0x4e4>)
 80026bc:	fba3 1302 	umull	r1, r3, r3, r2
 80026c0:	095b      	lsrs	r3, r3, #5
 80026c2:	2164      	movs	r1, #100	; 0x64
 80026c4:	fb01 f303 	mul.w	r3, r1, r3
 80026c8:	1ad3      	subs	r3, r2, r3
 80026ca:	011b      	lsls	r3, r3, #4
 80026cc:	3332      	adds	r3, #50	; 0x32
 80026ce:	4a34      	ldr	r2, [pc, #208]	; (80027a0 <UART_SetConfig+0x4e4>)
 80026d0:	fba2 2303 	umull	r2, r3, r2, r3
 80026d4:	095b      	lsrs	r3, r3, #5
 80026d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80026da:	441c      	add	r4, r3
 80026dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80026e0:	2200      	movs	r2, #0
 80026e2:	673b      	str	r3, [r7, #112]	; 0x70
 80026e4:	677a      	str	r2, [r7, #116]	; 0x74
 80026e6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80026ea:	4642      	mov	r2, r8
 80026ec:	464b      	mov	r3, r9
 80026ee:	1891      	adds	r1, r2, r2
 80026f0:	60b9      	str	r1, [r7, #8]
 80026f2:	415b      	adcs	r3, r3
 80026f4:	60fb      	str	r3, [r7, #12]
 80026f6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80026fa:	4641      	mov	r1, r8
 80026fc:	1851      	adds	r1, r2, r1
 80026fe:	6039      	str	r1, [r7, #0]
 8002700:	4649      	mov	r1, r9
 8002702:	414b      	adcs	r3, r1
 8002704:	607b      	str	r3, [r7, #4]
 8002706:	f04f 0200 	mov.w	r2, #0
 800270a:	f04f 0300 	mov.w	r3, #0
 800270e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002712:	4659      	mov	r1, fp
 8002714:	00cb      	lsls	r3, r1, #3
 8002716:	4651      	mov	r1, sl
 8002718:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800271c:	4651      	mov	r1, sl
 800271e:	00ca      	lsls	r2, r1, #3
 8002720:	4610      	mov	r0, r2
 8002722:	4619      	mov	r1, r3
 8002724:	4603      	mov	r3, r0
 8002726:	4642      	mov	r2, r8
 8002728:	189b      	adds	r3, r3, r2
 800272a:	66bb      	str	r3, [r7, #104]	; 0x68
 800272c:	464b      	mov	r3, r9
 800272e:	460a      	mov	r2, r1
 8002730:	eb42 0303 	adc.w	r3, r2, r3
 8002734:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002736:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	2200      	movs	r2, #0
 800273e:	663b      	str	r3, [r7, #96]	; 0x60
 8002740:	667a      	str	r2, [r7, #100]	; 0x64
 8002742:	f04f 0200 	mov.w	r2, #0
 8002746:	f04f 0300 	mov.w	r3, #0
 800274a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800274e:	4649      	mov	r1, r9
 8002750:	008b      	lsls	r3, r1, #2
 8002752:	4641      	mov	r1, r8
 8002754:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002758:	4641      	mov	r1, r8
 800275a:	008a      	lsls	r2, r1, #2
 800275c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002760:	f7fd fd4c 	bl	80001fc <__aeabi_uldivmod>
 8002764:	4602      	mov	r2, r0
 8002766:	460b      	mov	r3, r1
 8002768:	4b0d      	ldr	r3, [pc, #52]	; (80027a0 <UART_SetConfig+0x4e4>)
 800276a:	fba3 1302 	umull	r1, r3, r3, r2
 800276e:	095b      	lsrs	r3, r3, #5
 8002770:	2164      	movs	r1, #100	; 0x64
 8002772:	fb01 f303 	mul.w	r3, r1, r3
 8002776:	1ad3      	subs	r3, r2, r3
 8002778:	011b      	lsls	r3, r3, #4
 800277a:	3332      	adds	r3, #50	; 0x32
 800277c:	4a08      	ldr	r2, [pc, #32]	; (80027a0 <UART_SetConfig+0x4e4>)
 800277e:	fba2 2303 	umull	r2, r3, r2, r3
 8002782:	095b      	lsrs	r3, r3, #5
 8002784:	f003 020f 	and.w	r2, r3, #15
 8002788:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4422      	add	r2, r4
 8002790:	609a      	str	r2, [r3, #8]
}
 8002792:	bf00      	nop
 8002794:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002798:	46bd      	mov	sp, r7
 800279a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800279e:	bf00      	nop
 80027a0:	51eb851f 	.word	0x51eb851f

080027a4 <Lamp_pushSwitch>:
#endif
/*.$endskip${QP_VERSION} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^*/
/*.$define${LampSM} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv*/
/*.${LampSM::Lamp} .........................................................*/
/*.${LampSM::Lamp::pushSwitch} .............................................*/
void Lamp_pushSwitch(Lamp * const me) {
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b084      	sub	sp, #16
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
    QEvt e;
    e.sig = (QSignal)SOFT_CLICK_SIG;
 80027ac:	2304      	movs	r3, #4
 80027ae:	81bb      	strh	r3, [r7, #12]
    QHSM_DISPATCH(&me->super, &e, 0 );
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	6878      	ldr	r0, [r7, #4]
 80027b8:	f107 010c 	add.w	r1, r7, #12
 80027bc:	2200      	movs	r2, #0
 80027be:	4798      	blx	r3
}
 80027c0:	bf00      	nop
 80027c2:	3710      	adds	r7, #16
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}

080027c8 <Lamp_ctor>:

/*.${LampSM::Lamp::ctor} ...................................................*/
void Lamp_ctor(Lamp * const me) {
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b082      	sub	sp, #8
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
    QHsm_ctor(&me->super, Q_STATE_CAST(&Lamp_initial));
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	4904      	ldr	r1, [pc, #16]	; (80027e4 <Lamp_ctor+0x1c>)
 80027d4:	4618      	mov	r0, r3
 80027d6:	f000 f93b 	bl	8002a50 <QHsm_ctor>
}
 80027da:	bf00      	nop
 80027dc:	3708      	adds	r7, #8
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}
 80027e2:	bf00      	nop
 80027e4:	08002831 	.word	0x08002831

080027e8 <Lamp_holdSwitch>:

/*.${LampSM::Lamp::holdSwitch} .............................................*/
void Lamp_holdSwitch(Lamp * const me) {
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b084      	sub	sp, #16
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
    QEvt e;
    e.sig = (QSignal)HARD_CLICK_SIG;
 80027f0:	2305      	movs	r3, #5
 80027f2:	81bb      	strh	r3, [r7, #12]
    QHSM_DISPATCH(&me->super, &e, 0 );
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	6878      	ldr	r0, [r7, #4]
 80027fc:	f107 010c 	add.w	r1, r7, #12
 8002800:	2200      	movs	r2, #0
 8002802:	4798      	blx	r3
}
 8002804:	bf00      	nop
 8002806:	3710      	adds	r7, #16
 8002808:	46bd      	mov	sp, r7
 800280a:	bd80      	pop	{r7, pc}

0800280c <Lamp_blink>:

/*.${LampSM::Lamp::blink} ..................................................*/
void Lamp_blink(Lamp * const me) {
 800280c:	b580      	push	{r7, lr}
 800280e:	b084      	sub	sp, #16
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
        QEvt e;
        e.sig = (QSignal)BLINK_SIG;
 8002814:	2306      	movs	r3, #6
 8002816:	81bb      	strh	r3, [r7, #12]
        QHSM_DISPATCH(&me->super, &e, 0 );
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	6878      	ldr	r0, [r7, #4]
 8002820:	f107 010c 	add.w	r1, r7, #12
 8002824:	2200      	movs	r2, #0
 8002826:	4798      	blx	r3
}
 8002828:	bf00      	nop
 800282a:	3710      	adds	r7, #16
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}

08002830 <Lamp_initial>:

/*.${LampSM::Lamp::SM} .....................................................*/
QState Lamp_initial(Lamp * const me, void const * const par) {
 8002830:	b480      	push	{r7}
 8002832:	b083      	sub	sp, #12
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
 8002838:	6039      	str	r1, [r7, #0]
    /*.${LampSM::Lamp::SM::initial} */
    /* state history attributes */
    me->hist_LED_RED = Q_STATE_CAST(&Lamp_RED_BLINK);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	4a07      	ldr	r2, [pc, #28]	; (800285c <Lamp_initial+0x2c>)
 800283e:	611a      	str	r2, [r3, #16]
    me->hist_LED_GREEN = Q_STATE_CAST(&Lamp_GREEN_BLINK);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	4a07      	ldr	r2, [pc, #28]	; (8002860 <Lamp_initial+0x30>)
 8002844:	615a      	str	r2, [r3, #20]
    return Q_TRAN(&Lamp_LED_RED);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	4a06      	ldr	r2, [pc, #24]	; (8002864 <Lamp_initial+0x34>)
 800284a:	609a      	str	r2, [r3, #8]
 800284c:	2308      	movs	r3, #8
}
 800284e:	4618      	mov	r0, r3
 8002850:	370c      	adds	r7, #12
 8002852:	46bd      	mov	sp, r7
 8002854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002858:	4770      	bx	lr
 800285a:	bf00      	nop
 800285c:	080028f1 	.word	0x080028f1
 8002860:	080029d9 	.word	0x080029d9
 8002864:	08002869 	.word	0x08002869

08002868 <Lamp_LED_RED>:
/*.${LampSM::Lamp::SM::LED_RED} ............................................*/
QState Lamp_LED_RED(Lamp * const me, QEvt const * const e) {
 8002868:	b580      	push	{r7, lr}
 800286a:	b084      	sub	sp, #16
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
 8002870:	6039      	str	r1, [r7, #0]
    QState status_;
    switch (e->sig) {
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	881b      	ldrh	r3, [r3, #0]
 8002876:	3b01      	subs	r3, #1
 8002878:	2b04      	cmp	r3, #4
 800287a:	d82a      	bhi.n	80028d2 <Lamp_LED_RED+0x6a>
 800287c:	a201      	add	r2, pc, #4	; (adr r2, 8002884 <Lamp_LED_RED+0x1c>)
 800287e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002882:	bf00      	nop
 8002884:	08002899 	.word	0x08002899
 8002888:	080028a3 	.word	0x080028a3
 800288c:	080028d3 	.word	0x080028d3
 8002890:	080028b9 	.word	0x080028b9
 8002894:	080028c7 	.word	0x080028c7
        /*.${LampSM::Lamp::SM::LED_RED} */
        case Q_ENTRY_SIG: {
            APP_RED_LED_ON();
 8002898:	f7fd fe8c 	bl	80005b4 <APP_RED_LED_ON>
            status_ = Q_HANDLED();
 800289c:	2303      	movs	r3, #3
 800289e:	73fb      	strb	r3, [r7, #15]
            break;
 80028a0:	e01d      	b.n	80028de <Lamp_LED_RED+0x76>
        }
        /*.${LampSM::Lamp::SM::LED_RED} */
        case Q_EXIT_SIG: {
            APP_RED_LED_OFF();
 80028a2:	f7fd fea3 	bl	80005ec <APP_RED_LED_OFF>
            /* save deep history */
            me->hist_LED_RED = QHsm_state(Q_HSM_UPCAST(me));
 80028a6:	6878      	ldr	r0, [r7, #4]
 80028a8:	f000 f8c6 	bl	8002a38 <QHsm_state>
 80028ac:	4602      	mov	r2, r0
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	611a      	str	r2, [r3, #16]
            status_ = Q_HANDLED();
 80028b2:	2303      	movs	r3, #3
 80028b4:	73fb      	strb	r3, [r7, #15]
            break;
 80028b6:	e012      	b.n	80028de <Lamp_LED_RED+0x76>
        }
        /*.${LampSM::Lamp::SM::LED_RED::SOFT_CLICK} */
        case SOFT_CLICK_SIG: {
            status_ = Q_TRAN_HIST(me->hist_LED_GREEN);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	695a      	ldr	r2, [r3, #20]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	609a      	str	r2, [r3, #8]
 80028c0:	230b      	movs	r3, #11
 80028c2:	73fb      	strb	r3, [r7, #15]
            break;
 80028c4:	e00b      	b.n	80028de <Lamp_LED_RED+0x76>
        }
        /*.${LampSM::Lamp::SM::LED_RED::HARD_CLICK} */
        case HARD_CLICK_SIG: {
            status_ = Q_TRAN(&Lamp_RED_BLINK);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	4a07      	ldr	r2, [pc, #28]	; (80028e8 <Lamp_LED_RED+0x80>)
 80028ca:	609a      	str	r2, [r3, #8]
 80028cc:	2308      	movs	r3, #8
 80028ce:	73fb      	strb	r3, [r7, #15]
            break;
 80028d0:	e005      	b.n	80028de <Lamp_LED_RED+0x76>
        }
        default: {
            status_ = Q_SUPER(&QHsm_top);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	4a05      	ldr	r2, [pc, #20]	; (80028ec <Lamp_LED_RED+0x84>)
 80028d6:	609a      	str	r2, [r3, #8]
 80028d8:	2300      	movs	r3, #0
 80028da:	73fb      	strb	r3, [r7, #15]
            break;
 80028dc:	bf00      	nop
        }
    }
    return status_;
 80028de:	7bfb      	ldrb	r3, [r7, #15]
}
 80028e0:	4618      	mov	r0, r3
 80028e2:	3710      	adds	r7, #16
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd80      	pop	{r7, pc}
 80028e8:	080028f1 	.word	0x080028f1
 80028ec:	08002a81 	.word	0x08002a81

080028f0 <Lamp_RED_BLINK>:
/*.${LampSM::Lamp::SM::LED_RED::RED_BLINK} .................................*/
QState Lamp_RED_BLINK(Lamp * const me, QEvt const * const e) {
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b084      	sub	sp, #16
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
 80028f8:	6039      	str	r1, [r7, #0]
    QState status_;
    switch (e->sig) {
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	881b      	ldrh	r3, [r3, #0]
 80028fe:	2b06      	cmp	r3, #6
 8002900:	d013      	beq.n	800292a <Lamp_RED_BLINK+0x3a>
 8002902:	2b06      	cmp	r3, #6
 8002904:	dc16      	bgt.n	8002934 <Lamp_RED_BLINK+0x44>
 8002906:	2b04      	cmp	r3, #4
 8002908:	d002      	beq.n	8002910 <Lamp_RED_BLINK+0x20>
 800290a:	2b05      	cmp	r3, #5
 800290c:	d007      	beq.n	800291e <Lamp_RED_BLINK+0x2e>
 800290e:	e011      	b.n	8002934 <Lamp_RED_BLINK+0x44>
        /*.${LampSM::Lamp::SM::LED_RED::RED_BLINK::SOFT_CLICK} */
        case SOFT_CLICK_SIG: {
            status_ = Q_TRAN_HIST(me->hist_LED_GREEN);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	695a      	ldr	r2, [r3, #20]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	609a      	str	r2, [r3, #8]
 8002918:	230b      	movs	r3, #11
 800291a:	73fb      	strb	r3, [r7, #15]
            break;
 800291c:	e010      	b.n	8002940 <Lamp_RED_BLINK+0x50>
        }
        /*.${LampSM::Lamp::SM::LED_RED::RED_BLINK::HARD_CLICK} */
        case HARD_CLICK_SIG: {
            status_ = Q_TRAN(&Lamp_LED_RED);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	4a0a      	ldr	r2, [pc, #40]	; (800294c <Lamp_RED_BLINK+0x5c>)
 8002922:	609a      	str	r2, [r3, #8]
 8002924:	2308      	movs	r3, #8
 8002926:	73fb      	strb	r3, [r7, #15]
            break;
 8002928:	e00a      	b.n	8002940 <Lamp_RED_BLINK+0x50>
        }
        /*.${LampSM::Lamp::SM::LED_RED::RED_BLINK::BLINK} */
        case BLINK_SIG: {
            APP_RED_LED_BLINK();
 800292a:	f7fd fe7b 	bl	8000624 <APP_RED_LED_BLINK>
            status_ = Q_HANDLED();
 800292e:	2303      	movs	r3, #3
 8002930:	73fb      	strb	r3, [r7, #15]
            break;
 8002932:	e005      	b.n	8002940 <Lamp_RED_BLINK+0x50>
        }
        default: {
            status_ = Q_SUPER(&Lamp_LED_RED);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	4a05      	ldr	r2, [pc, #20]	; (800294c <Lamp_RED_BLINK+0x5c>)
 8002938:	609a      	str	r2, [r3, #8]
 800293a:	2300      	movs	r3, #0
 800293c:	73fb      	strb	r3, [r7, #15]
            break;
 800293e:	bf00      	nop
        }
    }
    return status_;
 8002940:	7bfb      	ldrb	r3, [r7, #15]
}
 8002942:	4618      	mov	r0, r3
 8002944:	3710      	adds	r7, #16
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}
 800294a:	bf00      	nop
 800294c:	08002869 	.word	0x08002869

08002950 <Lamp_LED_GREEN>:
/*.${LampSM::Lamp::SM::LED_GREEN} ..........................................*/
QState Lamp_LED_GREEN(Lamp * const me, QEvt const * const e) {
 8002950:	b580      	push	{r7, lr}
 8002952:	b084      	sub	sp, #16
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
 8002958:	6039      	str	r1, [r7, #0]
    QState status_;
    switch (e->sig) {
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	881b      	ldrh	r3, [r3, #0]
 800295e:	3b01      	subs	r3, #1
 8002960:	2b04      	cmp	r3, #4
 8002962:	d82a      	bhi.n	80029ba <Lamp_LED_GREEN+0x6a>
 8002964:	a201      	add	r2, pc, #4	; (adr r2, 800296c <Lamp_LED_GREEN+0x1c>)
 8002966:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800296a:	bf00      	nop
 800296c:	08002981 	.word	0x08002981
 8002970:	0800298b 	.word	0x0800298b
 8002974:	080029bb 	.word	0x080029bb
 8002978:	080029a1 	.word	0x080029a1
 800297c:	080029af 	.word	0x080029af
        /*.${LampSM::Lamp::SM::LED_GREEN} */
        case Q_ENTRY_SIG: {
            APP_GREEN_LED_ON();
 8002980:	f7fd fdbe 	bl	8000500 <APP_GREEN_LED_ON>
            status_ = Q_HANDLED();
 8002984:	2303      	movs	r3, #3
 8002986:	73fb      	strb	r3, [r7, #15]
            break;
 8002988:	e01d      	b.n	80029c6 <Lamp_LED_GREEN+0x76>
        }
        /*.${LampSM::Lamp::SM::LED_GREEN} */
        case Q_EXIT_SIG: {
            APP_GREEN_LED_OFF();
 800298a:	f7fd fdd9 	bl	8000540 <APP_GREEN_LED_OFF>
            /* save deep history */
            me->hist_LED_GREEN = QHsm_state(Q_HSM_UPCAST(me));
 800298e:	6878      	ldr	r0, [r7, #4]
 8002990:	f000 f852 	bl	8002a38 <QHsm_state>
 8002994:	4602      	mov	r2, r0
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	615a      	str	r2, [r3, #20]
            status_ = Q_HANDLED();
 800299a:	2303      	movs	r3, #3
 800299c:	73fb      	strb	r3, [r7, #15]
            break;
 800299e:	e012      	b.n	80029c6 <Lamp_LED_GREEN+0x76>
        }
        /*.${LampSM::Lamp::SM::LED_GREEN::SOFT_CLICK} */
        case SOFT_CLICK_SIG: {
            status_ = Q_TRAN_HIST(me->hist_LED_RED);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	691a      	ldr	r2, [r3, #16]
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	609a      	str	r2, [r3, #8]
 80029a8:	230b      	movs	r3, #11
 80029aa:	73fb      	strb	r3, [r7, #15]
            break;
 80029ac:	e00b      	b.n	80029c6 <Lamp_LED_GREEN+0x76>
        }
        /*.${LampSM::Lamp::SM::LED_GREEN::HARD_CLICK} */
        case HARD_CLICK_SIG: {
            status_ = Q_TRAN(&Lamp_GREEN_BLINK);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	4a07      	ldr	r2, [pc, #28]	; (80029d0 <Lamp_LED_GREEN+0x80>)
 80029b2:	609a      	str	r2, [r3, #8]
 80029b4:	2308      	movs	r3, #8
 80029b6:	73fb      	strb	r3, [r7, #15]
            break;
 80029b8:	e005      	b.n	80029c6 <Lamp_LED_GREEN+0x76>
        }
        default: {
            status_ = Q_SUPER(&QHsm_top);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	4a05      	ldr	r2, [pc, #20]	; (80029d4 <Lamp_LED_GREEN+0x84>)
 80029be:	609a      	str	r2, [r3, #8]
 80029c0:	2300      	movs	r3, #0
 80029c2:	73fb      	strb	r3, [r7, #15]
            break;
 80029c4:	bf00      	nop
        }
    }
    return status_;
 80029c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	3710      	adds	r7, #16
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bd80      	pop	{r7, pc}
 80029d0:	080029d9 	.word	0x080029d9
 80029d4:	08002a81 	.word	0x08002a81

080029d8 <Lamp_GREEN_BLINK>:
/*.${LampSM::Lamp::SM::LED_GREEN::GREEN_BLINK} .............................*/
QState Lamp_GREEN_BLINK(Lamp * const me, QEvt const * const e) {
 80029d8:	b580      	push	{r7, lr}
 80029da:	b084      	sub	sp, #16
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
 80029e0:	6039      	str	r1, [r7, #0]
    QState status_;
    switch (e->sig) {
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	881b      	ldrh	r3, [r3, #0]
 80029e6:	2b06      	cmp	r3, #6
 80029e8:	d006      	beq.n	80029f8 <Lamp_GREEN_BLINK+0x20>
 80029ea:	2b06      	cmp	r3, #6
 80029ec:	dc16      	bgt.n	8002a1c <Lamp_GREEN_BLINK+0x44>
 80029ee:	2b04      	cmp	r3, #4
 80029f0:	d00d      	beq.n	8002a0e <Lamp_GREEN_BLINK+0x36>
 80029f2:	2b05      	cmp	r3, #5
 80029f4:	d005      	beq.n	8002a02 <Lamp_GREEN_BLINK+0x2a>
 80029f6:	e011      	b.n	8002a1c <Lamp_GREEN_BLINK+0x44>
        /*.${LampSM::Lamp::SM::LED_GREEN::GREEN_BLINK::BLINK} */
        case BLINK_SIG: {
            APP_GREEN_LED_BLINK();
 80029f8:	f7fd fdbe 	bl	8000578 <APP_GREEN_LED_BLINK>
            status_ = Q_HANDLED();
 80029fc:	2303      	movs	r3, #3
 80029fe:	73fb      	strb	r3, [r7, #15]
            break;
 8002a00:	e012      	b.n	8002a28 <Lamp_GREEN_BLINK+0x50>
        }
        /*.${LampSM::Lamp::SM::LED_GREEN::GREEN_BLINK::HARD_CLICK} */
        case HARD_CLICK_SIG: {
            status_ = Q_TRAN(&Lamp_LED_GREEN);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	4a0b      	ldr	r2, [pc, #44]	; (8002a34 <Lamp_GREEN_BLINK+0x5c>)
 8002a06:	609a      	str	r2, [r3, #8]
 8002a08:	2308      	movs	r3, #8
 8002a0a:	73fb      	strb	r3, [r7, #15]
            break;
 8002a0c:	e00c      	b.n	8002a28 <Lamp_GREEN_BLINK+0x50>
        }
        /*.${LampSM::Lamp::SM::LED_GREEN::GREEN_BLINK::SOFT_CLICK} */
        case SOFT_CLICK_SIG: {
            status_ = Q_TRAN_HIST(me->hist_LED_RED);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	691a      	ldr	r2, [r3, #16]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	609a      	str	r2, [r3, #8]
 8002a16:	230b      	movs	r3, #11
 8002a18:	73fb      	strb	r3, [r7, #15]
            break;
 8002a1a:	e005      	b.n	8002a28 <Lamp_GREEN_BLINK+0x50>
        }
        default: {
            status_ = Q_SUPER(&Lamp_LED_GREEN);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	4a05      	ldr	r2, [pc, #20]	; (8002a34 <Lamp_GREEN_BLINK+0x5c>)
 8002a20:	609a      	str	r2, [r3, #8]
 8002a22:	2300      	movs	r3, #0
 8002a24:	73fb      	strb	r3, [r7, #15]
            break;
 8002a26:	bf00      	nop
        }
    }
    return status_;
 8002a28:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	3710      	adds	r7, #16
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}
 8002a32:	bf00      	nop
 8002a34:	08002951 	.word	0x08002951

08002a38 <QHsm_state>:

    return inState; /* return the status */
}

/*${QEP::QHsm::state} ......................................................*/
QStateHandler QHsm_state(QHsm * const me) {
 8002a38:	b480      	push	{r7}
 8002a3a:	b083      	sub	sp, #12
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
    return Q_STATE_CAST(me->state.fun);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	685b      	ldr	r3, [r3, #4]
}
 8002a44:	4618      	mov	r0, r3
 8002a46:	370c      	adds	r7, #12
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4e:	4770      	bx	lr

08002a50 <QHsm_ctor>:
}

/*${QEP::QHsm::ctor} .......................................................*/
void QHsm_ctor(QHsm * const me,
    QStateHandler initial)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b083      	sub	sp, #12
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
 8002a58:	6039      	str	r1, [r7, #0]
        &QHsm_dispatch_
    #ifdef Q_SPY
        ,&QHsm_getStateHandler_
    #endif
    };
    me->vptr      = &vtable;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	4a06      	ldr	r2, [pc, #24]	; (8002a78 <QHsm_ctor+0x28>)
 8002a5e:	601a      	str	r2, [r3, #0]
    me->state.fun = Q_STATE_CAST(&QHsm_top);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	4a06      	ldr	r2, [pc, #24]	; (8002a7c <QHsm_ctor+0x2c>)
 8002a64:	605a      	str	r2, [r3, #4]
    me->temp.fun  = initial;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	683a      	ldr	r2, [r7, #0]
 8002a6a:	609a      	str	r2, [r3, #8]
}
 8002a6c:	bf00      	nop
 8002a6e:	370c      	adds	r7, #12
 8002a70:	46bd      	mov	sp, r7
 8002a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a76:	4770      	bx	lr
 8002a78:	08003070 	.word	0x08003070
 8002a7c:	08002a81 	.word	0x08002a81

08002a80 <QHsm_top>:

/*${QEP::QHsm::top} ........................................................*/
QState QHsm_top(QHsm const * const me,
    QEvt const * const e)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b083      	sub	sp, #12
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
 8002a88:	6039      	str	r1, [r7, #0]
    Q_UNUSED_PAR(me);
    Q_UNUSED_PAR(e);
    return Q_RET_IGNORED; /* the top state ignores all events */
 8002a8a:	2304      	movs	r3, #4
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	370c      	adds	r7, #12
 8002a90:	46bd      	mov	sp, r7
 8002a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a96:	4770      	bx	lr

08002a98 <QHsm_init_>:

/*${QEP::QHsm::init_} ......................................................*/
void QHsm_init_(QHsm * const me,
    void const * const e,
    uint_fast8_t const qs_id)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b08e      	sub	sp, #56	; 0x38
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	60f8      	str	r0, [r7, #12]
 8002aa0:	60b9      	str	r1, [r7, #8]
 8002aa2:	607a      	str	r2, [r7, #4]
    #ifndef Q_SPY
    (void)qs_id; /* unused parameter */
    #endif

    QStateHandler t = me->state.fun;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	637b      	str	r3, [r7, #52]	; 0x34

    /*! @pre the virtual pointer must be initialized, the top-most initial
    * transition must be initialized, and the initial transition must not
    * be taken yet.
    */
    Q_REQUIRE_ID(200, (me->vptr != (struct QHsmVtable *)0)
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d007      	beq.n	8002ac2 <QHsm_init_+0x2a>
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	689b      	ldr	r3, [r3, #8]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d003      	beq.n	8002ac2 <QHsm_init_+0x2a>
 8002aba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002abc:	4a33      	ldr	r2, [pc, #204]	; (8002b8c <QHsm_init_+0xf4>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d003      	beq.n	8002aca <QHsm_init_+0x32>
 8002ac2:	21c8      	movs	r1, #200	; 0xc8
 8002ac4:	4832      	ldr	r0, [pc, #200]	; (8002b90 <QHsm_init_+0xf8>)
 8002ac6:	f7fe f92d 	bl	8000d24 <Q_onAssert>
                      && (me->temp.fun != Q_STATE_CAST(0))
                      && (t == Q_STATE_CAST(&QHsm_top)));

    /* execute the top-most initial tran. */
    QState r = (*me->temp.fun)(me, Q_EVT_CAST(QEvt));
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	689b      	ldr	r3, [r3, #8]
 8002ace:	68b9      	ldr	r1, [r7, #8]
 8002ad0:	68f8      	ldr	r0, [r7, #12]
 8002ad2:	4798      	blx	r3
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* the top-most initial transition must be taken */
    Q_ASSERT_ID(210, r == Q_RET_TRAN);
 8002ada:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002ade:	2b08      	cmp	r3, #8
 8002ae0:	d003      	beq.n	8002aea <QHsm_init_+0x52>
 8002ae2:	21d2      	movs	r1, #210	; 0xd2
 8002ae4:	482a      	ldr	r0, [pc, #168]	; (8002b90 <QHsm_init_+0xf8>)
 8002ae6:	f7fe f91d 	bl	8000d24 <Q_onAssert>
    QS_END_PRE_()

    /* drill down into the state hierarchy with initial transitions... */
    do {
        QStateHandler path[QHSM_MAX_NEST_DEPTH_]; /* tran entry path array */
        int_fast8_t ip = 0; /* tran entry path index */
 8002aea:	2300      	movs	r3, #0
 8002aec:	633b      	str	r3, [r7, #48]	; 0x30

        path[0] = me->temp.fun;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	689b      	ldr	r3, [r3, #8]
 8002af2:	617b      	str	r3, [r7, #20]
        (void)QEP_TRIG_(me->temp.fun, QEP_EMPTY_SIG_);
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	4926      	ldr	r1, [pc, #152]	; (8002b94 <QHsm_init_+0xfc>)
 8002afa:	68f8      	ldr	r0, [r7, #12]
 8002afc:	4798      	blx	r3
        while (me->temp.fun != t) {
 8002afe:	e016      	b.n	8002b2e <QHsm_init_+0x96>
            ++ip;
 8002b00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b02:	3301      	adds	r3, #1
 8002b04:	633b      	str	r3, [r7, #48]	; 0x30
            Q_ASSERT_ID(220, ip < QHSM_MAX_NEST_DEPTH_);
 8002b06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b08:	2b05      	cmp	r3, #5
 8002b0a:	dd03      	ble.n	8002b14 <QHsm_init_+0x7c>
 8002b0c:	21dc      	movs	r1, #220	; 0xdc
 8002b0e:	4820      	ldr	r0, [pc, #128]	; (8002b90 <QHsm_init_+0xf8>)
 8002b10:	f7fe f908 	bl	8000d24 <Q_onAssert>
            path[ip] = me->temp.fun;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	689a      	ldr	r2, [r3, #8]
 8002b18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b1a:	009b      	lsls	r3, r3, #2
 8002b1c:	3338      	adds	r3, #56	; 0x38
 8002b1e:	443b      	add	r3, r7
 8002b20:	f843 2c24 	str.w	r2, [r3, #-36]
            (void)QEP_TRIG_(me->temp.fun, QEP_EMPTY_SIG_);
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	689b      	ldr	r3, [r3, #8]
 8002b28:	491a      	ldr	r1, [pc, #104]	; (8002b94 <QHsm_init_+0xfc>)
 8002b2a:	68f8      	ldr	r0, [r7, #12]
 8002b2c:	4798      	blx	r3
        while (me->temp.fun != t) {
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002b34:	429a      	cmp	r2, r3
 8002b36:	d1e3      	bne.n	8002b00 <QHsm_init_+0x68>
        }
        me->temp.fun = path[0];
 8002b38:	697a      	ldr	r2, [r7, #20]
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	609a      	str	r2, [r3, #8]

        /* nested initial transition, drill into the target hierarchy... */
        do {
            QEP_ENTER_(path[ip], qs_id); /* enter path[ip] */
 8002b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b40:	009b      	lsls	r3, r3, #2
 8002b42:	3338      	adds	r3, #56	; 0x38
 8002b44:	443b      	add	r3, r7
 8002b46:	f853 3c24 	ldr.w	r3, [r3, #-36]
 8002b4a:	4913      	ldr	r1, [pc, #76]	; (8002b98 <QHsm_init_+0x100>)
 8002b4c:	68f8      	ldr	r0, [r7, #12]
 8002b4e:	4798      	blx	r3
            --ip;
 8002b50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b52:	3b01      	subs	r3, #1
 8002b54:	633b      	str	r3, [r7, #48]	; 0x30
        } while (ip >= 0);
 8002b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	daf0      	bge.n	8002b3e <QHsm_init_+0xa6>

        t = path[0]; /* current state becomes the new source */
 8002b5c:	697b      	ldr	r3, [r7, #20]
 8002b5e:	637b      	str	r3, [r7, #52]	; 0x34

        r = QEP_TRIG_(t, Q_INIT_SIG); /* execute initial transition */
 8002b60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b62:	490e      	ldr	r1, [pc, #56]	; (8002b9c <QHsm_init_+0x104>)
 8002b64:	68f8      	ldr	r0, [r7, #12]
 8002b66:	4798      	blx	r3
 8002b68:	4603      	mov	r3, r0
 8002b6a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                QS_FUN_PRE_(me->temp.fun); /* target of the initial tran. */
            QS_END_PRE_()
        }
    #endif /* Q_SPY */

    } while (r == Q_RET_TRAN);
 8002b6e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002b72:	2b08      	cmp	r3, #8
 8002b74:	d0b9      	beq.n	8002aea <QHsm_init_+0x52>
        QS_TIME_PRE_();    /* time stamp */
        QS_OBJ_PRE_(me);   /* this state machine object */
        QS_FUN_PRE_(t);    /* the new active state */
    QS_END_PRE_()

    me->state.fun = t; /* change the current active state */
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002b7a:	605a      	str	r2, [r3, #4]
    me->temp.fun  = t; /* mark the configuration as stable */
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002b80:	609a      	str	r2, [r3, #8]
}
 8002b82:	bf00      	nop
 8002b84:	3738      	adds	r7, #56	; 0x38
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}
 8002b8a:	bf00      	nop
 8002b8c:	08002a81 	.word	0x08002a81
 8002b90:	08003058 	.word	0x08003058
 8002b94:	08003060 	.word	0x08003060
 8002b98:	08003064 	.word	0x08003064
 8002b9c:	0800306c 	.word	0x0800306c

08002ba0 <QHsm_dispatch_>:

/*${QEP::QHsm::dispatch_} ..................................................*/
void QHsm_dispatch_(QHsm * const me,
    QEvt const * const e,
    uint_fast8_t const qs_id)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b08e      	sub	sp, #56	; 0x38
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	60f8      	str	r0, [r7, #12]
 8002ba8:	60b9      	str	r1, [r7, #8]
 8002baa:	607a      	str	r2, [r7, #4]
    Q_UNUSED_PAR(qs_id); /* unused when Q_SPY undefined */

    QStateHandler t = me->state.fun;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	637b      	str	r3, [r7, #52]	; 0x34
    QS_CRIT_STAT_

    /*! @pre the current state must be initialized and
    * the state configuration must be stable
    */
    Q_REQUIRE_ID(400, (t != Q_STATE_CAST(0))
 8002bb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d004      	beq.n	8002bc2 <QHsm_dispatch_+0x22>
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	689b      	ldr	r3, [r3, #8]
 8002bbc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002bbe:	429a      	cmp	r2, r3
 8002bc0:	d004      	beq.n	8002bcc <QHsm_dispatch_+0x2c>
 8002bc2:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8002bc6:	4852      	ldr	r0, [pc, #328]	; (8002d10 <QHsm_dispatch_+0x170>)
 8002bc8:	f7fe f8ac 	bl	8000d24 <Q_onAssert>

    QStateHandler s;
    QState r;
    /* process the event hierarchically... */
    do {
        s = me->temp.fun;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	689b      	ldr	r3, [r3, #8]
 8002bd0:	62bb      	str	r3, [r7, #40]	; 0x28
        r = (*s)(me, e); /* invoke state handler s */
 8002bd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bd4:	68b9      	ldr	r1, [r7, #8]
 8002bd6:	68f8      	ldr	r0, [r7, #12]
 8002bd8:	4798      	blx	r3
 8002bda:	4603      	mov	r3, r0
 8002bdc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

        if (r == Q_RET_UNHANDLED) { /* unhandled due to a guard? */
 8002be0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002be4:	2b02      	cmp	r3, #2
 8002be6:	d106      	bne.n	8002bf6 <QHsm_dispatch_+0x56>
                QS_SIG_PRE_(e->sig); /* the signal of the event */
                QS_OBJ_PRE_(me);     /* this state machine object */
                QS_FUN_PRE_(s);      /* the current state */
            QS_END_PRE_()

            r = QEP_TRIG_(s, QEP_EMPTY_SIG_); /* find superstate of s */
 8002be8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bea:	494a      	ldr	r1, [pc, #296]	; (8002d14 <QHsm_dispatch_+0x174>)
 8002bec:	68f8      	ldr	r0, [r7, #12]
 8002bee:	4798      	blx	r3
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        }
    } while (r == Q_RET_SUPER);
 8002bf6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d0e6      	beq.n	8002bcc <QHsm_dispatch_+0x2c>

    /* regular transition taken? */
    /*! @tr{RQP120E} */
    if (r >= Q_RET_TRAN) {
 8002bfe:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002c02:	2b07      	cmp	r3, #7
 8002c04:	d97a      	bls.n	8002cfc <QHsm_dispatch_+0x15c>
        QStateHandler path[QHSM_MAX_NEST_DEPTH_];

        path[0] = me->temp.fun; /* save the target of the transition */
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	689b      	ldr	r3, [r3, #8]
 8002c0a:	613b      	str	r3, [r7, #16]
        path[1] = t;
 8002c0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c0e:	617b      	str	r3, [r7, #20]
        path[2] = s;
 8002c10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c12:	61bb      	str	r3, [r7, #24]

        /* exit current state to transition source s... */
        /*! @tr{RQP120C} */
        for (; t != s; t = me->temp.fun) {
 8002c14:	e00d      	b.n	8002c32 <QHsm_dispatch_+0x92>
            if (QEP_TRIG_(t, Q_EXIT_SIG) == Q_RET_HANDLED) {
 8002c16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c18:	493f      	ldr	r1, [pc, #252]	; (8002d18 <QHsm_dispatch_+0x178>)
 8002c1a:	68f8      	ldr	r0, [r7, #12]
 8002c1c:	4798      	blx	r3
 8002c1e:	4603      	mov	r3, r0
 8002c20:	2b03      	cmp	r3, #3
 8002c22:	d103      	bne.n	8002c2c <QHsm_dispatch_+0x8c>
                    QS_OBJ_PRE_(me);  /* this state machine object */
                    QS_FUN_PRE_(t);   /* the exited state */
                QS_END_PRE_()

                /* find superstate of t */
                (void)QEP_TRIG_(t, QEP_EMPTY_SIG_);
 8002c24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c26:	493b      	ldr	r1, [pc, #236]	; (8002d14 <QHsm_dispatch_+0x174>)
 8002c28:	68f8      	ldr	r0, [r7, #12]
 8002c2a:	4798      	blx	r3
        for (; t != s; t = me->temp.fun) {
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	689b      	ldr	r3, [r3, #8]
 8002c30:	637b      	str	r3, [r7, #52]	; 0x34
 8002c32:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002c34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c36:	429a      	cmp	r2, r3
 8002c38:	d1ed      	bne.n	8002c16 <QHsm_dispatch_+0x76>
            }
        }

        int_fast8_t ip = QHsm_tran_(me, path, qs_id); /* the HSM transition */
 8002c3a:	f107 0310 	add.w	r3, r7, #16
 8002c3e:	687a      	ldr	r2, [r7, #4]
 8002c40:	4619      	mov	r1, r3
 8002c42:	68f8      	ldr	r0, [r7, #12]
 8002c44:	f000 f86e 	bl	8002d24 <QHsm_tran_>
 8002c48:	62f8      	str	r0, [r7, #44]	; 0x2c
        }
    #endif /* Q_SPY */

        /* execute state entry actions in the desired order... */
        /*! @tr{RQP120B} */
        for (; ip >= 0; --ip) {
 8002c4a:	e00b      	b.n	8002c64 <QHsm_dispatch_+0xc4>
            QEP_ENTER_(path[ip], qs_id);  /* enter path[ip] */
 8002c4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c4e:	009b      	lsls	r3, r3, #2
 8002c50:	3338      	adds	r3, #56	; 0x38
 8002c52:	443b      	add	r3, r7
 8002c54:	f853 3c28 	ldr.w	r3, [r3, #-40]
 8002c58:	4930      	ldr	r1, [pc, #192]	; (8002d1c <QHsm_dispatch_+0x17c>)
 8002c5a:	68f8      	ldr	r0, [r7, #12]
 8002c5c:	4798      	blx	r3
        for (; ip >= 0; --ip) {
 8002c5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c60:	3b01      	subs	r3, #1
 8002c62:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	daf0      	bge.n	8002c4c <QHsm_dispatch_+0xac>
        }

        t = path[0];      /* stick the target into register */
 8002c6a:	693b      	ldr	r3, [r7, #16]
 8002c6c:	637b      	str	r3, [r7, #52]	; 0x34
        me->temp.fun = t; /* update the next state */
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002c72:	609a      	str	r2, [r3, #8]

        /* while nested initial transition... */
        /*! @tr{RQP120I} */
        while (QEP_TRIG_(t, Q_INIT_SIG) == Q_RET_TRAN) {
 8002c74:	e03b      	b.n	8002cee <QHsm_dispatch_+0x14e>
                QS_OBJ_PRE_(me);           /* this state machine object */
                QS_FUN_PRE_(t);            /* the source (pseudo)state */
                QS_FUN_PRE_(me->temp.fun); /* the target of the transition */
            QS_END_PRE_()

            ip = 0;
 8002c76:	2300      	movs	r3, #0
 8002c78:	62fb      	str	r3, [r7, #44]	; 0x2c
            path[0] = me->temp.fun;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	689b      	ldr	r3, [r3, #8]
 8002c7e:	613b      	str	r3, [r7, #16]

            /* find superstate */
            (void)QEP_TRIG_(me->temp.fun, QEP_EMPTY_SIG_);
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	689b      	ldr	r3, [r3, #8]
 8002c84:	4923      	ldr	r1, [pc, #140]	; (8002d14 <QHsm_dispatch_+0x174>)
 8002c86:	68f8      	ldr	r0, [r7, #12]
 8002c88:	4798      	blx	r3

            while (me->temp.fun != t) {
 8002c8a:	e00f      	b.n	8002cac <QHsm_dispatch_+0x10c>
                ++ip;
 8002c8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c8e:	3301      	adds	r3, #1
 8002c90:	62fb      	str	r3, [r7, #44]	; 0x2c
                path[ip] = me->temp.fun;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	689a      	ldr	r2, [r3, #8]
 8002c96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c98:	009b      	lsls	r3, r3, #2
 8002c9a:	3338      	adds	r3, #56	; 0x38
 8002c9c:	443b      	add	r3, r7
 8002c9e:	f843 2c28 	str.w	r2, [r3, #-40]
                /* find superstate */
                (void)QEP_TRIG_(me->temp.fun, QEP_EMPTY_SIG_);
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	689b      	ldr	r3, [r3, #8]
 8002ca6:	491b      	ldr	r1, [pc, #108]	; (8002d14 <QHsm_dispatch_+0x174>)
 8002ca8:	68f8      	ldr	r0, [r7, #12]
 8002caa:	4798      	blx	r3
            while (me->temp.fun != t) {
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	689b      	ldr	r3, [r3, #8]
 8002cb0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002cb2:	429a      	cmp	r2, r3
 8002cb4:	d1ea      	bne.n	8002c8c <QHsm_dispatch_+0xec>
            }
            me->temp.fun = path[0];
 8002cb6:	693a      	ldr	r2, [r7, #16]
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	609a      	str	r2, [r3, #8]

            /* entry path must not overflow */
            Q_ASSERT_ID(410, ip < QHSM_MAX_NEST_DEPTH_);
 8002cbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cbe:	2b05      	cmp	r3, #5
 8002cc0:	dd04      	ble.n	8002ccc <QHsm_dispatch_+0x12c>
 8002cc2:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 8002cc6:	4812      	ldr	r0, [pc, #72]	; (8002d10 <QHsm_dispatch_+0x170>)
 8002cc8:	f7fe f82c 	bl	8000d24 <Q_onAssert>

            /* retrace the entry path in reverse (correct) order... */
            do {
                QEP_ENTER_(path[ip], qs_id); /* enter path[ip] */
 8002ccc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cce:	009b      	lsls	r3, r3, #2
 8002cd0:	3338      	adds	r3, #56	; 0x38
 8002cd2:	443b      	add	r3, r7
 8002cd4:	f853 3c28 	ldr.w	r3, [r3, #-40]
 8002cd8:	4910      	ldr	r1, [pc, #64]	; (8002d1c <QHsm_dispatch_+0x17c>)
 8002cda:	68f8      	ldr	r0, [r7, #12]
 8002cdc:	4798      	blx	r3
                --ip;
 8002cde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ce0:	3b01      	subs	r3, #1
 8002ce2:	62fb      	str	r3, [r7, #44]	; 0x2c
            } while (ip >= 0);
 8002ce4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	daf0      	bge.n	8002ccc <QHsm_dispatch_+0x12c>

            t = path[0]; /* current state becomes the new source */
 8002cea:	693b      	ldr	r3, [r7, #16]
 8002cec:	637b      	str	r3, [r7, #52]	; 0x34
        while (QEP_TRIG_(t, Q_INIT_SIG) == Q_RET_TRAN) {
 8002cee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cf0:	490b      	ldr	r1, [pc, #44]	; (8002d20 <QHsm_dispatch_+0x180>)
 8002cf2:	68f8      	ldr	r0, [r7, #12]
 8002cf4:	4798      	blx	r3
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	2b08      	cmp	r3, #8
 8002cfa:	d0bc      	beq.n	8002c76 <QHsm_dispatch_+0xd6>
        QS_END_PRE_()

    }
    #endif /* Q_SPY */

    me->state.fun = t; /* change the current active state */
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002d00:	605a      	str	r2, [r3, #4]
    me->temp.fun  = t; /* mark the configuration as stable */
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002d06:	609a      	str	r2, [r3, #8]
}
 8002d08:	bf00      	nop
 8002d0a:	3738      	adds	r7, #56	; 0x38
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bd80      	pop	{r7, pc}
 8002d10:	08003058 	.word	0x08003058
 8002d14:	08003060 	.word	0x08003060
 8002d18:	08003068 	.word	0x08003068
 8002d1c:	08003064 	.word	0x08003064
 8002d20:	0800306c 	.word	0x0800306c

08002d24 <QHsm_tran_>:

/*${QEP::QHsm::tran_} ......................................................*/
int_fast8_t QHsm_tran_(QHsm * const me,
    QStateHandler path[QHSM_MAX_NEST_DEPTH_],
    uint_fast8_t const qs_id)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b08a      	sub	sp, #40	; 0x28
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	60f8      	str	r0, [r7, #12]
 8002d2c:	60b9      	str	r1, [r7, #8]
 8002d2e:	607a      	str	r2, [r7, #4]
    Q_UNUSED_PAR(qs_id); // unused when Q_SPY undefined

    int_fast8_t ip = -1; /* transition entry path index */
 8002d30:	f04f 33ff 	mov.w	r3, #4294967295
 8002d34:	627b      	str	r3, [r7, #36]	; 0x24
    QStateHandler t = path[0];
 8002d36:	68bb      	ldr	r3, [r7, #8]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	623b      	str	r3, [r7, #32]
    QStateHandler const s = path[2];
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	689b      	ldr	r3, [r3, #8]
 8002d40:	617b      	str	r3, [r7, #20]
    QS_CRIT_STAT_

    /* (a) check source==target (transition to self)... */
    if (s == t) {
 8002d42:	697a      	ldr	r2, [r7, #20]
 8002d44:	6a3b      	ldr	r3, [r7, #32]
 8002d46:	429a      	cmp	r2, r3
 8002d48:	d106      	bne.n	8002d58 <QHsm_tran_+0x34>
        QEP_EXIT_(s, qs_id); /* exit the source */
 8002d4a:	697b      	ldr	r3, [r7, #20]
 8002d4c:	4964      	ldr	r1, [pc, #400]	; (8002ee0 <QHsm_tran_+0x1bc>)
 8002d4e:	68f8      	ldr	r0, [r7, #12]
 8002d50:	4798      	blx	r3
        ip = 0; /* enter the target */
 8002d52:	2300      	movs	r3, #0
 8002d54:	627b      	str	r3, [r7, #36]	; 0x24
 8002d56:	e0be      	b.n	8002ed6 <QHsm_tran_+0x1b2>
    }
    else {
        /* find superstate of target */
        (void)QEP_TRIG_(t, QEP_EMPTY_SIG_);
 8002d58:	6a3b      	ldr	r3, [r7, #32]
 8002d5a:	4962      	ldr	r1, [pc, #392]	; (8002ee4 <QHsm_tran_+0x1c0>)
 8002d5c:	68f8      	ldr	r0, [r7, #12]
 8002d5e:	4798      	blx	r3

        t = me->temp.fun;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	689b      	ldr	r3, [r3, #8]
 8002d64:	623b      	str	r3, [r7, #32]

        /* (b) check source==target->super... */
        if (s == t) {
 8002d66:	697a      	ldr	r2, [r7, #20]
 8002d68:	6a3b      	ldr	r3, [r7, #32]
 8002d6a:	429a      	cmp	r2, r3
 8002d6c:	d102      	bne.n	8002d74 <QHsm_tran_+0x50>
            ip = 0; /* enter the target */
 8002d6e:	2300      	movs	r3, #0
 8002d70:	627b      	str	r3, [r7, #36]	; 0x24
 8002d72:	e0b0      	b.n	8002ed6 <QHsm_tran_+0x1b2>
        }
        else {
            /* find superstate of src */
            (void)QEP_TRIG_(s, QEP_EMPTY_SIG_);
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	495b      	ldr	r1, [pc, #364]	; (8002ee4 <QHsm_tran_+0x1c0>)
 8002d78:	68f8      	ldr	r0, [r7, #12]
 8002d7a:	4798      	blx	r3

            /* (c) check source->super==target->super... */
            if (me->temp.fun == t) {
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	689b      	ldr	r3, [r3, #8]
 8002d80:	6a3a      	ldr	r2, [r7, #32]
 8002d82:	429a      	cmp	r2, r3
 8002d84:	d106      	bne.n	8002d94 <QHsm_tran_+0x70>
                QEP_EXIT_(s, qs_id); /* exit the source */
 8002d86:	697b      	ldr	r3, [r7, #20]
 8002d88:	4955      	ldr	r1, [pc, #340]	; (8002ee0 <QHsm_tran_+0x1bc>)
 8002d8a:	68f8      	ldr	r0, [r7, #12]
 8002d8c:	4798      	blx	r3
                ip = 0; /* enter the target */
 8002d8e:	2300      	movs	r3, #0
 8002d90:	627b      	str	r3, [r7, #36]	; 0x24
 8002d92:	e0a0      	b.n	8002ed6 <QHsm_tran_+0x1b2>
            }
            else {
                /* (d) check source->super==target... */
                if (me->temp.fun == path[0]) {
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	689a      	ldr	r2, [r3, #8]
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	429a      	cmp	r2, r3
 8002d9e:	d104      	bne.n	8002daa <QHsm_tran_+0x86>
                    QEP_EXIT_(s, qs_id); /* exit the source */
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	494f      	ldr	r1, [pc, #316]	; (8002ee0 <QHsm_tran_+0x1bc>)
 8002da4:	68f8      	ldr	r0, [r7, #12]
 8002da6:	4798      	blx	r3
 8002da8:	e095      	b.n	8002ed6 <QHsm_tran_+0x1b2>
                }
                else {
                    /* (e) check rest of source==target->super->super..
                    * and store the entry path along the way
                    */
                    int_fast8_t iq = 0; /* indicate that LCA not found */
 8002daa:	2300      	movs	r3, #0
 8002dac:	61fb      	str	r3, [r7, #28]
                    ip = 1; /* enter target and its superstate */
 8002dae:	2301      	movs	r3, #1
 8002db0:	627b      	str	r3, [r7, #36]	; 0x24
                    path[1] = t;      /* save the superstate of target */
 8002db2:	68bb      	ldr	r3, [r7, #8]
 8002db4:	3304      	adds	r3, #4
 8002db6:	6a3a      	ldr	r2, [r7, #32]
 8002db8:	601a      	str	r2, [r3, #0]
                    t = me->temp.fun; /* save source->super */
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	689b      	ldr	r3, [r3, #8]
 8002dbe:	623b      	str	r3, [r7, #32]

                    /* find target->super->super... */
                    QState r = QEP_TRIG_(path[1], QEP_EMPTY_SIG_);
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	3304      	adds	r3, #4
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4947      	ldr	r1, [pc, #284]	; (8002ee4 <QHsm_tran_+0x1c0>)
 8002dc8:	68f8      	ldr	r0, [r7, #12]
 8002dca:	4798      	blx	r3
 8002dcc:	4603      	mov	r3, r0
 8002dce:	76fb      	strb	r3, [r7, #27]
                    while (r == Q_RET_SUPER) {
 8002dd0:	e025      	b.n	8002e1e <QHsm_tran_+0xfa>
                        ++ip;
 8002dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd4:	3301      	adds	r3, #1
 8002dd6:	627b      	str	r3, [r7, #36]	; 0x24
                        path[ip] = me->temp.fun; /* store the entry path */
 8002dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dda:	009b      	lsls	r3, r3, #2
 8002ddc:	68ba      	ldr	r2, [r7, #8]
 8002dde:	4413      	add	r3, r2
 8002de0:	68fa      	ldr	r2, [r7, #12]
 8002de2:	6892      	ldr	r2, [r2, #8]
 8002de4:	601a      	str	r2, [r3, #0]
                        if (me->temp.fun == s) { /* is it the source? */
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	689b      	ldr	r3, [r3, #8]
 8002dea:	697a      	ldr	r2, [r7, #20]
 8002dec:	429a      	cmp	r2, r3
 8002dee:	d10f      	bne.n	8002e10 <QHsm_tran_+0xec>
                            iq = 1; /* indicate that LCA found */
 8002df0:	2301      	movs	r3, #1
 8002df2:	61fb      	str	r3, [r7, #28]

                            /* entry path must not overflow */
                            Q_ASSERT_ID(510,
 8002df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df6:	2b05      	cmp	r3, #5
 8002df8:	dd04      	ble.n	8002e04 <QHsm_tran_+0xe0>
 8002dfa:	f44f 71ff 	mov.w	r1, #510	; 0x1fe
 8002dfe:	483a      	ldr	r0, [pc, #232]	; (8002ee8 <QHsm_tran_+0x1c4>)
 8002e00:	f7fd ff90 	bl	8000d24 <Q_onAssert>
                                ip < QHSM_MAX_NEST_DEPTH_);
                            --ip; /* do not enter the source */
 8002e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e06:	3b01      	subs	r3, #1
 8002e08:	627b      	str	r3, [r7, #36]	; 0x24
                            r = Q_RET_HANDLED; /* terminate loop */
 8002e0a:	2303      	movs	r3, #3
 8002e0c:	76fb      	strb	r3, [r7, #27]
 8002e0e:	e006      	b.n	8002e1e <QHsm_tran_+0xfa>
                        }
                         /* it is not the source, keep going up */
                        else {
                            r = QEP_TRIG_(me->temp.fun, QEP_EMPTY_SIG_);
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	689b      	ldr	r3, [r3, #8]
 8002e14:	4933      	ldr	r1, [pc, #204]	; (8002ee4 <QHsm_tran_+0x1c0>)
 8002e16:	68f8      	ldr	r0, [r7, #12]
 8002e18:	4798      	blx	r3
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	76fb      	strb	r3, [r7, #27]
                    while (r == Q_RET_SUPER) {
 8002e1e:	7efb      	ldrb	r3, [r7, #27]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d0d6      	beq.n	8002dd2 <QHsm_tran_+0xae>
                        }
                    }

                    /* the LCA not found yet? */
                    if (iq == 0) {
 8002e24:	69fb      	ldr	r3, [r7, #28]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d155      	bne.n	8002ed6 <QHsm_tran_+0x1b2>

                        /* entry path must not overflow */
                        Q_ASSERT_ID(520, ip < QHSM_MAX_NEST_DEPTH_);
 8002e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e2c:	2b05      	cmp	r3, #5
 8002e2e:	dd04      	ble.n	8002e3a <QHsm_tran_+0x116>
 8002e30:	f44f 7102 	mov.w	r1, #520	; 0x208
 8002e34:	482c      	ldr	r0, [pc, #176]	; (8002ee8 <QHsm_tran_+0x1c4>)
 8002e36:	f7fd ff75 	bl	8000d24 <Q_onAssert>

                        QEP_EXIT_(s, qs_id); /* exit the source */
 8002e3a:	697b      	ldr	r3, [r7, #20]
 8002e3c:	4928      	ldr	r1, [pc, #160]	; (8002ee0 <QHsm_tran_+0x1bc>)
 8002e3e:	68f8      	ldr	r0, [r7, #12]
 8002e40:	4798      	blx	r3

                        /* (f) check the rest of source->super
                        *                  == target->super->super...
                        */
                        iq = ip;
 8002e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e44:	61fb      	str	r3, [r7, #28]
                        r = Q_RET_IGNORED; /* LCA NOT found */
 8002e46:	2304      	movs	r3, #4
 8002e48:	76fb      	strb	r3, [r7, #27]
                        do {
                            if (t == path[iq]) { /* is this the LCA? */
 8002e4a:	69fb      	ldr	r3, [r7, #28]
 8002e4c:	009b      	lsls	r3, r3, #2
 8002e4e:	68ba      	ldr	r2, [r7, #8]
 8002e50:	4413      	add	r3, r2
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	6a3a      	ldr	r2, [r7, #32]
 8002e56:	429a      	cmp	r2, r3
 8002e58:	d108      	bne.n	8002e6c <QHsm_tran_+0x148>
                                r = Q_RET_HANDLED; /* LCA found */
 8002e5a:	2303      	movs	r3, #3
 8002e5c:	76fb      	strb	r3, [r7, #27]
                                ip = iq - 1; /* do not enter LCA */
 8002e5e:	69fb      	ldr	r3, [r7, #28]
 8002e60:	3b01      	subs	r3, #1
 8002e62:	627b      	str	r3, [r7, #36]	; 0x24
                                iq = -1; /* cause termintion of the loop */
 8002e64:	f04f 33ff 	mov.w	r3, #4294967295
 8002e68:	61fb      	str	r3, [r7, #28]
 8002e6a:	e002      	b.n	8002e72 <QHsm_tran_+0x14e>
                            }
                            else {
                                --iq; /* try lower superstate of target */
 8002e6c:	69fb      	ldr	r3, [r7, #28]
 8002e6e:	3b01      	subs	r3, #1
 8002e70:	61fb      	str	r3, [r7, #28]
                            }
                        } while (iq >= 0);
 8002e72:	69fb      	ldr	r3, [r7, #28]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	dae8      	bge.n	8002e4a <QHsm_tran_+0x126>

                        /* LCA not found? */
                        if (r != Q_RET_HANDLED) {
 8002e78:	7efb      	ldrb	r3, [r7, #27]
 8002e7a:	2b03      	cmp	r3, #3
 8002e7c:	d02b      	beq.n	8002ed6 <QHsm_tran_+0x1b2>
                            /* (g) check each source->super->...
                            * for each target->super...
                            */
                            r = Q_RET_IGNORED; /* keep looping */
 8002e7e:	2304      	movs	r3, #4
 8002e80:	76fb      	strb	r3, [r7, #27]
                            do {
                                /* exit t unhandled? */
                                if (QEP_TRIG_(t, Q_EXIT_SIG)
 8002e82:	6a3b      	ldr	r3, [r7, #32]
 8002e84:	4916      	ldr	r1, [pc, #88]	; (8002ee0 <QHsm_tran_+0x1bc>)
 8002e86:	68f8      	ldr	r0, [r7, #12]
 8002e88:	4798      	blx	r3
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	2b03      	cmp	r3, #3
 8002e8e:	d103      	bne.n	8002e98 <QHsm_tran_+0x174>
                                    QS_BEGIN_PRE_(QS_QEP_STATE_EXIT, qs_id)
                                        QS_OBJ_PRE_(me);
                                        QS_FUN_PRE_(t);
                                    QS_END_PRE_()

                                    (void)QEP_TRIG_(t, QEP_EMPTY_SIG_);
 8002e90:	6a3b      	ldr	r3, [r7, #32]
 8002e92:	4914      	ldr	r1, [pc, #80]	; (8002ee4 <QHsm_tran_+0x1c0>)
 8002e94:	68f8      	ldr	r0, [r7, #12]
 8002e96:	4798      	blx	r3
                                }
                                t = me->temp.fun; /* set to super of t */
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	689b      	ldr	r3, [r3, #8]
 8002e9c:	623b      	str	r3, [r7, #32]
                                iq = ip;
 8002e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea0:	61fb      	str	r3, [r7, #28]
                                do {
                                    /* is this LCA? */
                                    if (t == path[iq]) {
 8002ea2:	69fb      	ldr	r3, [r7, #28]
 8002ea4:	009b      	lsls	r3, r3, #2
 8002ea6:	68ba      	ldr	r2, [r7, #8]
 8002ea8:	4413      	add	r3, r2
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	6a3a      	ldr	r2, [r7, #32]
 8002eae:	429a      	cmp	r2, r3
 8002eb0:	d108      	bne.n	8002ec4 <QHsm_tran_+0x1a0>
                                        /* do not enter LCA */
                                        ip = (int_fast8_t)(iq - 1);
 8002eb2:	69fb      	ldr	r3, [r7, #28]
 8002eb4:	3b01      	subs	r3, #1
 8002eb6:	627b      	str	r3, [r7, #36]	; 0x24
                                        iq = -1; /* break out of inner loop */
 8002eb8:	f04f 33ff 	mov.w	r3, #4294967295
 8002ebc:	61fb      	str	r3, [r7, #28]
                                        /* break out of outer loop */
                                        r = Q_RET_HANDLED;
 8002ebe:	2303      	movs	r3, #3
 8002ec0:	76fb      	strb	r3, [r7, #27]
 8002ec2:	e002      	b.n	8002eca <QHsm_tran_+0x1a6>
                                    }
                                    else {
                                        --iq;
 8002ec4:	69fb      	ldr	r3, [r7, #28]
 8002ec6:	3b01      	subs	r3, #1
 8002ec8:	61fb      	str	r3, [r7, #28]
                                    }
                                } while (iq >= 0);
 8002eca:	69fb      	ldr	r3, [r7, #28]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	dae8      	bge.n	8002ea2 <QHsm_tran_+0x17e>
                            } while (r != Q_RET_HANDLED);
 8002ed0:	7efb      	ldrb	r3, [r7, #27]
 8002ed2:	2b03      	cmp	r3, #3
 8002ed4:	d1d5      	bne.n	8002e82 <QHsm_tran_+0x15e>
                    }
                }
            }
        }
    }
    return ip;
 8002ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002ed8:	4618      	mov	r0, r3
 8002eda:	3728      	adds	r7, #40	; 0x28
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bd80      	pop	{r7, pc}
 8002ee0:	08003068 	.word	0x08003068
 8002ee4:	08003060 	.word	0x08003060
 8002ee8:	08003058 	.word	0x08003058

08002eec <__libc_init_array>:
 8002eec:	b570      	push	{r4, r5, r6, lr}
 8002eee:	4d0d      	ldr	r5, [pc, #52]	; (8002f24 <__libc_init_array+0x38>)
 8002ef0:	4c0d      	ldr	r4, [pc, #52]	; (8002f28 <__libc_init_array+0x3c>)
 8002ef2:	1b64      	subs	r4, r4, r5
 8002ef4:	10a4      	asrs	r4, r4, #2
 8002ef6:	2600      	movs	r6, #0
 8002ef8:	42a6      	cmp	r6, r4
 8002efa:	d109      	bne.n	8002f10 <__libc_init_array+0x24>
 8002efc:	4d0b      	ldr	r5, [pc, #44]	; (8002f2c <__libc_init_array+0x40>)
 8002efe:	4c0c      	ldr	r4, [pc, #48]	; (8002f30 <__libc_init_array+0x44>)
 8002f00:	f000 f820 	bl	8002f44 <_init>
 8002f04:	1b64      	subs	r4, r4, r5
 8002f06:	10a4      	asrs	r4, r4, #2
 8002f08:	2600      	movs	r6, #0
 8002f0a:	42a6      	cmp	r6, r4
 8002f0c:	d105      	bne.n	8002f1a <__libc_init_array+0x2e>
 8002f0e:	bd70      	pop	{r4, r5, r6, pc}
 8002f10:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f14:	4798      	blx	r3
 8002f16:	3601      	adds	r6, #1
 8002f18:	e7ee      	b.n	8002ef8 <__libc_init_array+0xc>
 8002f1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f1e:	4798      	blx	r3
 8002f20:	3601      	adds	r6, #1
 8002f22:	e7f2      	b.n	8002f0a <__libc_init_array+0x1e>
 8002f24:	08003080 	.word	0x08003080
 8002f28:	08003080 	.word	0x08003080
 8002f2c:	08003080 	.word	0x08003080
 8002f30:	08003084 	.word	0x08003084

08002f34 <memset>:
 8002f34:	4402      	add	r2, r0
 8002f36:	4603      	mov	r3, r0
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d100      	bne.n	8002f3e <memset+0xa>
 8002f3c:	4770      	bx	lr
 8002f3e:	f803 1b01 	strb.w	r1, [r3], #1
 8002f42:	e7f9      	b.n	8002f38 <memset+0x4>

08002f44 <_init>:
 8002f44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f46:	bf00      	nop
 8002f48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f4a:	bc08      	pop	{r3}
 8002f4c:	469e      	mov	lr, r3
 8002f4e:	4770      	bx	lr

08002f50 <_fini>:
 8002f50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f52:	bf00      	nop
 8002f54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f56:	bc08      	pop	{r3}
 8002f58:	469e      	mov	lr, r3
 8002f5a:	4770      	bx	lr
