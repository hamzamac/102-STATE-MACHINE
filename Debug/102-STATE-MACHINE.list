
102-STATE-MACHINE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000030f4  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  080032a4  080032a4  000132a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800337c  0800337c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800337c  0800337c  0001337c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003384  08003384  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003384  08003384  00013384  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003388  08003388  00013388  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800338c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000108  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000114  20000114  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c39f  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000207b  00000000  00000000  0002c3db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000009d0  00000000  00000000  0002e458  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000918  00000000  00000000  0002ee28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002407c  00000000  00000000  0002f740  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b847  00000000  00000000  000537bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dadae  00000000  00000000  0005f003  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00139db1  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000026cc  00000000  00000000  00139e04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000000c 	.word	0x2000000c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800328c 	.word	0x0800328c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000010 	.word	0x20000010
 80001ec:	0800328c 	.word	0x0800328c

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <__aeabi_uldivmod>:
 8000200:	b953      	cbnz	r3, 8000218 <__aeabi_uldivmod+0x18>
 8000202:	b94a      	cbnz	r2, 8000218 <__aeabi_uldivmod+0x18>
 8000204:	2900      	cmp	r1, #0
 8000206:	bf08      	it	eq
 8000208:	2800      	cmpeq	r0, #0
 800020a:	bf1c      	itt	ne
 800020c:	f04f 31ff 	movne.w	r1, #4294967295
 8000210:	f04f 30ff 	movne.w	r0, #4294967295
 8000214:	f000 b974 	b.w	8000500 <__aeabi_idiv0>
 8000218:	f1ad 0c08 	sub.w	ip, sp, #8
 800021c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000220:	f000 f806 	bl	8000230 <__udivmoddi4>
 8000224:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000228:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800022c:	b004      	add	sp, #16
 800022e:	4770      	bx	lr

08000230 <__udivmoddi4>:
 8000230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000234:	9d08      	ldr	r5, [sp, #32]
 8000236:	4604      	mov	r4, r0
 8000238:	468e      	mov	lr, r1
 800023a:	2b00      	cmp	r3, #0
 800023c:	d14d      	bne.n	80002da <__udivmoddi4+0xaa>
 800023e:	428a      	cmp	r2, r1
 8000240:	4694      	mov	ip, r2
 8000242:	d969      	bls.n	8000318 <__udivmoddi4+0xe8>
 8000244:	fab2 f282 	clz	r2, r2
 8000248:	b152      	cbz	r2, 8000260 <__udivmoddi4+0x30>
 800024a:	fa01 f302 	lsl.w	r3, r1, r2
 800024e:	f1c2 0120 	rsb	r1, r2, #32
 8000252:	fa20 f101 	lsr.w	r1, r0, r1
 8000256:	fa0c fc02 	lsl.w	ip, ip, r2
 800025a:	ea41 0e03 	orr.w	lr, r1, r3
 800025e:	4094      	lsls	r4, r2
 8000260:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000264:	0c21      	lsrs	r1, r4, #16
 8000266:	fbbe f6f8 	udiv	r6, lr, r8
 800026a:	fa1f f78c 	uxth.w	r7, ip
 800026e:	fb08 e316 	mls	r3, r8, r6, lr
 8000272:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000276:	fb06 f107 	mul.w	r1, r6, r7
 800027a:	4299      	cmp	r1, r3
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x64>
 800027e:	eb1c 0303 	adds.w	r3, ip, r3
 8000282:	f106 30ff 	add.w	r0, r6, #4294967295
 8000286:	f080 811f 	bcs.w	80004c8 <__udivmoddi4+0x298>
 800028a:	4299      	cmp	r1, r3
 800028c:	f240 811c 	bls.w	80004c8 <__udivmoddi4+0x298>
 8000290:	3e02      	subs	r6, #2
 8000292:	4463      	add	r3, ip
 8000294:	1a5b      	subs	r3, r3, r1
 8000296:	b2a4      	uxth	r4, r4
 8000298:	fbb3 f0f8 	udiv	r0, r3, r8
 800029c:	fb08 3310 	mls	r3, r8, r0, r3
 80002a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a4:	fb00 f707 	mul.w	r7, r0, r7
 80002a8:	42a7      	cmp	r7, r4
 80002aa:	d90a      	bls.n	80002c2 <__udivmoddi4+0x92>
 80002ac:	eb1c 0404 	adds.w	r4, ip, r4
 80002b0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b4:	f080 810a 	bcs.w	80004cc <__udivmoddi4+0x29c>
 80002b8:	42a7      	cmp	r7, r4
 80002ba:	f240 8107 	bls.w	80004cc <__udivmoddi4+0x29c>
 80002be:	4464      	add	r4, ip
 80002c0:	3802      	subs	r0, #2
 80002c2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c6:	1be4      	subs	r4, r4, r7
 80002c8:	2600      	movs	r6, #0
 80002ca:	b11d      	cbz	r5, 80002d4 <__udivmoddi4+0xa4>
 80002cc:	40d4      	lsrs	r4, r2
 80002ce:	2300      	movs	r3, #0
 80002d0:	e9c5 4300 	strd	r4, r3, [r5]
 80002d4:	4631      	mov	r1, r6
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d909      	bls.n	80002f2 <__udivmoddi4+0xc2>
 80002de:	2d00      	cmp	r5, #0
 80002e0:	f000 80ef 	beq.w	80004c2 <__udivmoddi4+0x292>
 80002e4:	2600      	movs	r6, #0
 80002e6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ea:	4630      	mov	r0, r6
 80002ec:	4631      	mov	r1, r6
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	fab3 f683 	clz	r6, r3
 80002f6:	2e00      	cmp	r6, #0
 80002f8:	d14a      	bne.n	8000390 <__udivmoddi4+0x160>
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d302      	bcc.n	8000304 <__udivmoddi4+0xd4>
 80002fe:	4282      	cmp	r2, r0
 8000300:	f200 80f9 	bhi.w	80004f6 <__udivmoddi4+0x2c6>
 8000304:	1a84      	subs	r4, r0, r2
 8000306:	eb61 0303 	sbc.w	r3, r1, r3
 800030a:	2001      	movs	r0, #1
 800030c:	469e      	mov	lr, r3
 800030e:	2d00      	cmp	r5, #0
 8000310:	d0e0      	beq.n	80002d4 <__udivmoddi4+0xa4>
 8000312:	e9c5 4e00 	strd	r4, lr, [r5]
 8000316:	e7dd      	b.n	80002d4 <__udivmoddi4+0xa4>
 8000318:	b902      	cbnz	r2, 800031c <__udivmoddi4+0xec>
 800031a:	deff      	udf	#255	; 0xff
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	2a00      	cmp	r2, #0
 8000322:	f040 8092 	bne.w	800044a <__udivmoddi4+0x21a>
 8000326:	eba1 010c 	sub.w	r1, r1, ip
 800032a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032e:	fa1f fe8c 	uxth.w	lr, ip
 8000332:	2601      	movs	r6, #1
 8000334:	0c20      	lsrs	r0, r4, #16
 8000336:	fbb1 f3f7 	udiv	r3, r1, r7
 800033a:	fb07 1113 	mls	r1, r7, r3, r1
 800033e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000342:	fb0e f003 	mul.w	r0, lr, r3
 8000346:	4288      	cmp	r0, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0x12c>
 800034a:	eb1c 0101 	adds.w	r1, ip, r1
 800034e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x12a>
 8000354:	4288      	cmp	r0, r1
 8000356:	f200 80cb 	bhi.w	80004f0 <__udivmoddi4+0x2c0>
 800035a:	4643      	mov	r3, r8
 800035c:	1a09      	subs	r1, r1, r0
 800035e:	b2a4      	uxth	r4, r4
 8000360:	fbb1 f0f7 	udiv	r0, r1, r7
 8000364:	fb07 1110 	mls	r1, r7, r0, r1
 8000368:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800036c:	fb0e fe00 	mul.w	lr, lr, r0
 8000370:	45a6      	cmp	lr, r4
 8000372:	d908      	bls.n	8000386 <__udivmoddi4+0x156>
 8000374:	eb1c 0404 	adds.w	r4, ip, r4
 8000378:	f100 31ff 	add.w	r1, r0, #4294967295
 800037c:	d202      	bcs.n	8000384 <__udivmoddi4+0x154>
 800037e:	45a6      	cmp	lr, r4
 8000380:	f200 80bb 	bhi.w	80004fa <__udivmoddi4+0x2ca>
 8000384:	4608      	mov	r0, r1
 8000386:	eba4 040e 	sub.w	r4, r4, lr
 800038a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800038e:	e79c      	b.n	80002ca <__udivmoddi4+0x9a>
 8000390:	f1c6 0720 	rsb	r7, r6, #32
 8000394:	40b3      	lsls	r3, r6
 8000396:	fa22 fc07 	lsr.w	ip, r2, r7
 800039a:	ea4c 0c03 	orr.w	ip, ip, r3
 800039e:	fa20 f407 	lsr.w	r4, r0, r7
 80003a2:	fa01 f306 	lsl.w	r3, r1, r6
 80003a6:	431c      	orrs	r4, r3
 80003a8:	40f9      	lsrs	r1, r7
 80003aa:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ae:	fa00 f306 	lsl.w	r3, r0, r6
 80003b2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003b6:	0c20      	lsrs	r0, r4, #16
 80003b8:	fa1f fe8c 	uxth.w	lr, ip
 80003bc:	fb09 1118 	mls	r1, r9, r8, r1
 80003c0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c4:	fb08 f00e 	mul.w	r0, r8, lr
 80003c8:	4288      	cmp	r0, r1
 80003ca:	fa02 f206 	lsl.w	r2, r2, r6
 80003ce:	d90b      	bls.n	80003e8 <__udivmoddi4+0x1b8>
 80003d0:	eb1c 0101 	adds.w	r1, ip, r1
 80003d4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003d8:	f080 8088 	bcs.w	80004ec <__udivmoddi4+0x2bc>
 80003dc:	4288      	cmp	r0, r1
 80003de:	f240 8085 	bls.w	80004ec <__udivmoddi4+0x2bc>
 80003e2:	f1a8 0802 	sub.w	r8, r8, #2
 80003e6:	4461      	add	r1, ip
 80003e8:	1a09      	subs	r1, r1, r0
 80003ea:	b2a4      	uxth	r4, r4
 80003ec:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f0:	fb09 1110 	mls	r1, r9, r0, r1
 80003f4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003f8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003fc:	458e      	cmp	lr, r1
 80003fe:	d908      	bls.n	8000412 <__udivmoddi4+0x1e2>
 8000400:	eb1c 0101 	adds.w	r1, ip, r1
 8000404:	f100 34ff 	add.w	r4, r0, #4294967295
 8000408:	d26c      	bcs.n	80004e4 <__udivmoddi4+0x2b4>
 800040a:	458e      	cmp	lr, r1
 800040c:	d96a      	bls.n	80004e4 <__udivmoddi4+0x2b4>
 800040e:	3802      	subs	r0, #2
 8000410:	4461      	add	r1, ip
 8000412:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000416:	fba0 9402 	umull	r9, r4, r0, r2
 800041a:	eba1 010e 	sub.w	r1, r1, lr
 800041e:	42a1      	cmp	r1, r4
 8000420:	46c8      	mov	r8, r9
 8000422:	46a6      	mov	lr, r4
 8000424:	d356      	bcc.n	80004d4 <__udivmoddi4+0x2a4>
 8000426:	d053      	beq.n	80004d0 <__udivmoddi4+0x2a0>
 8000428:	b15d      	cbz	r5, 8000442 <__udivmoddi4+0x212>
 800042a:	ebb3 0208 	subs.w	r2, r3, r8
 800042e:	eb61 010e 	sbc.w	r1, r1, lr
 8000432:	fa01 f707 	lsl.w	r7, r1, r7
 8000436:	fa22 f306 	lsr.w	r3, r2, r6
 800043a:	40f1      	lsrs	r1, r6
 800043c:	431f      	orrs	r7, r3
 800043e:	e9c5 7100 	strd	r7, r1, [r5]
 8000442:	2600      	movs	r6, #0
 8000444:	4631      	mov	r1, r6
 8000446:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044a:	f1c2 0320 	rsb	r3, r2, #32
 800044e:	40d8      	lsrs	r0, r3
 8000450:	fa0c fc02 	lsl.w	ip, ip, r2
 8000454:	fa21 f303 	lsr.w	r3, r1, r3
 8000458:	4091      	lsls	r1, r2
 800045a:	4301      	orrs	r1, r0
 800045c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000460:	fa1f fe8c 	uxth.w	lr, ip
 8000464:	fbb3 f0f7 	udiv	r0, r3, r7
 8000468:	fb07 3610 	mls	r6, r7, r0, r3
 800046c:	0c0b      	lsrs	r3, r1, #16
 800046e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000472:	fb00 f60e 	mul.w	r6, r0, lr
 8000476:	429e      	cmp	r6, r3
 8000478:	fa04 f402 	lsl.w	r4, r4, r2
 800047c:	d908      	bls.n	8000490 <__udivmoddi4+0x260>
 800047e:	eb1c 0303 	adds.w	r3, ip, r3
 8000482:	f100 38ff 	add.w	r8, r0, #4294967295
 8000486:	d22f      	bcs.n	80004e8 <__udivmoddi4+0x2b8>
 8000488:	429e      	cmp	r6, r3
 800048a:	d92d      	bls.n	80004e8 <__udivmoddi4+0x2b8>
 800048c:	3802      	subs	r0, #2
 800048e:	4463      	add	r3, ip
 8000490:	1b9b      	subs	r3, r3, r6
 8000492:	b289      	uxth	r1, r1
 8000494:	fbb3 f6f7 	udiv	r6, r3, r7
 8000498:	fb07 3316 	mls	r3, r7, r6, r3
 800049c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a0:	fb06 f30e 	mul.w	r3, r6, lr
 80004a4:	428b      	cmp	r3, r1
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x28a>
 80004a8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ac:	f106 38ff 	add.w	r8, r6, #4294967295
 80004b0:	d216      	bcs.n	80004e0 <__udivmoddi4+0x2b0>
 80004b2:	428b      	cmp	r3, r1
 80004b4:	d914      	bls.n	80004e0 <__udivmoddi4+0x2b0>
 80004b6:	3e02      	subs	r6, #2
 80004b8:	4461      	add	r1, ip
 80004ba:	1ac9      	subs	r1, r1, r3
 80004bc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c0:	e738      	b.n	8000334 <__udivmoddi4+0x104>
 80004c2:	462e      	mov	r6, r5
 80004c4:	4628      	mov	r0, r5
 80004c6:	e705      	b.n	80002d4 <__udivmoddi4+0xa4>
 80004c8:	4606      	mov	r6, r0
 80004ca:	e6e3      	b.n	8000294 <__udivmoddi4+0x64>
 80004cc:	4618      	mov	r0, r3
 80004ce:	e6f8      	b.n	80002c2 <__udivmoddi4+0x92>
 80004d0:	454b      	cmp	r3, r9
 80004d2:	d2a9      	bcs.n	8000428 <__udivmoddi4+0x1f8>
 80004d4:	ebb9 0802 	subs.w	r8, r9, r2
 80004d8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004dc:	3801      	subs	r0, #1
 80004de:	e7a3      	b.n	8000428 <__udivmoddi4+0x1f8>
 80004e0:	4646      	mov	r6, r8
 80004e2:	e7ea      	b.n	80004ba <__udivmoddi4+0x28a>
 80004e4:	4620      	mov	r0, r4
 80004e6:	e794      	b.n	8000412 <__udivmoddi4+0x1e2>
 80004e8:	4640      	mov	r0, r8
 80004ea:	e7d1      	b.n	8000490 <__udivmoddi4+0x260>
 80004ec:	46d0      	mov	r8, sl
 80004ee:	e77b      	b.n	80003e8 <__udivmoddi4+0x1b8>
 80004f0:	3b02      	subs	r3, #2
 80004f2:	4461      	add	r1, ip
 80004f4:	e732      	b.n	800035c <__udivmoddi4+0x12c>
 80004f6:	4630      	mov	r0, r6
 80004f8:	e709      	b.n	800030e <__udivmoddi4+0xde>
 80004fa:	4464      	add	r4, ip
 80004fc:	3802      	subs	r0, #2
 80004fe:	e742      	b.n	8000386 <__udivmoddi4+0x156>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <APP_GREEN_LED_ON>:
#include "FreeRTOS.h"
#include "task.h"

extern UART_HandleTypeDef huart1;

void APP_GREEN_LED_ON(){
 8000504:	b5b0      	push	{r4, r5, r7, lr}
 8000506:	b086      	sub	sp, #24
 8000508:	af00      	add	r7, sp, #0
	uint8_t log[] = "APP_GREEN_LED_ON\r\n";
 800050a:	4b0c      	ldr	r3, [pc, #48]	; (800053c <APP_GREEN_LED_ON+0x38>)
 800050c:	1d3c      	adds	r4, r7, #4
 800050e:	461d      	mov	r5, r3
 8000510:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000512:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000514:	682b      	ldr	r3, [r5, #0]
 8000516:	461a      	mov	r2, r3
 8000518:	8022      	strh	r2, [r4, #0]
 800051a:	3402      	adds	r4, #2
 800051c:	0c1b      	lsrs	r3, r3, #16
 800051e:	7023      	strb	r3, [r4, #0]
	uart_log(log);
 8000520:	1d3b      	adds	r3, r7, #4
 8000522:	4618      	mov	r0, r3
 8000524:	f000 f89c 	bl	8000660 <uart_log>
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, SET);
 8000528:	2201      	movs	r2, #1
 800052a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800052e:	4804      	ldr	r0, [pc, #16]	; (8000540 <APP_GREEN_LED_ON+0x3c>)
 8000530:	f001 f83a 	bl	80015a8 <HAL_GPIO_WritePin>
}
 8000534:	bf00      	nop
 8000536:	3718      	adds	r7, #24
 8000538:	46bd      	mov	sp, r7
 800053a:	bdb0      	pop	{r4, r5, r7, pc}
 800053c:	080032a4 	.word	0x080032a4
 8000540:	40021800 	.word	0x40021800

08000544 <APP_GREEN_LED_OFF>:

void APP_GREEN_LED_OFF(){
 8000544:	b5b0      	push	{r4, r5, r7, lr}
 8000546:	b086      	sub	sp, #24
 8000548:	af00      	add	r7, sp, #0
	uint8_t log[] = "APP_GREEN_LED_OFF\r\n";
 800054a:	4b0a      	ldr	r3, [pc, #40]	; (8000574 <APP_GREEN_LED_OFF+0x30>)
 800054c:	1d3c      	adds	r4, r7, #4
 800054e:	461d      	mov	r5, r3
 8000550:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000552:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000554:	682b      	ldr	r3, [r5, #0]
 8000556:	6023      	str	r3, [r4, #0]
	uart_log(log);
 8000558:	1d3b      	adds	r3, r7, #4
 800055a:	4618      	mov	r0, r3
 800055c:	f000 f880 	bl	8000660 <uart_log>
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, RESET);
 8000560:	2200      	movs	r2, #0
 8000562:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000566:	4804      	ldr	r0, [pc, #16]	; (8000578 <APP_GREEN_LED_OFF+0x34>)
 8000568:	f001 f81e 	bl	80015a8 <HAL_GPIO_WritePin>
}
 800056c:	bf00      	nop
 800056e:	3718      	adds	r7, #24
 8000570:	46bd      	mov	sp, r7
 8000572:	bdb0      	pop	{r4, r5, r7, pc}
 8000574:	080032b8 	.word	0x080032b8
 8000578:	40021800 	.word	0x40021800

0800057c <APP_GREEN_LED_BLINK>:

void APP_GREEN_LED_BLINK(){
 800057c:	b5b0      	push	{r4, r5, r7, lr}
 800057e:	b086      	sub	sp, #24
 8000580:	af00      	add	r7, sp, #0
	uint8_t log[] = "APP_GREEN_LED_BLINK\r\n";
 8000582:	4b0b      	ldr	r3, [pc, #44]	; (80005b0 <APP_GREEN_LED_BLINK+0x34>)
 8000584:	463c      	mov	r4, r7
 8000586:	461d      	mov	r5, r3
 8000588:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800058a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800058c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000590:	6020      	str	r0, [r4, #0]
 8000592:	3404      	adds	r4, #4
 8000594:	8021      	strh	r1, [r4, #0]
	uart_log(log);
 8000596:	463b      	mov	r3, r7
 8000598:	4618      	mov	r0, r3
 800059a:	f000 f861 	bl	8000660 <uart_log>
	HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 800059e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005a2:	4804      	ldr	r0, [pc, #16]	; (80005b4 <APP_GREEN_LED_BLINK+0x38>)
 80005a4:	f001 f819 	bl	80015da <HAL_GPIO_TogglePin>
}
 80005a8:	bf00      	nop
 80005aa:	3718      	adds	r7, #24
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bdb0      	pop	{r4, r5, r7, pc}
 80005b0:	080032cc 	.word	0x080032cc
 80005b4:	40021800 	.word	0x40021800

080005b8 <APP_RED_LED_ON>:

void APP_RED_LED_ON(){
 80005b8:	b5b0      	push	{r4, r5, r7, lr}
 80005ba:	b086      	sub	sp, #24
 80005bc:	af00      	add	r7, sp, #0
	uint8_t log[] = "APP_RED_LED_ON\r\n";
 80005be:	4b0a      	ldr	r3, [pc, #40]	; (80005e8 <APP_RED_LED_ON+0x30>)
 80005c0:	1d3c      	adds	r4, r7, #4
 80005c2:	461d      	mov	r5, r3
 80005c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005c8:	682b      	ldr	r3, [r5, #0]
 80005ca:	7023      	strb	r3, [r4, #0]
	uart_log(log);
 80005cc:	1d3b      	adds	r3, r7, #4
 80005ce:	4618      	mov	r0, r3
 80005d0:	f000 f846 	bl	8000660 <uart_log>
	HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, SET);
 80005d4:	2201      	movs	r2, #1
 80005d6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005da:	4804      	ldr	r0, [pc, #16]	; (80005ec <APP_RED_LED_ON+0x34>)
 80005dc:	f000 ffe4 	bl	80015a8 <HAL_GPIO_WritePin>
}
 80005e0:	bf00      	nop
 80005e2:	3718      	adds	r7, #24
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bdb0      	pop	{r4, r5, r7, pc}
 80005e8:	080032e4 	.word	0x080032e4
 80005ec:	40021800 	.word	0x40021800

080005f0 <APP_RED_LED_OFF>:

void APP_RED_LED_OFF(){
 80005f0:	b5b0      	push	{r4, r5, r7, lr}
 80005f2:	b086      	sub	sp, #24
 80005f4:	af00      	add	r7, sp, #0
	uint8_t log[] = "APP_RED_LED_OFF\r\n";
 80005f6:	4b0a      	ldr	r3, [pc, #40]	; (8000620 <APP_RED_LED_OFF+0x30>)
 80005f8:	1d3c      	adds	r4, r7, #4
 80005fa:	461d      	mov	r5, r3
 80005fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000600:	682b      	ldr	r3, [r5, #0]
 8000602:	8023      	strh	r3, [r4, #0]
	uart_log(log);
 8000604:	1d3b      	adds	r3, r7, #4
 8000606:	4618      	mov	r0, r3
 8000608:	f000 f82a 	bl	8000660 <uart_log>
	HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, RESET);
 800060c:	2200      	movs	r2, #0
 800060e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000612:	4804      	ldr	r0, [pc, #16]	; (8000624 <APP_RED_LED_OFF+0x34>)
 8000614:	f000 ffc8 	bl	80015a8 <HAL_GPIO_WritePin>
}
 8000618:	bf00      	nop
 800061a:	3718      	adds	r7, #24
 800061c:	46bd      	mov	sp, r7
 800061e:	bdb0      	pop	{r4, r5, r7, pc}
 8000620:	080032f8 	.word	0x080032f8
 8000624:	40021800 	.word	0x40021800

08000628 <APP_RED_LED_BLINK>:

void APP_RED_LED_BLINK(){
 8000628:	b5b0      	push	{r4, r5, r7, lr}
 800062a:	b086      	sub	sp, #24
 800062c:	af00      	add	r7, sp, #0
	uint8_t log[] = "APP_RED_LED_BLINK\r\n";
 800062e:	4b0a      	ldr	r3, [pc, #40]	; (8000658 <APP_RED_LED_BLINK+0x30>)
 8000630:	1d3c      	adds	r4, r7, #4
 8000632:	461d      	mov	r5, r3
 8000634:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000636:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000638:	682b      	ldr	r3, [r5, #0]
 800063a:	6023      	str	r3, [r4, #0]
	uart_log(log);
 800063c:	1d3b      	adds	r3, r7, #4
 800063e:	4618      	mov	r0, r3
 8000640:	f000 f80e 	bl	8000660 <uart_log>
	HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
 8000644:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000648:	4804      	ldr	r0, [pc, #16]	; (800065c <APP_RED_LED_BLINK+0x34>)
 800064a:	f000 ffc6 	bl	80015da <HAL_GPIO_TogglePin>
}
 800064e:	bf00      	nop
 8000650:	3718      	adds	r7, #24
 8000652:	46bd      	mov	sp, r7
 8000654:	bdb0      	pop	{r4, r5, r7, pc}
 8000656:	bf00      	nop
 8000658:	0800330c 	.word	0x0800330c
 800065c:	40021800 	.word	0x40021800

08000660 <uart_log>:

void uart_log(uint8_t * str){
 8000660:	b580      	push	{r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, str, strlen((char *)str), HAL_MAX_DELAY);
 8000668:	6878      	ldr	r0, [r7, #4]
 800066a:	f7ff fdc1 	bl	80001f0 <strlen>
 800066e:	4603      	mov	r3, r0
 8000670:	b29a      	uxth	r2, r3
 8000672:	f04f 33ff 	mov.w	r3, #4294967295
 8000676:	6879      	ldr	r1, [r7, #4]
 8000678:	4803      	ldr	r0, [pc, #12]	; (8000688 <uart_log+0x28>)
 800067a:	f001 fcc6 	bl	800200a <HAL_UART_Transmit>
}
 800067e:	bf00      	nop
 8000680:	3708      	adds	r7, #8
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	20000028 	.word	0x20000028

0800068c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000690:	f000 fc4a 	bl	8000f28 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000694:	f000 f822 	bl	80006dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000698:	f000 f8b6 	bl	8000808 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800069c:	f000 f88a 	bl	80007b4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  Lamp_ctor(&lamp);
 80006a0:	480c      	ldr	r0, [pc, #48]	; (80006d4 <main+0x48>)
 80006a2:	f002 fa35 	bl	8002b10 <Lamp_ctor>
  QHSM_INIT( &lamp.super, (QEvt *)0, 0 );
 80006a6:	4b0b      	ldr	r3, [pc, #44]	; (80006d4 <main+0x48>)
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d103      	bne.n	80006b6 <main+0x2a>
 80006ae:	215e      	movs	r1, #94	; 0x5e
 80006b0:	4809      	ldr	r0, [pc, #36]	; (80006d8 <main+0x4c>)
 80006b2:	f000 fb39 	bl	8000d28 <Q_onAssert>
 80006b6:	4b07      	ldr	r3, [pc, #28]	; (80006d4 <main+0x48>)
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	2200      	movs	r2, #0
 80006be:	2100      	movs	r1, #0
 80006c0:	4804      	ldr	r0, [pc, #16]	; (80006d4 <main+0x48>)
 80006c2:	4798      	blx	r3
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	 HAL_Delay(500);
 80006c4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006c8:	f000 fc8c 	bl	8000fe4 <HAL_Delay>
	 Lamp_blink(&lamp);
 80006cc:	4801      	ldr	r0, [pc, #4]	; (80006d4 <main+0x48>)
 80006ce:	f002 fa41 	bl	8002b54 <Lamp_blink>
	 HAL_Delay(500);
 80006d2:	e7f7      	b.n	80006c4 <main+0x38>
 80006d4:	2000006c 	.word	0x2000006c
 80006d8:	08003330 	.word	0x08003330

080006dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b094      	sub	sp, #80	; 0x50
 80006e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006e2:	f107 0320 	add.w	r3, r7, #32
 80006e6:	2230      	movs	r2, #48	; 0x30
 80006e8:	2100      	movs	r1, #0
 80006ea:	4618      	mov	r0, r3
 80006ec:	f002 fdc6 	bl	800327c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006f0:	f107 030c 	add.w	r3, r7, #12
 80006f4:	2200      	movs	r2, #0
 80006f6:	601a      	str	r2, [r3, #0]
 80006f8:	605a      	str	r2, [r3, #4]
 80006fa:	609a      	str	r2, [r3, #8]
 80006fc:	60da      	str	r2, [r3, #12]
 80006fe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000700:	2300      	movs	r3, #0
 8000702:	60bb      	str	r3, [r7, #8]
 8000704:	4b29      	ldr	r3, [pc, #164]	; (80007ac <SystemClock_Config+0xd0>)
 8000706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000708:	4a28      	ldr	r2, [pc, #160]	; (80007ac <SystemClock_Config+0xd0>)
 800070a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800070e:	6413      	str	r3, [r2, #64]	; 0x40
 8000710:	4b26      	ldr	r3, [pc, #152]	; (80007ac <SystemClock_Config+0xd0>)
 8000712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000714:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000718:	60bb      	str	r3, [r7, #8]
 800071a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800071c:	2300      	movs	r3, #0
 800071e:	607b      	str	r3, [r7, #4]
 8000720:	4b23      	ldr	r3, [pc, #140]	; (80007b0 <SystemClock_Config+0xd4>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000728:	4a21      	ldr	r2, [pc, #132]	; (80007b0 <SystemClock_Config+0xd4>)
 800072a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800072e:	6013      	str	r3, [r2, #0]
 8000730:	4b1f      	ldr	r3, [pc, #124]	; (80007b0 <SystemClock_Config+0xd4>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000738:	607b      	str	r3, [r7, #4]
 800073a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800073c:	2302      	movs	r3, #2
 800073e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000740:	2301      	movs	r3, #1
 8000742:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000744:	2310      	movs	r3, #16
 8000746:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000748:	2302      	movs	r3, #2
 800074a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800074c:	2300      	movs	r3, #0
 800074e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000750:	2308      	movs	r3, #8
 8000752:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000754:	2332      	movs	r3, #50	; 0x32
 8000756:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000758:	2304      	movs	r3, #4
 800075a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800075c:	2307      	movs	r3, #7
 800075e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000760:	f107 0320 	add.w	r3, r7, #32
 8000764:	4618      	mov	r0, r3
 8000766:	f000 ff6b 	bl	8001640 <HAL_RCC_OscConfig>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000770:	f000 fb04 	bl	8000d7c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000774:	230f      	movs	r3, #15
 8000776:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000778:	2302      	movs	r3, #2
 800077a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800077c:	2300      	movs	r3, #0
 800077e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8000780:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000784:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8000786:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800078a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800078c:	f107 030c 	add.w	r3, r7, #12
 8000790:	2100      	movs	r1, #0
 8000792:	4618      	mov	r0, r3
 8000794:	f001 f9cc 	bl	8001b30 <HAL_RCC_ClockConfig>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800079e:	f000 faed 	bl	8000d7c <Error_Handler>
  }
}
 80007a2:	bf00      	nop
 80007a4:	3750      	adds	r7, #80	; 0x50
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	40023800 	.word	0x40023800
 80007b0:	40007000 	.word	0x40007000

080007b4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007b8:	4b11      	ldr	r3, [pc, #68]	; (8000800 <MX_USART1_UART_Init+0x4c>)
 80007ba:	4a12      	ldr	r2, [pc, #72]	; (8000804 <MX_USART1_UART_Init+0x50>)
 80007bc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80007be:	4b10      	ldr	r3, [pc, #64]	; (8000800 <MX_USART1_UART_Init+0x4c>)
 80007c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007c4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007c6:	4b0e      	ldr	r3, [pc, #56]	; (8000800 <MX_USART1_UART_Init+0x4c>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007cc:	4b0c      	ldr	r3, [pc, #48]	; (8000800 <MX_USART1_UART_Init+0x4c>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007d2:	4b0b      	ldr	r3, [pc, #44]	; (8000800 <MX_USART1_UART_Init+0x4c>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007d8:	4b09      	ldr	r3, [pc, #36]	; (8000800 <MX_USART1_UART_Init+0x4c>)
 80007da:	220c      	movs	r2, #12
 80007dc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007de:	4b08      	ldr	r3, [pc, #32]	; (8000800 <MX_USART1_UART_Init+0x4c>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007e4:	4b06      	ldr	r3, [pc, #24]	; (8000800 <MX_USART1_UART_Init+0x4c>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007ea:	4805      	ldr	r0, [pc, #20]	; (8000800 <MX_USART1_UART_Init+0x4c>)
 80007ec:	f001 fbc0 	bl	8001f70 <HAL_UART_Init>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80007f6:	f000 fac1 	bl	8000d7c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80007fa:	bf00      	nop
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	20000028 	.word	0x20000028
 8000804:	40011000 	.word	0x40011000

08000808 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b08e      	sub	sp, #56	; 0x38
 800080c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800080e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000812:	2200      	movs	r2, #0
 8000814:	601a      	str	r2, [r3, #0]
 8000816:	605a      	str	r2, [r3, #4]
 8000818:	609a      	str	r2, [r3, #8]
 800081a:	60da      	str	r2, [r3, #12]
 800081c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800081e:	2300      	movs	r3, #0
 8000820:	623b      	str	r3, [r7, #32]
 8000822:	4bb1      	ldr	r3, [pc, #708]	; (8000ae8 <MX_GPIO_Init+0x2e0>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	4ab0      	ldr	r2, [pc, #704]	; (8000ae8 <MX_GPIO_Init+0x2e0>)
 8000828:	f043 0304 	orr.w	r3, r3, #4
 800082c:	6313      	str	r3, [r2, #48]	; 0x30
 800082e:	4bae      	ldr	r3, [pc, #696]	; (8000ae8 <MX_GPIO_Init+0x2e0>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000832:	f003 0304 	and.w	r3, r3, #4
 8000836:	623b      	str	r3, [r7, #32]
 8000838:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800083a:	2300      	movs	r3, #0
 800083c:	61fb      	str	r3, [r7, #28]
 800083e:	4baa      	ldr	r3, [pc, #680]	; (8000ae8 <MX_GPIO_Init+0x2e0>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000842:	4aa9      	ldr	r2, [pc, #676]	; (8000ae8 <MX_GPIO_Init+0x2e0>)
 8000844:	f043 0320 	orr.w	r3, r3, #32
 8000848:	6313      	str	r3, [r2, #48]	; 0x30
 800084a:	4ba7      	ldr	r3, [pc, #668]	; (8000ae8 <MX_GPIO_Init+0x2e0>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084e:	f003 0320 	and.w	r3, r3, #32
 8000852:	61fb      	str	r3, [r7, #28]
 8000854:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000856:	2300      	movs	r3, #0
 8000858:	61bb      	str	r3, [r7, #24]
 800085a:	4ba3      	ldr	r3, [pc, #652]	; (8000ae8 <MX_GPIO_Init+0x2e0>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085e:	4aa2      	ldr	r2, [pc, #648]	; (8000ae8 <MX_GPIO_Init+0x2e0>)
 8000860:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000864:	6313      	str	r3, [r2, #48]	; 0x30
 8000866:	4ba0      	ldr	r3, [pc, #640]	; (8000ae8 <MX_GPIO_Init+0x2e0>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800086e:	61bb      	str	r3, [r7, #24]
 8000870:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000872:	2300      	movs	r3, #0
 8000874:	617b      	str	r3, [r7, #20]
 8000876:	4b9c      	ldr	r3, [pc, #624]	; (8000ae8 <MX_GPIO_Init+0x2e0>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087a:	4a9b      	ldr	r2, [pc, #620]	; (8000ae8 <MX_GPIO_Init+0x2e0>)
 800087c:	f043 0301 	orr.w	r3, r3, #1
 8000880:	6313      	str	r3, [r2, #48]	; 0x30
 8000882:	4b99      	ldr	r3, [pc, #612]	; (8000ae8 <MX_GPIO_Init+0x2e0>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000886:	f003 0301 	and.w	r3, r3, #1
 800088a:	617b      	str	r3, [r7, #20]
 800088c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800088e:	2300      	movs	r3, #0
 8000890:	613b      	str	r3, [r7, #16]
 8000892:	4b95      	ldr	r3, [pc, #596]	; (8000ae8 <MX_GPIO_Init+0x2e0>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000896:	4a94      	ldr	r2, [pc, #592]	; (8000ae8 <MX_GPIO_Init+0x2e0>)
 8000898:	f043 0302 	orr.w	r3, r3, #2
 800089c:	6313      	str	r3, [r2, #48]	; 0x30
 800089e:	4b92      	ldr	r3, [pc, #584]	; (8000ae8 <MX_GPIO_Init+0x2e0>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a2:	f003 0302 	and.w	r3, r3, #2
 80008a6:	613b      	str	r3, [r7, #16]
 80008a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008aa:	2300      	movs	r3, #0
 80008ac:	60fb      	str	r3, [r7, #12]
 80008ae:	4b8e      	ldr	r3, [pc, #568]	; (8000ae8 <MX_GPIO_Init+0x2e0>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b2:	4a8d      	ldr	r2, [pc, #564]	; (8000ae8 <MX_GPIO_Init+0x2e0>)
 80008b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008b8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ba:	4b8b      	ldr	r3, [pc, #556]	; (8000ae8 <MX_GPIO_Init+0x2e0>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008c2:	60fb      	str	r3, [r7, #12]
 80008c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008c6:	2300      	movs	r3, #0
 80008c8:	60bb      	str	r3, [r7, #8]
 80008ca:	4b87      	ldr	r3, [pc, #540]	; (8000ae8 <MX_GPIO_Init+0x2e0>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ce:	4a86      	ldr	r2, [pc, #536]	; (8000ae8 <MX_GPIO_Init+0x2e0>)
 80008d0:	f043 0310 	orr.w	r3, r3, #16
 80008d4:	6313      	str	r3, [r2, #48]	; 0x30
 80008d6:	4b84      	ldr	r3, [pc, #528]	; (8000ae8 <MX_GPIO_Init+0x2e0>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008da:	f003 0310 	and.w	r3, r3, #16
 80008de:	60bb      	str	r3, [r7, #8]
 80008e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008e2:	2300      	movs	r3, #0
 80008e4:	607b      	str	r3, [r7, #4]
 80008e6:	4b80      	ldr	r3, [pc, #512]	; (8000ae8 <MX_GPIO_Init+0x2e0>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ea:	4a7f      	ldr	r2, [pc, #508]	; (8000ae8 <MX_GPIO_Init+0x2e0>)
 80008ec:	f043 0308 	orr.w	r3, r3, #8
 80008f0:	6313      	str	r3, [r2, #48]	; 0x30
 80008f2:	4b7d      	ldr	r3, [pc, #500]	; (8000ae8 <MX_GPIO_Init+0x2e0>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f6:	f003 0308 	and.w	r3, r3, #8
 80008fa:	607b      	str	r3, [r7, #4]
 80008fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|BOTTON_YELLOW_Pin, GPIO_PIN_RESET);
 80008fe:	2200      	movs	r2, #0
 8000900:	2116      	movs	r1, #22
 8000902:	487a      	ldr	r0, [pc, #488]	; (8000aec <MX_GPIO_Init+0x2e4>)
 8000904:	f000 fe50 	bl	80015a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8000908:	2200      	movs	r2, #0
 800090a:	2180      	movs	r1, #128	; 0x80
 800090c:	4878      	ldr	r0, [pc, #480]	; (8000af0 <MX_GPIO_Init+0x2e8>)
 800090e:	f000 fe4b 	bl	80015a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8000912:	2200      	movs	r2, #0
 8000914:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8000918:	4876      	ldr	r0, [pc, #472]	; (8000af4 <MX_GPIO_Init+0x2ec>)
 800091a:	f000 fe45 	bl	80015a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 800091e:	2200      	movs	r2, #0
 8000920:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000924:	4874      	ldr	r0, [pc, #464]	; (8000af8 <MX_GPIO_Init+0x2f0>)
 8000926:	f000 fe3f 	bl	80015a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A0_Pin A1_Pin A2_Pin A3_Pin
                           A4_Pin A5_Pin SDNRAS_Pin A6_Pin
                           A7_Pin A8_Pin A9_Pin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 800092a:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800092e:	627b      	str	r3, [r7, #36]	; 0x24
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000930:	2302      	movs	r3, #2
 8000932:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000934:	2300      	movs	r3, #0
 8000936:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000938:	2303      	movs	r3, #3
 800093a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800093c:	230c      	movs	r3, #12
 800093e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000940:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000944:	4619      	mov	r1, r3
 8000946:	486d      	ldr	r0, [pc, #436]	; (8000afc <MX_GPIO_Init+0x2f4>)
 8000948:	f000 fc82 	bl	8001250 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI5_SCK_Pin SPI5_MISO_Pin SPI5_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 800094c:	f44f 7360 	mov.w	r3, #896	; 0x380
 8000950:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000952:	2302      	movs	r3, #2
 8000954:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000956:	2300      	movs	r3, #0
 8000958:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800095a:	2300      	movs	r3, #0
 800095c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 800095e:	2305      	movs	r3, #5
 8000960:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000962:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000966:	4619      	mov	r1, r3
 8000968:	4864      	ldr	r0, [pc, #400]	; (8000afc <MX_GPIO_Init+0x2f4>)
 800096a:	f000 fc71 	bl	8001250 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENABLE_Pin */
  GPIO_InitStruct.Pin = ENABLE_Pin;
 800096e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000972:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000974:	2302      	movs	r3, #2
 8000976:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000978:	2300      	movs	r3, #0
 800097a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800097c:	2300      	movs	r3, #0
 800097e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000980:	230e      	movs	r3, #14
 8000982:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8000984:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000988:	4619      	mov	r1, r3
 800098a:	485c      	ldr	r0, [pc, #368]	; (8000afc <MX_GPIO_Init+0x2f4>)
 800098c:	f000 fc60 	bl	8001250 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDNWE_Pin */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 8000990:	2301      	movs	r3, #1
 8000992:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000994:	2302      	movs	r3, #2
 8000996:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000998:	2300      	movs	r3, #0
 800099a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800099c:	2303      	movs	r3, #3
 800099e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80009a0:	230c      	movs	r3, #12
 80009a2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 80009a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009a8:	4619      	mov	r1, r3
 80009aa:	4850      	ldr	r0, [pc, #320]	; (8000aec <MX_GPIO_Init+0x2e4>)
 80009ac:	f000 fc50 	bl	8001250 <HAL_GPIO_Init>

  /*Configure GPIO pin : NCS_MEMS_SPI_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin;
 80009b0:	2302      	movs	r3, #2
 80009b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b4:	2301      	movs	r3, #1
 80009b6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b8:	2300      	movs	r3, #0
 80009ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009bc:	2300      	movs	r3, #0
 80009be:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(NCS_MEMS_SPI_GPIO_Port, &GPIO_InitStruct);
 80009c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009c4:	4619      	mov	r1, r3
 80009c6:	4849      	ldr	r0, [pc, #292]	; (8000aec <MX_GPIO_Init+0x2e4>)
 80009c8:	f000 fc42 	bl	8001250 <HAL_GPIO_Init>

  /*Configure GPIO pins : CSX_Pin BOTTON_YELLOW_Pin */
  GPIO_InitStruct.Pin = CSX_Pin|BOTTON_YELLOW_Pin;
 80009cc:	2314      	movs	r3, #20
 80009ce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009d0:	2301      	movs	r3, #1
 80009d2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80009d4:	2302      	movs	r3, #2
 80009d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d8:	2300      	movs	r3, #0
 80009da:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009e0:	4619      	mov	r1, r3
 80009e2:	4842      	ldr	r0, [pc, #264]	; (8000aec <MX_GPIO_Init+0x2e4>)
 80009e4:	f000 fc34 	bl	8001250 <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|TP_INT1_Pin;
 80009e8:	f248 0301 	movw	r3, #32769	; 0x8001
 80009ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009ee:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80009f2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f4:	2300      	movs	r3, #0
 80009f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009fc:	4619      	mov	r1, r3
 80009fe:	483c      	ldr	r0, [pc, #240]	; (8000af0 <MX_GPIO_Init+0x2e8>)
 8000a00:	f000 fc26 	bl	8001250 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_1_Pin BUTTON_2_Pin */
  GPIO_InitStruct.Pin = BUTTON_1_Pin|BUTTON_2_Pin;
 8000a04:	2306      	movs	r3, #6
 8000a06:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a08:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a0c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000a0e:	2302      	movs	r3, #2
 8000a10:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a16:	4619      	mov	r1, r3
 8000a18:	4835      	ldr	r0, [pc, #212]	; (8000af0 <MX_GPIO_Init+0x2e8>)
 8000a1a:	f000 fc19 	bl	8001250 <HAL_GPIO_Init>

  /*Configure GPIO pins : B5_Pin VSYNC_Pin G2_Pin R4_Pin
                           R5_Pin */
  GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8000a1e:	f641 0358 	movw	r3, #6232	; 0x1858
 8000a22:	627b      	str	r3, [r7, #36]	; 0x24
                          |R5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a24:	2302      	movs	r3, #2
 8000a26:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000a30:	230e      	movs	r3, #14
 8000a32:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a38:	4619      	mov	r1, r3
 8000a3a:	482d      	ldr	r0, [pc, #180]	; (8000af0 <MX_GPIO_Init+0x2e8>)
 8000a3c:	f000 fc08 	bl	8001250 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8000a40:	2380      	movs	r3, #128	; 0x80
 8000a42:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a44:	2301      	movs	r3, #1
 8000a46:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8000a50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a54:	4619      	mov	r1, r3
 8000a56:	4826      	ldr	r0, [pc, #152]	; (8000af0 <MX_GPIO_Init+0x2e8>)
 8000a58:	f000 fbfa 	bl	8001250 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8000a5c:	2320      	movs	r3, #32
 8000a5e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a60:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000a64:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a66:	2300      	movs	r3, #0
 8000a68:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8000a6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a6e:	4619      	mov	r1, r3
 8000a70:	481e      	ldr	r0, [pc, #120]	; (8000aec <MX_GPIO_Init+0x2e4>)
 8000a72:	f000 fbed 	bl	8001250 <HAL_GPIO_Init>

  /*Configure GPIO pins : R3_Pin R6_Pin */
  GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8000a76:	2303      	movs	r3, #3
 8000a78:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a7a:	2302      	movs	r3, #2
 8000a7c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a82:	2300      	movs	r3, #0
 8000a84:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000a86:	2309      	movs	r3, #9
 8000a88:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a8e:	4619      	mov	r1, r3
 8000a90:	481b      	ldr	r0, [pc, #108]	; (8000b00 <MX_GPIO_Init+0x2f8>)
 8000a92:	f000 fbdd 	bl	8001250 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000a96:	2304      	movs	r3, #4
 8000a98:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000a9e:	2302      	movs	r3, #2
 8000aa0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000aa2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	4815      	ldr	r0, [pc, #84]	; (8000b00 <MX_GPIO_Init+0x2f8>)
 8000aaa:	f000 fbd1 	bl	8001250 <HAL_GPIO_Init>

  /*Configure GPIO pins : A10_Pin A11_Pin BA0_Pin BA1_Pin
                           SDCLK_Pin SDNCAS_Pin */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8000aae:	f248 1333 	movw	r3, #33075	; 0x8133
 8000ab2:	627b      	str	r3, [r7, #36]	; 0x24
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab4:	2302      	movs	r3, #2
 8000ab6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000abc:	2303      	movs	r3, #3
 8000abe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000ac0:	230c      	movs	r3, #12
 8000ac2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ac4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ac8:	4619      	mov	r1, r3
 8000aca:	480b      	ldr	r0, [pc, #44]	; (8000af8 <MX_GPIO_Init+0x2f0>)
 8000acc:	f000 fbc0 	bl	8001250 <HAL_GPIO_Init>

  /*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D7_Pin
                           D8_Pin D9_Pin D10_Pin D11_Pin
                           D12_Pin NBL0_Pin NBL1_Pin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8000ad0:	f64f 7383 	movw	r3, #65411	; 0xff83
 8000ad4:	627b      	str	r3, [r7, #36]	; 0x24
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad6:	2302      	movs	r3, #2
 8000ad8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ada:	2300      	movs	r3, #0
 8000adc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ade:	2303      	movs	r3, #3
 8000ae0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000ae2:	230c      	movs	r3, #12
 8000ae4:	637b      	str	r3, [r7, #52]	; 0x34
 8000ae6:	e00d      	b.n	8000b04 <MX_GPIO_Init+0x2fc>
 8000ae8:	40023800 	.word	0x40023800
 8000aec:	40020800 	.word	0x40020800
 8000af0:	40020000 	.word	0x40020000
 8000af4:	40020c00 	.word	0x40020c00
 8000af8:	40021800 	.word	0x40021800
 8000afc:	40021400 	.word	0x40021400
 8000b00:	40020400 	.word	0x40020400
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b08:	4619      	mov	r1, r3
 8000b0a:	4881      	ldr	r0, [pc, #516]	; (8000d10 <MX_GPIO_Init+0x508>)
 8000b0c:	f000 fba0 	bl	8001250 <HAL_GPIO_Init>

  /*Configure GPIO pins : G4_Pin G5_Pin B6_Pin B7_Pin */
  GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8000b10:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8000b14:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b16:	2302      	movs	r3, #2
 8000b18:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000b22:	230e      	movs	r3, #14
 8000b24:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	4879      	ldr	r0, [pc, #484]	; (8000d14 <MX_GPIO_Init+0x50c>)
 8000b2e:	f000 fb8f 	bl	8001250 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_HS_ID_Pin OTG_HS_DM_Pin OTG_HS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 8000b32:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 8000b36:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b38:	2302      	movs	r3, #2
 8000b3a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b40:	2300      	movs	r3, #0
 8000b42:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8000b44:	230c      	movs	r3, #12
 8000b46:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	4871      	ldr	r0, [pc, #452]	; (8000d14 <MX_GPIO_Init+0x50c>)
 8000b50:	f000 fb7e 	bl	8001250 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_HS_Pin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 8000b54:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b58:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 8000b62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b66:	4619      	mov	r1, r3
 8000b68:	486a      	ldr	r0, [pc, #424]	; (8000d14 <MX_GPIO_Init+0x50c>)
 8000b6a:	f000 fb71 	bl	8001250 <HAL_GPIO_Init>

  /*Configure GPIO pins : D13_Pin D14_Pin D15_Pin D0_Pin
                           D1_Pin D2_Pin D3_Pin */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8000b6e:	f24c 7303 	movw	r3, #50947	; 0xc703
 8000b72:	627b      	str	r3, [r7, #36]	; 0x24
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b74:	2302      	movs	r3, #2
 8000b76:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b7c:	2303      	movs	r3, #3
 8000b7e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000b80:	230c      	movs	r3, #12
 8000b82:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b88:	4619      	mov	r1, r3
 8000b8a:	4863      	ldr	r0, [pc, #396]	; (8000d18 <MX_GPIO_Init+0x510>)
 8000b8c:	f000 fb60 	bl	8001250 <HAL_GPIO_Init>

  /*Configure GPIO pins : TE_Pin PD4 */
  GPIO_InitStruct.Pin = TE_Pin|GPIO_PIN_4;
 8000b90:	f44f 6301 	mov.w	r3, #2064	; 0x810
 8000b94:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b96:	2300      	movs	r3, #0
 8000b98:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	485c      	ldr	r0, [pc, #368]	; (8000d18 <MX_GPIO_Init+0x510>)
 8000ba6:	f000 fb53 	bl	8001250 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8000baa:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000bae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bb0:	2301      	movs	r3, #1
 8000bb2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	4855      	ldr	r0, [pc, #340]	; (8000d18 <MX_GPIO_Init+0x510>)
 8000bc4:	f000 fb44 	bl	8001250 <HAL_GPIO_Init>

  /*Configure GPIO pins : R7_Pin DOTCLK_Pin B3_Pin */
  GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8000bc8:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8000bcc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bce:	2302      	movs	r3, #2
 8000bd0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000bda:	230e      	movs	r3, #14
 8000bdc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000bde:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000be2:	4619      	mov	r1, r3
 8000be4:	484d      	ldr	r0, [pc, #308]	; (8000d1c <MX_GPIO_Init+0x514>)
 8000be6:	f000 fb33 	bl	8001250 <HAL_GPIO_Init>

  /*Configure GPIO pins : HSYNC_Pin G6_Pin R2_Pin */
  GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8000bea:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8000bee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf0:	2302      	movs	r3, #2
 8000bf2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000bfc:	230e      	movs	r3, #14
 8000bfe:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c04:	4619      	mov	r1, r3
 8000c06:	4846      	ldr	r0, [pc, #280]	; (8000d20 <MX_GPIO_Init+0x518>)
 8000c08:	f000 fb22 	bl	8001250 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C3_SDA_Pin */
  GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8000c0c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c10:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c12:	2312      	movs	r3, #18
 8000c14:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c16:	2300      	movs	r3, #0
 8000c18:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000c1e:	2304      	movs	r3, #4
 8000c20:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8000c22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c26:	4619      	mov	r1, r3
 8000c28:	483d      	ldr	r0, [pc, #244]	; (8000d20 <MX_GPIO_Init+0x518>)
 8000c2a:	f000 fb11 	bl	8001250 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C3_SCL_Pin */
  GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8000c2e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c32:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c34:	2312      	movs	r3, #18
 8000c36:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000c40:	2304      	movs	r3, #4
 8000c42:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8000c44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c48:	4619      	mov	r1, r3
 8000c4a:	4836      	ldr	r0, [pc, #216]	; (8000d24 <MX_GPIO_Init+0x51c>)
 8000c4c:	f000 fb00 	bl	8001250 <HAL_GPIO_Init>

  /*Configure GPIO pins : G7_Pin B2_Pin */
  GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8000c50:	2348      	movs	r3, #72	; 0x48
 8000c52:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c54:	2302      	movs	r3, #2
 8000c56:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000c60:	230e      	movs	r3, #14
 8000c62:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c68:	4619      	mov	r1, r3
 8000c6a:	482b      	ldr	r0, [pc, #172]	; (8000d18 <MX_GPIO_Init+0x510>)
 8000c6c:	f000 faf0 	bl	8001250 <HAL_GPIO_Init>

  /*Configure GPIO pins : G3_Pin B4_Pin */
  GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8000c70:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000c74:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c76:	2302      	movs	r3, #2
 8000c78:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000c82:	2309      	movs	r3, #9
 8000c84:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c8a:	4619      	mov	r1, r3
 8000c8c:	4823      	ldr	r0, [pc, #140]	; (8000d1c <MX_GPIO_Init+0x514>)
 8000c8e:	f000 fadf 	bl	8001250 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8000c92:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000c96:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c98:	2301      	movs	r3, #1
 8000c9a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ca4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ca8:	4619      	mov	r1, r3
 8000caa:	481c      	ldr	r0, [pc, #112]	; (8000d1c <MX_GPIO_Init+0x514>)
 8000cac:	f000 fad0 	bl	8001250 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000cb0:	2310      	movs	r3, #16
 8000cb2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	4814      	ldr	r0, [pc, #80]	; (8000d14 <MX_GPIO_Init+0x50c>)
 8000cc4:	f000 fac4 	bl	8001250 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDCKE1_Pin SDNE1_Pin */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8000cc8:	2360      	movs	r3, #96	; 0x60
 8000cca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ccc:	2302      	movs	r3, #2
 8000cce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cd4:	2303      	movs	r3, #3
 8000cd6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000cd8:	230c      	movs	r3, #12
 8000cda:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cdc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	480c      	ldr	r0, [pc, #48]	; (8000d14 <MX_GPIO_Init+0x50c>)
 8000ce4:	f000 fab4 	bl	8001250 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000ce8:	2200      	movs	r2, #0
 8000cea:	2100      	movs	r1, #0
 8000cec:	2007      	movs	r0, #7
 8000cee:	f000 fa78 	bl	80011e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000cf2:	2007      	movs	r0, #7
 8000cf4:	f000 fa91 	bl	800121a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	2100      	movs	r1, #0
 8000cfc:	2008      	movs	r0, #8
 8000cfe:	f000 fa70 	bl	80011e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000d02:	2008      	movs	r0, #8
 8000d04:	f000 fa89 	bl	800121a <HAL_NVIC_EnableIRQ>

}
 8000d08:	bf00      	nop
 8000d0a:	3738      	adds	r7, #56	; 0x38
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	40021000 	.word	0x40021000
 8000d14:	40020400 	.word	0x40020400
 8000d18:	40020c00 	.word	0x40020c00
 8000d1c:	40021800 	.word	0x40021800
 8000d20:	40020800 	.word	0x40020800
 8000d24:	40020000 	.word	0x40020000

08000d28 <Q_onAssert>:

/* USER CODE BEGIN 4 */
void Q_onAssert( char const * 	module, int_t 	location ){
 8000d28:	b590      	push	{r4, r7, lr}
 8000d2a:	b087      	sub	sp, #28
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
 8000d30:	6039      	str	r1, [r7, #0]
	uint8_t log[] = "Q_onAssert\r\n";
 8000d32:	4b06      	ldr	r3, [pc, #24]	; (8000d4c <Q_onAssert+0x24>)
 8000d34:	f107 0408 	add.w	r4, r7, #8
 8000d38:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000d3a:	c407      	stmia	r4!, {r0, r1, r2}
 8000d3c:	7023      	strb	r3, [r4, #0]
	uart_log(log);
 8000d3e:	f107 0308 	add.w	r3, r7, #8
 8000d42:	4618      	mov	r0, r3
 8000d44:	f7ff fc8c 	bl	8000660 <uart_log>
	while(1);
 8000d48:	e7fe      	b.n	8000d48 <Q_onAssert+0x20>
 8000d4a:	bf00      	nop
 8000d4c:	08003320 	.word	0x08003320

08000d50 <HAL_GPIO_EXTI_Callback>:
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	4603      	mov	r3, r0
 8000d58:	80fb      	strh	r3, [r7, #6]

	if(GPIO_Pin == BUTTON_2_Pin){
 8000d5a:	88fb      	ldrh	r3, [r7, #6]
 8000d5c:	2b04      	cmp	r3, #4
 8000d5e:	d103      	bne.n	8000d68 <HAL_GPIO_EXTI_Callback+0x18>
		Lamp_pushSwitch(&lamp);
 8000d60:	4805      	ldr	r0, [pc, #20]	; (8000d78 <HAL_GPIO_EXTI_Callback+0x28>)
 8000d62:	f001 fec3 	bl	8002aec <Lamp_pushSwitch>
	}else{
		Lamp_holdSwitch(&lamp);
	}
}
 8000d66:	e002      	b.n	8000d6e <HAL_GPIO_EXTI_Callback+0x1e>
		Lamp_holdSwitch(&lamp);
 8000d68:	4803      	ldr	r0, [pc, #12]	; (8000d78 <HAL_GPIO_EXTI_Callback+0x28>)
 8000d6a:	f001 fee1 	bl	8002b30 <Lamp_holdSwitch>
}
 8000d6e:	bf00      	nop
 8000d70:	3708      	adds	r7, #8
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	2000006c 	.word	0x2000006c

08000d7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d80:	b672      	cpsid	i
}
 8000d82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d84:	e7fe      	b.n	8000d84 <Error_Handler+0x8>
	...

08000d88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b082      	sub	sp, #8
 8000d8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d8e:	2300      	movs	r3, #0
 8000d90:	607b      	str	r3, [r7, #4]
 8000d92:	4b10      	ldr	r3, [pc, #64]	; (8000dd4 <HAL_MspInit+0x4c>)
 8000d94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d96:	4a0f      	ldr	r2, [pc, #60]	; (8000dd4 <HAL_MspInit+0x4c>)
 8000d98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d9c:	6453      	str	r3, [r2, #68]	; 0x44
 8000d9e:	4b0d      	ldr	r3, [pc, #52]	; (8000dd4 <HAL_MspInit+0x4c>)
 8000da0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000da2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000da6:	607b      	str	r3, [r7, #4]
 8000da8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000daa:	2300      	movs	r3, #0
 8000dac:	603b      	str	r3, [r7, #0]
 8000dae:	4b09      	ldr	r3, [pc, #36]	; (8000dd4 <HAL_MspInit+0x4c>)
 8000db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000db2:	4a08      	ldr	r2, [pc, #32]	; (8000dd4 <HAL_MspInit+0x4c>)
 8000db4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000db8:	6413      	str	r3, [r2, #64]	; 0x40
 8000dba:	4b06      	ldr	r3, [pc, #24]	; (8000dd4 <HAL_MspInit+0x4c>)
 8000dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dc2:	603b      	str	r3, [r7, #0]
 8000dc4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000dc6:	2007      	movs	r0, #7
 8000dc8:	f000 fa00 	bl	80011cc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dcc:	bf00      	nop
 8000dce:	3708      	adds	r7, #8
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	40023800 	.word	0x40023800

08000dd8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b08a      	sub	sp, #40	; 0x28
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de0:	f107 0314 	add.w	r3, r7, #20
 8000de4:	2200      	movs	r2, #0
 8000de6:	601a      	str	r2, [r3, #0]
 8000de8:	605a      	str	r2, [r3, #4]
 8000dea:	609a      	str	r2, [r3, #8]
 8000dec:	60da      	str	r2, [r3, #12]
 8000dee:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a19      	ldr	r2, [pc, #100]	; (8000e5c <HAL_UART_MspInit+0x84>)
 8000df6:	4293      	cmp	r3, r2
 8000df8:	d12c      	bne.n	8000e54 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	613b      	str	r3, [r7, #16]
 8000dfe:	4b18      	ldr	r3, [pc, #96]	; (8000e60 <HAL_UART_MspInit+0x88>)
 8000e00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e02:	4a17      	ldr	r2, [pc, #92]	; (8000e60 <HAL_UART_MspInit+0x88>)
 8000e04:	f043 0310 	orr.w	r3, r3, #16
 8000e08:	6453      	str	r3, [r2, #68]	; 0x44
 8000e0a:	4b15      	ldr	r3, [pc, #84]	; (8000e60 <HAL_UART_MspInit+0x88>)
 8000e0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e0e:	f003 0310 	and.w	r3, r3, #16
 8000e12:	613b      	str	r3, [r7, #16]
 8000e14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e16:	2300      	movs	r3, #0
 8000e18:	60fb      	str	r3, [r7, #12]
 8000e1a:	4b11      	ldr	r3, [pc, #68]	; (8000e60 <HAL_UART_MspInit+0x88>)
 8000e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1e:	4a10      	ldr	r2, [pc, #64]	; (8000e60 <HAL_UART_MspInit+0x88>)
 8000e20:	f043 0301 	orr.w	r3, r3, #1
 8000e24:	6313      	str	r3, [r2, #48]	; 0x30
 8000e26:	4b0e      	ldr	r3, [pc, #56]	; (8000e60 <HAL_UART_MspInit+0x88>)
 8000e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2a:	f003 0301 	and.w	r3, r3, #1
 8000e2e:	60fb      	str	r3, [r7, #12]
 8000e30:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000e32:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000e36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e38:	2302      	movs	r3, #2
 8000e3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e40:	2303      	movs	r3, #3
 8000e42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000e44:	2307      	movs	r3, #7
 8000e46:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e48:	f107 0314 	add.w	r3, r7, #20
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	4805      	ldr	r0, [pc, #20]	; (8000e64 <HAL_UART_MspInit+0x8c>)
 8000e50:	f000 f9fe 	bl	8001250 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000e54:	bf00      	nop
 8000e56:	3728      	adds	r7, #40	; 0x28
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	40011000 	.word	0x40011000
 8000e60:	40023800 	.word	0x40023800
 8000e64:	40020000 	.word	0x40020000

08000e68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e6c:	e7fe      	b.n	8000e6c <NMI_Handler+0x4>

08000e6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e6e:	b480      	push	{r7}
 8000e70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e72:	e7fe      	b.n	8000e72 <HardFault_Handler+0x4>

08000e74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e78:	e7fe      	b.n	8000e78 <MemManage_Handler+0x4>

08000e7a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e7a:	b480      	push	{r7}
 8000e7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e7e:	e7fe      	b.n	8000e7e <BusFault_Handler+0x4>

08000e80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e84:	e7fe      	b.n	8000e84 <UsageFault_Handler+0x4>

08000e86 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e86:	b480      	push	{r7}
 8000e88:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e8a:	bf00      	nop
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e92:	4770      	bx	lr

08000e94 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_1_Pin);
 8000e98:	2002      	movs	r0, #2
 8000e9a:	f000 fbb9 	bl	8001610 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000e9e:	bf00      	nop
 8000ea0:	bd80      	pop	{r7, pc}

08000ea2 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8000ea2:	b580      	push	{r7, lr}
 8000ea4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_2_Pin);
 8000ea6:	2004      	movs	r0, #4
 8000ea8:	f000 fbb2 	bl	8001610 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8000eac:	bf00      	nop
 8000eae:	bd80      	pop	{r7, pc}

08000eb0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000eb4:	4b06      	ldr	r3, [pc, #24]	; (8000ed0 <SystemInit+0x20>)
 8000eb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000eba:	4a05      	ldr	r2, [pc, #20]	; (8000ed0 <SystemInit+0x20>)
 8000ebc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ec0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ec4:	bf00      	nop
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop
 8000ed0:	e000ed00 	.word	0xe000ed00

08000ed4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000ed4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f0c <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ed8:	480d      	ldr	r0, [pc, #52]	; (8000f10 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000eda:	490e      	ldr	r1, [pc, #56]	; (8000f14 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000edc:	4a0e      	ldr	r2, [pc, #56]	; (8000f18 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ede:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ee0:	e002      	b.n	8000ee8 <LoopCopyDataInit>

08000ee2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ee2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ee4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ee6:	3304      	adds	r3, #4

08000ee8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ee8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000eea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000eec:	d3f9      	bcc.n	8000ee2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000eee:	4a0b      	ldr	r2, [pc, #44]	; (8000f1c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ef0:	4c0b      	ldr	r4, [pc, #44]	; (8000f20 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000ef2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ef4:	e001      	b.n	8000efa <LoopFillZerobss>

08000ef6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ef6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ef8:	3204      	adds	r2, #4

08000efa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000efa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000efc:	d3fb      	bcc.n	8000ef6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000efe:	f7ff ffd7 	bl	8000eb0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f02:	f002 f997 	bl	8003234 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f06:	f7ff fbc1 	bl	800068c <main>
  bx  lr    
 8000f0a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000f0c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000f10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f14:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000f18:	0800338c 	.word	0x0800338c
  ldr r2, =_sbss
 8000f1c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000f20:	20000114 	.word	0x20000114

08000f24 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f24:	e7fe      	b.n	8000f24 <ADC_IRQHandler>
	...

08000f28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f2c:	4b0e      	ldr	r3, [pc, #56]	; (8000f68 <HAL_Init+0x40>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4a0d      	ldr	r2, [pc, #52]	; (8000f68 <HAL_Init+0x40>)
 8000f32:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f36:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f38:	4b0b      	ldr	r3, [pc, #44]	; (8000f68 <HAL_Init+0x40>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	4a0a      	ldr	r2, [pc, #40]	; (8000f68 <HAL_Init+0x40>)
 8000f3e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f42:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f44:	4b08      	ldr	r3, [pc, #32]	; (8000f68 <HAL_Init+0x40>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	4a07      	ldr	r2, [pc, #28]	; (8000f68 <HAL_Init+0x40>)
 8000f4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f4e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f50:	2003      	movs	r0, #3
 8000f52:	f000 f93b 	bl	80011cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f56:	2000      	movs	r0, #0
 8000f58:	f000 f808 	bl	8000f6c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f5c:	f7ff ff14 	bl	8000d88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f60:	2300      	movs	r3, #0
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	40023c00 	.word	0x40023c00

08000f6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b082      	sub	sp, #8
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f74:	4b12      	ldr	r3, [pc, #72]	; (8000fc0 <HAL_InitTick+0x54>)
 8000f76:	681a      	ldr	r2, [r3, #0]
 8000f78:	4b12      	ldr	r3, [pc, #72]	; (8000fc4 <HAL_InitTick+0x58>)
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f82:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f86:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f000 f953 	bl	8001236 <HAL_SYSTICK_Config>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d001      	beq.n	8000f9a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f96:	2301      	movs	r3, #1
 8000f98:	e00e      	b.n	8000fb8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	2b0f      	cmp	r3, #15
 8000f9e:	d80a      	bhi.n	8000fb6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	6879      	ldr	r1, [r7, #4]
 8000fa4:	f04f 30ff 	mov.w	r0, #4294967295
 8000fa8:	f000 f91b 	bl	80011e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fac:	4a06      	ldr	r2, [pc, #24]	; (8000fc8 <HAL_InitTick+0x5c>)
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	e000      	b.n	8000fb8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fb6:	2301      	movs	r3, #1
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	3708      	adds	r7, #8
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	20000000 	.word	0x20000000
 8000fc4:	20000008 	.word	0x20000008
 8000fc8:	20000004 	.word	0x20000004

08000fcc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
  return uwTick;
 8000fd0:	4b03      	ldr	r3, [pc, #12]	; (8000fe0 <HAL_GetTick+0x14>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
}
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr
 8000fde:	bf00      	nop
 8000fe0:	20000084 	.word	0x20000084

08000fe4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b084      	sub	sp, #16
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fec:	f7ff ffee 	bl	8000fcc <HAL_GetTick>
 8000ff0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ffc:	d005      	beq.n	800100a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ffe:	4b0a      	ldr	r3, [pc, #40]	; (8001028 <HAL_Delay+0x44>)
 8001000:	781b      	ldrb	r3, [r3, #0]
 8001002:	461a      	mov	r2, r3
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	4413      	add	r3, r2
 8001008:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800100a:	bf00      	nop
 800100c:	f7ff ffde 	bl	8000fcc <HAL_GetTick>
 8001010:	4602      	mov	r2, r0
 8001012:	68bb      	ldr	r3, [r7, #8]
 8001014:	1ad3      	subs	r3, r2, r3
 8001016:	68fa      	ldr	r2, [r7, #12]
 8001018:	429a      	cmp	r2, r3
 800101a:	d8f7      	bhi.n	800100c <HAL_Delay+0x28>
  {
  }
}
 800101c:	bf00      	nop
 800101e:	bf00      	nop
 8001020:	3710      	adds	r7, #16
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	20000008 	.word	0x20000008

0800102c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800102c:	b480      	push	{r7}
 800102e:	b085      	sub	sp, #20
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	f003 0307 	and.w	r3, r3, #7
 800103a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800103c:	4b0c      	ldr	r3, [pc, #48]	; (8001070 <__NVIC_SetPriorityGrouping+0x44>)
 800103e:	68db      	ldr	r3, [r3, #12]
 8001040:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001042:	68ba      	ldr	r2, [r7, #8]
 8001044:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001048:	4013      	ands	r3, r2
 800104a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001050:	68bb      	ldr	r3, [r7, #8]
 8001052:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001054:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001058:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800105c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800105e:	4a04      	ldr	r2, [pc, #16]	; (8001070 <__NVIC_SetPriorityGrouping+0x44>)
 8001060:	68bb      	ldr	r3, [r7, #8]
 8001062:	60d3      	str	r3, [r2, #12]
}
 8001064:	bf00      	nop
 8001066:	3714      	adds	r7, #20
 8001068:	46bd      	mov	sp, r7
 800106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106e:	4770      	bx	lr
 8001070:	e000ed00 	.word	0xe000ed00

08001074 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001078:	4b04      	ldr	r3, [pc, #16]	; (800108c <__NVIC_GetPriorityGrouping+0x18>)
 800107a:	68db      	ldr	r3, [r3, #12]
 800107c:	0a1b      	lsrs	r3, r3, #8
 800107e:	f003 0307 	and.w	r3, r3, #7
}
 8001082:	4618      	mov	r0, r3
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr
 800108c:	e000ed00 	.word	0xe000ed00

08001090 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001090:	b480      	push	{r7}
 8001092:	b083      	sub	sp, #12
 8001094:	af00      	add	r7, sp, #0
 8001096:	4603      	mov	r3, r0
 8001098:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800109a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	db0b      	blt.n	80010ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010a2:	79fb      	ldrb	r3, [r7, #7]
 80010a4:	f003 021f 	and.w	r2, r3, #31
 80010a8:	4907      	ldr	r1, [pc, #28]	; (80010c8 <__NVIC_EnableIRQ+0x38>)
 80010aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ae:	095b      	lsrs	r3, r3, #5
 80010b0:	2001      	movs	r0, #1
 80010b2:	fa00 f202 	lsl.w	r2, r0, r2
 80010b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80010ba:	bf00      	nop
 80010bc:	370c      	adds	r7, #12
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr
 80010c6:	bf00      	nop
 80010c8:	e000e100 	.word	0xe000e100

080010cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b083      	sub	sp, #12
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	4603      	mov	r3, r0
 80010d4:	6039      	str	r1, [r7, #0]
 80010d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	db0a      	blt.n	80010f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	b2da      	uxtb	r2, r3
 80010e4:	490c      	ldr	r1, [pc, #48]	; (8001118 <__NVIC_SetPriority+0x4c>)
 80010e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ea:	0112      	lsls	r2, r2, #4
 80010ec:	b2d2      	uxtb	r2, r2
 80010ee:	440b      	add	r3, r1
 80010f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010f4:	e00a      	b.n	800110c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	b2da      	uxtb	r2, r3
 80010fa:	4908      	ldr	r1, [pc, #32]	; (800111c <__NVIC_SetPriority+0x50>)
 80010fc:	79fb      	ldrb	r3, [r7, #7]
 80010fe:	f003 030f 	and.w	r3, r3, #15
 8001102:	3b04      	subs	r3, #4
 8001104:	0112      	lsls	r2, r2, #4
 8001106:	b2d2      	uxtb	r2, r2
 8001108:	440b      	add	r3, r1
 800110a:	761a      	strb	r2, [r3, #24]
}
 800110c:	bf00      	nop
 800110e:	370c      	adds	r7, #12
 8001110:	46bd      	mov	sp, r7
 8001112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001116:	4770      	bx	lr
 8001118:	e000e100 	.word	0xe000e100
 800111c:	e000ed00 	.word	0xe000ed00

08001120 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001120:	b480      	push	{r7}
 8001122:	b089      	sub	sp, #36	; 0x24
 8001124:	af00      	add	r7, sp, #0
 8001126:	60f8      	str	r0, [r7, #12]
 8001128:	60b9      	str	r1, [r7, #8]
 800112a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	f003 0307 	and.w	r3, r3, #7
 8001132:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001134:	69fb      	ldr	r3, [r7, #28]
 8001136:	f1c3 0307 	rsb	r3, r3, #7
 800113a:	2b04      	cmp	r3, #4
 800113c:	bf28      	it	cs
 800113e:	2304      	movcs	r3, #4
 8001140:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001142:	69fb      	ldr	r3, [r7, #28]
 8001144:	3304      	adds	r3, #4
 8001146:	2b06      	cmp	r3, #6
 8001148:	d902      	bls.n	8001150 <NVIC_EncodePriority+0x30>
 800114a:	69fb      	ldr	r3, [r7, #28]
 800114c:	3b03      	subs	r3, #3
 800114e:	e000      	b.n	8001152 <NVIC_EncodePriority+0x32>
 8001150:	2300      	movs	r3, #0
 8001152:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001154:	f04f 32ff 	mov.w	r2, #4294967295
 8001158:	69bb      	ldr	r3, [r7, #24]
 800115a:	fa02 f303 	lsl.w	r3, r2, r3
 800115e:	43da      	mvns	r2, r3
 8001160:	68bb      	ldr	r3, [r7, #8]
 8001162:	401a      	ands	r2, r3
 8001164:	697b      	ldr	r3, [r7, #20]
 8001166:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001168:	f04f 31ff 	mov.w	r1, #4294967295
 800116c:	697b      	ldr	r3, [r7, #20]
 800116e:	fa01 f303 	lsl.w	r3, r1, r3
 8001172:	43d9      	mvns	r1, r3
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001178:	4313      	orrs	r3, r2
         );
}
 800117a:	4618      	mov	r0, r3
 800117c:	3724      	adds	r7, #36	; 0x24
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr
	...

08001188 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	3b01      	subs	r3, #1
 8001194:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001198:	d301      	bcc.n	800119e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800119a:	2301      	movs	r3, #1
 800119c:	e00f      	b.n	80011be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800119e:	4a0a      	ldr	r2, [pc, #40]	; (80011c8 <SysTick_Config+0x40>)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	3b01      	subs	r3, #1
 80011a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011a6:	210f      	movs	r1, #15
 80011a8:	f04f 30ff 	mov.w	r0, #4294967295
 80011ac:	f7ff ff8e 	bl	80010cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011b0:	4b05      	ldr	r3, [pc, #20]	; (80011c8 <SysTick_Config+0x40>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011b6:	4b04      	ldr	r3, [pc, #16]	; (80011c8 <SysTick_Config+0x40>)
 80011b8:	2207      	movs	r2, #7
 80011ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011bc:	2300      	movs	r3, #0
}
 80011be:	4618      	mov	r0, r3
 80011c0:	3708      	adds	r7, #8
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	e000e010 	.word	0xe000e010

080011cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011d4:	6878      	ldr	r0, [r7, #4]
 80011d6:	f7ff ff29 	bl	800102c <__NVIC_SetPriorityGrouping>
}
 80011da:	bf00      	nop
 80011dc:	3708      	adds	r7, #8
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}

080011e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011e2:	b580      	push	{r7, lr}
 80011e4:	b086      	sub	sp, #24
 80011e6:	af00      	add	r7, sp, #0
 80011e8:	4603      	mov	r3, r0
 80011ea:	60b9      	str	r1, [r7, #8]
 80011ec:	607a      	str	r2, [r7, #4]
 80011ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011f0:	2300      	movs	r3, #0
 80011f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011f4:	f7ff ff3e 	bl	8001074 <__NVIC_GetPriorityGrouping>
 80011f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011fa:	687a      	ldr	r2, [r7, #4]
 80011fc:	68b9      	ldr	r1, [r7, #8]
 80011fe:	6978      	ldr	r0, [r7, #20]
 8001200:	f7ff ff8e 	bl	8001120 <NVIC_EncodePriority>
 8001204:	4602      	mov	r2, r0
 8001206:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800120a:	4611      	mov	r1, r2
 800120c:	4618      	mov	r0, r3
 800120e:	f7ff ff5d 	bl	80010cc <__NVIC_SetPriority>
}
 8001212:	bf00      	nop
 8001214:	3718      	adds	r7, #24
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}

0800121a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800121a:	b580      	push	{r7, lr}
 800121c:	b082      	sub	sp, #8
 800121e:	af00      	add	r7, sp, #0
 8001220:	4603      	mov	r3, r0
 8001222:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001224:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001228:	4618      	mov	r0, r3
 800122a:	f7ff ff31 	bl	8001090 <__NVIC_EnableIRQ>
}
 800122e:	bf00      	nop
 8001230:	3708      	adds	r7, #8
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}

08001236 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001236:	b580      	push	{r7, lr}
 8001238:	b082      	sub	sp, #8
 800123a:	af00      	add	r7, sp, #0
 800123c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800123e:	6878      	ldr	r0, [r7, #4]
 8001240:	f7ff ffa2 	bl	8001188 <SysTick_Config>
 8001244:	4603      	mov	r3, r0
}
 8001246:	4618      	mov	r0, r3
 8001248:	3708      	adds	r7, #8
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
	...

08001250 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001250:	b480      	push	{r7}
 8001252:	b089      	sub	sp, #36	; 0x24
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
 8001258:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800125a:	2300      	movs	r3, #0
 800125c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800125e:	2300      	movs	r3, #0
 8001260:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001262:	2300      	movs	r3, #0
 8001264:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001266:	2300      	movs	r3, #0
 8001268:	61fb      	str	r3, [r7, #28]
 800126a:	e177      	b.n	800155c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800126c:	2201      	movs	r2, #1
 800126e:	69fb      	ldr	r3, [r7, #28]
 8001270:	fa02 f303 	lsl.w	r3, r2, r3
 8001274:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	697a      	ldr	r2, [r7, #20]
 800127c:	4013      	ands	r3, r2
 800127e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001280:	693a      	ldr	r2, [r7, #16]
 8001282:	697b      	ldr	r3, [r7, #20]
 8001284:	429a      	cmp	r2, r3
 8001286:	f040 8166 	bne.w	8001556 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	f003 0303 	and.w	r3, r3, #3
 8001292:	2b01      	cmp	r3, #1
 8001294:	d005      	beq.n	80012a2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800129e:	2b02      	cmp	r3, #2
 80012a0:	d130      	bne.n	8001304 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	689b      	ldr	r3, [r3, #8]
 80012a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80012a8:	69fb      	ldr	r3, [r7, #28]
 80012aa:	005b      	lsls	r3, r3, #1
 80012ac:	2203      	movs	r2, #3
 80012ae:	fa02 f303 	lsl.w	r3, r2, r3
 80012b2:	43db      	mvns	r3, r3
 80012b4:	69ba      	ldr	r2, [r7, #24]
 80012b6:	4013      	ands	r3, r2
 80012b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	68da      	ldr	r2, [r3, #12]
 80012be:	69fb      	ldr	r3, [r7, #28]
 80012c0:	005b      	lsls	r3, r3, #1
 80012c2:	fa02 f303 	lsl.w	r3, r2, r3
 80012c6:	69ba      	ldr	r2, [r7, #24]
 80012c8:	4313      	orrs	r3, r2
 80012ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	69ba      	ldr	r2, [r7, #24]
 80012d0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012d8:	2201      	movs	r2, #1
 80012da:	69fb      	ldr	r3, [r7, #28]
 80012dc:	fa02 f303 	lsl.w	r3, r2, r3
 80012e0:	43db      	mvns	r3, r3
 80012e2:	69ba      	ldr	r2, [r7, #24]
 80012e4:	4013      	ands	r3, r2
 80012e6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	091b      	lsrs	r3, r3, #4
 80012ee:	f003 0201 	and.w	r2, r3, #1
 80012f2:	69fb      	ldr	r3, [r7, #28]
 80012f4:	fa02 f303 	lsl.w	r3, r2, r3
 80012f8:	69ba      	ldr	r2, [r7, #24]
 80012fa:	4313      	orrs	r3, r2
 80012fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	69ba      	ldr	r2, [r7, #24]
 8001302:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	f003 0303 	and.w	r3, r3, #3
 800130c:	2b03      	cmp	r3, #3
 800130e:	d017      	beq.n	8001340 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	68db      	ldr	r3, [r3, #12]
 8001314:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001316:	69fb      	ldr	r3, [r7, #28]
 8001318:	005b      	lsls	r3, r3, #1
 800131a:	2203      	movs	r2, #3
 800131c:	fa02 f303 	lsl.w	r3, r2, r3
 8001320:	43db      	mvns	r3, r3
 8001322:	69ba      	ldr	r2, [r7, #24]
 8001324:	4013      	ands	r3, r2
 8001326:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	689a      	ldr	r2, [r3, #8]
 800132c:	69fb      	ldr	r3, [r7, #28]
 800132e:	005b      	lsls	r3, r3, #1
 8001330:	fa02 f303 	lsl.w	r3, r2, r3
 8001334:	69ba      	ldr	r2, [r7, #24]
 8001336:	4313      	orrs	r3, r2
 8001338:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	69ba      	ldr	r2, [r7, #24]
 800133e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	f003 0303 	and.w	r3, r3, #3
 8001348:	2b02      	cmp	r3, #2
 800134a:	d123      	bne.n	8001394 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800134c:	69fb      	ldr	r3, [r7, #28]
 800134e:	08da      	lsrs	r2, r3, #3
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	3208      	adds	r2, #8
 8001354:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001358:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800135a:	69fb      	ldr	r3, [r7, #28]
 800135c:	f003 0307 	and.w	r3, r3, #7
 8001360:	009b      	lsls	r3, r3, #2
 8001362:	220f      	movs	r2, #15
 8001364:	fa02 f303 	lsl.w	r3, r2, r3
 8001368:	43db      	mvns	r3, r3
 800136a:	69ba      	ldr	r2, [r7, #24]
 800136c:	4013      	ands	r3, r2
 800136e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	691a      	ldr	r2, [r3, #16]
 8001374:	69fb      	ldr	r3, [r7, #28]
 8001376:	f003 0307 	and.w	r3, r3, #7
 800137a:	009b      	lsls	r3, r3, #2
 800137c:	fa02 f303 	lsl.w	r3, r2, r3
 8001380:	69ba      	ldr	r2, [r7, #24]
 8001382:	4313      	orrs	r3, r2
 8001384:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001386:	69fb      	ldr	r3, [r7, #28]
 8001388:	08da      	lsrs	r2, r3, #3
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	3208      	adds	r2, #8
 800138e:	69b9      	ldr	r1, [r7, #24]
 8001390:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800139a:	69fb      	ldr	r3, [r7, #28]
 800139c:	005b      	lsls	r3, r3, #1
 800139e:	2203      	movs	r2, #3
 80013a0:	fa02 f303 	lsl.w	r3, r2, r3
 80013a4:	43db      	mvns	r3, r3
 80013a6:	69ba      	ldr	r2, [r7, #24]
 80013a8:	4013      	ands	r3, r2
 80013aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	f003 0203 	and.w	r2, r3, #3
 80013b4:	69fb      	ldr	r3, [r7, #28]
 80013b6:	005b      	lsls	r3, r3, #1
 80013b8:	fa02 f303 	lsl.w	r3, r2, r3
 80013bc:	69ba      	ldr	r2, [r7, #24]
 80013be:	4313      	orrs	r3, r2
 80013c0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	69ba      	ldr	r2, [r7, #24]
 80013c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	f000 80c0 	beq.w	8001556 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013d6:	2300      	movs	r3, #0
 80013d8:	60fb      	str	r3, [r7, #12]
 80013da:	4b66      	ldr	r3, [pc, #408]	; (8001574 <HAL_GPIO_Init+0x324>)
 80013dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013de:	4a65      	ldr	r2, [pc, #404]	; (8001574 <HAL_GPIO_Init+0x324>)
 80013e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013e4:	6453      	str	r3, [r2, #68]	; 0x44
 80013e6:	4b63      	ldr	r3, [pc, #396]	; (8001574 <HAL_GPIO_Init+0x324>)
 80013e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013ee:	60fb      	str	r3, [r7, #12]
 80013f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80013f2:	4a61      	ldr	r2, [pc, #388]	; (8001578 <HAL_GPIO_Init+0x328>)
 80013f4:	69fb      	ldr	r3, [r7, #28]
 80013f6:	089b      	lsrs	r3, r3, #2
 80013f8:	3302      	adds	r3, #2
 80013fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001400:	69fb      	ldr	r3, [r7, #28]
 8001402:	f003 0303 	and.w	r3, r3, #3
 8001406:	009b      	lsls	r3, r3, #2
 8001408:	220f      	movs	r2, #15
 800140a:	fa02 f303 	lsl.w	r3, r2, r3
 800140e:	43db      	mvns	r3, r3
 8001410:	69ba      	ldr	r2, [r7, #24]
 8001412:	4013      	ands	r3, r2
 8001414:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	4a58      	ldr	r2, [pc, #352]	; (800157c <HAL_GPIO_Init+0x32c>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d037      	beq.n	800148e <HAL_GPIO_Init+0x23e>
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	4a57      	ldr	r2, [pc, #348]	; (8001580 <HAL_GPIO_Init+0x330>)
 8001422:	4293      	cmp	r3, r2
 8001424:	d031      	beq.n	800148a <HAL_GPIO_Init+0x23a>
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	4a56      	ldr	r2, [pc, #344]	; (8001584 <HAL_GPIO_Init+0x334>)
 800142a:	4293      	cmp	r3, r2
 800142c:	d02b      	beq.n	8001486 <HAL_GPIO_Init+0x236>
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	4a55      	ldr	r2, [pc, #340]	; (8001588 <HAL_GPIO_Init+0x338>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d025      	beq.n	8001482 <HAL_GPIO_Init+0x232>
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	4a54      	ldr	r2, [pc, #336]	; (800158c <HAL_GPIO_Init+0x33c>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d01f      	beq.n	800147e <HAL_GPIO_Init+0x22e>
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	4a53      	ldr	r2, [pc, #332]	; (8001590 <HAL_GPIO_Init+0x340>)
 8001442:	4293      	cmp	r3, r2
 8001444:	d019      	beq.n	800147a <HAL_GPIO_Init+0x22a>
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	4a52      	ldr	r2, [pc, #328]	; (8001594 <HAL_GPIO_Init+0x344>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d013      	beq.n	8001476 <HAL_GPIO_Init+0x226>
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	4a51      	ldr	r2, [pc, #324]	; (8001598 <HAL_GPIO_Init+0x348>)
 8001452:	4293      	cmp	r3, r2
 8001454:	d00d      	beq.n	8001472 <HAL_GPIO_Init+0x222>
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	4a50      	ldr	r2, [pc, #320]	; (800159c <HAL_GPIO_Init+0x34c>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d007      	beq.n	800146e <HAL_GPIO_Init+0x21e>
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	4a4f      	ldr	r2, [pc, #316]	; (80015a0 <HAL_GPIO_Init+0x350>)
 8001462:	4293      	cmp	r3, r2
 8001464:	d101      	bne.n	800146a <HAL_GPIO_Init+0x21a>
 8001466:	2309      	movs	r3, #9
 8001468:	e012      	b.n	8001490 <HAL_GPIO_Init+0x240>
 800146a:	230a      	movs	r3, #10
 800146c:	e010      	b.n	8001490 <HAL_GPIO_Init+0x240>
 800146e:	2308      	movs	r3, #8
 8001470:	e00e      	b.n	8001490 <HAL_GPIO_Init+0x240>
 8001472:	2307      	movs	r3, #7
 8001474:	e00c      	b.n	8001490 <HAL_GPIO_Init+0x240>
 8001476:	2306      	movs	r3, #6
 8001478:	e00a      	b.n	8001490 <HAL_GPIO_Init+0x240>
 800147a:	2305      	movs	r3, #5
 800147c:	e008      	b.n	8001490 <HAL_GPIO_Init+0x240>
 800147e:	2304      	movs	r3, #4
 8001480:	e006      	b.n	8001490 <HAL_GPIO_Init+0x240>
 8001482:	2303      	movs	r3, #3
 8001484:	e004      	b.n	8001490 <HAL_GPIO_Init+0x240>
 8001486:	2302      	movs	r3, #2
 8001488:	e002      	b.n	8001490 <HAL_GPIO_Init+0x240>
 800148a:	2301      	movs	r3, #1
 800148c:	e000      	b.n	8001490 <HAL_GPIO_Init+0x240>
 800148e:	2300      	movs	r3, #0
 8001490:	69fa      	ldr	r2, [r7, #28]
 8001492:	f002 0203 	and.w	r2, r2, #3
 8001496:	0092      	lsls	r2, r2, #2
 8001498:	4093      	lsls	r3, r2
 800149a:	69ba      	ldr	r2, [r7, #24]
 800149c:	4313      	orrs	r3, r2
 800149e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80014a0:	4935      	ldr	r1, [pc, #212]	; (8001578 <HAL_GPIO_Init+0x328>)
 80014a2:	69fb      	ldr	r3, [r7, #28]
 80014a4:	089b      	lsrs	r3, r3, #2
 80014a6:	3302      	adds	r3, #2
 80014a8:	69ba      	ldr	r2, [r7, #24]
 80014aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014ae:	4b3d      	ldr	r3, [pc, #244]	; (80015a4 <HAL_GPIO_Init+0x354>)
 80014b0:	689b      	ldr	r3, [r3, #8]
 80014b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014b4:	693b      	ldr	r3, [r7, #16]
 80014b6:	43db      	mvns	r3, r3
 80014b8:	69ba      	ldr	r2, [r7, #24]
 80014ba:	4013      	ands	r3, r2
 80014bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d003      	beq.n	80014d2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80014ca:	69ba      	ldr	r2, [r7, #24]
 80014cc:	693b      	ldr	r3, [r7, #16]
 80014ce:	4313      	orrs	r3, r2
 80014d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80014d2:	4a34      	ldr	r2, [pc, #208]	; (80015a4 <HAL_GPIO_Init+0x354>)
 80014d4:	69bb      	ldr	r3, [r7, #24]
 80014d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80014d8:	4b32      	ldr	r3, [pc, #200]	; (80015a4 <HAL_GPIO_Init+0x354>)
 80014da:	68db      	ldr	r3, [r3, #12]
 80014dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014de:	693b      	ldr	r3, [r7, #16]
 80014e0:	43db      	mvns	r3, r3
 80014e2:	69ba      	ldr	r2, [r7, #24]
 80014e4:	4013      	ands	r3, r2
 80014e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d003      	beq.n	80014fc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80014f4:	69ba      	ldr	r2, [r7, #24]
 80014f6:	693b      	ldr	r3, [r7, #16]
 80014f8:	4313      	orrs	r3, r2
 80014fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80014fc:	4a29      	ldr	r2, [pc, #164]	; (80015a4 <HAL_GPIO_Init+0x354>)
 80014fe:	69bb      	ldr	r3, [r7, #24]
 8001500:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001502:	4b28      	ldr	r3, [pc, #160]	; (80015a4 <HAL_GPIO_Init+0x354>)
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001508:	693b      	ldr	r3, [r7, #16]
 800150a:	43db      	mvns	r3, r3
 800150c:	69ba      	ldr	r2, [r7, #24]
 800150e:	4013      	ands	r3, r2
 8001510:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800151a:	2b00      	cmp	r3, #0
 800151c:	d003      	beq.n	8001526 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800151e:	69ba      	ldr	r2, [r7, #24]
 8001520:	693b      	ldr	r3, [r7, #16]
 8001522:	4313      	orrs	r3, r2
 8001524:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001526:	4a1f      	ldr	r2, [pc, #124]	; (80015a4 <HAL_GPIO_Init+0x354>)
 8001528:	69bb      	ldr	r3, [r7, #24]
 800152a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800152c:	4b1d      	ldr	r3, [pc, #116]	; (80015a4 <HAL_GPIO_Init+0x354>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001532:	693b      	ldr	r3, [r7, #16]
 8001534:	43db      	mvns	r3, r3
 8001536:	69ba      	ldr	r2, [r7, #24]
 8001538:	4013      	ands	r3, r2
 800153a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001544:	2b00      	cmp	r3, #0
 8001546:	d003      	beq.n	8001550 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001548:	69ba      	ldr	r2, [r7, #24]
 800154a:	693b      	ldr	r3, [r7, #16]
 800154c:	4313      	orrs	r3, r2
 800154e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001550:	4a14      	ldr	r2, [pc, #80]	; (80015a4 <HAL_GPIO_Init+0x354>)
 8001552:	69bb      	ldr	r3, [r7, #24]
 8001554:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001556:	69fb      	ldr	r3, [r7, #28]
 8001558:	3301      	adds	r3, #1
 800155a:	61fb      	str	r3, [r7, #28]
 800155c:	69fb      	ldr	r3, [r7, #28]
 800155e:	2b0f      	cmp	r3, #15
 8001560:	f67f ae84 	bls.w	800126c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001564:	bf00      	nop
 8001566:	bf00      	nop
 8001568:	3724      	adds	r7, #36	; 0x24
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr
 8001572:	bf00      	nop
 8001574:	40023800 	.word	0x40023800
 8001578:	40013800 	.word	0x40013800
 800157c:	40020000 	.word	0x40020000
 8001580:	40020400 	.word	0x40020400
 8001584:	40020800 	.word	0x40020800
 8001588:	40020c00 	.word	0x40020c00
 800158c:	40021000 	.word	0x40021000
 8001590:	40021400 	.word	0x40021400
 8001594:	40021800 	.word	0x40021800
 8001598:	40021c00 	.word	0x40021c00
 800159c:	40022000 	.word	0x40022000
 80015a0:	40022400 	.word	0x40022400
 80015a4:	40013c00 	.word	0x40013c00

080015a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b083      	sub	sp, #12
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
 80015b0:	460b      	mov	r3, r1
 80015b2:	807b      	strh	r3, [r7, #2]
 80015b4:	4613      	mov	r3, r2
 80015b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80015b8:	787b      	ldrb	r3, [r7, #1]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d003      	beq.n	80015c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015be:	887a      	ldrh	r2, [r7, #2]
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80015c4:	e003      	b.n	80015ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80015c6:	887b      	ldrh	r3, [r7, #2]
 80015c8:	041a      	lsls	r2, r3, #16
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	619a      	str	r2, [r3, #24]
}
 80015ce:	bf00      	nop
 80015d0:	370c      	adds	r7, #12
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr

080015da <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80015da:	b480      	push	{r7}
 80015dc:	b085      	sub	sp, #20
 80015de:	af00      	add	r7, sp, #0
 80015e0:	6078      	str	r0, [r7, #4]
 80015e2:	460b      	mov	r3, r1
 80015e4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	695b      	ldr	r3, [r3, #20]
 80015ea:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80015ec:	887a      	ldrh	r2, [r7, #2]
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	4013      	ands	r3, r2
 80015f2:	041a      	lsls	r2, r3, #16
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	43d9      	mvns	r1, r3
 80015f8:	887b      	ldrh	r3, [r7, #2]
 80015fa:	400b      	ands	r3, r1
 80015fc:	431a      	orrs	r2, r3
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	619a      	str	r2, [r3, #24]
}
 8001602:	bf00      	nop
 8001604:	3714      	adds	r7, #20
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr
	...

08001610 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0
 8001616:	4603      	mov	r3, r0
 8001618:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800161a:	4b08      	ldr	r3, [pc, #32]	; (800163c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800161c:	695a      	ldr	r2, [r3, #20]
 800161e:	88fb      	ldrh	r3, [r7, #6]
 8001620:	4013      	ands	r3, r2
 8001622:	2b00      	cmp	r3, #0
 8001624:	d006      	beq.n	8001634 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001626:	4a05      	ldr	r2, [pc, #20]	; (800163c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001628:	88fb      	ldrh	r3, [r7, #6]
 800162a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800162c:	88fb      	ldrh	r3, [r7, #6]
 800162e:	4618      	mov	r0, r3
 8001630:	f7ff fb8e 	bl	8000d50 <HAL_GPIO_EXTI_Callback>
  }
}
 8001634:	bf00      	nop
 8001636:	3708      	adds	r7, #8
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}
 800163c:	40013c00 	.word	0x40013c00

08001640 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b086      	sub	sp, #24
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d101      	bne.n	8001652 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800164e:	2301      	movs	r3, #1
 8001650:	e267      	b.n	8001b22 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f003 0301 	and.w	r3, r3, #1
 800165a:	2b00      	cmp	r3, #0
 800165c:	d075      	beq.n	800174a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800165e:	4b88      	ldr	r3, [pc, #544]	; (8001880 <HAL_RCC_OscConfig+0x240>)
 8001660:	689b      	ldr	r3, [r3, #8]
 8001662:	f003 030c 	and.w	r3, r3, #12
 8001666:	2b04      	cmp	r3, #4
 8001668:	d00c      	beq.n	8001684 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800166a:	4b85      	ldr	r3, [pc, #532]	; (8001880 <HAL_RCC_OscConfig+0x240>)
 800166c:	689b      	ldr	r3, [r3, #8]
 800166e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001672:	2b08      	cmp	r3, #8
 8001674:	d112      	bne.n	800169c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001676:	4b82      	ldr	r3, [pc, #520]	; (8001880 <HAL_RCC_OscConfig+0x240>)
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800167e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001682:	d10b      	bne.n	800169c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001684:	4b7e      	ldr	r3, [pc, #504]	; (8001880 <HAL_RCC_OscConfig+0x240>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800168c:	2b00      	cmp	r3, #0
 800168e:	d05b      	beq.n	8001748 <HAL_RCC_OscConfig+0x108>
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d157      	bne.n	8001748 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001698:	2301      	movs	r3, #1
 800169a:	e242      	b.n	8001b22 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016a4:	d106      	bne.n	80016b4 <HAL_RCC_OscConfig+0x74>
 80016a6:	4b76      	ldr	r3, [pc, #472]	; (8001880 <HAL_RCC_OscConfig+0x240>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4a75      	ldr	r2, [pc, #468]	; (8001880 <HAL_RCC_OscConfig+0x240>)
 80016ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016b0:	6013      	str	r3, [r2, #0]
 80016b2:	e01d      	b.n	80016f0 <HAL_RCC_OscConfig+0xb0>
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80016bc:	d10c      	bne.n	80016d8 <HAL_RCC_OscConfig+0x98>
 80016be:	4b70      	ldr	r3, [pc, #448]	; (8001880 <HAL_RCC_OscConfig+0x240>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4a6f      	ldr	r2, [pc, #444]	; (8001880 <HAL_RCC_OscConfig+0x240>)
 80016c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016c8:	6013      	str	r3, [r2, #0]
 80016ca:	4b6d      	ldr	r3, [pc, #436]	; (8001880 <HAL_RCC_OscConfig+0x240>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4a6c      	ldr	r2, [pc, #432]	; (8001880 <HAL_RCC_OscConfig+0x240>)
 80016d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016d4:	6013      	str	r3, [r2, #0]
 80016d6:	e00b      	b.n	80016f0 <HAL_RCC_OscConfig+0xb0>
 80016d8:	4b69      	ldr	r3, [pc, #420]	; (8001880 <HAL_RCC_OscConfig+0x240>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4a68      	ldr	r2, [pc, #416]	; (8001880 <HAL_RCC_OscConfig+0x240>)
 80016de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016e2:	6013      	str	r3, [r2, #0]
 80016e4:	4b66      	ldr	r3, [pc, #408]	; (8001880 <HAL_RCC_OscConfig+0x240>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a65      	ldr	r2, [pc, #404]	; (8001880 <HAL_RCC_OscConfig+0x240>)
 80016ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d013      	beq.n	8001720 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016f8:	f7ff fc68 	bl	8000fcc <HAL_GetTick>
 80016fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016fe:	e008      	b.n	8001712 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001700:	f7ff fc64 	bl	8000fcc <HAL_GetTick>
 8001704:	4602      	mov	r2, r0
 8001706:	693b      	ldr	r3, [r7, #16]
 8001708:	1ad3      	subs	r3, r2, r3
 800170a:	2b64      	cmp	r3, #100	; 0x64
 800170c:	d901      	bls.n	8001712 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800170e:	2303      	movs	r3, #3
 8001710:	e207      	b.n	8001b22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001712:	4b5b      	ldr	r3, [pc, #364]	; (8001880 <HAL_RCC_OscConfig+0x240>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800171a:	2b00      	cmp	r3, #0
 800171c:	d0f0      	beq.n	8001700 <HAL_RCC_OscConfig+0xc0>
 800171e:	e014      	b.n	800174a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001720:	f7ff fc54 	bl	8000fcc <HAL_GetTick>
 8001724:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001726:	e008      	b.n	800173a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001728:	f7ff fc50 	bl	8000fcc <HAL_GetTick>
 800172c:	4602      	mov	r2, r0
 800172e:	693b      	ldr	r3, [r7, #16]
 8001730:	1ad3      	subs	r3, r2, r3
 8001732:	2b64      	cmp	r3, #100	; 0x64
 8001734:	d901      	bls.n	800173a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001736:	2303      	movs	r3, #3
 8001738:	e1f3      	b.n	8001b22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800173a:	4b51      	ldr	r3, [pc, #324]	; (8001880 <HAL_RCC_OscConfig+0x240>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001742:	2b00      	cmp	r3, #0
 8001744:	d1f0      	bne.n	8001728 <HAL_RCC_OscConfig+0xe8>
 8001746:	e000      	b.n	800174a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001748:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f003 0302 	and.w	r3, r3, #2
 8001752:	2b00      	cmp	r3, #0
 8001754:	d063      	beq.n	800181e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001756:	4b4a      	ldr	r3, [pc, #296]	; (8001880 <HAL_RCC_OscConfig+0x240>)
 8001758:	689b      	ldr	r3, [r3, #8]
 800175a:	f003 030c 	and.w	r3, r3, #12
 800175e:	2b00      	cmp	r3, #0
 8001760:	d00b      	beq.n	800177a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001762:	4b47      	ldr	r3, [pc, #284]	; (8001880 <HAL_RCC_OscConfig+0x240>)
 8001764:	689b      	ldr	r3, [r3, #8]
 8001766:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800176a:	2b08      	cmp	r3, #8
 800176c:	d11c      	bne.n	80017a8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800176e:	4b44      	ldr	r3, [pc, #272]	; (8001880 <HAL_RCC_OscConfig+0x240>)
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001776:	2b00      	cmp	r3, #0
 8001778:	d116      	bne.n	80017a8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800177a:	4b41      	ldr	r3, [pc, #260]	; (8001880 <HAL_RCC_OscConfig+0x240>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f003 0302 	and.w	r3, r3, #2
 8001782:	2b00      	cmp	r3, #0
 8001784:	d005      	beq.n	8001792 <HAL_RCC_OscConfig+0x152>
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	68db      	ldr	r3, [r3, #12]
 800178a:	2b01      	cmp	r3, #1
 800178c:	d001      	beq.n	8001792 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800178e:	2301      	movs	r3, #1
 8001790:	e1c7      	b.n	8001b22 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001792:	4b3b      	ldr	r3, [pc, #236]	; (8001880 <HAL_RCC_OscConfig+0x240>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	691b      	ldr	r3, [r3, #16]
 800179e:	00db      	lsls	r3, r3, #3
 80017a0:	4937      	ldr	r1, [pc, #220]	; (8001880 <HAL_RCC_OscConfig+0x240>)
 80017a2:	4313      	orrs	r3, r2
 80017a4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017a6:	e03a      	b.n	800181e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	68db      	ldr	r3, [r3, #12]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d020      	beq.n	80017f2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017b0:	4b34      	ldr	r3, [pc, #208]	; (8001884 <HAL_RCC_OscConfig+0x244>)
 80017b2:	2201      	movs	r2, #1
 80017b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017b6:	f7ff fc09 	bl	8000fcc <HAL_GetTick>
 80017ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017bc:	e008      	b.n	80017d0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017be:	f7ff fc05 	bl	8000fcc <HAL_GetTick>
 80017c2:	4602      	mov	r2, r0
 80017c4:	693b      	ldr	r3, [r7, #16]
 80017c6:	1ad3      	subs	r3, r2, r3
 80017c8:	2b02      	cmp	r3, #2
 80017ca:	d901      	bls.n	80017d0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80017cc:	2303      	movs	r3, #3
 80017ce:	e1a8      	b.n	8001b22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017d0:	4b2b      	ldr	r3, [pc, #172]	; (8001880 <HAL_RCC_OscConfig+0x240>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f003 0302 	and.w	r3, r3, #2
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d0f0      	beq.n	80017be <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017dc:	4b28      	ldr	r3, [pc, #160]	; (8001880 <HAL_RCC_OscConfig+0x240>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	691b      	ldr	r3, [r3, #16]
 80017e8:	00db      	lsls	r3, r3, #3
 80017ea:	4925      	ldr	r1, [pc, #148]	; (8001880 <HAL_RCC_OscConfig+0x240>)
 80017ec:	4313      	orrs	r3, r2
 80017ee:	600b      	str	r3, [r1, #0]
 80017f0:	e015      	b.n	800181e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017f2:	4b24      	ldr	r3, [pc, #144]	; (8001884 <HAL_RCC_OscConfig+0x244>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017f8:	f7ff fbe8 	bl	8000fcc <HAL_GetTick>
 80017fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017fe:	e008      	b.n	8001812 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001800:	f7ff fbe4 	bl	8000fcc <HAL_GetTick>
 8001804:	4602      	mov	r2, r0
 8001806:	693b      	ldr	r3, [r7, #16]
 8001808:	1ad3      	subs	r3, r2, r3
 800180a:	2b02      	cmp	r3, #2
 800180c:	d901      	bls.n	8001812 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800180e:	2303      	movs	r3, #3
 8001810:	e187      	b.n	8001b22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001812:	4b1b      	ldr	r3, [pc, #108]	; (8001880 <HAL_RCC_OscConfig+0x240>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f003 0302 	and.w	r3, r3, #2
 800181a:	2b00      	cmp	r3, #0
 800181c:	d1f0      	bne.n	8001800 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f003 0308 	and.w	r3, r3, #8
 8001826:	2b00      	cmp	r3, #0
 8001828:	d036      	beq.n	8001898 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	695b      	ldr	r3, [r3, #20]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d016      	beq.n	8001860 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001832:	4b15      	ldr	r3, [pc, #84]	; (8001888 <HAL_RCC_OscConfig+0x248>)
 8001834:	2201      	movs	r2, #1
 8001836:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001838:	f7ff fbc8 	bl	8000fcc <HAL_GetTick>
 800183c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800183e:	e008      	b.n	8001852 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001840:	f7ff fbc4 	bl	8000fcc <HAL_GetTick>
 8001844:	4602      	mov	r2, r0
 8001846:	693b      	ldr	r3, [r7, #16]
 8001848:	1ad3      	subs	r3, r2, r3
 800184a:	2b02      	cmp	r3, #2
 800184c:	d901      	bls.n	8001852 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800184e:	2303      	movs	r3, #3
 8001850:	e167      	b.n	8001b22 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001852:	4b0b      	ldr	r3, [pc, #44]	; (8001880 <HAL_RCC_OscConfig+0x240>)
 8001854:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001856:	f003 0302 	and.w	r3, r3, #2
 800185a:	2b00      	cmp	r3, #0
 800185c:	d0f0      	beq.n	8001840 <HAL_RCC_OscConfig+0x200>
 800185e:	e01b      	b.n	8001898 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001860:	4b09      	ldr	r3, [pc, #36]	; (8001888 <HAL_RCC_OscConfig+0x248>)
 8001862:	2200      	movs	r2, #0
 8001864:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001866:	f7ff fbb1 	bl	8000fcc <HAL_GetTick>
 800186a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800186c:	e00e      	b.n	800188c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800186e:	f7ff fbad 	bl	8000fcc <HAL_GetTick>
 8001872:	4602      	mov	r2, r0
 8001874:	693b      	ldr	r3, [r7, #16]
 8001876:	1ad3      	subs	r3, r2, r3
 8001878:	2b02      	cmp	r3, #2
 800187a:	d907      	bls.n	800188c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800187c:	2303      	movs	r3, #3
 800187e:	e150      	b.n	8001b22 <HAL_RCC_OscConfig+0x4e2>
 8001880:	40023800 	.word	0x40023800
 8001884:	42470000 	.word	0x42470000
 8001888:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800188c:	4b88      	ldr	r3, [pc, #544]	; (8001ab0 <HAL_RCC_OscConfig+0x470>)
 800188e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001890:	f003 0302 	and.w	r3, r3, #2
 8001894:	2b00      	cmp	r3, #0
 8001896:	d1ea      	bne.n	800186e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f003 0304 	and.w	r3, r3, #4
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	f000 8097 	beq.w	80019d4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018a6:	2300      	movs	r3, #0
 80018a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018aa:	4b81      	ldr	r3, [pc, #516]	; (8001ab0 <HAL_RCC_OscConfig+0x470>)
 80018ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d10f      	bne.n	80018d6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018b6:	2300      	movs	r3, #0
 80018b8:	60bb      	str	r3, [r7, #8]
 80018ba:	4b7d      	ldr	r3, [pc, #500]	; (8001ab0 <HAL_RCC_OscConfig+0x470>)
 80018bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018be:	4a7c      	ldr	r2, [pc, #496]	; (8001ab0 <HAL_RCC_OscConfig+0x470>)
 80018c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018c4:	6413      	str	r3, [r2, #64]	; 0x40
 80018c6:	4b7a      	ldr	r3, [pc, #488]	; (8001ab0 <HAL_RCC_OscConfig+0x470>)
 80018c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018ce:	60bb      	str	r3, [r7, #8]
 80018d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80018d2:	2301      	movs	r3, #1
 80018d4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018d6:	4b77      	ldr	r3, [pc, #476]	; (8001ab4 <HAL_RCC_OscConfig+0x474>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d118      	bne.n	8001914 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018e2:	4b74      	ldr	r3, [pc, #464]	; (8001ab4 <HAL_RCC_OscConfig+0x474>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4a73      	ldr	r2, [pc, #460]	; (8001ab4 <HAL_RCC_OscConfig+0x474>)
 80018e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018ee:	f7ff fb6d 	bl	8000fcc <HAL_GetTick>
 80018f2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018f4:	e008      	b.n	8001908 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018f6:	f7ff fb69 	bl	8000fcc <HAL_GetTick>
 80018fa:	4602      	mov	r2, r0
 80018fc:	693b      	ldr	r3, [r7, #16]
 80018fe:	1ad3      	subs	r3, r2, r3
 8001900:	2b02      	cmp	r3, #2
 8001902:	d901      	bls.n	8001908 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001904:	2303      	movs	r3, #3
 8001906:	e10c      	b.n	8001b22 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001908:	4b6a      	ldr	r3, [pc, #424]	; (8001ab4 <HAL_RCC_OscConfig+0x474>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001910:	2b00      	cmp	r3, #0
 8001912:	d0f0      	beq.n	80018f6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	689b      	ldr	r3, [r3, #8]
 8001918:	2b01      	cmp	r3, #1
 800191a:	d106      	bne.n	800192a <HAL_RCC_OscConfig+0x2ea>
 800191c:	4b64      	ldr	r3, [pc, #400]	; (8001ab0 <HAL_RCC_OscConfig+0x470>)
 800191e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001920:	4a63      	ldr	r2, [pc, #396]	; (8001ab0 <HAL_RCC_OscConfig+0x470>)
 8001922:	f043 0301 	orr.w	r3, r3, #1
 8001926:	6713      	str	r3, [r2, #112]	; 0x70
 8001928:	e01c      	b.n	8001964 <HAL_RCC_OscConfig+0x324>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	689b      	ldr	r3, [r3, #8]
 800192e:	2b05      	cmp	r3, #5
 8001930:	d10c      	bne.n	800194c <HAL_RCC_OscConfig+0x30c>
 8001932:	4b5f      	ldr	r3, [pc, #380]	; (8001ab0 <HAL_RCC_OscConfig+0x470>)
 8001934:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001936:	4a5e      	ldr	r2, [pc, #376]	; (8001ab0 <HAL_RCC_OscConfig+0x470>)
 8001938:	f043 0304 	orr.w	r3, r3, #4
 800193c:	6713      	str	r3, [r2, #112]	; 0x70
 800193e:	4b5c      	ldr	r3, [pc, #368]	; (8001ab0 <HAL_RCC_OscConfig+0x470>)
 8001940:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001942:	4a5b      	ldr	r2, [pc, #364]	; (8001ab0 <HAL_RCC_OscConfig+0x470>)
 8001944:	f043 0301 	orr.w	r3, r3, #1
 8001948:	6713      	str	r3, [r2, #112]	; 0x70
 800194a:	e00b      	b.n	8001964 <HAL_RCC_OscConfig+0x324>
 800194c:	4b58      	ldr	r3, [pc, #352]	; (8001ab0 <HAL_RCC_OscConfig+0x470>)
 800194e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001950:	4a57      	ldr	r2, [pc, #348]	; (8001ab0 <HAL_RCC_OscConfig+0x470>)
 8001952:	f023 0301 	bic.w	r3, r3, #1
 8001956:	6713      	str	r3, [r2, #112]	; 0x70
 8001958:	4b55      	ldr	r3, [pc, #340]	; (8001ab0 <HAL_RCC_OscConfig+0x470>)
 800195a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800195c:	4a54      	ldr	r2, [pc, #336]	; (8001ab0 <HAL_RCC_OscConfig+0x470>)
 800195e:	f023 0304 	bic.w	r3, r3, #4
 8001962:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	689b      	ldr	r3, [r3, #8]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d015      	beq.n	8001998 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800196c:	f7ff fb2e 	bl	8000fcc <HAL_GetTick>
 8001970:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001972:	e00a      	b.n	800198a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001974:	f7ff fb2a 	bl	8000fcc <HAL_GetTick>
 8001978:	4602      	mov	r2, r0
 800197a:	693b      	ldr	r3, [r7, #16]
 800197c:	1ad3      	subs	r3, r2, r3
 800197e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001982:	4293      	cmp	r3, r2
 8001984:	d901      	bls.n	800198a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001986:	2303      	movs	r3, #3
 8001988:	e0cb      	b.n	8001b22 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800198a:	4b49      	ldr	r3, [pc, #292]	; (8001ab0 <HAL_RCC_OscConfig+0x470>)
 800198c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800198e:	f003 0302 	and.w	r3, r3, #2
 8001992:	2b00      	cmp	r3, #0
 8001994:	d0ee      	beq.n	8001974 <HAL_RCC_OscConfig+0x334>
 8001996:	e014      	b.n	80019c2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001998:	f7ff fb18 	bl	8000fcc <HAL_GetTick>
 800199c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800199e:	e00a      	b.n	80019b6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019a0:	f7ff fb14 	bl	8000fcc <HAL_GetTick>
 80019a4:	4602      	mov	r2, r0
 80019a6:	693b      	ldr	r3, [r7, #16]
 80019a8:	1ad3      	subs	r3, r2, r3
 80019aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d901      	bls.n	80019b6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80019b2:	2303      	movs	r3, #3
 80019b4:	e0b5      	b.n	8001b22 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019b6:	4b3e      	ldr	r3, [pc, #248]	; (8001ab0 <HAL_RCC_OscConfig+0x470>)
 80019b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019ba:	f003 0302 	and.w	r3, r3, #2
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d1ee      	bne.n	80019a0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80019c2:	7dfb      	ldrb	r3, [r7, #23]
 80019c4:	2b01      	cmp	r3, #1
 80019c6:	d105      	bne.n	80019d4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019c8:	4b39      	ldr	r3, [pc, #228]	; (8001ab0 <HAL_RCC_OscConfig+0x470>)
 80019ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019cc:	4a38      	ldr	r2, [pc, #224]	; (8001ab0 <HAL_RCC_OscConfig+0x470>)
 80019ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019d2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	699b      	ldr	r3, [r3, #24]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	f000 80a1 	beq.w	8001b20 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80019de:	4b34      	ldr	r3, [pc, #208]	; (8001ab0 <HAL_RCC_OscConfig+0x470>)
 80019e0:	689b      	ldr	r3, [r3, #8]
 80019e2:	f003 030c 	and.w	r3, r3, #12
 80019e6:	2b08      	cmp	r3, #8
 80019e8:	d05c      	beq.n	8001aa4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	699b      	ldr	r3, [r3, #24]
 80019ee:	2b02      	cmp	r3, #2
 80019f0:	d141      	bne.n	8001a76 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019f2:	4b31      	ldr	r3, [pc, #196]	; (8001ab8 <HAL_RCC_OscConfig+0x478>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019f8:	f7ff fae8 	bl	8000fcc <HAL_GetTick>
 80019fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019fe:	e008      	b.n	8001a12 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a00:	f7ff fae4 	bl	8000fcc <HAL_GetTick>
 8001a04:	4602      	mov	r2, r0
 8001a06:	693b      	ldr	r3, [r7, #16]
 8001a08:	1ad3      	subs	r3, r2, r3
 8001a0a:	2b02      	cmp	r3, #2
 8001a0c:	d901      	bls.n	8001a12 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001a0e:	2303      	movs	r3, #3
 8001a10:	e087      	b.n	8001b22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a12:	4b27      	ldr	r3, [pc, #156]	; (8001ab0 <HAL_RCC_OscConfig+0x470>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d1f0      	bne.n	8001a00 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	69da      	ldr	r2, [r3, #28]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6a1b      	ldr	r3, [r3, #32]
 8001a26:	431a      	orrs	r2, r3
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a2c:	019b      	lsls	r3, r3, #6
 8001a2e:	431a      	orrs	r2, r3
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a34:	085b      	lsrs	r3, r3, #1
 8001a36:	3b01      	subs	r3, #1
 8001a38:	041b      	lsls	r3, r3, #16
 8001a3a:	431a      	orrs	r2, r3
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a40:	061b      	lsls	r3, r3, #24
 8001a42:	491b      	ldr	r1, [pc, #108]	; (8001ab0 <HAL_RCC_OscConfig+0x470>)
 8001a44:	4313      	orrs	r3, r2
 8001a46:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a48:	4b1b      	ldr	r3, [pc, #108]	; (8001ab8 <HAL_RCC_OscConfig+0x478>)
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a4e:	f7ff fabd 	bl	8000fcc <HAL_GetTick>
 8001a52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a54:	e008      	b.n	8001a68 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a56:	f7ff fab9 	bl	8000fcc <HAL_GetTick>
 8001a5a:	4602      	mov	r2, r0
 8001a5c:	693b      	ldr	r3, [r7, #16]
 8001a5e:	1ad3      	subs	r3, r2, r3
 8001a60:	2b02      	cmp	r3, #2
 8001a62:	d901      	bls.n	8001a68 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001a64:	2303      	movs	r3, #3
 8001a66:	e05c      	b.n	8001b22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a68:	4b11      	ldr	r3, [pc, #68]	; (8001ab0 <HAL_RCC_OscConfig+0x470>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d0f0      	beq.n	8001a56 <HAL_RCC_OscConfig+0x416>
 8001a74:	e054      	b.n	8001b20 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a76:	4b10      	ldr	r3, [pc, #64]	; (8001ab8 <HAL_RCC_OscConfig+0x478>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a7c:	f7ff faa6 	bl	8000fcc <HAL_GetTick>
 8001a80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a82:	e008      	b.n	8001a96 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a84:	f7ff faa2 	bl	8000fcc <HAL_GetTick>
 8001a88:	4602      	mov	r2, r0
 8001a8a:	693b      	ldr	r3, [r7, #16]
 8001a8c:	1ad3      	subs	r3, r2, r3
 8001a8e:	2b02      	cmp	r3, #2
 8001a90:	d901      	bls.n	8001a96 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001a92:	2303      	movs	r3, #3
 8001a94:	e045      	b.n	8001b22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a96:	4b06      	ldr	r3, [pc, #24]	; (8001ab0 <HAL_RCC_OscConfig+0x470>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d1f0      	bne.n	8001a84 <HAL_RCC_OscConfig+0x444>
 8001aa2:	e03d      	b.n	8001b20 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	699b      	ldr	r3, [r3, #24]
 8001aa8:	2b01      	cmp	r3, #1
 8001aaa:	d107      	bne.n	8001abc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001aac:	2301      	movs	r3, #1
 8001aae:	e038      	b.n	8001b22 <HAL_RCC_OscConfig+0x4e2>
 8001ab0:	40023800 	.word	0x40023800
 8001ab4:	40007000 	.word	0x40007000
 8001ab8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001abc:	4b1b      	ldr	r3, [pc, #108]	; (8001b2c <HAL_RCC_OscConfig+0x4ec>)
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	699b      	ldr	r3, [r3, #24]
 8001ac6:	2b01      	cmp	r3, #1
 8001ac8:	d028      	beq.n	8001b1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ad4:	429a      	cmp	r2, r3
 8001ad6:	d121      	bne.n	8001b1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ae2:	429a      	cmp	r2, r3
 8001ae4:	d11a      	bne.n	8001b1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ae6:	68fa      	ldr	r2, [r7, #12]
 8001ae8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001aec:	4013      	ands	r3, r2
 8001aee:	687a      	ldr	r2, [r7, #4]
 8001af0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001af2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d111      	bne.n	8001b1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b02:	085b      	lsrs	r3, r3, #1
 8001b04:	3b01      	subs	r3, #1
 8001b06:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b08:	429a      	cmp	r2, r3
 8001b0a:	d107      	bne.n	8001b1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b16:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b18:	429a      	cmp	r2, r3
 8001b1a:	d001      	beq.n	8001b20 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	e000      	b.n	8001b22 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001b20:	2300      	movs	r3, #0
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	3718      	adds	r7, #24
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	40023800 	.word	0x40023800

08001b30 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b084      	sub	sp, #16
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
 8001b38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d101      	bne.n	8001b44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b40:	2301      	movs	r3, #1
 8001b42:	e0cc      	b.n	8001cde <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b44:	4b68      	ldr	r3, [pc, #416]	; (8001ce8 <HAL_RCC_ClockConfig+0x1b8>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f003 030f 	and.w	r3, r3, #15
 8001b4c:	683a      	ldr	r2, [r7, #0]
 8001b4e:	429a      	cmp	r2, r3
 8001b50:	d90c      	bls.n	8001b6c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b52:	4b65      	ldr	r3, [pc, #404]	; (8001ce8 <HAL_RCC_ClockConfig+0x1b8>)
 8001b54:	683a      	ldr	r2, [r7, #0]
 8001b56:	b2d2      	uxtb	r2, r2
 8001b58:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b5a:	4b63      	ldr	r3, [pc, #396]	; (8001ce8 <HAL_RCC_ClockConfig+0x1b8>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f003 030f 	and.w	r3, r3, #15
 8001b62:	683a      	ldr	r2, [r7, #0]
 8001b64:	429a      	cmp	r2, r3
 8001b66:	d001      	beq.n	8001b6c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	e0b8      	b.n	8001cde <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f003 0302 	and.w	r3, r3, #2
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d020      	beq.n	8001bba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f003 0304 	and.w	r3, r3, #4
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d005      	beq.n	8001b90 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b84:	4b59      	ldr	r3, [pc, #356]	; (8001cec <HAL_RCC_ClockConfig+0x1bc>)
 8001b86:	689b      	ldr	r3, [r3, #8]
 8001b88:	4a58      	ldr	r2, [pc, #352]	; (8001cec <HAL_RCC_ClockConfig+0x1bc>)
 8001b8a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001b8e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f003 0308 	and.w	r3, r3, #8
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d005      	beq.n	8001ba8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b9c:	4b53      	ldr	r3, [pc, #332]	; (8001cec <HAL_RCC_ClockConfig+0x1bc>)
 8001b9e:	689b      	ldr	r3, [r3, #8]
 8001ba0:	4a52      	ldr	r2, [pc, #328]	; (8001cec <HAL_RCC_ClockConfig+0x1bc>)
 8001ba2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001ba6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ba8:	4b50      	ldr	r3, [pc, #320]	; (8001cec <HAL_RCC_ClockConfig+0x1bc>)
 8001baa:	689b      	ldr	r3, [r3, #8]
 8001bac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	689b      	ldr	r3, [r3, #8]
 8001bb4:	494d      	ldr	r1, [pc, #308]	; (8001cec <HAL_RCC_ClockConfig+0x1bc>)
 8001bb6:	4313      	orrs	r3, r2
 8001bb8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f003 0301 	and.w	r3, r3, #1
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d044      	beq.n	8001c50 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	2b01      	cmp	r3, #1
 8001bcc:	d107      	bne.n	8001bde <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bce:	4b47      	ldr	r3, [pc, #284]	; (8001cec <HAL_RCC_ClockConfig+0x1bc>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d119      	bne.n	8001c0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e07f      	b.n	8001cde <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	2b02      	cmp	r3, #2
 8001be4:	d003      	beq.n	8001bee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001bea:	2b03      	cmp	r3, #3
 8001bec:	d107      	bne.n	8001bfe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bee:	4b3f      	ldr	r3, [pc, #252]	; (8001cec <HAL_RCC_ClockConfig+0x1bc>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d109      	bne.n	8001c0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	e06f      	b.n	8001cde <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bfe:	4b3b      	ldr	r3, [pc, #236]	; (8001cec <HAL_RCC_ClockConfig+0x1bc>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f003 0302 	and.w	r3, r3, #2
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d101      	bne.n	8001c0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e067      	b.n	8001cde <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c0e:	4b37      	ldr	r3, [pc, #220]	; (8001cec <HAL_RCC_ClockConfig+0x1bc>)
 8001c10:	689b      	ldr	r3, [r3, #8]
 8001c12:	f023 0203 	bic.w	r2, r3, #3
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	4934      	ldr	r1, [pc, #208]	; (8001cec <HAL_RCC_ClockConfig+0x1bc>)
 8001c1c:	4313      	orrs	r3, r2
 8001c1e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c20:	f7ff f9d4 	bl	8000fcc <HAL_GetTick>
 8001c24:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c26:	e00a      	b.n	8001c3e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c28:	f7ff f9d0 	bl	8000fcc <HAL_GetTick>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	1ad3      	subs	r3, r2, r3
 8001c32:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d901      	bls.n	8001c3e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c3a:	2303      	movs	r3, #3
 8001c3c:	e04f      	b.n	8001cde <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c3e:	4b2b      	ldr	r3, [pc, #172]	; (8001cec <HAL_RCC_ClockConfig+0x1bc>)
 8001c40:	689b      	ldr	r3, [r3, #8]
 8001c42:	f003 020c 	and.w	r2, r3, #12
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	009b      	lsls	r3, r3, #2
 8001c4c:	429a      	cmp	r2, r3
 8001c4e:	d1eb      	bne.n	8001c28 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c50:	4b25      	ldr	r3, [pc, #148]	; (8001ce8 <HAL_RCC_ClockConfig+0x1b8>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f003 030f 	and.w	r3, r3, #15
 8001c58:	683a      	ldr	r2, [r7, #0]
 8001c5a:	429a      	cmp	r2, r3
 8001c5c:	d20c      	bcs.n	8001c78 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c5e:	4b22      	ldr	r3, [pc, #136]	; (8001ce8 <HAL_RCC_ClockConfig+0x1b8>)
 8001c60:	683a      	ldr	r2, [r7, #0]
 8001c62:	b2d2      	uxtb	r2, r2
 8001c64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c66:	4b20      	ldr	r3, [pc, #128]	; (8001ce8 <HAL_RCC_ClockConfig+0x1b8>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f003 030f 	and.w	r3, r3, #15
 8001c6e:	683a      	ldr	r2, [r7, #0]
 8001c70:	429a      	cmp	r2, r3
 8001c72:	d001      	beq.n	8001c78 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001c74:	2301      	movs	r3, #1
 8001c76:	e032      	b.n	8001cde <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f003 0304 	and.w	r3, r3, #4
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d008      	beq.n	8001c96 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c84:	4b19      	ldr	r3, [pc, #100]	; (8001cec <HAL_RCC_ClockConfig+0x1bc>)
 8001c86:	689b      	ldr	r3, [r3, #8]
 8001c88:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	68db      	ldr	r3, [r3, #12]
 8001c90:	4916      	ldr	r1, [pc, #88]	; (8001cec <HAL_RCC_ClockConfig+0x1bc>)
 8001c92:	4313      	orrs	r3, r2
 8001c94:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f003 0308 	and.w	r3, r3, #8
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d009      	beq.n	8001cb6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ca2:	4b12      	ldr	r3, [pc, #72]	; (8001cec <HAL_RCC_ClockConfig+0x1bc>)
 8001ca4:	689b      	ldr	r3, [r3, #8]
 8001ca6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	691b      	ldr	r3, [r3, #16]
 8001cae:	00db      	lsls	r3, r3, #3
 8001cb0:	490e      	ldr	r1, [pc, #56]	; (8001cec <HAL_RCC_ClockConfig+0x1bc>)
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001cb6:	f000 f821 	bl	8001cfc <HAL_RCC_GetSysClockFreq>
 8001cba:	4602      	mov	r2, r0
 8001cbc:	4b0b      	ldr	r3, [pc, #44]	; (8001cec <HAL_RCC_ClockConfig+0x1bc>)
 8001cbe:	689b      	ldr	r3, [r3, #8]
 8001cc0:	091b      	lsrs	r3, r3, #4
 8001cc2:	f003 030f 	and.w	r3, r3, #15
 8001cc6:	490a      	ldr	r1, [pc, #40]	; (8001cf0 <HAL_RCC_ClockConfig+0x1c0>)
 8001cc8:	5ccb      	ldrb	r3, [r1, r3]
 8001cca:	fa22 f303 	lsr.w	r3, r2, r3
 8001cce:	4a09      	ldr	r2, [pc, #36]	; (8001cf4 <HAL_RCC_ClockConfig+0x1c4>)
 8001cd0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001cd2:	4b09      	ldr	r3, [pc, #36]	; (8001cf8 <HAL_RCC_ClockConfig+0x1c8>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f7ff f948 	bl	8000f6c <HAL_InitTick>

  return HAL_OK;
 8001cdc:	2300      	movs	r3, #0
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	3710      	adds	r7, #16
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	40023c00 	.word	0x40023c00
 8001cec:	40023800 	.word	0x40023800
 8001cf0:	08003344 	.word	0x08003344
 8001cf4:	20000000 	.word	0x20000000
 8001cf8:	20000004 	.word	0x20000004

08001cfc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001cfc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001d00:	b094      	sub	sp, #80	; 0x50
 8001d02:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001d04:	2300      	movs	r3, #0
 8001d06:	647b      	str	r3, [r7, #68]	; 0x44
 8001d08:	2300      	movs	r3, #0
 8001d0a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001d10:	2300      	movs	r3, #0
 8001d12:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d14:	4b79      	ldr	r3, [pc, #484]	; (8001efc <HAL_RCC_GetSysClockFreq+0x200>)
 8001d16:	689b      	ldr	r3, [r3, #8]
 8001d18:	f003 030c 	and.w	r3, r3, #12
 8001d1c:	2b08      	cmp	r3, #8
 8001d1e:	d00d      	beq.n	8001d3c <HAL_RCC_GetSysClockFreq+0x40>
 8001d20:	2b08      	cmp	r3, #8
 8001d22:	f200 80e1 	bhi.w	8001ee8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d002      	beq.n	8001d30 <HAL_RCC_GetSysClockFreq+0x34>
 8001d2a:	2b04      	cmp	r3, #4
 8001d2c:	d003      	beq.n	8001d36 <HAL_RCC_GetSysClockFreq+0x3a>
 8001d2e:	e0db      	b.n	8001ee8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001d30:	4b73      	ldr	r3, [pc, #460]	; (8001f00 <HAL_RCC_GetSysClockFreq+0x204>)
 8001d32:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001d34:	e0db      	b.n	8001eee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001d36:	4b73      	ldr	r3, [pc, #460]	; (8001f04 <HAL_RCC_GetSysClockFreq+0x208>)
 8001d38:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001d3a:	e0d8      	b.n	8001eee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d3c:	4b6f      	ldr	r3, [pc, #444]	; (8001efc <HAL_RCC_GetSysClockFreq+0x200>)
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001d44:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d46:	4b6d      	ldr	r3, [pc, #436]	; (8001efc <HAL_RCC_GetSysClockFreq+0x200>)
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d063      	beq.n	8001e1a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d52:	4b6a      	ldr	r3, [pc, #424]	; (8001efc <HAL_RCC_GetSysClockFreq+0x200>)
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	099b      	lsrs	r3, r3, #6
 8001d58:	2200      	movs	r2, #0
 8001d5a:	63bb      	str	r3, [r7, #56]	; 0x38
 8001d5c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001d5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d64:	633b      	str	r3, [r7, #48]	; 0x30
 8001d66:	2300      	movs	r3, #0
 8001d68:	637b      	str	r3, [r7, #52]	; 0x34
 8001d6a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001d6e:	4622      	mov	r2, r4
 8001d70:	462b      	mov	r3, r5
 8001d72:	f04f 0000 	mov.w	r0, #0
 8001d76:	f04f 0100 	mov.w	r1, #0
 8001d7a:	0159      	lsls	r1, r3, #5
 8001d7c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d80:	0150      	lsls	r0, r2, #5
 8001d82:	4602      	mov	r2, r0
 8001d84:	460b      	mov	r3, r1
 8001d86:	4621      	mov	r1, r4
 8001d88:	1a51      	subs	r1, r2, r1
 8001d8a:	6139      	str	r1, [r7, #16]
 8001d8c:	4629      	mov	r1, r5
 8001d8e:	eb63 0301 	sbc.w	r3, r3, r1
 8001d92:	617b      	str	r3, [r7, #20]
 8001d94:	f04f 0200 	mov.w	r2, #0
 8001d98:	f04f 0300 	mov.w	r3, #0
 8001d9c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001da0:	4659      	mov	r1, fp
 8001da2:	018b      	lsls	r3, r1, #6
 8001da4:	4651      	mov	r1, sl
 8001da6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001daa:	4651      	mov	r1, sl
 8001dac:	018a      	lsls	r2, r1, #6
 8001dae:	4651      	mov	r1, sl
 8001db0:	ebb2 0801 	subs.w	r8, r2, r1
 8001db4:	4659      	mov	r1, fp
 8001db6:	eb63 0901 	sbc.w	r9, r3, r1
 8001dba:	f04f 0200 	mov.w	r2, #0
 8001dbe:	f04f 0300 	mov.w	r3, #0
 8001dc2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001dc6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001dca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001dce:	4690      	mov	r8, r2
 8001dd0:	4699      	mov	r9, r3
 8001dd2:	4623      	mov	r3, r4
 8001dd4:	eb18 0303 	adds.w	r3, r8, r3
 8001dd8:	60bb      	str	r3, [r7, #8]
 8001dda:	462b      	mov	r3, r5
 8001ddc:	eb49 0303 	adc.w	r3, r9, r3
 8001de0:	60fb      	str	r3, [r7, #12]
 8001de2:	f04f 0200 	mov.w	r2, #0
 8001de6:	f04f 0300 	mov.w	r3, #0
 8001dea:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001dee:	4629      	mov	r1, r5
 8001df0:	024b      	lsls	r3, r1, #9
 8001df2:	4621      	mov	r1, r4
 8001df4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001df8:	4621      	mov	r1, r4
 8001dfa:	024a      	lsls	r2, r1, #9
 8001dfc:	4610      	mov	r0, r2
 8001dfe:	4619      	mov	r1, r3
 8001e00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e02:	2200      	movs	r2, #0
 8001e04:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e06:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001e08:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001e0c:	f7fe f9f8 	bl	8000200 <__aeabi_uldivmod>
 8001e10:	4602      	mov	r2, r0
 8001e12:	460b      	mov	r3, r1
 8001e14:	4613      	mov	r3, r2
 8001e16:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001e18:	e058      	b.n	8001ecc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e1a:	4b38      	ldr	r3, [pc, #224]	; (8001efc <HAL_RCC_GetSysClockFreq+0x200>)
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	099b      	lsrs	r3, r3, #6
 8001e20:	2200      	movs	r2, #0
 8001e22:	4618      	mov	r0, r3
 8001e24:	4611      	mov	r1, r2
 8001e26:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001e2a:	623b      	str	r3, [r7, #32]
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	627b      	str	r3, [r7, #36]	; 0x24
 8001e30:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001e34:	4642      	mov	r2, r8
 8001e36:	464b      	mov	r3, r9
 8001e38:	f04f 0000 	mov.w	r0, #0
 8001e3c:	f04f 0100 	mov.w	r1, #0
 8001e40:	0159      	lsls	r1, r3, #5
 8001e42:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e46:	0150      	lsls	r0, r2, #5
 8001e48:	4602      	mov	r2, r0
 8001e4a:	460b      	mov	r3, r1
 8001e4c:	4641      	mov	r1, r8
 8001e4e:	ebb2 0a01 	subs.w	sl, r2, r1
 8001e52:	4649      	mov	r1, r9
 8001e54:	eb63 0b01 	sbc.w	fp, r3, r1
 8001e58:	f04f 0200 	mov.w	r2, #0
 8001e5c:	f04f 0300 	mov.w	r3, #0
 8001e60:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001e64:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001e68:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001e6c:	ebb2 040a 	subs.w	r4, r2, sl
 8001e70:	eb63 050b 	sbc.w	r5, r3, fp
 8001e74:	f04f 0200 	mov.w	r2, #0
 8001e78:	f04f 0300 	mov.w	r3, #0
 8001e7c:	00eb      	lsls	r3, r5, #3
 8001e7e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001e82:	00e2      	lsls	r2, r4, #3
 8001e84:	4614      	mov	r4, r2
 8001e86:	461d      	mov	r5, r3
 8001e88:	4643      	mov	r3, r8
 8001e8a:	18e3      	adds	r3, r4, r3
 8001e8c:	603b      	str	r3, [r7, #0]
 8001e8e:	464b      	mov	r3, r9
 8001e90:	eb45 0303 	adc.w	r3, r5, r3
 8001e94:	607b      	str	r3, [r7, #4]
 8001e96:	f04f 0200 	mov.w	r2, #0
 8001e9a:	f04f 0300 	mov.w	r3, #0
 8001e9e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001ea2:	4629      	mov	r1, r5
 8001ea4:	028b      	lsls	r3, r1, #10
 8001ea6:	4621      	mov	r1, r4
 8001ea8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001eac:	4621      	mov	r1, r4
 8001eae:	028a      	lsls	r2, r1, #10
 8001eb0:	4610      	mov	r0, r2
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	61bb      	str	r3, [r7, #24]
 8001eba:	61fa      	str	r2, [r7, #28]
 8001ebc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001ec0:	f7fe f99e 	bl	8000200 <__aeabi_uldivmod>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	460b      	mov	r3, r1
 8001ec8:	4613      	mov	r3, r2
 8001eca:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001ecc:	4b0b      	ldr	r3, [pc, #44]	; (8001efc <HAL_RCC_GetSysClockFreq+0x200>)
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	0c1b      	lsrs	r3, r3, #16
 8001ed2:	f003 0303 	and.w	r3, r3, #3
 8001ed6:	3301      	adds	r3, #1
 8001ed8:	005b      	lsls	r3, r3, #1
 8001eda:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001edc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001ede:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ee0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ee4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001ee6:	e002      	b.n	8001eee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001ee8:	4b05      	ldr	r3, [pc, #20]	; (8001f00 <HAL_RCC_GetSysClockFreq+0x204>)
 8001eea:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001eec:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001eee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	3750      	adds	r7, #80	; 0x50
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001efa:	bf00      	nop
 8001efc:	40023800 	.word	0x40023800
 8001f00:	00f42400 	.word	0x00f42400
 8001f04:	007a1200 	.word	0x007a1200

08001f08 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f0c:	4b03      	ldr	r3, [pc, #12]	; (8001f1c <HAL_RCC_GetHCLKFreq+0x14>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr
 8001f1a:	bf00      	nop
 8001f1c:	20000000 	.word	0x20000000

08001f20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001f24:	f7ff fff0 	bl	8001f08 <HAL_RCC_GetHCLKFreq>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	4b05      	ldr	r3, [pc, #20]	; (8001f40 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001f2c:	689b      	ldr	r3, [r3, #8]
 8001f2e:	0a9b      	lsrs	r3, r3, #10
 8001f30:	f003 0307 	and.w	r3, r3, #7
 8001f34:	4903      	ldr	r1, [pc, #12]	; (8001f44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f36:	5ccb      	ldrb	r3, [r1, r3]
 8001f38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	bd80      	pop	{r7, pc}
 8001f40:	40023800 	.word	0x40023800
 8001f44:	08003354 	.word	0x08003354

08001f48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001f4c:	f7ff ffdc 	bl	8001f08 <HAL_RCC_GetHCLKFreq>
 8001f50:	4602      	mov	r2, r0
 8001f52:	4b05      	ldr	r3, [pc, #20]	; (8001f68 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001f54:	689b      	ldr	r3, [r3, #8]
 8001f56:	0b5b      	lsrs	r3, r3, #13
 8001f58:	f003 0307 	and.w	r3, r3, #7
 8001f5c:	4903      	ldr	r1, [pc, #12]	; (8001f6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f5e:	5ccb      	ldrb	r3, [r1, r3]
 8001f60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f64:	4618      	mov	r0, r3
 8001f66:	bd80      	pop	{r7, pc}
 8001f68:	40023800 	.word	0x40023800
 8001f6c:	08003354 	.word	0x08003354

08001f70 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b082      	sub	sp, #8
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d101      	bne.n	8001f82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	e03f      	b.n	8002002 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f88:	b2db      	uxtb	r3, r3
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d106      	bne.n	8001f9c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2200      	movs	r2, #0
 8001f92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001f96:	6878      	ldr	r0, [r7, #4]
 8001f98:	f7fe ff1e 	bl	8000dd8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2224      	movs	r2, #36	; 0x24
 8001fa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	68da      	ldr	r2, [r3, #12]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001fb2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001fb4:	6878      	ldr	r0, [r7, #4]
 8001fb6:	f000 f929 	bl	800220c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	691a      	ldr	r2, [r3, #16]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001fc8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	695a      	ldr	r2, [r3, #20]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001fd8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	68da      	ldr	r2, [r3, #12]
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001fe8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2200      	movs	r2, #0
 8001fee:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2220      	movs	r2, #32
 8001ff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2220      	movs	r2, #32
 8001ffc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002000:	2300      	movs	r3, #0
}
 8002002:	4618      	mov	r0, r3
 8002004:	3708      	adds	r7, #8
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}

0800200a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800200a:	b580      	push	{r7, lr}
 800200c:	b08a      	sub	sp, #40	; 0x28
 800200e:	af02      	add	r7, sp, #8
 8002010:	60f8      	str	r0, [r7, #12]
 8002012:	60b9      	str	r1, [r7, #8]
 8002014:	603b      	str	r3, [r7, #0]
 8002016:	4613      	mov	r3, r2
 8002018:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800201a:	2300      	movs	r3, #0
 800201c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002024:	b2db      	uxtb	r3, r3
 8002026:	2b20      	cmp	r3, #32
 8002028:	d17c      	bne.n	8002124 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800202a:	68bb      	ldr	r3, [r7, #8]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d002      	beq.n	8002036 <HAL_UART_Transmit+0x2c>
 8002030:	88fb      	ldrh	r3, [r7, #6]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d101      	bne.n	800203a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002036:	2301      	movs	r3, #1
 8002038:	e075      	b.n	8002126 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002040:	2b01      	cmp	r3, #1
 8002042:	d101      	bne.n	8002048 <HAL_UART_Transmit+0x3e>
 8002044:	2302      	movs	r3, #2
 8002046:	e06e      	b.n	8002126 <HAL_UART_Transmit+0x11c>
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	2201      	movs	r2, #1
 800204c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	2200      	movs	r2, #0
 8002054:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	2221      	movs	r2, #33	; 0x21
 800205a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800205e:	f7fe ffb5 	bl	8000fcc <HAL_GetTick>
 8002062:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	88fa      	ldrh	r2, [r7, #6]
 8002068:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	88fa      	ldrh	r2, [r7, #6]
 800206e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	689b      	ldr	r3, [r3, #8]
 8002074:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002078:	d108      	bne.n	800208c <HAL_UART_Transmit+0x82>
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	691b      	ldr	r3, [r3, #16]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d104      	bne.n	800208c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002082:	2300      	movs	r3, #0
 8002084:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002086:	68bb      	ldr	r3, [r7, #8]
 8002088:	61bb      	str	r3, [r7, #24]
 800208a:	e003      	b.n	8002094 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800208c:	68bb      	ldr	r3, [r7, #8]
 800208e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002090:	2300      	movs	r3, #0
 8002092:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	2200      	movs	r2, #0
 8002098:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800209c:	e02a      	b.n	80020f4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	9300      	str	r3, [sp, #0]
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	2200      	movs	r2, #0
 80020a6:	2180      	movs	r1, #128	; 0x80
 80020a8:	68f8      	ldr	r0, [r7, #12]
 80020aa:	f000 f840 	bl	800212e <UART_WaitOnFlagUntilTimeout>
 80020ae:	4603      	mov	r3, r0
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d001      	beq.n	80020b8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80020b4:	2303      	movs	r3, #3
 80020b6:	e036      	b.n	8002126 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80020b8:	69fb      	ldr	r3, [r7, #28]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d10b      	bne.n	80020d6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80020be:	69bb      	ldr	r3, [r7, #24]
 80020c0:	881b      	ldrh	r3, [r3, #0]
 80020c2:	461a      	mov	r2, r3
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80020cc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80020ce:	69bb      	ldr	r3, [r7, #24]
 80020d0:	3302      	adds	r3, #2
 80020d2:	61bb      	str	r3, [r7, #24]
 80020d4:	e007      	b.n	80020e6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80020d6:	69fb      	ldr	r3, [r7, #28]
 80020d8:	781a      	ldrb	r2, [r3, #0]
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80020e0:	69fb      	ldr	r3, [r7, #28]
 80020e2:	3301      	adds	r3, #1
 80020e4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80020ea:	b29b      	uxth	r3, r3
 80020ec:	3b01      	subs	r3, #1
 80020ee:	b29a      	uxth	r2, r3
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80020f8:	b29b      	uxth	r3, r3
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d1cf      	bne.n	800209e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	9300      	str	r3, [sp, #0]
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	2200      	movs	r2, #0
 8002106:	2140      	movs	r1, #64	; 0x40
 8002108:	68f8      	ldr	r0, [r7, #12]
 800210a:	f000 f810 	bl	800212e <UART_WaitOnFlagUntilTimeout>
 800210e:	4603      	mov	r3, r0
 8002110:	2b00      	cmp	r3, #0
 8002112:	d001      	beq.n	8002118 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002114:	2303      	movs	r3, #3
 8002116:	e006      	b.n	8002126 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	2220      	movs	r2, #32
 800211c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002120:	2300      	movs	r3, #0
 8002122:	e000      	b.n	8002126 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002124:	2302      	movs	r3, #2
  }
}
 8002126:	4618      	mov	r0, r3
 8002128:	3720      	adds	r7, #32
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}

0800212e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800212e:	b580      	push	{r7, lr}
 8002130:	b090      	sub	sp, #64	; 0x40
 8002132:	af00      	add	r7, sp, #0
 8002134:	60f8      	str	r0, [r7, #12]
 8002136:	60b9      	str	r1, [r7, #8]
 8002138:	603b      	str	r3, [r7, #0]
 800213a:	4613      	mov	r3, r2
 800213c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800213e:	e050      	b.n	80021e2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002140:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002142:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002146:	d04c      	beq.n	80021e2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002148:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800214a:	2b00      	cmp	r3, #0
 800214c:	d007      	beq.n	800215e <UART_WaitOnFlagUntilTimeout+0x30>
 800214e:	f7fe ff3d 	bl	8000fcc <HAL_GetTick>
 8002152:	4602      	mov	r2, r0
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	1ad3      	subs	r3, r2, r3
 8002158:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800215a:	429a      	cmp	r2, r3
 800215c:	d241      	bcs.n	80021e2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	330c      	adds	r3, #12
 8002164:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002168:	e853 3f00 	ldrex	r3, [r3]
 800216c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800216e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002170:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002174:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	330c      	adds	r3, #12
 800217c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800217e:	637a      	str	r2, [r7, #52]	; 0x34
 8002180:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002182:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002184:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002186:	e841 2300 	strex	r3, r2, [r1]
 800218a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800218c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800218e:	2b00      	cmp	r3, #0
 8002190:	d1e5      	bne.n	800215e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	3314      	adds	r3, #20
 8002198:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800219a:	697b      	ldr	r3, [r7, #20]
 800219c:	e853 3f00 	ldrex	r3, [r3]
 80021a0:	613b      	str	r3, [r7, #16]
   return(result);
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	f023 0301 	bic.w	r3, r3, #1
 80021a8:	63bb      	str	r3, [r7, #56]	; 0x38
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	3314      	adds	r3, #20
 80021b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80021b2:	623a      	str	r2, [r7, #32]
 80021b4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80021b6:	69f9      	ldr	r1, [r7, #28]
 80021b8:	6a3a      	ldr	r2, [r7, #32]
 80021ba:	e841 2300 	strex	r3, r2, [r1]
 80021be:	61bb      	str	r3, [r7, #24]
   return(result);
 80021c0:	69bb      	ldr	r3, [r7, #24]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d1e5      	bne.n	8002192 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	2220      	movs	r2, #32
 80021ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	2220      	movs	r2, #32
 80021d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	2200      	movs	r2, #0
 80021da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80021de:	2303      	movs	r3, #3
 80021e0:	e00f      	b.n	8002202 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	681a      	ldr	r2, [r3, #0]
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	4013      	ands	r3, r2
 80021ec:	68ba      	ldr	r2, [r7, #8]
 80021ee:	429a      	cmp	r2, r3
 80021f0:	bf0c      	ite	eq
 80021f2:	2301      	moveq	r3, #1
 80021f4:	2300      	movne	r3, #0
 80021f6:	b2db      	uxtb	r3, r3
 80021f8:	461a      	mov	r2, r3
 80021fa:	79fb      	ldrb	r3, [r7, #7]
 80021fc:	429a      	cmp	r2, r3
 80021fe:	d09f      	beq.n	8002140 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002200:	2300      	movs	r3, #0
}
 8002202:	4618      	mov	r0, r3
 8002204:	3740      	adds	r7, #64	; 0x40
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}
	...

0800220c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800220c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002210:	b0c0      	sub	sp, #256	; 0x100
 8002212:	af00      	add	r7, sp, #0
 8002214:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002218:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	691b      	ldr	r3, [r3, #16]
 8002220:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002224:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002228:	68d9      	ldr	r1, [r3, #12]
 800222a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800222e:	681a      	ldr	r2, [r3, #0]
 8002230:	ea40 0301 	orr.w	r3, r0, r1
 8002234:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002236:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800223a:	689a      	ldr	r2, [r3, #8]
 800223c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002240:	691b      	ldr	r3, [r3, #16]
 8002242:	431a      	orrs	r2, r3
 8002244:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002248:	695b      	ldr	r3, [r3, #20]
 800224a:	431a      	orrs	r2, r3
 800224c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002250:	69db      	ldr	r3, [r3, #28]
 8002252:	4313      	orrs	r3, r2
 8002254:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002258:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	68db      	ldr	r3, [r3, #12]
 8002260:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002264:	f021 010c 	bic.w	r1, r1, #12
 8002268:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800226c:	681a      	ldr	r2, [r3, #0]
 800226e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002272:	430b      	orrs	r3, r1
 8002274:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002276:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	695b      	ldr	r3, [r3, #20]
 800227e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002282:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002286:	6999      	ldr	r1, [r3, #24]
 8002288:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800228c:	681a      	ldr	r2, [r3, #0]
 800228e:	ea40 0301 	orr.w	r3, r0, r1
 8002292:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002294:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002298:	681a      	ldr	r2, [r3, #0]
 800229a:	4b8f      	ldr	r3, [pc, #572]	; (80024d8 <UART_SetConfig+0x2cc>)
 800229c:	429a      	cmp	r2, r3
 800229e:	d005      	beq.n	80022ac <UART_SetConfig+0xa0>
 80022a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022a4:	681a      	ldr	r2, [r3, #0]
 80022a6:	4b8d      	ldr	r3, [pc, #564]	; (80024dc <UART_SetConfig+0x2d0>)
 80022a8:	429a      	cmp	r2, r3
 80022aa:	d104      	bne.n	80022b6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80022ac:	f7ff fe4c 	bl	8001f48 <HAL_RCC_GetPCLK2Freq>
 80022b0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80022b4:	e003      	b.n	80022be <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80022b6:	f7ff fe33 	bl	8001f20 <HAL_RCC_GetPCLK1Freq>
 80022ba:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80022be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022c2:	69db      	ldr	r3, [r3, #28]
 80022c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80022c8:	f040 810c 	bne.w	80024e4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80022cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80022d0:	2200      	movs	r2, #0
 80022d2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80022d6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80022da:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80022de:	4622      	mov	r2, r4
 80022e0:	462b      	mov	r3, r5
 80022e2:	1891      	adds	r1, r2, r2
 80022e4:	65b9      	str	r1, [r7, #88]	; 0x58
 80022e6:	415b      	adcs	r3, r3
 80022e8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80022ea:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80022ee:	4621      	mov	r1, r4
 80022f0:	eb12 0801 	adds.w	r8, r2, r1
 80022f4:	4629      	mov	r1, r5
 80022f6:	eb43 0901 	adc.w	r9, r3, r1
 80022fa:	f04f 0200 	mov.w	r2, #0
 80022fe:	f04f 0300 	mov.w	r3, #0
 8002302:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002306:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800230a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800230e:	4690      	mov	r8, r2
 8002310:	4699      	mov	r9, r3
 8002312:	4623      	mov	r3, r4
 8002314:	eb18 0303 	adds.w	r3, r8, r3
 8002318:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800231c:	462b      	mov	r3, r5
 800231e:	eb49 0303 	adc.w	r3, r9, r3
 8002322:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002326:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	2200      	movs	r2, #0
 800232e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002332:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002336:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800233a:	460b      	mov	r3, r1
 800233c:	18db      	adds	r3, r3, r3
 800233e:	653b      	str	r3, [r7, #80]	; 0x50
 8002340:	4613      	mov	r3, r2
 8002342:	eb42 0303 	adc.w	r3, r2, r3
 8002346:	657b      	str	r3, [r7, #84]	; 0x54
 8002348:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800234c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002350:	f7fd ff56 	bl	8000200 <__aeabi_uldivmod>
 8002354:	4602      	mov	r2, r0
 8002356:	460b      	mov	r3, r1
 8002358:	4b61      	ldr	r3, [pc, #388]	; (80024e0 <UART_SetConfig+0x2d4>)
 800235a:	fba3 2302 	umull	r2, r3, r3, r2
 800235e:	095b      	lsrs	r3, r3, #5
 8002360:	011c      	lsls	r4, r3, #4
 8002362:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002366:	2200      	movs	r2, #0
 8002368:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800236c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002370:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002374:	4642      	mov	r2, r8
 8002376:	464b      	mov	r3, r9
 8002378:	1891      	adds	r1, r2, r2
 800237a:	64b9      	str	r1, [r7, #72]	; 0x48
 800237c:	415b      	adcs	r3, r3
 800237e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002380:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002384:	4641      	mov	r1, r8
 8002386:	eb12 0a01 	adds.w	sl, r2, r1
 800238a:	4649      	mov	r1, r9
 800238c:	eb43 0b01 	adc.w	fp, r3, r1
 8002390:	f04f 0200 	mov.w	r2, #0
 8002394:	f04f 0300 	mov.w	r3, #0
 8002398:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800239c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80023a0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80023a4:	4692      	mov	sl, r2
 80023a6:	469b      	mov	fp, r3
 80023a8:	4643      	mov	r3, r8
 80023aa:	eb1a 0303 	adds.w	r3, sl, r3
 80023ae:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80023b2:	464b      	mov	r3, r9
 80023b4:	eb4b 0303 	adc.w	r3, fp, r3
 80023b8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80023bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	2200      	movs	r2, #0
 80023c4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80023c8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80023cc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80023d0:	460b      	mov	r3, r1
 80023d2:	18db      	adds	r3, r3, r3
 80023d4:	643b      	str	r3, [r7, #64]	; 0x40
 80023d6:	4613      	mov	r3, r2
 80023d8:	eb42 0303 	adc.w	r3, r2, r3
 80023dc:	647b      	str	r3, [r7, #68]	; 0x44
 80023de:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80023e2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80023e6:	f7fd ff0b 	bl	8000200 <__aeabi_uldivmod>
 80023ea:	4602      	mov	r2, r0
 80023ec:	460b      	mov	r3, r1
 80023ee:	4611      	mov	r1, r2
 80023f0:	4b3b      	ldr	r3, [pc, #236]	; (80024e0 <UART_SetConfig+0x2d4>)
 80023f2:	fba3 2301 	umull	r2, r3, r3, r1
 80023f6:	095b      	lsrs	r3, r3, #5
 80023f8:	2264      	movs	r2, #100	; 0x64
 80023fa:	fb02 f303 	mul.w	r3, r2, r3
 80023fe:	1acb      	subs	r3, r1, r3
 8002400:	00db      	lsls	r3, r3, #3
 8002402:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002406:	4b36      	ldr	r3, [pc, #216]	; (80024e0 <UART_SetConfig+0x2d4>)
 8002408:	fba3 2302 	umull	r2, r3, r3, r2
 800240c:	095b      	lsrs	r3, r3, #5
 800240e:	005b      	lsls	r3, r3, #1
 8002410:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002414:	441c      	add	r4, r3
 8002416:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800241a:	2200      	movs	r2, #0
 800241c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002420:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002424:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002428:	4642      	mov	r2, r8
 800242a:	464b      	mov	r3, r9
 800242c:	1891      	adds	r1, r2, r2
 800242e:	63b9      	str	r1, [r7, #56]	; 0x38
 8002430:	415b      	adcs	r3, r3
 8002432:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002434:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002438:	4641      	mov	r1, r8
 800243a:	1851      	adds	r1, r2, r1
 800243c:	6339      	str	r1, [r7, #48]	; 0x30
 800243e:	4649      	mov	r1, r9
 8002440:	414b      	adcs	r3, r1
 8002442:	637b      	str	r3, [r7, #52]	; 0x34
 8002444:	f04f 0200 	mov.w	r2, #0
 8002448:	f04f 0300 	mov.w	r3, #0
 800244c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002450:	4659      	mov	r1, fp
 8002452:	00cb      	lsls	r3, r1, #3
 8002454:	4651      	mov	r1, sl
 8002456:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800245a:	4651      	mov	r1, sl
 800245c:	00ca      	lsls	r2, r1, #3
 800245e:	4610      	mov	r0, r2
 8002460:	4619      	mov	r1, r3
 8002462:	4603      	mov	r3, r0
 8002464:	4642      	mov	r2, r8
 8002466:	189b      	adds	r3, r3, r2
 8002468:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800246c:	464b      	mov	r3, r9
 800246e:	460a      	mov	r2, r1
 8002470:	eb42 0303 	adc.w	r3, r2, r3
 8002474:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002478:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	2200      	movs	r2, #0
 8002480:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002484:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002488:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800248c:	460b      	mov	r3, r1
 800248e:	18db      	adds	r3, r3, r3
 8002490:	62bb      	str	r3, [r7, #40]	; 0x28
 8002492:	4613      	mov	r3, r2
 8002494:	eb42 0303 	adc.w	r3, r2, r3
 8002498:	62fb      	str	r3, [r7, #44]	; 0x2c
 800249a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800249e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80024a2:	f7fd fead 	bl	8000200 <__aeabi_uldivmod>
 80024a6:	4602      	mov	r2, r0
 80024a8:	460b      	mov	r3, r1
 80024aa:	4b0d      	ldr	r3, [pc, #52]	; (80024e0 <UART_SetConfig+0x2d4>)
 80024ac:	fba3 1302 	umull	r1, r3, r3, r2
 80024b0:	095b      	lsrs	r3, r3, #5
 80024b2:	2164      	movs	r1, #100	; 0x64
 80024b4:	fb01 f303 	mul.w	r3, r1, r3
 80024b8:	1ad3      	subs	r3, r2, r3
 80024ba:	00db      	lsls	r3, r3, #3
 80024bc:	3332      	adds	r3, #50	; 0x32
 80024be:	4a08      	ldr	r2, [pc, #32]	; (80024e0 <UART_SetConfig+0x2d4>)
 80024c0:	fba2 2303 	umull	r2, r3, r2, r3
 80024c4:	095b      	lsrs	r3, r3, #5
 80024c6:	f003 0207 	and.w	r2, r3, #7
 80024ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4422      	add	r2, r4
 80024d2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80024d4:	e105      	b.n	80026e2 <UART_SetConfig+0x4d6>
 80024d6:	bf00      	nop
 80024d8:	40011000 	.word	0x40011000
 80024dc:	40011400 	.word	0x40011400
 80024e0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80024e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80024e8:	2200      	movs	r2, #0
 80024ea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80024ee:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80024f2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80024f6:	4642      	mov	r2, r8
 80024f8:	464b      	mov	r3, r9
 80024fa:	1891      	adds	r1, r2, r2
 80024fc:	6239      	str	r1, [r7, #32]
 80024fe:	415b      	adcs	r3, r3
 8002500:	627b      	str	r3, [r7, #36]	; 0x24
 8002502:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002506:	4641      	mov	r1, r8
 8002508:	1854      	adds	r4, r2, r1
 800250a:	4649      	mov	r1, r9
 800250c:	eb43 0501 	adc.w	r5, r3, r1
 8002510:	f04f 0200 	mov.w	r2, #0
 8002514:	f04f 0300 	mov.w	r3, #0
 8002518:	00eb      	lsls	r3, r5, #3
 800251a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800251e:	00e2      	lsls	r2, r4, #3
 8002520:	4614      	mov	r4, r2
 8002522:	461d      	mov	r5, r3
 8002524:	4643      	mov	r3, r8
 8002526:	18e3      	adds	r3, r4, r3
 8002528:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800252c:	464b      	mov	r3, r9
 800252e:	eb45 0303 	adc.w	r3, r5, r3
 8002532:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002536:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	2200      	movs	r2, #0
 800253e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002542:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002546:	f04f 0200 	mov.w	r2, #0
 800254a:	f04f 0300 	mov.w	r3, #0
 800254e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002552:	4629      	mov	r1, r5
 8002554:	008b      	lsls	r3, r1, #2
 8002556:	4621      	mov	r1, r4
 8002558:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800255c:	4621      	mov	r1, r4
 800255e:	008a      	lsls	r2, r1, #2
 8002560:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002564:	f7fd fe4c 	bl	8000200 <__aeabi_uldivmod>
 8002568:	4602      	mov	r2, r0
 800256a:	460b      	mov	r3, r1
 800256c:	4b60      	ldr	r3, [pc, #384]	; (80026f0 <UART_SetConfig+0x4e4>)
 800256e:	fba3 2302 	umull	r2, r3, r3, r2
 8002572:	095b      	lsrs	r3, r3, #5
 8002574:	011c      	lsls	r4, r3, #4
 8002576:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800257a:	2200      	movs	r2, #0
 800257c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002580:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002584:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002588:	4642      	mov	r2, r8
 800258a:	464b      	mov	r3, r9
 800258c:	1891      	adds	r1, r2, r2
 800258e:	61b9      	str	r1, [r7, #24]
 8002590:	415b      	adcs	r3, r3
 8002592:	61fb      	str	r3, [r7, #28]
 8002594:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002598:	4641      	mov	r1, r8
 800259a:	1851      	adds	r1, r2, r1
 800259c:	6139      	str	r1, [r7, #16]
 800259e:	4649      	mov	r1, r9
 80025a0:	414b      	adcs	r3, r1
 80025a2:	617b      	str	r3, [r7, #20]
 80025a4:	f04f 0200 	mov.w	r2, #0
 80025a8:	f04f 0300 	mov.w	r3, #0
 80025ac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80025b0:	4659      	mov	r1, fp
 80025b2:	00cb      	lsls	r3, r1, #3
 80025b4:	4651      	mov	r1, sl
 80025b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80025ba:	4651      	mov	r1, sl
 80025bc:	00ca      	lsls	r2, r1, #3
 80025be:	4610      	mov	r0, r2
 80025c0:	4619      	mov	r1, r3
 80025c2:	4603      	mov	r3, r0
 80025c4:	4642      	mov	r2, r8
 80025c6:	189b      	adds	r3, r3, r2
 80025c8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80025cc:	464b      	mov	r3, r9
 80025ce:	460a      	mov	r2, r1
 80025d0:	eb42 0303 	adc.w	r3, r2, r3
 80025d4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80025d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	2200      	movs	r2, #0
 80025e0:	67bb      	str	r3, [r7, #120]	; 0x78
 80025e2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80025e4:	f04f 0200 	mov.w	r2, #0
 80025e8:	f04f 0300 	mov.w	r3, #0
 80025ec:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80025f0:	4649      	mov	r1, r9
 80025f2:	008b      	lsls	r3, r1, #2
 80025f4:	4641      	mov	r1, r8
 80025f6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80025fa:	4641      	mov	r1, r8
 80025fc:	008a      	lsls	r2, r1, #2
 80025fe:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002602:	f7fd fdfd 	bl	8000200 <__aeabi_uldivmod>
 8002606:	4602      	mov	r2, r0
 8002608:	460b      	mov	r3, r1
 800260a:	4b39      	ldr	r3, [pc, #228]	; (80026f0 <UART_SetConfig+0x4e4>)
 800260c:	fba3 1302 	umull	r1, r3, r3, r2
 8002610:	095b      	lsrs	r3, r3, #5
 8002612:	2164      	movs	r1, #100	; 0x64
 8002614:	fb01 f303 	mul.w	r3, r1, r3
 8002618:	1ad3      	subs	r3, r2, r3
 800261a:	011b      	lsls	r3, r3, #4
 800261c:	3332      	adds	r3, #50	; 0x32
 800261e:	4a34      	ldr	r2, [pc, #208]	; (80026f0 <UART_SetConfig+0x4e4>)
 8002620:	fba2 2303 	umull	r2, r3, r2, r3
 8002624:	095b      	lsrs	r3, r3, #5
 8002626:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800262a:	441c      	add	r4, r3
 800262c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002630:	2200      	movs	r2, #0
 8002632:	673b      	str	r3, [r7, #112]	; 0x70
 8002634:	677a      	str	r2, [r7, #116]	; 0x74
 8002636:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800263a:	4642      	mov	r2, r8
 800263c:	464b      	mov	r3, r9
 800263e:	1891      	adds	r1, r2, r2
 8002640:	60b9      	str	r1, [r7, #8]
 8002642:	415b      	adcs	r3, r3
 8002644:	60fb      	str	r3, [r7, #12]
 8002646:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800264a:	4641      	mov	r1, r8
 800264c:	1851      	adds	r1, r2, r1
 800264e:	6039      	str	r1, [r7, #0]
 8002650:	4649      	mov	r1, r9
 8002652:	414b      	adcs	r3, r1
 8002654:	607b      	str	r3, [r7, #4]
 8002656:	f04f 0200 	mov.w	r2, #0
 800265a:	f04f 0300 	mov.w	r3, #0
 800265e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002662:	4659      	mov	r1, fp
 8002664:	00cb      	lsls	r3, r1, #3
 8002666:	4651      	mov	r1, sl
 8002668:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800266c:	4651      	mov	r1, sl
 800266e:	00ca      	lsls	r2, r1, #3
 8002670:	4610      	mov	r0, r2
 8002672:	4619      	mov	r1, r3
 8002674:	4603      	mov	r3, r0
 8002676:	4642      	mov	r2, r8
 8002678:	189b      	adds	r3, r3, r2
 800267a:	66bb      	str	r3, [r7, #104]	; 0x68
 800267c:	464b      	mov	r3, r9
 800267e:	460a      	mov	r2, r1
 8002680:	eb42 0303 	adc.w	r3, r2, r3
 8002684:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002686:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	2200      	movs	r2, #0
 800268e:	663b      	str	r3, [r7, #96]	; 0x60
 8002690:	667a      	str	r2, [r7, #100]	; 0x64
 8002692:	f04f 0200 	mov.w	r2, #0
 8002696:	f04f 0300 	mov.w	r3, #0
 800269a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800269e:	4649      	mov	r1, r9
 80026a0:	008b      	lsls	r3, r1, #2
 80026a2:	4641      	mov	r1, r8
 80026a4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80026a8:	4641      	mov	r1, r8
 80026aa:	008a      	lsls	r2, r1, #2
 80026ac:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80026b0:	f7fd fda6 	bl	8000200 <__aeabi_uldivmod>
 80026b4:	4602      	mov	r2, r0
 80026b6:	460b      	mov	r3, r1
 80026b8:	4b0d      	ldr	r3, [pc, #52]	; (80026f0 <UART_SetConfig+0x4e4>)
 80026ba:	fba3 1302 	umull	r1, r3, r3, r2
 80026be:	095b      	lsrs	r3, r3, #5
 80026c0:	2164      	movs	r1, #100	; 0x64
 80026c2:	fb01 f303 	mul.w	r3, r1, r3
 80026c6:	1ad3      	subs	r3, r2, r3
 80026c8:	011b      	lsls	r3, r3, #4
 80026ca:	3332      	adds	r3, #50	; 0x32
 80026cc:	4a08      	ldr	r2, [pc, #32]	; (80026f0 <UART_SetConfig+0x4e4>)
 80026ce:	fba2 2303 	umull	r2, r3, r2, r3
 80026d2:	095b      	lsrs	r3, r3, #5
 80026d4:	f003 020f 	and.w	r2, r3, #15
 80026d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4422      	add	r2, r4
 80026e0:	609a      	str	r2, [r3, #8]
}
 80026e2:	bf00      	nop
 80026e4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80026e8:	46bd      	mov	sp, r7
 80026ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80026ee:	bf00      	nop
 80026f0:	51eb851f 	.word	0x51eb851f

080026f4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b08a      	sub	sp, #40	; 0x28
 80026f8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80026fa:	2300      	movs	r3, #0
 80026fc:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80026fe:	4b7d      	ldr	r3, [pc, #500]	; (80028f4 <xTaskIncrementTick+0x200>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	2b00      	cmp	r3, #0
 8002704:	f040 80ec 	bne.w	80028e0 <xTaskIncrementTick+0x1ec>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002708:	4b7b      	ldr	r3, [pc, #492]	; (80028f8 <xTaskIncrementTick+0x204>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	3301      	adds	r3, #1
 800270e:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002710:	4a79      	ldr	r2, [pc, #484]	; (80028f8 <xTaskIncrementTick+0x204>)
 8002712:	6a3b      	ldr	r3, [r7, #32]
 8002714:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002716:	6a3b      	ldr	r3, [r7, #32]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d120      	bne.n	800275e <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 800271c:	4b77      	ldr	r3, [pc, #476]	; (80028fc <xTaskIncrementTick+0x208>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d00a      	beq.n	800273c <xTaskIncrementTick+0x48>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8002726:	f04f 0350 	mov.w	r3, #80	; 0x50
 800272a:	f383 8811 	msr	BASEPRI, r3
 800272e:	f3bf 8f6f 	isb	sy
 8002732:	f3bf 8f4f 	dsb	sy
 8002736:	607b      	str	r3, [r7, #4]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8002738:	bf00      	nop
 800273a:	e7fe      	b.n	800273a <xTaskIncrementTick+0x46>
 800273c:	4b6f      	ldr	r3, [pc, #444]	; (80028fc <xTaskIncrementTick+0x208>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	61fb      	str	r3, [r7, #28]
 8002742:	4b6f      	ldr	r3, [pc, #444]	; (8002900 <xTaskIncrementTick+0x20c>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a6d      	ldr	r2, [pc, #436]	; (80028fc <xTaskIncrementTick+0x208>)
 8002748:	6013      	str	r3, [r2, #0]
 800274a:	4a6d      	ldr	r2, [pc, #436]	; (8002900 <xTaskIncrementTick+0x20c>)
 800274c:	69fb      	ldr	r3, [r7, #28]
 800274e:	6013      	str	r3, [r2, #0]
 8002750:	4b6c      	ldr	r3, [pc, #432]	; (8002904 <xTaskIncrementTick+0x210>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	3301      	adds	r3, #1
 8002756:	4a6b      	ldr	r2, [pc, #428]	; (8002904 <xTaskIncrementTick+0x210>)
 8002758:	6013      	str	r3, [r2, #0]
 800275a:	f000 f93d 	bl	80029d8 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800275e:	4b6a      	ldr	r3, [pc, #424]	; (8002908 <xTaskIncrementTick+0x214>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	6a3a      	ldr	r2, [r7, #32]
 8002764:	429a      	cmp	r2, r3
 8002766:	f0c0 80a6 	bcc.w	80028b6 <xTaskIncrementTick+0x1c2>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800276a:	4b64      	ldr	r3, [pc, #400]	; (80028fc <xTaskIncrementTick+0x208>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d104      	bne.n	800277e <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002774:	4b64      	ldr	r3, [pc, #400]	; (8002908 <xTaskIncrementTick+0x214>)
 8002776:	f04f 32ff 	mov.w	r2, #4294967295
 800277a:	601a      	str	r2, [r3, #0]
                    break;
 800277c:	e09b      	b.n	80028b6 <xTaskIncrementTick+0x1c2>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800277e:	4b5f      	ldr	r3, [pc, #380]	; (80028fc <xTaskIncrementTick+0x208>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	68db      	ldr	r3, [r3, #12]
 8002784:	68db      	ldr	r3, [r3, #12]
 8002786:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002788:	69bb      	ldr	r3, [r7, #24]
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 800278e:	6a3a      	ldr	r2, [r7, #32]
 8002790:	697b      	ldr	r3, [r7, #20]
 8002792:	429a      	cmp	r2, r3
 8002794:	d203      	bcs.n	800279e <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8002796:	4a5c      	ldr	r2, [pc, #368]	; (8002908 <xTaskIncrementTick+0x214>)
 8002798:	697b      	ldr	r3, [r7, #20]
 800279a:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 800279c:	e08b      	b.n	80028b6 <xTaskIncrementTick+0x1c2>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800279e:	69bb      	ldr	r3, [r7, #24]
 80027a0:	695b      	ldr	r3, [r3, #20]
 80027a2:	613b      	str	r3, [r7, #16]
 80027a4:	69bb      	ldr	r3, [r7, #24]
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	69ba      	ldr	r2, [r7, #24]
 80027aa:	68d2      	ldr	r2, [r2, #12]
 80027ac:	609a      	str	r2, [r3, #8]
 80027ae:	69bb      	ldr	r3, [r7, #24]
 80027b0:	68db      	ldr	r3, [r3, #12]
 80027b2:	69ba      	ldr	r2, [r7, #24]
 80027b4:	6892      	ldr	r2, [r2, #8]
 80027b6:	605a      	str	r2, [r3, #4]
 80027b8:	693b      	ldr	r3, [r7, #16]
 80027ba:	685a      	ldr	r2, [r3, #4]
 80027bc:	69bb      	ldr	r3, [r7, #24]
 80027be:	3304      	adds	r3, #4
 80027c0:	429a      	cmp	r2, r3
 80027c2:	d103      	bne.n	80027cc <xTaskIncrementTick+0xd8>
 80027c4:	69bb      	ldr	r3, [r7, #24]
 80027c6:	68da      	ldr	r2, [r3, #12]
 80027c8:	693b      	ldr	r3, [r7, #16]
 80027ca:	605a      	str	r2, [r3, #4]
 80027cc:	69bb      	ldr	r3, [r7, #24]
 80027ce:	2200      	movs	r2, #0
 80027d0:	615a      	str	r2, [r3, #20]
 80027d2:	693b      	ldr	r3, [r7, #16]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	1e5a      	subs	r2, r3, #1
 80027d8:	693b      	ldr	r3, [r7, #16]
 80027da:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80027dc:	69bb      	ldr	r3, [r7, #24]
 80027de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d01e      	beq.n	8002822 <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80027e4:	69bb      	ldr	r3, [r7, #24]
 80027e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027e8:	60fb      	str	r3, [r7, #12]
 80027ea:	69bb      	ldr	r3, [r7, #24]
 80027ec:	69db      	ldr	r3, [r3, #28]
 80027ee:	69ba      	ldr	r2, [r7, #24]
 80027f0:	6a12      	ldr	r2, [r2, #32]
 80027f2:	609a      	str	r2, [r3, #8]
 80027f4:	69bb      	ldr	r3, [r7, #24]
 80027f6:	6a1b      	ldr	r3, [r3, #32]
 80027f8:	69ba      	ldr	r2, [r7, #24]
 80027fa:	69d2      	ldr	r2, [r2, #28]
 80027fc:	605a      	str	r2, [r3, #4]
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	685a      	ldr	r2, [r3, #4]
 8002802:	69bb      	ldr	r3, [r7, #24]
 8002804:	3318      	adds	r3, #24
 8002806:	429a      	cmp	r2, r3
 8002808:	d103      	bne.n	8002812 <xTaskIncrementTick+0x11e>
 800280a:	69bb      	ldr	r3, [r7, #24]
 800280c:	6a1a      	ldr	r2, [r3, #32]
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	605a      	str	r2, [r3, #4]
 8002812:	69bb      	ldr	r3, [r7, #24]
 8002814:	2200      	movs	r2, #0
 8002816:	629a      	str	r2, [r3, #40]	; 0x28
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	1e5a      	subs	r2, r3, #1
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8002822:	69bb      	ldr	r3, [r7, #24]
 8002824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002826:	2201      	movs	r2, #1
 8002828:	409a      	lsls	r2, r3
 800282a:	4b38      	ldr	r3, [pc, #224]	; (800290c <xTaskIncrementTick+0x218>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4313      	orrs	r3, r2
 8002830:	4a36      	ldr	r2, [pc, #216]	; (800290c <xTaskIncrementTick+0x218>)
 8002832:	6013      	str	r3, [r2, #0]
 8002834:	69bb      	ldr	r3, [r7, #24]
 8002836:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002838:	4935      	ldr	r1, [pc, #212]	; (8002910 <xTaskIncrementTick+0x21c>)
 800283a:	4613      	mov	r3, r2
 800283c:	009b      	lsls	r3, r3, #2
 800283e:	4413      	add	r3, r2
 8002840:	009b      	lsls	r3, r3, #2
 8002842:	440b      	add	r3, r1
 8002844:	3304      	adds	r3, #4
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	60bb      	str	r3, [r7, #8]
 800284a:	69bb      	ldr	r3, [r7, #24]
 800284c:	68ba      	ldr	r2, [r7, #8]
 800284e:	609a      	str	r2, [r3, #8]
 8002850:	68bb      	ldr	r3, [r7, #8]
 8002852:	689a      	ldr	r2, [r3, #8]
 8002854:	69bb      	ldr	r3, [r7, #24]
 8002856:	60da      	str	r2, [r3, #12]
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	689b      	ldr	r3, [r3, #8]
 800285c:	69ba      	ldr	r2, [r7, #24]
 800285e:	3204      	adds	r2, #4
 8002860:	605a      	str	r2, [r3, #4]
 8002862:	69bb      	ldr	r3, [r7, #24]
 8002864:	1d1a      	adds	r2, r3, #4
 8002866:	68bb      	ldr	r3, [r7, #8]
 8002868:	609a      	str	r2, [r3, #8]
 800286a:	69bb      	ldr	r3, [r7, #24]
 800286c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800286e:	4613      	mov	r3, r2
 8002870:	009b      	lsls	r3, r3, #2
 8002872:	4413      	add	r3, r2
 8002874:	009b      	lsls	r3, r3, #2
 8002876:	4a26      	ldr	r2, [pc, #152]	; (8002910 <xTaskIncrementTick+0x21c>)
 8002878:	441a      	add	r2, r3
 800287a:	69bb      	ldr	r3, [r7, #24]
 800287c:	615a      	str	r2, [r3, #20]
 800287e:	69bb      	ldr	r3, [r7, #24]
 8002880:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002882:	4923      	ldr	r1, [pc, #140]	; (8002910 <xTaskIncrementTick+0x21c>)
 8002884:	4613      	mov	r3, r2
 8002886:	009b      	lsls	r3, r3, #2
 8002888:	4413      	add	r3, r2
 800288a:	009b      	lsls	r3, r3, #2
 800288c:	440b      	add	r3, r1
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	1c59      	adds	r1, r3, #1
 8002892:	481f      	ldr	r0, [pc, #124]	; (8002910 <xTaskIncrementTick+0x21c>)
 8002894:	4613      	mov	r3, r2
 8002896:	009b      	lsls	r3, r3, #2
 8002898:	4413      	add	r3, r2
 800289a:	009b      	lsls	r3, r3, #2
 800289c:	4403      	add	r3, r0
 800289e:	6019      	str	r1, [r3, #0]
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80028a0:	69bb      	ldr	r3, [r7, #24]
 80028a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028a4:	4b1b      	ldr	r3, [pc, #108]	; (8002914 <xTaskIncrementTick+0x220>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028aa:	429a      	cmp	r2, r3
 80028ac:	f4ff af5d 	bcc.w	800276a <xTaskIncrementTick+0x76>
                            {
                                xSwitchRequired = pdTRUE;
 80028b0:	2301      	movs	r3, #1
 80028b2:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80028b4:	e759      	b.n	800276a <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80028b6:	4b17      	ldr	r3, [pc, #92]	; (8002914 <xTaskIncrementTick+0x220>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028bc:	4914      	ldr	r1, [pc, #80]	; (8002910 <xTaskIncrementTick+0x21c>)
 80028be:	4613      	mov	r3, r2
 80028c0:	009b      	lsls	r3, r3, #2
 80028c2:	4413      	add	r3, r2
 80028c4:	009b      	lsls	r3, r3, #2
 80028c6:	440b      	add	r3, r1
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	2b01      	cmp	r3, #1
 80028cc:	d901      	bls.n	80028d2 <xTaskIncrementTick+0x1de>
                {
                    xSwitchRequired = pdTRUE;
 80028ce:	2301      	movs	r3, #1
 80028d0:	627b      	str	r3, [r7, #36]	; 0x24
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 80028d2:	4b11      	ldr	r3, [pc, #68]	; (8002918 <xTaskIncrementTick+0x224>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d007      	beq.n	80028ea <xTaskIncrementTick+0x1f6>
                {
                    xSwitchRequired = pdTRUE;
 80028da:	2301      	movs	r3, #1
 80028dc:	627b      	str	r3, [r7, #36]	; 0x24
 80028de:	e004      	b.n	80028ea <xTaskIncrementTick+0x1f6>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80028e0:	4b0e      	ldr	r3, [pc, #56]	; (800291c <xTaskIncrementTick+0x228>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	3301      	adds	r3, #1
 80028e6:	4a0d      	ldr	r2, [pc, #52]	; (800291c <xTaskIncrementTick+0x228>)
 80028e8:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 80028ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	3728      	adds	r7, #40	; 0x28
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd80      	pop	{r7, pc}
 80028f4:	20000110 	.word	0x20000110
 80028f8:	200000f8 	.word	0x200000f8
 80028fc:	200000f0 	.word	0x200000f0
 8002900:	200000f4 	.word	0x200000f4
 8002904:	20000108 	.word	0x20000108
 8002908:	2000010c 	.word	0x2000010c
 800290c:	200000fc 	.word	0x200000fc
 8002910:	2000008c 	.word	0x2000008c
 8002914:	20000088 	.word	0x20000088
 8002918:	20000104 	.word	0x20000104
 800291c:	20000100 	.word	0x20000100

08002920 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002920:	b480      	push	{r7}
 8002922:	b087      	sub	sp, #28
 8002924:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002926:	4b27      	ldr	r3, [pc, #156]	; (80029c4 <vTaskSwitchContext+0xa4>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d003      	beq.n	8002936 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800292e:	4b26      	ldr	r3, [pc, #152]	; (80029c8 <vTaskSwitchContext+0xa8>)
 8002930:	2201      	movs	r2, #1
 8002932:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8002934:	e03f      	b.n	80029b6 <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 8002936:	4b24      	ldr	r3, [pc, #144]	; (80029c8 <vTaskSwitchContext+0xa8>)
 8002938:	2200      	movs	r2, #0
 800293a:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800293c:	4b23      	ldr	r3, [pc, #140]	; (80029cc <vTaskSwitchContext+0xac>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	fab3 f383 	clz	r3, r3
 8002948:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 800294a:	7afb      	ldrb	r3, [r7, #11]
 800294c:	f1c3 031f 	rsb	r3, r3, #31
 8002950:	617b      	str	r3, [r7, #20]
 8002952:	491f      	ldr	r1, [pc, #124]	; (80029d0 <vTaskSwitchContext+0xb0>)
 8002954:	697a      	ldr	r2, [r7, #20]
 8002956:	4613      	mov	r3, r2
 8002958:	009b      	lsls	r3, r3, #2
 800295a:	4413      	add	r3, r2
 800295c:	009b      	lsls	r3, r3, #2
 800295e:	440b      	add	r3, r1
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d10a      	bne.n	800297c <vTaskSwitchContext+0x5c>
        __asm volatile
 8002966:	f04f 0350 	mov.w	r3, #80	; 0x50
 800296a:	f383 8811 	msr	BASEPRI, r3
 800296e:	f3bf 8f6f 	isb	sy
 8002972:	f3bf 8f4f 	dsb	sy
 8002976:	607b      	str	r3, [r7, #4]
    }
 8002978:	bf00      	nop
 800297a:	e7fe      	b.n	800297a <vTaskSwitchContext+0x5a>
 800297c:	697a      	ldr	r2, [r7, #20]
 800297e:	4613      	mov	r3, r2
 8002980:	009b      	lsls	r3, r3, #2
 8002982:	4413      	add	r3, r2
 8002984:	009b      	lsls	r3, r3, #2
 8002986:	4a12      	ldr	r2, [pc, #72]	; (80029d0 <vTaskSwitchContext+0xb0>)
 8002988:	4413      	add	r3, r2
 800298a:	613b      	str	r3, [r7, #16]
 800298c:	693b      	ldr	r3, [r7, #16]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	685a      	ldr	r2, [r3, #4]
 8002992:	693b      	ldr	r3, [r7, #16]
 8002994:	605a      	str	r2, [r3, #4]
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	685a      	ldr	r2, [r3, #4]
 800299a:	693b      	ldr	r3, [r7, #16]
 800299c:	3308      	adds	r3, #8
 800299e:	429a      	cmp	r2, r3
 80029a0:	d104      	bne.n	80029ac <vTaskSwitchContext+0x8c>
 80029a2:	693b      	ldr	r3, [r7, #16]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	685a      	ldr	r2, [r3, #4]
 80029a8:	693b      	ldr	r3, [r7, #16]
 80029aa:	605a      	str	r2, [r3, #4]
 80029ac:	693b      	ldr	r3, [r7, #16]
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	68db      	ldr	r3, [r3, #12]
 80029b2:	4a08      	ldr	r2, [pc, #32]	; (80029d4 <vTaskSwitchContext+0xb4>)
 80029b4:	6013      	str	r3, [r2, #0]
}
 80029b6:	bf00      	nop
 80029b8:	371c      	adds	r7, #28
 80029ba:	46bd      	mov	sp, r7
 80029bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c0:	4770      	bx	lr
 80029c2:	bf00      	nop
 80029c4:	20000110 	.word	0x20000110
 80029c8:	20000104 	.word	0x20000104
 80029cc:	200000fc 	.word	0x200000fc
 80029d0:	2000008c 	.word	0x2000008c
 80029d4:	20000088 	.word	0x20000088

080029d8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80029d8:	b480      	push	{r7}
 80029da:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80029dc:	4b0a      	ldr	r3, [pc, #40]	; (8002a08 <prvResetNextTaskUnblockTime+0x30>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d104      	bne.n	80029f0 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80029e6:	4b09      	ldr	r3, [pc, #36]	; (8002a0c <prvResetNextTaskUnblockTime+0x34>)
 80029e8:	f04f 32ff 	mov.w	r2, #4294967295
 80029ec:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80029ee:	e005      	b.n	80029fc <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80029f0:	4b05      	ldr	r3, [pc, #20]	; (8002a08 <prvResetNextTaskUnblockTime+0x30>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	68db      	ldr	r3, [r3, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a04      	ldr	r2, [pc, #16]	; (8002a0c <prvResetNextTaskUnblockTime+0x34>)
 80029fa:	6013      	str	r3, [r2, #0]
}
 80029fc:	bf00      	nop
 80029fe:	46bd      	mov	sp, r7
 8002a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a04:	4770      	bx	lr
 8002a06:	bf00      	nop
 8002a08:	200000f0 	.word	0x200000f0
 8002a0c:	2000010c 	.word	0x2000010c

08002a10 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8002a10:	4b07      	ldr	r3, [pc, #28]	; (8002a30 <pxCurrentTCBConst2>)
 8002a12:	6819      	ldr	r1, [r3, #0]
 8002a14:	6808      	ldr	r0, [r1, #0]
 8002a16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a1a:	f380 8809 	msr	PSP, r0
 8002a1e:	f3bf 8f6f 	isb	sy
 8002a22:	f04f 0000 	mov.w	r0, #0
 8002a26:	f380 8811 	msr	BASEPRI, r0
 8002a2a:	4770      	bx	lr
 8002a2c:	f3af 8000 	nop.w

08002a30 <pxCurrentTCBConst2>:
 8002a30:	20000088 	.word	0x20000088
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8002a34:	bf00      	nop
 8002a36:	bf00      	nop
	...

08002a40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8002a40:	f3ef 8009 	mrs	r0, PSP
 8002a44:	f3bf 8f6f 	isb	sy
 8002a48:	4b15      	ldr	r3, [pc, #84]	; (8002aa0 <pxCurrentTCBConst>)
 8002a4a:	681a      	ldr	r2, [r3, #0]
 8002a4c:	f01e 0f10 	tst.w	lr, #16
 8002a50:	bf08      	it	eq
 8002a52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002a56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a5a:	6010      	str	r0, [r2, #0]
 8002a5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002a60:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002a64:	f380 8811 	msr	BASEPRI, r0
 8002a68:	f3bf 8f4f 	dsb	sy
 8002a6c:	f3bf 8f6f 	isb	sy
 8002a70:	f7ff ff56 	bl	8002920 <vTaskSwitchContext>
 8002a74:	f04f 0000 	mov.w	r0, #0
 8002a78:	f380 8811 	msr	BASEPRI, r0
 8002a7c:	bc09      	pop	{r0, r3}
 8002a7e:	6819      	ldr	r1, [r3, #0]
 8002a80:	6808      	ldr	r0, [r1, #0]
 8002a82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a86:	f01e 0f10 	tst.w	lr, #16
 8002a8a:	bf08      	it	eq
 8002a8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002a90:	f380 8809 	msr	PSP, r0
 8002a94:	f3bf 8f6f 	isb	sy
 8002a98:	4770      	bx	lr
 8002a9a:	bf00      	nop
 8002a9c:	f3af 8000 	nop.w

08002aa0 <pxCurrentTCBConst>:
 8002aa0:	20000088 	.word	0x20000088
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8002aa4:	bf00      	nop
 8002aa6:	bf00      	nop

08002aa8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b082      	sub	sp, #8
 8002aac:	af00      	add	r7, sp, #0
        __asm volatile
 8002aae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ab2:	f383 8811 	msr	BASEPRI, r3
 8002ab6:	f3bf 8f6f 	isb	sy
 8002aba:	f3bf 8f4f 	dsb	sy
 8002abe:	607b      	str	r3, [r7, #4]
    }
 8002ac0:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8002ac2:	f7ff fe17 	bl	80026f4 <xTaskIncrementTick>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d003      	beq.n	8002ad4 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002acc:	4b06      	ldr	r3, [pc, #24]	; (8002ae8 <SysTick_Handler+0x40>)
 8002ace:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ad2:	601a      	str	r2, [r3, #0]
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8002ade:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8002ae0:	bf00      	nop
 8002ae2:	3708      	adds	r7, #8
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bd80      	pop	{r7, pc}
 8002ae8:	e000ed04 	.word	0xe000ed04

08002aec <Lamp_pushSwitch>:
#endif
/*.$endskip${QP_VERSION} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^*/
/*.$define${LampSM} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv*/
/*.${LampSM::Lamp} .........................................................*/
/*.${LampSM::Lamp::pushSwitch} .............................................*/
void Lamp_pushSwitch(Lamp * const me) {
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b084      	sub	sp, #16
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
    QEvt e;
    e.sig = (QSignal)SOFT_CLICK_SIG;
 8002af4:	2304      	movs	r3, #4
 8002af6:	81bb      	strh	r3, [r7, #12]
    QHSM_DISPATCH(&me->super, &e, 0 );
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	6878      	ldr	r0, [r7, #4]
 8002b00:	f107 010c 	add.w	r1, r7, #12
 8002b04:	2200      	movs	r2, #0
 8002b06:	4798      	blx	r3
}
 8002b08:	bf00      	nop
 8002b0a:	3710      	adds	r7, #16
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bd80      	pop	{r7, pc}

08002b10 <Lamp_ctor>:

/*.${LampSM::Lamp::ctor} ...................................................*/
void Lamp_ctor(Lamp * const me) {
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b082      	sub	sp, #8
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
    QHsm_ctor(&me->super, Q_STATE_CAST(&Lamp_initial));
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	4904      	ldr	r1, [pc, #16]	; (8002b2c <Lamp_ctor+0x1c>)
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f000 f93b 	bl	8002d98 <QHsm_ctor>
}
 8002b22:	bf00      	nop
 8002b24:	3708      	adds	r7, #8
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd80      	pop	{r7, pc}
 8002b2a:	bf00      	nop
 8002b2c:	08002b79 	.word	0x08002b79

08002b30 <Lamp_holdSwitch>:

/*.${LampSM::Lamp::holdSwitch} .............................................*/
void Lamp_holdSwitch(Lamp * const me) {
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b084      	sub	sp, #16
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
    QEvt e;
    e.sig = (QSignal)HARD_CLICK_SIG;
 8002b38:	2305      	movs	r3, #5
 8002b3a:	81bb      	strh	r3, [r7, #12]
    QHSM_DISPATCH(&me->super, &e, 0 );
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	6878      	ldr	r0, [r7, #4]
 8002b44:	f107 010c 	add.w	r1, r7, #12
 8002b48:	2200      	movs	r2, #0
 8002b4a:	4798      	blx	r3
}
 8002b4c:	bf00      	nop
 8002b4e:	3710      	adds	r7, #16
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bd80      	pop	{r7, pc}

08002b54 <Lamp_blink>:

/*.${LampSM::Lamp::blink} ..................................................*/
void Lamp_blink(Lamp * const me) {
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b084      	sub	sp, #16
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
        QEvt e;
        e.sig = (QSignal)BLINK_SIG;
 8002b5c:	2306      	movs	r3, #6
 8002b5e:	81bb      	strh	r3, [r7, #12]
        QHSM_DISPATCH(&me->super, &e, 0 );
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	6878      	ldr	r0, [r7, #4]
 8002b68:	f107 010c 	add.w	r1, r7, #12
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	4798      	blx	r3
}
 8002b70:	bf00      	nop
 8002b72:	3710      	adds	r7, #16
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bd80      	pop	{r7, pc}

08002b78 <Lamp_initial>:

/*.${LampSM::Lamp::SM} .....................................................*/
QState Lamp_initial(Lamp * const me, void const * const par) {
 8002b78:	b480      	push	{r7}
 8002b7a:	b083      	sub	sp, #12
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
 8002b80:	6039      	str	r1, [r7, #0]
    /*.${LampSM::Lamp::SM::initial} */
    /* state history attributes */
    me->hist_LED_RED = Q_STATE_CAST(&Lamp_RED_BLINK);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	4a07      	ldr	r2, [pc, #28]	; (8002ba4 <Lamp_initial+0x2c>)
 8002b86:	611a      	str	r2, [r3, #16]
    me->hist_LED_GREEN = Q_STATE_CAST(&Lamp_GREEN_BLINK);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	4a07      	ldr	r2, [pc, #28]	; (8002ba8 <Lamp_initial+0x30>)
 8002b8c:	615a      	str	r2, [r3, #20]
    return Q_TRAN(&Lamp_LED_RED);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	4a06      	ldr	r2, [pc, #24]	; (8002bac <Lamp_initial+0x34>)
 8002b92:	609a      	str	r2, [r3, #8]
 8002b94:	2308      	movs	r3, #8
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	370c      	adds	r7, #12
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba0:	4770      	bx	lr
 8002ba2:	bf00      	nop
 8002ba4:	08002c39 	.word	0x08002c39
 8002ba8:	08002d21 	.word	0x08002d21
 8002bac:	08002bb1 	.word	0x08002bb1

08002bb0 <Lamp_LED_RED>:
/*.${LampSM::Lamp::SM::LED_RED} ............................................*/
QState Lamp_LED_RED(Lamp * const me, QEvt const * const e) {
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b084      	sub	sp, #16
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
 8002bb8:	6039      	str	r1, [r7, #0]
    QState status_;
    switch (e->sig) {
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	881b      	ldrh	r3, [r3, #0]
 8002bbe:	3b01      	subs	r3, #1
 8002bc0:	2b04      	cmp	r3, #4
 8002bc2:	d82a      	bhi.n	8002c1a <Lamp_LED_RED+0x6a>
 8002bc4:	a201      	add	r2, pc, #4	; (adr r2, 8002bcc <Lamp_LED_RED+0x1c>)
 8002bc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bca:	bf00      	nop
 8002bcc:	08002be1 	.word	0x08002be1
 8002bd0:	08002beb 	.word	0x08002beb
 8002bd4:	08002c1b 	.word	0x08002c1b
 8002bd8:	08002c01 	.word	0x08002c01
 8002bdc:	08002c0f 	.word	0x08002c0f
        /*.${LampSM::Lamp::SM::LED_RED} */
        case Q_ENTRY_SIG: {
            APP_RED_LED_ON();
 8002be0:	f7fd fcea 	bl	80005b8 <APP_RED_LED_ON>
            status_ = Q_HANDLED();
 8002be4:	2303      	movs	r3, #3
 8002be6:	73fb      	strb	r3, [r7, #15]
            break;
 8002be8:	e01d      	b.n	8002c26 <Lamp_LED_RED+0x76>
        }
        /*.${LampSM::Lamp::SM::LED_RED} */
        case Q_EXIT_SIG: {
            APP_RED_LED_OFF();
 8002bea:	f7fd fd01 	bl	80005f0 <APP_RED_LED_OFF>
            /* save deep history */
            me->hist_LED_RED = QHsm_state(Q_HSM_UPCAST(me));
 8002bee:	6878      	ldr	r0, [r7, #4]
 8002bf0:	f000 f8c6 	bl	8002d80 <QHsm_state>
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	611a      	str	r2, [r3, #16]
            status_ = Q_HANDLED();
 8002bfa:	2303      	movs	r3, #3
 8002bfc:	73fb      	strb	r3, [r7, #15]
            break;
 8002bfe:	e012      	b.n	8002c26 <Lamp_LED_RED+0x76>
        }
        /*.${LampSM::Lamp::SM::LED_RED::SOFT_CLICK} */
        case SOFT_CLICK_SIG: {
            status_ = Q_TRAN_HIST(me->hist_LED_GREEN);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	695a      	ldr	r2, [r3, #20]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	609a      	str	r2, [r3, #8]
 8002c08:	230b      	movs	r3, #11
 8002c0a:	73fb      	strb	r3, [r7, #15]
            break;
 8002c0c:	e00b      	b.n	8002c26 <Lamp_LED_RED+0x76>
        }
        /*.${LampSM::Lamp::SM::LED_RED::HARD_CLICK} */
        case HARD_CLICK_SIG: {
            status_ = Q_TRAN(&Lamp_RED_BLINK);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	4a07      	ldr	r2, [pc, #28]	; (8002c30 <Lamp_LED_RED+0x80>)
 8002c12:	609a      	str	r2, [r3, #8]
 8002c14:	2308      	movs	r3, #8
 8002c16:	73fb      	strb	r3, [r7, #15]
            break;
 8002c18:	e005      	b.n	8002c26 <Lamp_LED_RED+0x76>
        }
        default: {
            status_ = Q_SUPER(&QHsm_top);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	4a05      	ldr	r2, [pc, #20]	; (8002c34 <Lamp_LED_RED+0x84>)
 8002c1e:	609a      	str	r2, [r3, #8]
 8002c20:	2300      	movs	r3, #0
 8002c22:	73fb      	strb	r3, [r7, #15]
            break;
 8002c24:	bf00      	nop
        }
    }
    return status_;
 8002c26:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	3710      	adds	r7, #16
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd80      	pop	{r7, pc}
 8002c30:	08002c39 	.word	0x08002c39
 8002c34:	08002dc9 	.word	0x08002dc9

08002c38 <Lamp_RED_BLINK>:
/*.${LampSM::Lamp::SM::LED_RED::RED_BLINK} .................................*/
QState Lamp_RED_BLINK(Lamp * const me, QEvt const * const e) {
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b084      	sub	sp, #16
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
 8002c40:	6039      	str	r1, [r7, #0]
    QState status_;
    switch (e->sig) {
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	881b      	ldrh	r3, [r3, #0]
 8002c46:	2b06      	cmp	r3, #6
 8002c48:	d013      	beq.n	8002c72 <Lamp_RED_BLINK+0x3a>
 8002c4a:	2b06      	cmp	r3, #6
 8002c4c:	dc16      	bgt.n	8002c7c <Lamp_RED_BLINK+0x44>
 8002c4e:	2b04      	cmp	r3, #4
 8002c50:	d002      	beq.n	8002c58 <Lamp_RED_BLINK+0x20>
 8002c52:	2b05      	cmp	r3, #5
 8002c54:	d007      	beq.n	8002c66 <Lamp_RED_BLINK+0x2e>
 8002c56:	e011      	b.n	8002c7c <Lamp_RED_BLINK+0x44>
        /*.${LampSM::Lamp::SM::LED_RED::RED_BLINK::SOFT_CLICK} */
        case SOFT_CLICK_SIG: {
            status_ = Q_TRAN_HIST(me->hist_LED_GREEN);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	695a      	ldr	r2, [r3, #20]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	609a      	str	r2, [r3, #8]
 8002c60:	230b      	movs	r3, #11
 8002c62:	73fb      	strb	r3, [r7, #15]
            break;
 8002c64:	e010      	b.n	8002c88 <Lamp_RED_BLINK+0x50>
        }
        /*.${LampSM::Lamp::SM::LED_RED::RED_BLINK::HARD_CLICK} */
        case HARD_CLICK_SIG: {
            status_ = Q_TRAN(&Lamp_LED_RED);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	4a0a      	ldr	r2, [pc, #40]	; (8002c94 <Lamp_RED_BLINK+0x5c>)
 8002c6a:	609a      	str	r2, [r3, #8]
 8002c6c:	2308      	movs	r3, #8
 8002c6e:	73fb      	strb	r3, [r7, #15]
            break;
 8002c70:	e00a      	b.n	8002c88 <Lamp_RED_BLINK+0x50>
        }
        /*.${LampSM::Lamp::SM::LED_RED::RED_BLINK::BLINK} */
        case BLINK_SIG: {
            APP_RED_LED_BLINK();
 8002c72:	f7fd fcd9 	bl	8000628 <APP_RED_LED_BLINK>
            status_ = Q_HANDLED();
 8002c76:	2303      	movs	r3, #3
 8002c78:	73fb      	strb	r3, [r7, #15]
            break;
 8002c7a:	e005      	b.n	8002c88 <Lamp_RED_BLINK+0x50>
        }
        default: {
            status_ = Q_SUPER(&Lamp_LED_RED);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	4a05      	ldr	r2, [pc, #20]	; (8002c94 <Lamp_RED_BLINK+0x5c>)
 8002c80:	609a      	str	r2, [r3, #8]
 8002c82:	2300      	movs	r3, #0
 8002c84:	73fb      	strb	r3, [r7, #15]
            break;
 8002c86:	bf00      	nop
        }
    }
    return status_;
 8002c88:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	3710      	adds	r7, #16
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}
 8002c92:	bf00      	nop
 8002c94:	08002bb1 	.word	0x08002bb1

08002c98 <Lamp_LED_GREEN>:
/*.${LampSM::Lamp::SM::LED_GREEN} ..........................................*/
QState Lamp_LED_GREEN(Lamp * const me, QEvt const * const e) {
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b084      	sub	sp, #16
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
 8002ca0:	6039      	str	r1, [r7, #0]
    QState status_;
    switch (e->sig) {
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	881b      	ldrh	r3, [r3, #0]
 8002ca6:	3b01      	subs	r3, #1
 8002ca8:	2b04      	cmp	r3, #4
 8002caa:	d82a      	bhi.n	8002d02 <Lamp_LED_GREEN+0x6a>
 8002cac:	a201      	add	r2, pc, #4	; (adr r2, 8002cb4 <Lamp_LED_GREEN+0x1c>)
 8002cae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cb2:	bf00      	nop
 8002cb4:	08002cc9 	.word	0x08002cc9
 8002cb8:	08002cd3 	.word	0x08002cd3
 8002cbc:	08002d03 	.word	0x08002d03
 8002cc0:	08002ce9 	.word	0x08002ce9
 8002cc4:	08002cf7 	.word	0x08002cf7
        /*.${LampSM::Lamp::SM::LED_GREEN} */
        case Q_ENTRY_SIG: {
            APP_GREEN_LED_ON();
 8002cc8:	f7fd fc1c 	bl	8000504 <APP_GREEN_LED_ON>
            status_ = Q_HANDLED();
 8002ccc:	2303      	movs	r3, #3
 8002cce:	73fb      	strb	r3, [r7, #15]
            break;
 8002cd0:	e01d      	b.n	8002d0e <Lamp_LED_GREEN+0x76>
        }
        /*.${LampSM::Lamp::SM::LED_GREEN} */
        case Q_EXIT_SIG: {
            APP_GREEN_LED_OFF();
 8002cd2:	f7fd fc37 	bl	8000544 <APP_GREEN_LED_OFF>
            /* save deep history */
            me->hist_LED_GREEN = QHsm_state(Q_HSM_UPCAST(me));
 8002cd6:	6878      	ldr	r0, [r7, #4]
 8002cd8:	f000 f852 	bl	8002d80 <QHsm_state>
 8002cdc:	4602      	mov	r2, r0
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	615a      	str	r2, [r3, #20]
            status_ = Q_HANDLED();
 8002ce2:	2303      	movs	r3, #3
 8002ce4:	73fb      	strb	r3, [r7, #15]
            break;
 8002ce6:	e012      	b.n	8002d0e <Lamp_LED_GREEN+0x76>
        }
        /*.${LampSM::Lamp::SM::LED_GREEN::SOFT_CLICK} */
        case SOFT_CLICK_SIG: {
            status_ = Q_TRAN_HIST(me->hist_LED_RED);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	691a      	ldr	r2, [r3, #16]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	609a      	str	r2, [r3, #8]
 8002cf0:	230b      	movs	r3, #11
 8002cf2:	73fb      	strb	r3, [r7, #15]
            break;
 8002cf4:	e00b      	b.n	8002d0e <Lamp_LED_GREEN+0x76>
        }
        /*.${LampSM::Lamp::SM::LED_GREEN::HARD_CLICK} */
        case HARD_CLICK_SIG: {
            status_ = Q_TRAN(&Lamp_GREEN_BLINK);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	4a07      	ldr	r2, [pc, #28]	; (8002d18 <Lamp_LED_GREEN+0x80>)
 8002cfa:	609a      	str	r2, [r3, #8]
 8002cfc:	2308      	movs	r3, #8
 8002cfe:	73fb      	strb	r3, [r7, #15]
            break;
 8002d00:	e005      	b.n	8002d0e <Lamp_LED_GREEN+0x76>
        }
        default: {
            status_ = Q_SUPER(&QHsm_top);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	4a05      	ldr	r2, [pc, #20]	; (8002d1c <Lamp_LED_GREEN+0x84>)
 8002d06:	609a      	str	r2, [r3, #8]
 8002d08:	2300      	movs	r3, #0
 8002d0a:	73fb      	strb	r3, [r7, #15]
            break;
 8002d0c:	bf00      	nop
        }
    }
    return status_;
 8002d0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	3710      	adds	r7, #16
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bd80      	pop	{r7, pc}
 8002d18:	08002d21 	.word	0x08002d21
 8002d1c:	08002dc9 	.word	0x08002dc9

08002d20 <Lamp_GREEN_BLINK>:
/*.${LampSM::Lamp::SM::LED_GREEN::GREEN_BLINK} .............................*/
QState Lamp_GREEN_BLINK(Lamp * const me, QEvt const * const e) {
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b084      	sub	sp, #16
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
 8002d28:	6039      	str	r1, [r7, #0]
    QState status_;
    switch (e->sig) {
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	881b      	ldrh	r3, [r3, #0]
 8002d2e:	2b06      	cmp	r3, #6
 8002d30:	d006      	beq.n	8002d40 <Lamp_GREEN_BLINK+0x20>
 8002d32:	2b06      	cmp	r3, #6
 8002d34:	dc16      	bgt.n	8002d64 <Lamp_GREEN_BLINK+0x44>
 8002d36:	2b04      	cmp	r3, #4
 8002d38:	d00d      	beq.n	8002d56 <Lamp_GREEN_BLINK+0x36>
 8002d3a:	2b05      	cmp	r3, #5
 8002d3c:	d005      	beq.n	8002d4a <Lamp_GREEN_BLINK+0x2a>
 8002d3e:	e011      	b.n	8002d64 <Lamp_GREEN_BLINK+0x44>
        /*.${LampSM::Lamp::SM::LED_GREEN::GREEN_BLINK::BLINK} */
        case BLINK_SIG: {
            APP_GREEN_LED_BLINK();
 8002d40:	f7fd fc1c 	bl	800057c <APP_GREEN_LED_BLINK>
            status_ = Q_HANDLED();
 8002d44:	2303      	movs	r3, #3
 8002d46:	73fb      	strb	r3, [r7, #15]
            break;
 8002d48:	e012      	b.n	8002d70 <Lamp_GREEN_BLINK+0x50>
        }
        /*.${LampSM::Lamp::SM::LED_GREEN::GREEN_BLINK::HARD_CLICK} */
        case HARD_CLICK_SIG: {
            status_ = Q_TRAN(&Lamp_LED_GREEN);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	4a0b      	ldr	r2, [pc, #44]	; (8002d7c <Lamp_GREEN_BLINK+0x5c>)
 8002d4e:	609a      	str	r2, [r3, #8]
 8002d50:	2308      	movs	r3, #8
 8002d52:	73fb      	strb	r3, [r7, #15]
            break;
 8002d54:	e00c      	b.n	8002d70 <Lamp_GREEN_BLINK+0x50>
        }
        /*.${LampSM::Lamp::SM::LED_GREEN::GREEN_BLINK::SOFT_CLICK} */
        case SOFT_CLICK_SIG: {
            status_ = Q_TRAN_HIST(me->hist_LED_RED);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	691a      	ldr	r2, [r3, #16]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	609a      	str	r2, [r3, #8]
 8002d5e:	230b      	movs	r3, #11
 8002d60:	73fb      	strb	r3, [r7, #15]
            break;
 8002d62:	e005      	b.n	8002d70 <Lamp_GREEN_BLINK+0x50>
        }
        default: {
            status_ = Q_SUPER(&Lamp_LED_GREEN);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	4a05      	ldr	r2, [pc, #20]	; (8002d7c <Lamp_GREEN_BLINK+0x5c>)
 8002d68:	609a      	str	r2, [r3, #8]
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	73fb      	strb	r3, [r7, #15]
            break;
 8002d6e:	bf00      	nop
        }
    }
    return status_;
 8002d70:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	3710      	adds	r7, #16
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}
 8002d7a:	bf00      	nop
 8002d7c:	08002c99 	.word	0x08002c99

08002d80 <QHsm_state>:

    return inState; /* return the status */
}

/*${QEP::QHsm::state} ......................................................*/
QStateHandler QHsm_state(QHsm * const me) {
 8002d80:	b480      	push	{r7}
 8002d82:	b083      	sub	sp, #12
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
    return Q_STATE_CAST(me->state.fun);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	685b      	ldr	r3, [r3, #4]
}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	370c      	adds	r7, #12
 8002d90:	46bd      	mov	sp, r7
 8002d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d96:	4770      	bx	lr

08002d98 <QHsm_ctor>:
}

/*${QEP::QHsm::ctor} .......................................................*/
void QHsm_ctor(QHsm * const me,
    QStateHandler initial)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b083      	sub	sp, #12
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
 8002da0:	6039      	str	r1, [r7, #0]
        &QHsm_dispatch_
    #ifdef Q_SPY
        ,&QHsm_getStateHandler_
    #endif
    };
    me->vptr      = &vtable;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	4a06      	ldr	r2, [pc, #24]	; (8002dc0 <QHsm_ctor+0x28>)
 8002da6:	601a      	str	r2, [r3, #0]
    me->state.fun = Q_STATE_CAST(&QHsm_top);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	4a06      	ldr	r2, [pc, #24]	; (8002dc4 <QHsm_ctor+0x2c>)
 8002dac:	605a      	str	r2, [r3, #4]
    me->temp.fun  = initial;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	683a      	ldr	r2, [r7, #0]
 8002db2:	609a      	str	r2, [r3, #8]
}
 8002db4:	bf00      	nop
 8002db6:	370c      	adds	r7, #12
 8002db8:	46bd      	mov	sp, r7
 8002dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbe:	4770      	bx	lr
 8002dc0:	08003374 	.word	0x08003374
 8002dc4:	08002dc9 	.word	0x08002dc9

08002dc8 <QHsm_top>:

/*${QEP::QHsm::top} ........................................................*/
QState QHsm_top(QHsm const * const me,
    QEvt const * const e)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b083      	sub	sp, #12
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
 8002dd0:	6039      	str	r1, [r7, #0]
    Q_UNUSED_PAR(me);
    Q_UNUSED_PAR(e);
    return Q_RET_IGNORED; /* the top state ignores all events */
 8002dd2:	2304      	movs	r3, #4
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	370c      	adds	r7, #12
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dde:	4770      	bx	lr

08002de0 <QHsm_init_>:

/*${QEP::QHsm::init_} ......................................................*/
void QHsm_init_(QHsm * const me,
    void const * const e,
    uint_fast8_t const qs_id)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b08e      	sub	sp, #56	; 0x38
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	60f8      	str	r0, [r7, #12]
 8002de8:	60b9      	str	r1, [r7, #8]
 8002dea:	607a      	str	r2, [r7, #4]
    #ifndef Q_SPY
    (void)qs_id; /* unused parameter */
    #endif

    QStateHandler t = me->state.fun;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	637b      	str	r3, [r7, #52]	; 0x34

    /*! @pre the virtual pointer must be initialized, the top-most initial
    * transition must be initialized, and the initial transition must not
    * be taken yet.
    */
    Q_REQUIRE_ID(200, (me->vptr != (struct QHsmVtable *)0)
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d007      	beq.n	8002e0a <QHsm_init_+0x2a>
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d003      	beq.n	8002e0a <QHsm_init_+0x2a>
 8002e02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e04:	4a33      	ldr	r2, [pc, #204]	; (8002ed4 <QHsm_init_+0xf4>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d003      	beq.n	8002e12 <QHsm_init_+0x32>
 8002e0a:	21c8      	movs	r1, #200	; 0xc8
 8002e0c:	4832      	ldr	r0, [pc, #200]	; (8002ed8 <QHsm_init_+0xf8>)
 8002e0e:	f7fd ff8b 	bl	8000d28 <Q_onAssert>
                      && (me->temp.fun != Q_STATE_CAST(0))
                      && (t == Q_STATE_CAST(&QHsm_top)));

    /* execute the top-most initial tran. */
    QState r = (*me->temp.fun)(me, Q_EVT_CAST(QEvt));
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	689b      	ldr	r3, [r3, #8]
 8002e16:	68b9      	ldr	r1, [r7, #8]
 8002e18:	68f8      	ldr	r0, [r7, #12]
 8002e1a:	4798      	blx	r3
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* the top-most initial transition must be taken */
    Q_ASSERT_ID(210, r == Q_RET_TRAN);
 8002e22:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002e26:	2b08      	cmp	r3, #8
 8002e28:	d003      	beq.n	8002e32 <QHsm_init_+0x52>
 8002e2a:	21d2      	movs	r1, #210	; 0xd2
 8002e2c:	482a      	ldr	r0, [pc, #168]	; (8002ed8 <QHsm_init_+0xf8>)
 8002e2e:	f7fd ff7b 	bl	8000d28 <Q_onAssert>
    QS_END_PRE_()

    /* drill down into the state hierarchy with initial transitions... */
    do {
        QStateHandler path[QHSM_MAX_NEST_DEPTH_]; /* tran entry path array */
        int_fast8_t ip = 0; /* tran entry path index */
 8002e32:	2300      	movs	r3, #0
 8002e34:	633b      	str	r3, [r7, #48]	; 0x30

        path[0] = me->temp.fun;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	689b      	ldr	r3, [r3, #8]
 8002e3a:	617b      	str	r3, [r7, #20]
        (void)QEP_TRIG_(me->temp.fun, QEP_EMPTY_SIG_);
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	4926      	ldr	r1, [pc, #152]	; (8002edc <QHsm_init_+0xfc>)
 8002e42:	68f8      	ldr	r0, [r7, #12]
 8002e44:	4798      	blx	r3
        while (me->temp.fun != t) {
 8002e46:	e016      	b.n	8002e76 <QHsm_init_+0x96>
            ++ip;
 8002e48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e4a:	3301      	adds	r3, #1
 8002e4c:	633b      	str	r3, [r7, #48]	; 0x30
            Q_ASSERT_ID(220, ip < QHSM_MAX_NEST_DEPTH_);
 8002e4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e50:	2b05      	cmp	r3, #5
 8002e52:	dd03      	ble.n	8002e5c <QHsm_init_+0x7c>
 8002e54:	21dc      	movs	r1, #220	; 0xdc
 8002e56:	4820      	ldr	r0, [pc, #128]	; (8002ed8 <QHsm_init_+0xf8>)
 8002e58:	f7fd ff66 	bl	8000d28 <Q_onAssert>
            path[ip] = me->temp.fun;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	689a      	ldr	r2, [r3, #8]
 8002e60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e62:	009b      	lsls	r3, r3, #2
 8002e64:	3338      	adds	r3, #56	; 0x38
 8002e66:	443b      	add	r3, r7
 8002e68:	f843 2c24 	str.w	r2, [r3, #-36]
            (void)QEP_TRIG_(me->temp.fun, QEP_EMPTY_SIG_);
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	689b      	ldr	r3, [r3, #8]
 8002e70:	491a      	ldr	r1, [pc, #104]	; (8002edc <QHsm_init_+0xfc>)
 8002e72:	68f8      	ldr	r0, [r7, #12]
 8002e74:	4798      	blx	r3
        while (me->temp.fun != t) {
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	689b      	ldr	r3, [r3, #8]
 8002e7a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002e7c:	429a      	cmp	r2, r3
 8002e7e:	d1e3      	bne.n	8002e48 <QHsm_init_+0x68>
        }
        me->temp.fun = path[0];
 8002e80:	697a      	ldr	r2, [r7, #20]
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	609a      	str	r2, [r3, #8]

        /* nested initial transition, drill into the target hierarchy... */
        do {
            QEP_ENTER_(path[ip], qs_id); /* enter path[ip] */
 8002e86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e88:	009b      	lsls	r3, r3, #2
 8002e8a:	3338      	adds	r3, #56	; 0x38
 8002e8c:	443b      	add	r3, r7
 8002e8e:	f853 3c24 	ldr.w	r3, [r3, #-36]
 8002e92:	4913      	ldr	r1, [pc, #76]	; (8002ee0 <QHsm_init_+0x100>)
 8002e94:	68f8      	ldr	r0, [r7, #12]
 8002e96:	4798      	blx	r3
            --ip;
 8002e98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e9a:	3b01      	subs	r3, #1
 8002e9c:	633b      	str	r3, [r7, #48]	; 0x30
        } while (ip >= 0);
 8002e9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	daf0      	bge.n	8002e86 <QHsm_init_+0xa6>

        t = path[0]; /* current state becomes the new source */
 8002ea4:	697b      	ldr	r3, [r7, #20]
 8002ea6:	637b      	str	r3, [r7, #52]	; 0x34

        r = QEP_TRIG_(t, Q_INIT_SIG); /* execute initial transition */
 8002ea8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002eaa:	490e      	ldr	r1, [pc, #56]	; (8002ee4 <QHsm_init_+0x104>)
 8002eac:	68f8      	ldr	r0, [r7, #12]
 8002eae:	4798      	blx	r3
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                QS_FUN_PRE_(me->temp.fun); /* target of the initial tran. */
            QS_END_PRE_()
        }
    #endif /* Q_SPY */

    } while (r == Q_RET_TRAN);
 8002eb6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002eba:	2b08      	cmp	r3, #8
 8002ebc:	d0b9      	beq.n	8002e32 <QHsm_init_+0x52>
        QS_TIME_PRE_();    /* time stamp */
        QS_OBJ_PRE_(me);   /* this state machine object */
        QS_FUN_PRE_(t);    /* the new active state */
    QS_END_PRE_()

    me->state.fun = t; /* change the current active state */
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002ec2:	605a      	str	r2, [r3, #4]
    me->temp.fun  = t; /* mark the configuration as stable */
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002ec8:	609a      	str	r2, [r3, #8]
}
 8002eca:	bf00      	nop
 8002ecc:	3738      	adds	r7, #56	; 0x38
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}
 8002ed2:	bf00      	nop
 8002ed4:	08002dc9 	.word	0x08002dc9
 8002ed8:	0800335c 	.word	0x0800335c
 8002edc:	08003364 	.word	0x08003364
 8002ee0:	08003368 	.word	0x08003368
 8002ee4:	08003370 	.word	0x08003370

08002ee8 <QHsm_dispatch_>:

/*${QEP::QHsm::dispatch_} ..................................................*/
void QHsm_dispatch_(QHsm * const me,
    QEvt const * const e,
    uint_fast8_t const qs_id)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b08e      	sub	sp, #56	; 0x38
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	60f8      	str	r0, [r7, #12]
 8002ef0:	60b9      	str	r1, [r7, #8]
 8002ef2:	607a      	str	r2, [r7, #4]
    Q_UNUSED_PAR(qs_id); /* unused when Q_SPY undefined */

    QStateHandler t = me->state.fun;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	637b      	str	r3, [r7, #52]	; 0x34
    QS_CRIT_STAT_

    /*! @pre the current state must be initialized and
    * the state configuration must be stable
    */
    Q_REQUIRE_ID(400, (t != Q_STATE_CAST(0))
 8002efa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d004      	beq.n	8002f0a <QHsm_dispatch_+0x22>
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	689b      	ldr	r3, [r3, #8]
 8002f04:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002f06:	429a      	cmp	r2, r3
 8002f08:	d004      	beq.n	8002f14 <QHsm_dispatch_+0x2c>
 8002f0a:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8002f0e:	4852      	ldr	r0, [pc, #328]	; (8003058 <QHsm_dispatch_+0x170>)
 8002f10:	f7fd ff0a 	bl	8000d28 <Q_onAssert>

    QStateHandler s;
    QState r;
    /* process the event hierarchically... */
    do {
        s = me->temp.fun;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	689b      	ldr	r3, [r3, #8]
 8002f18:	62bb      	str	r3, [r7, #40]	; 0x28
        r = (*s)(me, e); /* invoke state handler s */
 8002f1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f1c:	68b9      	ldr	r1, [r7, #8]
 8002f1e:	68f8      	ldr	r0, [r7, #12]
 8002f20:	4798      	blx	r3
 8002f22:	4603      	mov	r3, r0
 8002f24:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

        if (r == Q_RET_UNHANDLED) { /* unhandled due to a guard? */
 8002f28:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002f2c:	2b02      	cmp	r3, #2
 8002f2e:	d106      	bne.n	8002f3e <QHsm_dispatch_+0x56>
                QS_SIG_PRE_(e->sig); /* the signal of the event */
                QS_OBJ_PRE_(me);     /* this state machine object */
                QS_FUN_PRE_(s);      /* the current state */
            QS_END_PRE_()

            r = QEP_TRIG_(s, QEP_EMPTY_SIG_); /* find superstate of s */
 8002f30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f32:	494a      	ldr	r1, [pc, #296]	; (800305c <QHsm_dispatch_+0x174>)
 8002f34:	68f8      	ldr	r0, [r7, #12]
 8002f36:	4798      	blx	r3
 8002f38:	4603      	mov	r3, r0
 8002f3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        }
    } while (r == Q_RET_SUPER);
 8002f3e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d0e6      	beq.n	8002f14 <QHsm_dispatch_+0x2c>

    /* regular transition taken? */
    /*! @tr{RQP120E} */
    if (r >= Q_RET_TRAN) {
 8002f46:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002f4a:	2b07      	cmp	r3, #7
 8002f4c:	d97a      	bls.n	8003044 <QHsm_dispatch_+0x15c>
        QStateHandler path[QHSM_MAX_NEST_DEPTH_];

        path[0] = me->temp.fun; /* save the target of the transition */
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	689b      	ldr	r3, [r3, #8]
 8002f52:	613b      	str	r3, [r7, #16]
        path[1] = t;
 8002f54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f56:	617b      	str	r3, [r7, #20]
        path[2] = s;
 8002f58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f5a:	61bb      	str	r3, [r7, #24]

        /* exit current state to transition source s... */
        /*! @tr{RQP120C} */
        for (; t != s; t = me->temp.fun) {
 8002f5c:	e00d      	b.n	8002f7a <QHsm_dispatch_+0x92>
            if (QEP_TRIG_(t, Q_EXIT_SIG) == Q_RET_HANDLED) {
 8002f5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f60:	493f      	ldr	r1, [pc, #252]	; (8003060 <QHsm_dispatch_+0x178>)
 8002f62:	68f8      	ldr	r0, [r7, #12]
 8002f64:	4798      	blx	r3
 8002f66:	4603      	mov	r3, r0
 8002f68:	2b03      	cmp	r3, #3
 8002f6a:	d103      	bne.n	8002f74 <QHsm_dispatch_+0x8c>
                    QS_OBJ_PRE_(me);  /* this state machine object */
                    QS_FUN_PRE_(t);   /* the exited state */
                QS_END_PRE_()

                /* find superstate of t */
                (void)QEP_TRIG_(t, QEP_EMPTY_SIG_);
 8002f6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f6e:	493b      	ldr	r1, [pc, #236]	; (800305c <QHsm_dispatch_+0x174>)
 8002f70:	68f8      	ldr	r0, [r7, #12]
 8002f72:	4798      	blx	r3
        for (; t != s; t = me->temp.fun) {
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	689b      	ldr	r3, [r3, #8]
 8002f78:	637b      	str	r3, [r7, #52]	; 0x34
 8002f7a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002f7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f7e:	429a      	cmp	r2, r3
 8002f80:	d1ed      	bne.n	8002f5e <QHsm_dispatch_+0x76>
            }
        }

        int_fast8_t ip = QHsm_tran_(me, path, qs_id); /* the HSM transition */
 8002f82:	f107 0310 	add.w	r3, r7, #16
 8002f86:	687a      	ldr	r2, [r7, #4]
 8002f88:	4619      	mov	r1, r3
 8002f8a:	68f8      	ldr	r0, [r7, #12]
 8002f8c:	f000 f86e 	bl	800306c <QHsm_tran_>
 8002f90:	62f8      	str	r0, [r7, #44]	; 0x2c
        }
    #endif /* Q_SPY */

        /* execute state entry actions in the desired order... */
        /*! @tr{RQP120B} */
        for (; ip >= 0; --ip) {
 8002f92:	e00b      	b.n	8002fac <QHsm_dispatch_+0xc4>
            QEP_ENTER_(path[ip], qs_id);  /* enter path[ip] */
 8002f94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f96:	009b      	lsls	r3, r3, #2
 8002f98:	3338      	adds	r3, #56	; 0x38
 8002f9a:	443b      	add	r3, r7
 8002f9c:	f853 3c28 	ldr.w	r3, [r3, #-40]
 8002fa0:	4930      	ldr	r1, [pc, #192]	; (8003064 <QHsm_dispatch_+0x17c>)
 8002fa2:	68f8      	ldr	r0, [r7, #12]
 8002fa4:	4798      	blx	r3
        for (; ip >= 0; --ip) {
 8002fa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fa8:	3b01      	subs	r3, #1
 8002faa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002fac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	daf0      	bge.n	8002f94 <QHsm_dispatch_+0xac>
        }

        t = path[0];      /* stick the target into register */
 8002fb2:	693b      	ldr	r3, [r7, #16]
 8002fb4:	637b      	str	r3, [r7, #52]	; 0x34
        me->temp.fun = t; /* update the next state */
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002fba:	609a      	str	r2, [r3, #8]

        /* while nested initial transition... */
        /*! @tr{RQP120I} */
        while (QEP_TRIG_(t, Q_INIT_SIG) == Q_RET_TRAN) {
 8002fbc:	e03b      	b.n	8003036 <QHsm_dispatch_+0x14e>
                QS_OBJ_PRE_(me);           /* this state machine object */
                QS_FUN_PRE_(t);            /* the source (pseudo)state */
                QS_FUN_PRE_(me->temp.fun); /* the target of the transition */
            QS_END_PRE_()

            ip = 0;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	62fb      	str	r3, [r7, #44]	; 0x2c
            path[0] = me->temp.fun;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	689b      	ldr	r3, [r3, #8]
 8002fc6:	613b      	str	r3, [r7, #16]

            /* find superstate */
            (void)QEP_TRIG_(me->temp.fun, QEP_EMPTY_SIG_);
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	689b      	ldr	r3, [r3, #8]
 8002fcc:	4923      	ldr	r1, [pc, #140]	; (800305c <QHsm_dispatch_+0x174>)
 8002fce:	68f8      	ldr	r0, [r7, #12]
 8002fd0:	4798      	blx	r3

            while (me->temp.fun != t) {
 8002fd2:	e00f      	b.n	8002ff4 <QHsm_dispatch_+0x10c>
                ++ip;
 8002fd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fd6:	3301      	adds	r3, #1
 8002fd8:	62fb      	str	r3, [r7, #44]	; 0x2c
                path[ip] = me->temp.fun;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	689a      	ldr	r2, [r3, #8]
 8002fde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fe0:	009b      	lsls	r3, r3, #2
 8002fe2:	3338      	adds	r3, #56	; 0x38
 8002fe4:	443b      	add	r3, r7
 8002fe6:	f843 2c28 	str.w	r2, [r3, #-40]
                /* find superstate */
                (void)QEP_TRIG_(me->temp.fun, QEP_EMPTY_SIG_);
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	689b      	ldr	r3, [r3, #8]
 8002fee:	491b      	ldr	r1, [pc, #108]	; (800305c <QHsm_dispatch_+0x174>)
 8002ff0:	68f8      	ldr	r0, [r7, #12]
 8002ff2:	4798      	blx	r3
            while (me->temp.fun != t) {
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002ffa:	429a      	cmp	r2, r3
 8002ffc:	d1ea      	bne.n	8002fd4 <QHsm_dispatch_+0xec>
            }
            me->temp.fun = path[0];
 8002ffe:	693a      	ldr	r2, [r7, #16]
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	609a      	str	r2, [r3, #8]

            /* entry path must not overflow */
            Q_ASSERT_ID(410, ip < QHSM_MAX_NEST_DEPTH_);
 8003004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003006:	2b05      	cmp	r3, #5
 8003008:	dd04      	ble.n	8003014 <QHsm_dispatch_+0x12c>
 800300a:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 800300e:	4812      	ldr	r0, [pc, #72]	; (8003058 <QHsm_dispatch_+0x170>)
 8003010:	f7fd fe8a 	bl	8000d28 <Q_onAssert>

            /* retrace the entry path in reverse (correct) order... */
            do {
                QEP_ENTER_(path[ip], qs_id); /* enter path[ip] */
 8003014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003016:	009b      	lsls	r3, r3, #2
 8003018:	3338      	adds	r3, #56	; 0x38
 800301a:	443b      	add	r3, r7
 800301c:	f853 3c28 	ldr.w	r3, [r3, #-40]
 8003020:	4910      	ldr	r1, [pc, #64]	; (8003064 <QHsm_dispatch_+0x17c>)
 8003022:	68f8      	ldr	r0, [r7, #12]
 8003024:	4798      	blx	r3
                --ip;
 8003026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003028:	3b01      	subs	r3, #1
 800302a:	62fb      	str	r3, [r7, #44]	; 0x2c
            } while (ip >= 0);
 800302c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800302e:	2b00      	cmp	r3, #0
 8003030:	daf0      	bge.n	8003014 <QHsm_dispatch_+0x12c>

            t = path[0]; /* current state becomes the new source */
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	637b      	str	r3, [r7, #52]	; 0x34
        while (QEP_TRIG_(t, Q_INIT_SIG) == Q_RET_TRAN) {
 8003036:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003038:	490b      	ldr	r1, [pc, #44]	; (8003068 <QHsm_dispatch_+0x180>)
 800303a:	68f8      	ldr	r0, [r7, #12]
 800303c:	4798      	blx	r3
 800303e:	4603      	mov	r3, r0
 8003040:	2b08      	cmp	r3, #8
 8003042:	d0bc      	beq.n	8002fbe <QHsm_dispatch_+0xd6>
        QS_END_PRE_()

    }
    #endif /* Q_SPY */

    me->state.fun = t; /* change the current active state */
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003048:	605a      	str	r2, [r3, #4]
    me->temp.fun  = t; /* mark the configuration as stable */
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800304e:	609a      	str	r2, [r3, #8]
}
 8003050:	bf00      	nop
 8003052:	3738      	adds	r7, #56	; 0x38
 8003054:	46bd      	mov	sp, r7
 8003056:	bd80      	pop	{r7, pc}
 8003058:	0800335c 	.word	0x0800335c
 800305c:	08003364 	.word	0x08003364
 8003060:	0800336c 	.word	0x0800336c
 8003064:	08003368 	.word	0x08003368
 8003068:	08003370 	.word	0x08003370

0800306c <QHsm_tran_>:

/*${QEP::QHsm::tran_} ......................................................*/
int_fast8_t QHsm_tran_(QHsm * const me,
    QStateHandler path[QHSM_MAX_NEST_DEPTH_],
    uint_fast8_t const qs_id)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b08a      	sub	sp, #40	; 0x28
 8003070:	af00      	add	r7, sp, #0
 8003072:	60f8      	str	r0, [r7, #12]
 8003074:	60b9      	str	r1, [r7, #8]
 8003076:	607a      	str	r2, [r7, #4]
    Q_UNUSED_PAR(qs_id); // unused when Q_SPY undefined

    int_fast8_t ip = -1; /* transition entry path index */
 8003078:	f04f 33ff 	mov.w	r3, #4294967295
 800307c:	627b      	str	r3, [r7, #36]	; 0x24
    QStateHandler t = path[0];
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	623b      	str	r3, [r7, #32]
    QStateHandler const s = path[2];
 8003084:	68bb      	ldr	r3, [r7, #8]
 8003086:	689b      	ldr	r3, [r3, #8]
 8003088:	617b      	str	r3, [r7, #20]
    QS_CRIT_STAT_

    /* (a) check source==target (transition to self)... */
    if (s == t) {
 800308a:	697a      	ldr	r2, [r7, #20]
 800308c:	6a3b      	ldr	r3, [r7, #32]
 800308e:	429a      	cmp	r2, r3
 8003090:	d106      	bne.n	80030a0 <QHsm_tran_+0x34>
        QEP_EXIT_(s, qs_id); /* exit the source */
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	4964      	ldr	r1, [pc, #400]	; (8003228 <QHsm_tran_+0x1bc>)
 8003096:	68f8      	ldr	r0, [r7, #12]
 8003098:	4798      	blx	r3
        ip = 0; /* enter the target */
 800309a:	2300      	movs	r3, #0
 800309c:	627b      	str	r3, [r7, #36]	; 0x24
 800309e:	e0be      	b.n	800321e <QHsm_tran_+0x1b2>
    }
    else {
        /* find superstate of target */
        (void)QEP_TRIG_(t, QEP_EMPTY_SIG_);
 80030a0:	6a3b      	ldr	r3, [r7, #32]
 80030a2:	4962      	ldr	r1, [pc, #392]	; (800322c <QHsm_tran_+0x1c0>)
 80030a4:	68f8      	ldr	r0, [r7, #12]
 80030a6:	4798      	blx	r3

        t = me->temp.fun;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	689b      	ldr	r3, [r3, #8]
 80030ac:	623b      	str	r3, [r7, #32]

        /* (b) check source==target->super... */
        if (s == t) {
 80030ae:	697a      	ldr	r2, [r7, #20]
 80030b0:	6a3b      	ldr	r3, [r7, #32]
 80030b2:	429a      	cmp	r2, r3
 80030b4:	d102      	bne.n	80030bc <QHsm_tran_+0x50>
            ip = 0; /* enter the target */
 80030b6:	2300      	movs	r3, #0
 80030b8:	627b      	str	r3, [r7, #36]	; 0x24
 80030ba:	e0b0      	b.n	800321e <QHsm_tran_+0x1b2>
        }
        else {
            /* find superstate of src */
            (void)QEP_TRIG_(s, QEP_EMPTY_SIG_);
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	495b      	ldr	r1, [pc, #364]	; (800322c <QHsm_tran_+0x1c0>)
 80030c0:	68f8      	ldr	r0, [r7, #12]
 80030c2:	4798      	blx	r3

            /* (c) check source->super==target->super... */
            if (me->temp.fun == t) {
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	689b      	ldr	r3, [r3, #8]
 80030c8:	6a3a      	ldr	r2, [r7, #32]
 80030ca:	429a      	cmp	r2, r3
 80030cc:	d106      	bne.n	80030dc <QHsm_tran_+0x70>
                QEP_EXIT_(s, qs_id); /* exit the source */
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	4955      	ldr	r1, [pc, #340]	; (8003228 <QHsm_tran_+0x1bc>)
 80030d2:	68f8      	ldr	r0, [r7, #12]
 80030d4:	4798      	blx	r3
                ip = 0; /* enter the target */
 80030d6:	2300      	movs	r3, #0
 80030d8:	627b      	str	r3, [r7, #36]	; 0x24
 80030da:	e0a0      	b.n	800321e <QHsm_tran_+0x1b2>
            }
            else {
                /* (d) check source->super==target... */
                if (me->temp.fun == path[0]) {
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	689a      	ldr	r2, [r3, #8]
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	429a      	cmp	r2, r3
 80030e6:	d104      	bne.n	80030f2 <QHsm_tran_+0x86>
                    QEP_EXIT_(s, qs_id); /* exit the source */
 80030e8:	697b      	ldr	r3, [r7, #20]
 80030ea:	494f      	ldr	r1, [pc, #316]	; (8003228 <QHsm_tran_+0x1bc>)
 80030ec:	68f8      	ldr	r0, [r7, #12]
 80030ee:	4798      	blx	r3
 80030f0:	e095      	b.n	800321e <QHsm_tran_+0x1b2>
                }
                else {
                    /* (e) check rest of source==target->super->super..
                    * and store the entry path along the way
                    */
                    int_fast8_t iq = 0; /* indicate that LCA not found */
 80030f2:	2300      	movs	r3, #0
 80030f4:	61fb      	str	r3, [r7, #28]
                    ip = 1; /* enter target and its superstate */
 80030f6:	2301      	movs	r3, #1
 80030f8:	627b      	str	r3, [r7, #36]	; 0x24
                    path[1] = t;      /* save the superstate of target */
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	3304      	adds	r3, #4
 80030fe:	6a3a      	ldr	r2, [r7, #32]
 8003100:	601a      	str	r2, [r3, #0]
                    t = me->temp.fun; /* save source->super */
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	689b      	ldr	r3, [r3, #8]
 8003106:	623b      	str	r3, [r7, #32]

                    /* find target->super->super... */
                    QState r = QEP_TRIG_(path[1], QEP_EMPTY_SIG_);
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	3304      	adds	r3, #4
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4947      	ldr	r1, [pc, #284]	; (800322c <QHsm_tran_+0x1c0>)
 8003110:	68f8      	ldr	r0, [r7, #12]
 8003112:	4798      	blx	r3
 8003114:	4603      	mov	r3, r0
 8003116:	76fb      	strb	r3, [r7, #27]
                    while (r == Q_RET_SUPER) {
 8003118:	e025      	b.n	8003166 <QHsm_tran_+0xfa>
                        ++ip;
 800311a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800311c:	3301      	adds	r3, #1
 800311e:	627b      	str	r3, [r7, #36]	; 0x24
                        path[ip] = me->temp.fun; /* store the entry path */
 8003120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003122:	009b      	lsls	r3, r3, #2
 8003124:	68ba      	ldr	r2, [r7, #8]
 8003126:	4413      	add	r3, r2
 8003128:	68fa      	ldr	r2, [r7, #12]
 800312a:	6892      	ldr	r2, [r2, #8]
 800312c:	601a      	str	r2, [r3, #0]
                        if (me->temp.fun == s) { /* is it the source? */
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	689b      	ldr	r3, [r3, #8]
 8003132:	697a      	ldr	r2, [r7, #20]
 8003134:	429a      	cmp	r2, r3
 8003136:	d10f      	bne.n	8003158 <QHsm_tran_+0xec>
                            iq = 1; /* indicate that LCA found */
 8003138:	2301      	movs	r3, #1
 800313a:	61fb      	str	r3, [r7, #28]

                            /* entry path must not overflow */
                            Q_ASSERT_ID(510,
 800313c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800313e:	2b05      	cmp	r3, #5
 8003140:	dd04      	ble.n	800314c <QHsm_tran_+0xe0>
 8003142:	f44f 71ff 	mov.w	r1, #510	; 0x1fe
 8003146:	483a      	ldr	r0, [pc, #232]	; (8003230 <QHsm_tran_+0x1c4>)
 8003148:	f7fd fdee 	bl	8000d28 <Q_onAssert>
                                ip < QHSM_MAX_NEST_DEPTH_);
                            --ip; /* do not enter the source */
 800314c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800314e:	3b01      	subs	r3, #1
 8003150:	627b      	str	r3, [r7, #36]	; 0x24
                            r = Q_RET_HANDLED; /* terminate loop */
 8003152:	2303      	movs	r3, #3
 8003154:	76fb      	strb	r3, [r7, #27]
 8003156:	e006      	b.n	8003166 <QHsm_tran_+0xfa>
                        }
                         /* it is not the source, keep going up */
                        else {
                            r = QEP_TRIG_(me->temp.fun, QEP_EMPTY_SIG_);
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	689b      	ldr	r3, [r3, #8]
 800315c:	4933      	ldr	r1, [pc, #204]	; (800322c <QHsm_tran_+0x1c0>)
 800315e:	68f8      	ldr	r0, [r7, #12]
 8003160:	4798      	blx	r3
 8003162:	4603      	mov	r3, r0
 8003164:	76fb      	strb	r3, [r7, #27]
                    while (r == Q_RET_SUPER) {
 8003166:	7efb      	ldrb	r3, [r7, #27]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d0d6      	beq.n	800311a <QHsm_tran_+0xae>
                        }
                    }

                    /* the LCA not found yet? */
                    if (iq == 0) {
 800316c:	69fb      	ldr	r3, [r7, #28]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d155      	bne.n	800321e <QHsm_tran_+0x1b2>

                        /* entry path must not overflow */
                        Q_ASSERT_ID(520, ip < QHSM_MAX_NEST_DEPTH_);
 8003172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003174:	2b05      	cmp	r3, #5
 8003176:	dd04      	ble.n	8003182 <QHsm_tran_+0x116>
 8003178:	f44f 7102 	mov.w	r1, #520	; 0x208
 800317c:	482c      	ldr	r0, [pc, #176]	; (8003230 <QHsm_tran_+0x1c4>)
 800317e:	f7fd fdd3 	bl	8000d28 <Q_onAssert>

                        QEP_EXIT_(s, qs_id); /* exit the source */
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	4928      	ldr	r1, [pc, #160]	; (8003228 <QHsm_tran_+0x1bc>)
 8003186:	68f8      	ldr	r0, [r7, #12]
 8003188:	4798      	blx	r3

                        /* (f) check the rest of source->super
                        *                  == target->super->super...
                        */
                        iq = ip;
 800318a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800318c:	61fb      	str	r3, [r7, #28]
                        r = Q_RET_IGNORED; /* LCA NOT found */
 800318e:	2304      	movs	r3, #4
 8003190:	76fb      	strb	r3, [r7, #27]
                        do {
                            if (t == path[iq]) { /* is this the LCA? */
 8003192:	69fb      	ldr	r3, [r7, #28]
 8003194:	009b      	lsls	r3, r3, #2
 8003196:	68ba      	ldr	r2, [r7, #8]
 8003198:	4413      	add	r3, r2
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	6a3a      	ldr	r2, [r7, #32]
 800319e:	429a      	cmp	r2, r3
 80031a0:	d108      	bne.n	80031b4 <QHsm_tran_+0x148>
                                r = Q_RET_HANDLED; /* LCA found */
 80031a2:	2303      	movs	r3, #3
 80031a4:	76fb      	strb	r3, [r7, #27]
                                ip = iq - 1; /* do not enter LCA */
 80031a6:	69fb      	ldr	r3, [r7, #28]
 80031a8:	3b01      	subs	r3, #1
 80031aa:	627b      	str	r3, [r7, #36]	; 0x24
                                iq = -1; /* cause termintion of the loop */
 80031ac:	f04f 33ff 	mov.w	r3, #4294967295
 80031b0:	61fb      	str	r3, [r7, #28]
 80031b2:	e002      	b.n	80031ba <QHsm_tran_+0x14e>
                            }
                            else {
                                --iq; /* try lower superstate of target */
 80031b4:	69fb      	ldr	r3, [r7, #28]
 80031b6:	3b01      	subs	r3, #1
 80031b8:	61fb      	str	r3, [r7, #28]
                            }
                        } while (iq >= 0);
 80031ba:	69fb      	ldr	r3, [r7, #28]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	dae8      	bge.n	8003192 <QHsm_tran_+0x126>

                        /* LCA not found? */
                        if (r != Q_RET_HANDLED) {
 80031c0:	7efb      	ldrb	r3, [r7, #27]
 80031c2:	2b03      	cmp	r3, #3
 80031c4:	d02b      	beq.n	800321e <QHsm_tran_+0x1b2>
                            /* (g) check each source->super->...
                            * for each target->super...
                            */
                            r = Q_RET_IGNORED; /* keep looping */
 80031c6:	2304      	movs	r3, #4
 80031c8:	76fb      	strb	r3, [r7, #27]
                            do {
                                /* exit t unhandled? */
                                if (QEP_TRIG_(t, Q_EXIT_SIG)
 80031ca:	6a3b      	ldr	r3, [r7, #32]
 80031cc:	4916      	ldr	r1, [pc, #88]	; (8003228 <QHsm_tran_+0x1bc>)
 80031ce:	68f8      	ldr	r0, [r7, #12]
 80031d0:	4798      	blx	r3
 80031d2:	4603      	mov	r3, r0
 80031d4:	2b03      	cmp	r3, #3
 80031d6:	d103      	bne.n	80031e0 <QHsm_tran_+0x174>
                                    QS_BEGIN_PRE_(QS_QEP_STATE_EXIT, qs_id)
                                        QS_OBJ_PRE_(me);
                                        QS_FUN_PRE_(t);
                                    QS_END_PRE_()

                                    (void)QEP_TRIG_(t, QEP_EMPTY_SIG_);
 80031d8:	6a3b      	ldr	r3, [r7, #32]
 80031da:	4914      	ldr	r1, [pc, #80]	; (800322c <QHsm_tran_+0x1c0>)
 80031dc:	68f8      	ldr	r0, [r7, #12]
 80031de:	4798      	blx	r3
                                }
                                t = me->temp.fun; /* set to super of t */
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	689b      	ldr	r3, [r3, #8]
 80031e4:	623b      	str	r3, [r7, #32]
                                iq = ip;
 80031e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e8:	61fb      	str	r3, [r7, #28]
                                do {
                                    /* is this LCA? */
                                    if (t == path[iq]) {
 80031ea:	69fb      	ldr	r3, [r7, #28]
 80031ec:	009b      	lsls	r3, r3, #2
 80031ee:	68ba      	ldr	r2, [r7, #8]
 80031f0:	4413      	add	r3, r2
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	6a3a      	ldr	r2, [r7, #32]
 80031f6:	429a      	cmp	r2, r3
 80031f8:	d108      	bne.n	800320c <QHsm_tran_+0x1a0>
                                        /* do not enter LCA */
                                        ip = (int_fast8_t)(iq - 1);
 80031fa:	69fb      	ldr	r3, [r7, #28]
 80031fc:	3b01      	subs	r3, #1
 80031fe:	627b      	str	r3, [r7, #36]	; 0x24
                                        iq = -1; /* break out of inner loop */
 8003200:	f04f 33ff 	mov.w	r3, #4294967295
 8003204:	61fb      	str	r3, [r7, #28]
                                        /* break out of outer loop */
                                        r = Q_RET_HANDLED;
 8003206:	2303      	movs	r3, #3
 8003208:	76fb      	strb	r3, [r7, #27]
 800320a:	e002      	b.n	8003212 <QHsm_tran_+0x1a6>
                                    }
                                    else {
                                        --iq;
 800320c:	69fb      	ldr	r3, [r7, #28]
 800320e:	3b01      	subs	r3, #1
 8003210:	61fb      	str	r3, [r7, #28]
                                    }
                                } while (iq >= 0);
 8003212:	69fb      	ldr	r3, [r7, #28]
 8003214:	2b00      	cmp	r3, #0
 8003216:	dae8      	bge.n	80031ea <QHsm_tran_+0x17e>
                            } while (r != Q_RET_HANDLED);
 8003218:	7efb      	ldrb	r3, [r7, #27]
 800321a:	2b03      	cmp	r3, #3
 800321c:	d1d5      	bne.n	80031ca <QHsm_tran_+0x15e>
                    }
                }
            }
        }
    }
    return ip;
 800321e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003220:	4618      	mov	r0, r3
 8003222:	3728      	adds	r7, #40	; 0x28
 8003224:	46bd      	mov	sp, r7
 8003226:	bd80      	pop	{r7, pc}
 8003228:	0800336c 	.word	0x0800336c
 800322c:	08003364 	.word	0x08003364
 8003230:	0800335c 	.word	0x0800335c

08003234 <__libc_init_array>:
 8003234:	b570      	push	{r4, r5, r6, lr}
 8003236:	4d0d      	ldr	r5, [pc, #52]	; (800326c <__libc_init_array+0x38>)
 8003238:	4c0d      	ldr	r4, [pc, #52]	; (8003270 <__libc_init_array+0x3c>)
 800323a:	1b64      	subs	r4, r4, r5
 800323c:	10a4      	asrs	r4, r4, #2
 800323e:	2600      	movs	r6, #0
 8003240:	42a6      	cmp	r6, r4
 8003242:	d109      	bne.n	8003258 <__libc_init_array+0x24>
 8003244:	4d0b      	ldr	r5, [pc, #44]	; (8003274 <__libc_init_array+0x40>)
 8003246:	4c0c      	ldr	r4, [pc, #48]	; (8003278 <__libc_init_array+0x44>)
 8003248:	f000 f820 	bl	800328c <_init>
 800324c:	1b64      	subs	r4, r4, r5
 800324e:	10a4      	asrs	r4, r4, #2
 8003250:	2600      	movs	r6, #0
 8003252:	42a6      	cmp	r6, r4
 8003254:	d105      	bne.n	8003262 <__libc_init_array+0x2e>
 8003256:	bd70      	pop	{r4, r5, r6, pc}
 8003258:	f855 3b04 	ldr.w	r3, [r5], #4
 800325c:	4798      	blx	r3
 800325e:	3601      	adds	r6, #1
 8003260:	e7ee      	b.n	8003240 <__libc_init_array+0xc>
 8003262:	f855 3b04 	ldr.w	r3, [r5], #4
 8003266:	4798      	blx	r3
 8003268:	3601      	adds	r6, #1
 800326a:	e7f2      	b.n	8003252 <__libc_init_array+0x1e>
 800326c:	08003384 	.word	0x08003384
 8003270:	08003384 	.word	0x08003384
 8003274:	08003384 	.word	0x08003384
 8003278:	08003388 	.word	0x08003388

0800327c <memset>:
 800327c:	4402      	add	r2, r0
 800327e:	4603      	mov	r3, r0
 8003280:	4293      	cmp	r3, r2
 8003282:	d100      	bne.n	8003286 <memset+0xa>
 8003284:	4770      	bx	lr
 8003286:	f803 1b01 	strb.w	r1, [r3], #1
 800328a:	e7f9      	b.n	8003280 <memset+0x4>

0800328c <_init>:
 800328c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800328e:	bf00      	nop
 8003290:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003292:	bc08      	pop	{r3}
 8003294:	469e      	mov	lr, r3
 8003296:	4770      	bx	lr

08003298 <_fini>:
 8003298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800329a:	bf00      	nop
 800329c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800329e:	bc08      	pop	{r3}
 80032a0:	469e      	mov	lr, r3
 80032a2:	4770      	bx	lr
